//  ____                _
// |  _ \ ___  ___  ___(_) __ _  ___ _ ___
// | |_) / _ \/ __|/ _ \ |/ _` |/ _ \ '_  \
// |  _ |  __/ (__|  __/ | (_| |  __/ | | |
// |_| \_\___|\___|\___|_|\__, |\___|_| |_|
//                        |___/ 3.3.5.0
//
// This code was generated by Receigen and will use:
//
// Platform                   : OSX
// CFBundleIdentifier         : it.iltofa.Turms
// CFBundleShortVersionString : 2.0.2
// Prefix                     : RV
// Success Behavior           : RunApplication
// Failure Behavior           : ExitWith173
//
// This generated code has to be linked to OpenSSL (either statically or dynamically)
// Refer to the website for more details and specific cases.
//

// C++ prologue
#ifdef __cplusplus
extern "C" {
#endif
    
    // Headers for general purpose functions
#import <AvailabilityMacros.h>
#import <objc/objc.h>
#import <CoreFoundation/CoreFoundation.h>
    // Headers for system calls
#import <dlfcn.h>
#import <setjmp.h>
#import <glob.h>
    
    // Headers for bundle security checks
#import <Security/Security.h>
#import <CommonCrypto/CommonDigest.h>
    
    // Headers from OpenSSL
#import <openssl/bio.h>
#import <openssl/err.h>
#import <openssl/objects.h>
#import <openssl/pkcs7.h>
#import <openssl/sha.h>
#import <openssl/x509.h>
    
    // Set DEBUG to 0 if not defined to avoid semantic warnings
#ifndef DEBUG
#define DEBUG 0
#endif
    
    // Define this if you are linking a pre-1.0.0 OpenSSL (like the one found on OS X)
#ifdef RECEIGEN_USE_PRE_1_0_0_OPENSSL
#ifndef _STACK
#define _STACK STACK
#endif
#endif
    
    // Headers for network checks
#import <IOKit/IOKitLib.h>
#import <arpa/inet.h>
#import <ifaddrs.h>
#import <net/if.h>
#import <net/if_dl.h>
    
    // Some compilers provide the capability to test if certain attributes are available.
    // This macro provides a compatibility path for other compilers.
#ifndef __has_feature
#define __has_feature(X)    0
#endif
    
    // Define macros that deal with ARC if enable.
#ifndef __SAFE_CAST
#if __has_feature(objc_arc)
#define __SAFE_CAST(T,X)    (__bridge T) X
#define __RETURN_RETAINED   __attribute__((ns_returns_retained))
#else
#define __SAFE_CAST(T,X)    (T) X
#define __RETURN_RETAINED
#endif
#endif
    
    // Define to turn-off debug logs
#ifndef RECEIGEN_QUIET_DEBUG
#define RECEIGEN_QUIET_DEBUG 0
#endif
    
    // Log statement for debugging purpose
#if DEBUG && !RECEIGEN_QUIET_DEBUG
#if __OBJC__
#define __RV_RECEIPT_LOG(args...)    NSLog(@args)
#else
#define __RV_RECEIPT_LOG(args...)    fprintf(stderr, args); fprintf(stderr, "\n")
#endif
#else
#define __RV_RECEIPT_LOG(args...)
#endif
    
    // Function pointer for string decryption
    typedef void (*RV_decrypt)(const char *, char *, int, int);
    
    // Keys for each receipt attribute
    typedef enum _RV_ReceiptAttributeType {
        
        // Bundle identifier
        RV_ReceiptAttributeTypeBundleId = 2,
        // Application version
        RV_ReceiptAttributeTypeBundleVersion = 3,
        // Opaque value
        RV_ReceiptAttributeTypeOpaqueValue = 4,
        // Hash value
        RV_ReceiptAttributeTypeHash = 5,
        // In-app purchase receipt
        RV_ReceiptAttributeTypeInAppPurchase = 17,
        // Original Application Version
        RV_ReceiptAttributeTypeOriginalApplicationVersion = 19,
        // Receipt Expiration Date
        RV_ReceiptAttributeTypeExpirationDate = 21,
        // Quantity
        RV_InAppAttributeTypeQuantity = 1701,
        // Product identifier
        RV_InAppAttributeTypeProductIdentifer = 1702,
        // Transaction identifier
        RV_InAppAttributeTypeTransactionIdentifer = 1703,
        // Purchase date
        RV_InAppAttributeTypePurchaseDate = 1704,
        // Original transaction identifier
        RV_InAppAttributeTypeOriginalTransactionIdentifer = 1705,
        // Original purchase date
        RV_InAppAttributeTypeOriginalPurchaseDate = 1706,
        // Subscription Expiration Date
        RV_InAppAttributeTypeSubscriptionExpirationDate = 1708,
        // Web Order Line Item ID
        RV_InAppAttributeTypeWebOrderLineItemId = 1711,
        // Cancellation Date
        RV_InAppAttributeTypeCancellationDate = 1712,
        
        // Storage key base value
        RV_StoreNone = 3010,
        // Bundle identifier
        RV_StoreReceiptAttributeTypeBundleId = RV_StoreNone + (RV_ReceiptAttributeTypeBundleId << 2),
        RV_StoreReceiptAttributeTypeBundleIdData = RV_StoreNone + (RV_ReceiptAttributeTypeBundleId << 2) + 1,
        // Application version
        RV_StoreReceiptAttributeTypeBundleVersion = RV_StoreNone + (RV_ReceiptAttributeTypeBundleVersion << 2),
        RV_StoreReceiptAttributeTypeBundleVersionData = RV_StoreNone + (RV_ReceiptAttributeTypeBundleId << 2) + 1,
        // Opaque value
        RV_StoreReceiptAttributeTypeOpaqueValue = RV_StoreNone + (RV_ReceiptAttributeTypeOpaqueValue << 2),
        // Hash value
        RV_StoreReceiptAttributeTypeHash = RV_StoreNone + (RV_ReceiptAttributeTypeHash << 2),
        // In-app purchase receipt
        RV_StoreReceiptAttributeTypeInAppPurchase = RV_StoreNone + (RV_ReceiptAttributeTypeInAppPurchase << 2),
        // Original Application Version
        RV_StoreReceiptAttributeTypeOriginalApplicationVersion = RV_StoreNone + (RV_ReceiptAttributeTypeOriginalApplicationVersion << 2),
        // Receipt Expiration Date
        RV_StoreReceiptAttributeTypeExpirationDate = RV_StoreNone + (RV_ReceiptAttributeTypeExpirationDate << 2),
        // Quantity
        RV_StoreInAppAttributeTypeQuantity = RV_StoreNone + (RV_InAppAttributeTypeQuantity << 2),
        // Product identifier
        RV_StoreInAppAttributeTypeProductIdentifer = RV_StoreNone + (RV_InAppAttributeTypeProductIdentifer << 2),
        // Transaction identifier
        RV_StoreInAppAttributeTypeTransactionIdentifer = RV_StoreNone + (RV_InAppAttributeTypeTransactionIdentifer << 2),
        // Purchase date
        RV_StoreInAppAttributeTypePurchaseDate = RV_StoreNone + (RV_InAppAttributeTypePurchaseDate << 2),
        // Original transaction identifier
        RV_StoreInAppAttributeTypeOriginalTransactionIdentifer = RV_StoreNone + (RV_InAppAttributeTypeOriginalTransactionIdentifer << 2),
        // Original purchase date
        RV_StoreInAppAttributeTypeOriginalPurchaseDate = RV_StoreNone + (RV_InAppAttributeTypeOriginalPurchaseDate << 2),
        // Subscription Expiration Date
        RV_StoreInAppAttributeTypeSubscriptionExpirationDate = RV_StoreNone + (RV_InAppAttributeTypeSubscriptionExpirationDate << 2),
        // Web Order Line Item ID
        RV_StoreInAppAttributeTypeWebOrderLineItemId = RV_StoreNone + (RV_InAppAttributeTypeWebOrderLineItemId << 2),
        // Cancellation Date
        RV_StoreInAppAttributeTypeCancellationDate = RV_StoreNone + (RV_InAppAttributeTypeCancellationDate << 2)
        
    } RV_ReceiptAttributeType;
    
    // Constants for Receipt info query
#define RV_RECEIPT_ATTRIBUTETYPE_BUNDLE_ID                        [NSNumber numberWithInt:RV_StoreReceiptAttributeTypeBundleId]
#define RV_RECEIPT_ATTRIBUTETYPE_BUNDLE_VERSION                   [NSNumber numberWithInt:RV_StoreReceiptAttributeTypeBundleVersion]
#define RV_RECEIPT_ATTRIBUTETYPE_ORIGINAL_APPLICATION_VERSION     [NSNumber numberWithInt:RV_StoreReceiptAttributeTypeOriginalApplicationVersion]
#define RV_RECEIPT_ATTRIBUTETYPE_EXPIRATION_DATE                  [NSNumber numberWithInt:RV_StoreReceiptAttributeTypeExpirationDate]
    
    // Constants for InApp info query
#define RV_INAPP_ATTRIBUTETYPE_QUANTITY                           [NSNumber numberWithInt:RV_StoreInAppAttributeTypeQuantity]
#define RV_INAPP_ATTRIBUTETYPE_PRODUCTIDENTIFER                   [NSNumber numberWithInt:RV_StoreInAppAttributeTypeProductIdentifer]
#define RV_INAPP_ATTRIBUTETYPE_TRANSACTIONIDENTIFER               [NSNumber numberWithInt:RV_StoreInAppAttributeTypeTransactionIdentifer]
#define RV_INAPP_ATTRIBUTETYPE_PURCHASEDATE                       [NSNumber numberWithInt:RV_StoreInAppAttributeTypePurchaseDate]
#define RV_INAPP_ATTRIBUTETYPE_ORIGINALTRANSACTIONIDENTIFER       [NSNumber numberWithInt:RV_StoreInAppAttributeTypeOriginalTransactionIdentifer]
#define RV_INAPP_ATTRIBUTETYPE_ORIGINALPURCHASEDATE               [NSNumber numberWithInt:RV_StoreInAppAttributeTypeOriginalPurchaseDate]
#define RV_INAPP_ATTRIBUTETYPE_SUBSCRIPTIONEXPIRATIONDATE         [NSNumber numberWithInt:RV_StoreInAppAttributeTypeSubscriptionExpirationDate]
#define RV_INAPP_ATTRIBUTETYPE_WEBORDERLINEITEMID                 [NSNumber numberWithInt:RV_StoreInAppAttributeTypeWebOrderLineItemId]
#define RV_INAPP_ATTRIBUTETYPE_CANCELLATIONDATE                   [NSNumber numberWithInt:RV_StoreInAppAttributeTypeCancellationDate]
    
    // Shared context for receipt validation
    typedef struct _RV_CheckingContext {
        CFTypeRef dummy0001;
        CFTypeRef dummy0002;
        const char ** argv;
        CFTypeRef dummy0009;
        CFTypeRef dummy0008;
        CFTypeRef dummy000B;
        long argc;
        CFTypeRef dummy000A;
        CFTypeRef dummy0000;
        CFTypeRef receipt_dict;
        CFTypeRef dummy0004;
        CFTypeRef guid_data;
        CFTypeRef dummy0007;
        CFTypeRef receipt_data;
        CFTypeRef ca_data;
        CFTypeRef dummy0003;
        CFTypeRef dummy000C;
        CFTypeRef dummy0006;
        CFTypeRef dummy0005;
        CFTypeRef main_bundle;
    } RV_CheckingContext;
    
    // Shared context for receipt parsing
    typedef struct _RV_ParsingContext {
        const unsigned char * ptr;
        struct _RV_ParsingContext * parent;
        CFTypeRef dummy0001;
        CFTypeRef dummy0002;
        CFTypeRef dummy000C;
        CFTypeRef dummy000A;
        CFTypeRef dummy0000;
        const unsigned char * end;
        CFTypeRef dummy0006;
        CFTypeRef dummy0004;
        CFTypeRef dummy0003;
        CFTypeRef dummy000D;
        CFTypeRef dummy0007;
        CFTypeRef dummy0008;
        CFTypeRef dictionary;
        CFTypeRef dummy000B;
        CFTypeRef dummy000E;
        CFTypeRef dummy0005;
        CFTypeRef dummy0009;
    } RV_ParsingContext;
    
    // Symbol ASN1_get_object
    typedef int (*__RV_ASN1_get_object)(const unsigned char **pp, long *plength, int *ptag, int *pclass, long omax);
    // Symbol ASN1_OBJECT_free
    typedef void (*__RV_ASN1_OBJECT_free)(ASN1_OBJECT *a);
    // Symbol BIO_free
    typedef int (*__RV_BIO_free)(BIO *a);
    // Symbol BIO_new
    typedef BIO *(*__RV_BIO_new)(BIO_METHOD *type);
    // Symbol BIO_s_mem
    typedef BIO_METHOD *(*__RV_BIO_s_mem)(void);
    // Symbol BIO_write
    typedef int (*__RV_BIO_write)(BIO *b, const void *buf, int len);
    // Symbol CC_SHA1
    typedef unsigned char *(*__RV_CC_SHA1)(const void *data, CC_LONG len, unsigned char *md);
    // Symbol CC_SHA1_Final
    typedef int (*__RV_CC_SHA1_Final)(unsigned char *md, CC_SHA1_CTX *c);
    // Symbol CC_SHA1_Init
    typedef int (*__RV_CC_SHA1_Init)(CC_SHA1_CTX *c);
    // Symbol CC_SHA1_Update
    typedef int (*__RV_CC_SHA1_Update)(CC_SHA1_CTX *c, const void *data, CC_LONG len);
    // Symbol CFArrayAppendValue
    typedef void (*__RV_CFArrayAppendValue)(CFMutableArrayRef theArray, const void *value);
    // Symbol CFArrayCreateMutable
    typedef CFMutableArrayRef (*__RV_CFArrayCreateMutable)(CFAllocatorRef allocator, CFIndex capacity, const CFArrayCallBacks *callBacks);
    // Symbol CFArrayGetCount
    typedef CFIndex (*__RV_CFArrayGetCount)(CFArrayRef theArray);
    // Symbol CFArrayGetValueAtIndex
    typedef const void *(*__RV_CFArrayGetValueAtIndex)(CFArrayRef theArray, CFIndex idx);
    // Symbol CFBundleCopyBundleURL
    typedef CFURLRef (*__RV_CFBundleCopyBundleURL)(CFBundleRef bundle);
    // Symbol CFBundleGetIdentifier
    typedef CFStringRef (*__RV_CFBundleGetIdentifier)(CFBundleRef bundle);
    // Symbol CFBundleGetMainBundle
    typedef CFBundleRef (*__RV_CFBundleGetMainBundle)();
    // Symbol CFBundleGetValueForInfoDictionaryKey
    typedef CFTypeRef (*__RV_CFBundleGetValueForInfoDictionaryKey)(CFBundleRef bundle, CFStringRef key);
    // Symbol CFBundleUnloadExecutable
    typedef void (*__RV_CFBundleUnloadExecutable)(CFBundleRef bundle);
    // Symbol CFDataAppendBytes
    typedef void (*__RV_CFDataAppendBytes)(CFMutableDataRef theData, const UInt8 *bytes, CFIndex length);
    // Symbol CFDataCreate
    typedef CFDataRef (*__RV_CFDataCreate)(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length);
    // Symbol CFDataCreateMutable
    typedef CFMutableDataRef (*__RV_CFDataCreateMutable)(CFAllocatorRef allocator, CFIndex capacity);
    // Symbol CFDataGetBytePtr
    typedef const UInt8 *(*__RV_CFDataGetBytePtr)(CFDataRef theData);
    // Symbol CFDataGetLength
    typedef CFIndex (*__RV_CFDataGetLength)(CFDataRef theData);
    // Symbol CFDateFormatterCreate
    typedef CFDateFormatterRef (*__RV_CFDateFormatterCreate)(CFAllocatorRef allocator, CFLocaleRef locale, CFDateFormatterStyle dateStyle, CFDateFormatterStyle timeStyle);
    // Symbol CFDateFormatterCreateDateFromString
    typedef CFDateRef (*__RV_CFDateFormatterCreateDateFromString)(CFAllocatorRef allocator, CFDateFormatterRef formatter, CFStringRef string, CFRange *rangep);
    // Symbol CFDateFormatterSetFormat
    typedef void (*__RV_CFDateFormatterSetFormat)(CFDateFormatterRef formatter, CFStringRef formatString);
    // Symbol CFDictionaryAddValue
    typedef void (*__RV_CFDictionaryAddValue)(CFMutableDictionaryRef theDict, const void *key, const void *value);
    // Symbol CFDictionaryCreateMutable
    typedef CFMutableDictionaryRef (*__RV_CFDictionaryCreateMutable)(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks);
    // Symbol CFDictionaryGetValue
    typedef const void *(*__RV_CFDictionaryGetValue)(CFDictionaryRef theDict, const void *key);
    // Symbol CFDictionarySetValue
    typedef void (*__RV_CFDictionarySetValue)(CFMutableDictionaryRef theDict, const void *key, const void *value);
    // Symbol CFEqual
    typedef Boolean (*__RV_CFEqual)(CFTypeRef cf1, CFTypeRef cf2);
    // Symbol CFNumberCreate
    typedef CFNumberRef (*__RV_CFNumberCreate)(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr);
    // Symbol CFReadStreamClose
    typedef void (*__RV_CFReadStreamClose)(CFReadStreamRef stream);
    // Symbol CFReadStreamCreateWithFile
    typedef CFReadStreamRef (*__RV_CFReadStreamCreateWithFile)(CFAllocatorRef alloc, CFURLRef fileURL);
    // Symbol CFReadStreamOpen
    typedef Boolean (*__RV_CFReadStreamOpen)(CFReadStreamRef stream);
    // Symbol CFReadStreamRead
    typedef CFIndex (*__RV_CFReadStreamRead)(CFReadStreamRef stream, UInt8 *buffer, CFIndex bufferLength);
    // Symbol CFRelease
    typedef void (*__RV_CFRelease)(CFTypeRef cf);
    // Symbol CFStringCompare
    typedef CFComparisonResult (*__RV_CFStringCompare)(CFStringRef theString1, CFStringRef theString2, CFStringCompareFlags compareOptions);
    // Symbol CFStringCreateWithBytes
    typedef CFStringRef (*__RV_CFStringCreateWithBytes)(CFAllocatorRef alloc, const UInt8 *bytes, CFIndex numBytes, CFStringEncoding encoding, Boolean isExternalRepresentation);
    // Symbol CFStringCreateWithCString
    typedef CFStringRef (*__RV_CFStringCreateWithCString)(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding);
    // Symbol CFStringGetFileSystemRepresentation
    typedef Boolean (*__RV_CFStringGetFileSystemRepresentation)(CFStringRef string, char *buffer, CFIndex maxBufLen);
    // Symbol CFURLCreateCopyAppendingPathComponent
    typedef CFURLRef (*__RV_CFURLCreateCopyAppendingPathComponent)(CFAllocatorRef allocator, CFURLRef url, CFStringRef pathComponent, Boolean isDirectory);
    // Symbol CFURLCreateFromFileSystemRepresentation
    typedef CFURLRef (*__RV_CFURLCreateFromFileSystemRepresentation)(CFAllocatorRef allocator, const UInt8 *buffer, CFIndex bufLen, Boolean isDirectory);
    // Symbol CFURLCreateWithFileSystemPathRelativeToBase
    typedef CFURLRef (*__RV_CFURLCreateWithFileSystemPathRelativeToBase)(CFAllocatorRef allocator, CFStringRef filePath, CFURLPathStyle pathStyle, Boolean isDirectory, CFURLRef baseURL);
    // Symbol d2i_PKCS7_bio
    typedef PKCS7 *(*__RV_d2i_PKCS7_bio)(BIO *bp,PKCS7 **p7);
    // Symbol d2i_X509_bio
    typedef X509 *(*__RV_d2i_X509_bio)(BIO *bp,X509 **x509);
    // Symbol dlopen
    typedef void *(*__RV_dlopen)(const char * __path, int __mode);
    // Symbol dlsym
    typedef void *(*__RV_dlsym)(void * __handle, const char * __symbol);
    // Symbol EVP_DigestFinal
    typedef int (*__RV_EVP_DigestFinal)(EVP_MD_CTX *ctx, unsigned char *md, unsigned int *s);
    // Symbol EVP_DigestInit
    typedef int (*__RV_EVP_DigestInit)(EVP_MD_CTX *ctx, const EVP_MD *type);
    // Symbol EVP_DigestUpdate
    typedef int (*__RV_EVP_DigestUpdate)(EVP_MD_CTX *ctx, const void *d, size_t cnt);
    // Symbol EVP_get_digestbyname
    typedef const EVP_MD *(*__RV_EVP_get_digestbyname)(const char *name);
    // Symbol EVP_MD_CTX_init
    typedef void (*__RV_EVP_MD_CTX_init)(EVP_MD_CTX *ctx);
    // Symbol exit
    typedef void (*__RV_exit)(int status);
    // Symbol glob
    typedef int (*__RV_glob)(const char * __restrict, int, int (*)(const char *, int), glob_t * __restrict);
    // Symbol glob_b
    typedef int (*__RV_glob_b)(const char * __restrict, int, int (^)(const char *, int), glob_t * __restrict);
    // Symbol globfree
    typedef void (*__RV_globfree)(glob_t *);
    // Symbol IOBSDNameMatching
    typedef CFMutableDictionaryRef (*__RV_IOBSDNameMatching)(mach_port_t masterPort, uint32_t options, const char * bsdName);
    // Symbol IOIteratorNext
    typedef io_object_t (*__RV_IOIteratorNext)(io_iterator_t iterator);
    // Symbol IOMasterPort
    typedef kern_return_t (*__RV_IOMasterPort)(mach_port_t bootstrapPort, mach_port_t *masterPort);
    // Symbol IOObjectRelease
    typedef kern_return_t (*__RV_IOObjectRelease)(io_object_t object);
    // Symbol IORegistryEntryCreateCFProperty
    typedef CFTypeRef (*__RV_IORegistryEntryCreateCFProperty)(io_registry_entry_t entry, CFStringRef key, CFAllocatorRef allocator, IOOptionBits options);
    // Symbol IORegistryEntryGetParentEntry
    typedef kern_return_t (*__RV_IORegistryEntryGetParentEntry)(io_registry_entry_t entry, const io_name_t plane, io_registry_entry_t * parent);
    // Symbol IOServiceGetMatchingServices
    typedef kern_return_t (*__RV_IOServiceGetMatchingServices)(mach_port_t masterPort, CFDictionaryRef matching, io_iterator_t *existing);
    // Symbol kCFBundleIdentifierKey
    typedef const CFStringRef *__RV_kCFBundleIdentifierKey;
    // Symbol kCFTypeArrayCallBacks
    typedef const CFArrayCallBacks *__RV_kCFTypeArrayCallBacks;
    // Symbol kCFTypeDictionaryKeyCallBacks
    typedef const CFDictionaryKeyCallBacks *__RV_kCFTypeDictionaryKeyCallBacks;
    // Symbol kCFTypeDictionaryValueCallBacks
    typedef const CFDictionaryValueCallBacks *__RV_kCFTypeDictionaryValueCallBacks;
    // Symbol kSecClass
    typedef const CFTypeRef *__RV_kSecClass;
    // Symbol kSecClassCertificate
    typedef const CFTypeRef *__RV_kSecClassCertificate;
    // Symbol kSecMatchLimit
    typedef const CFTypeRef *__RV_kSecMatchLimit;
    // Symbol kSecMatchLimitAll
    typedef const CFTypeRef *__RV_kSecMatchLimitAll;
    // Symbol kSecMatchSearchList
    typedef const CFTypeRef *__RV_kSecMatchSearchList;
    // Symbol kSecMatchSubjectContains
    typedef const CFTypeRef *__RV_kSecMatchSubjectContains;
    // Symbol kSecReturnRef
    typedef const CFTypeRef *__RV_kSecReturnRef;
    // Symbol longjmp
    typedef void (*__RV_longjmp)(jmp_buf buf, int ret);
    // Symbol NSApplicationMain
    typedef int (*__RV_NSApplicationMain)(int argc, const char *argv[]);
    // Symbol OBJ_txt2obj
    typedef ASN1_OBJECT *(*__RV_OBJ_txt2obj)(const char *s, int no_name);
    // Symbol objc_getClass
    typedef id (*__RV_objc_getClass)(const char *name);
    // Symbol objc_msgSend
    typedef id (*__RV_objc_msgSend)(id theReceiver, SEL theSelector, ...);
    // Symbol OpenSSL_add_all_digests
    typedef void (*__RV_OpenSSL_add_all_digests)();
    // Symbol PKCS7_free
    typedef void (*__RV_PKCS7_free)(PKCS7 *a);
    // Symbol PKCS7_get0_signers
    typedef STACK_OF(X509) *(*__RV_PKCS7_get0_signers)(PKCS7 *p7, STACK_OF(X509) *certs, int flags);
    // Symbol PKCS7_verify
    typedef int (*__RV_PKCS7_verify)(PKCS7 *p7, STACK_OF(X509) *certs, X509_STORE *store, BIO *indata, BIO *out, int flags);
    // Symbol SecCertificateCopyData
    typedef CFDataRef (*__RV_SecCertificateCopyData)(SecCertificateRef certificate);
    // Symbol SecItemCopyMatching
    typedef OSStatus (*__RV_SecItemCopyMatching)(CFDictionaryRef query, CFTypeRef *result);
    // Symbol SecKeychainOpen
    typedef OSStatus (*__RV_SecKeychainOpen)(const char *pathName, SecKeychainRef *keychain);
    // Symbol SecKeychainSearchCopyNext
    typedef OSStatus (*__RV_SecKeychainSearchCopyNext)(SecKeychainSearchRef searchRef, SecKeychainItemRef *itemRef);
    // Symbol SecKeychainSearchCreateFromAttributes
    typedef OSStatus (*__RV_SecKeychainSearchCreateFromAttributes)(CFTypeRef keychainOrArray, SecItemClass itemClass, const SecKeychainAttributeList *attrList, SecKeychainSearchRef *searchRef);
    // Symbol sel_registerName
    typedef SEL (*__RV_sel_registerName)(const char *str);
    // Symbol setjmp
    typedef int (*__RV_setjmp)(jmp_buf buf);
    // Symbol SHA1
    typedef unsigned char *(*__RV_SHA1)(const unsigned char *d, unsigned long n, unsigned char *md);
    // Symbol SHA1_Final
    typedef int (*__RV_SHA1_Final)(unsigned char *md, SHA_CTX *c);
    // Symbol SHA1_Init
    typedef int (*__RV_SHA1_Init)(SHA_CTX *c);
    // Symbol SHA1_Update
    typedef int (*__RV_SHA1_Update)(SHA_CTX *c, const void *data, unsigned long len);
    // Symbol sk_free
    typedef void (*__RV_sk_free)(_STACK *);
    // Symbol sk_num
    typedef int (*__RV_sk_num)(const _STACK *);
    // Symbol sk_value
    typedef void *(*__RV_sk_value)(const _STACK *, int);
    // Symbol strlen
    typedef size_t (*__RV_strlen)(const char *);
    // Symbol strncmp
    typedef int (*__RV_strncmp)(const char *, const char *, size_t);
    // Symbol X509_digest
    typedef int (*__RV_X509_digest)(const X509 *data,const EVP_MD *type,unsigned char *md, unsigned int *len);
    // Symbol X509_free
    typedef void (*__RV_X509_free)(X509 *a);
    // Symbol X509_get_ext_by_OBJ
    typedef int (*__RV_X509_get_ext_by_OBJ)(X509 *x,ASN1_OBJECT *obj,int lastpos);
    // Symbol X509_NAME_get_text_by_NID
    typedef int (*__RV_X509_NAME_get_text_by_NID)(X509_NAME *name, int nid, char *buf,int len);
    // Symbol X509_STORE_add_cert
    typedef int (*__RV_X509_STORE_add_cert)(X509_STORE *ctx, X509 *x);
    // Symbol X509_STORE_free
    typedef void (*__RV_X509_STORE_free)(X509_STORE *v);
    // Symbol X509_STORE_new
    typedef X509_STORE *(*__RV_X509_STORE_new)();
    
    
    // Table for storing strings
    static const char *RV_Strings[573] = {
        // "" / M(None) / S(0) / L(0)
        "\x55\x8d\xc3\x94\xb6\xbd\x54\x4d\xba\x28\x5d\xa8\xc1\xda\x91\xf6\x0e\x86\x29\xdc\x04\xf5\x6d\x0a\xc4\xc1\x12\x34\x05\xa6\x26\x81",
        // "SHA1_Update" / M(Rot) / S(28) / L(11)
        "\x6f\x64\x5d\x4d\x7b\x71\x8c\x80\x7d\x90\x81\x1c\x03\xd5\xbf\x67",
        // "EVP_DigestFinal" / M(Xor2) / S(207) / L(15)
        "\x9a\x89\x8f\x80\x9b\xb6\xb8\xba\xac\xab\x99\xb6\xb1\xbe\xb3\xdf",
        // "CFReadStreamOpen" / M(Rot) / S(47) / L(16)
        "\x72\x75\x81\x94\x90\x93\x82\xa3\xa1\x94\x90\x9c\x7e\x9f\x94\x9d\x2f",
        // "yyyy'-'MM'-'dd'T'HH':'mm':'ss'Z'" / M(Xor3) / S(29) / L(32)
        "\x47\x47\x47\x47\x19\x13\x19\x73\x73\x19\x13\x19\x5a\x5a\x19\x6a\x19\x76\x76\x19\x04\x19\x53\x53\x19\x04\x19\x4d\x4d\x19\x64\x19\x3e",
        // "IOObjectRelease" / M(Xor4) / S(25) / L(15)
        "\xd9\xdf\xdf\xf2\xfa\xf5\xf3\xe4\xc2\xf5\xfc\xf5\xf1\xe3\xf5\x90",
        // "" / M(None) / S(0) / L(0)
        "\x3d\xb6\x7d\x18\x1d\x1d\x6b\xb5\xa1\xa9\x58\x70\x44\x18\x67\x68\x06\x9c\x8e\xa8\x6c\x2f\xf8\xd3\x50\x0d\x17\x9e\x9f\x37\xe2\x04",
        // "CFBundleGetMainBundle" / M(Rot) / S(43) / L(21)
        "\x6e\x71\x6d\xa0\x99\x8f\x97\x90\x72\x90\x9f\x78\x8c\x94\x99\x6d\xa0\x99\x8f\x97\x90\x2b",
        // "611E5B662C593A08FF58D14AE22452D198DF6C60" / M(Rot) / S(87) / L(40)
        "\x8d\x88\x88\x9c\x8c\x99\x8d\x8d\x89\x9a\x8c\x90\x8a\x98\x87\x8f\x9d\x9d\x8c\x8f\x9b\x88\x8b\x98\x9c\x89\x89\x8b\x8c\x89\x9b\x88\x90\x8f\x9b\x9d\x8d\x9a\x8d\x87\x57\xbe\x66\x09\xb8\xe5\x05\xb1\x09",
        // "" / M(None) / S(0) / L(0)
        "\x87\xb3\x4f\x51\x95\x78\x8f\xa5\x80\x8c\x4d\x5c\x88\x3e\x11\xf0\x71\x05\x1c\x67\x06\xee\x9e\x39\x2f\xc9\xc8\xcc\x87\xf2\x25\xfc",
        // "" / M(None) / S(0) / L(0)
        "\x29\xcc\x22\xe7\x8f\x29\x57\x16\x2b\x89\x8b\x04\x28\x09\x35\x17\xde\x4d\xd5\xd3\xaf\xf0\xde\x8a\x89\x83\x2e\xad\xe9\x66\x4e\x69",
        // "" / M(None) / S(0) / L(0)
        "\x61\xc4\xd1\x84\x15\x07\xba\x5a\x27\xcf\x91\x32\x3f\xad\x5a\xa4\x40\x45\x9d\xda\x08\xbf\xae\xbf\x6b\x5d\x16\x0a\x13\x50\x5b\xd0",
        // "" / M(None) / S(0) / L(0)
        "\x61\xbb\x72\xf5\xca\x88\xbc\x3a\x0d\x90\x35\xd4\xe8\x1f\xdc\xca\x17\xd0\x97\xde\x52\xfe\x0e\x91\x63\x15\x11\x1f\x3d\x32\x9e\xed",
        // "" / M(None) / S(0) / L(0)
        "\xc2\x01\xfc\x6a\xc5\x3a\xc7\x76\x2d\xcc\x42\x29\x6c\xb0\xb0\xda\xfa\x00\xf9\xf4\x12\x28\x32\x74\xf9\x71\xf9\x5f\xc2\x82\x72\x97",
        // "" / M(None) / S(0) / L(0)
        "\x63\x69\x91\xbe\xb2\x2c\x19\x3d\xd5\x96\xe5\x5e\xeb\xe6\x5e\xee\x1c\x9f\x26\xdd\x70\x1b\x7a\x2b\x9e\x93\xd8\x07\x87\x9a\x5d\xef",
        // "" / M(None) / S(0) / L(0)
        "\xf6\xac\x44\x0e\xc4\xca\x7b\x0b\xe4\x5a\xce\x35\xb8\x16\xf9\xce\xd3\x65\x86\xbb\xfa\xd8\x3a\x73\x72\xe5\x79\xa4\x67\x4e\xc2\xca",
        // "" / M(None) / S(0) / L(0)
        "\xb2\x8a\x8f\xb6\x2e\x48\xf5\x4d\xcb\xc0\x57\xb4\x21\xa2\xf0\x2a\x21\xf3\x8d\xe3\x32\x0e\x2d\x2c\xfa\xb9\x7e\x0e\x9c\x32\x16\x96",
        // "CFDataCreate" / M(Rot) / S(14) / L(12)
        "\x51\x54\x52\x6f\x82\x6f\x51\x80\x73\x6f\x82\x73\x0e\xaa\xf9\x98",
        // "sha1" / M(Rot) / S(113) / L(4)
        "\xe4\xd9\xd2\xa2\x71\xa6\xdd\x87\xa7\x1d\xa7\xcd\x06\xd6\x11\x6c",
        // "X509_digest" / M(Xor4) / S(204) / L(11)
        "\x98\xf5\xf0\xf9\x9f\xa4\xa9\xa7\xa5\xb3\xb4\xc0\x71\x26\xbf\x67",
        // "CFDictionaryAddValue" / M(Xor4) / S(230) / L(20)
        "\x9d\x98\x9a\xb7\xbd\xaa\xb7\xb1\xb0\xbf\xac\xa7\x9f\xba\xba\x88\xbf\xb2\xab\xbb\xde",
        // "objc_getClass" / M(Xor2) / S(87) / L(13)
        "\x28\x25\x2d\x24\x18\x20\x22\x33\x04\x2b\x26\x34\x34\x47\x07\xbf",
        // "IOBSDNameMatching" / M(Xor4) / S(84) / L(17)
        "\xa1\xa7\xaa\xbb\xac\xa6\x89\x85\x8d\xa5\x89\x9c\x8b\x80\x81\x86\x8f\xe8",
        // "sk_free" / M(Xor3) / S(209) / L(7)
        "\x92\x8a\xbe\x87\x93\x84\x84\xe1\x06\x9d\x83\x35\xe9\xba\xaf\x6b",
        // "IOMACAddress" / M(Xor1) / S(38) / L(12)
        "\x6f\x69\x6b\x67\x65\x67\x42\x42\x54\x43\x55\x55\x26\xca\x62\x97",
        // "CFReadStreamRead" / M(Xor4) / S(44) / L(16)
        "\xaf\xaa\xbe\x89\x8d\x88\xbf\x98\x9e\x89\x8d\x81\xbe\x89\x8d\x88\xec",
        // "" / M(None) / S(0) / L(0)
        "\x8e\x0d\xdd\x03\xf4\x56\xdd\xa9\x43\x92\x2e\x17\xa5\x2b\x46\x45\xeb\xbf\x25\x58\xb1\x8f\xb3\x1b\xfc\x82\xd8\x2a\x53\x9e\x70\x22",
        // "kCFTypeDictionaryKeyCallBacks" / M(Xor2) / S(120) / L(29)
        "\x35\x1d\x18\x0a\x27\x2e\x3b\x1a\x37\x3d\x2a\x37\x31\x30\x3f\x2c\x27\x15\x3b\x27\x1d\x3f\x32\x32\x1c\x3f\x3d\x35\x2d\x5e\x8d\xbf\xd5\xd4\x9d\x48\xd2\xba",
        // "" / M(None) / S(0) / L(0)
        "\x7d\xc4\x86\x0a\xfc\xc5\xe4\xdc\x08\xcd\xbd\xd9\x5c\x9d\x79\xde\xbc\xfc\x36\x72\xde\x78\x26\x6b\x90\x18\x7d\xea\x5a\x18\xc4\x67",
        // "CFDictionaryGetValue" / M(Xor3) / S(159) / L(20)
        "\xf7\xf2\xf0\xdd\xd7\xc0\xdd\xdb\xda\xd5\xc6\xcd\xf3\xd1\xc0\xe2\xd5\xd8\xc1\xd1\xb4",
        // "SecKeychainSearchCreateFromAttributes" / M(Xor3) / S(177) / L(37)
        "\x84\xb2\xb4\x9c\xb2\xae\xb4\xbf\xb6\xbe\xb9\x84\xb2\xb6\xa5\xb4\xbf\x94\xa5\xb2\xb6\xa3\xb2\x91\xa5\xb8\xba\x96\xa3\xa3\xa5\xbe\xb5\xa2\xa3\xb2\xa4\xd7",
        // "EVP_MD_CTX_init" / M(Xor2) / S(78) / L(15)
        "\x1b\x08\x0e\x01\x13\x1a\x01\x1d\x0a\x06\x01\x37\x30\x37\x2a\x5e",
        // "CC_SHA1_Update" / M(Xor3) / S(166) / L(14)
        "\xf5\xf5\xe9\xe5\xfe\xf7\x87\xe9\xe3\xc6\xd2\xd7\xc2\xd3\xb6\x67",
        // "%02x" / M(Rot) / S(155) / L(4)
        "\xc0\xcb\xcd\x13\x9b\x1d\x88\x3a\x0d\x73\x5e\x1a\x34\xf9\xe9\x81",
        // "%02x" / M(Rot) / S(171) / L(4)
        "\xd0\xdb\xdd\x23\xab\xba\x10\x75\x06\x44\x67\x26\x7c\xcb\xf5\x84",
        // "X509_get_ext_by_OBJ" / M(Rot) / S(240) / L(19)
        "\x48\x25\x20\x29\x4f\x57\x55\x64\x4f\x55\x68\x64\x4f\x52\x69\x4f\x3f\x32\x3a\xf0",
        // "" / M(None) / S(0) / L(0)
        "\x8a\x60\x59\xcb\xce\xa8\xcc\x0c\x02\x29\x22\x3f\xb0\x3b\xf5\x91\xf2\xbf\xac\x69\x44\x57\x5d\x15\x39\x25\xb0\x30\xf6\x3b\x0f\xfb",
        // "kCFTypeArrayCallBacks" / M(Xor1) / S(97) / L(21)
        "\x0a\x22\x27\x35\x18\x11\x04\x20\x13\x13\x00\x18\x22\x00\x0d\x0d\x23\x00\x02\x0a\x12\x61",
        // "SecCertificateCopyData" / M(Xor2) / S(171) / L(22)
        "\xef\xd9\xdf\xff\xd9\xce\xc8\xd5\xda\xd5\xdf\xdd\xc8\xd9\xff\xd3\xcc\xc5\xf8\xdd\xc8\xdd\xbc",
        // "it.iltofa.Turms" / M(Xor1) / S(218) / L(15)
        "\xb3\xae\xf4\xb3\xb6\xae\xb5\xbc\xbb\xf4\x8e\xaf\xa8\xb7\xa9\xda",
        // "" / M(None) / S(0) / L(0)
        "\xca\x93\xb7\x1d\xec\x3d\xe9\x2b\x0a\x76\xc6\x75\x33\xce\x0d\x7a\xde\x57\x3a\x29\x22\x89\x57\x8f\x95\xc6\x14\xb0\xbb\x8e\x23\xd7",
        // "CFEqual" / M(Rot) / S(29) / L(7)
        "\x60\x63\x62\x8e\x92\x7e\x89\x1d\x7e\xd2\x9a\x08\x79\x46\x8c\xff",
        // "CFStringCreateWithBytes" / M(Rot) / S(67) / L(23)
        "\x86\x89\x96\xb7\xb5\xac\xb1\xaa\x86\xb5\xa8\xa4\xb7\xa8\x9a\xac\xb7\xab\x85\xbc\xb7\xa8\xb6\x43\xa6\x4a\xe2\xba\x91\x8a\x46\x9a",
        // "d2i_PKCS7_bio" / M(Xor3) / S(180) / L(13)
        "\xa0\xf6\xad\x9b\x94\x8f\x87\x97\xf3\x9b\xa6\xad\xab\xc4\x28\x0b",
        // "PKCS7_free" / M(Rot) / S(134) / L(10)
        "\xd6\xd1\xc9\xd9\xbd\xe5\xec\xf8\xeb\xeb\x86\x4b\xfe\xd3\x5f\x7e",
        // "CFArrayCreateMutable" / M(Xor3) / S(166) / L(20)
        "\xf8\xfd\xfa\xc9\xc9\xda\xc2\xf8\xc9\xde\xda\xcf\xde\xf6\xce\xcf\xda\xd9\xd7\xde\xbb",
        // "EVP_MD_CTX_init" / M(Xor3) / S(106) / L(15)
        "\x3f\x2c\x2a\x25\x37\x3e\x25\x39\x2e\x22\x25\x13\x14\x13\x0e\x7a",
        // "CC_SHA1_Update" / M(Xor1) / S(195) / L(14)
        "\x80\x80\x9c\x90\x8b\x82\xf2\x9c\x96\xb3\xa7\xa2\xb7\xa6\xc3\x3f",
        // "" / M(None) / S(0) / L(0)
        "\x1f\xab\x78\x3b\x07\x26\x84\x77\xe0\x54\x2e\x1b\x35\xd4\xbd\xaa\x90\xea\x1c\x45\x7f\x81\xd7\xf3\x74\x0b\xa4\xb1\x35\xc2\xa7\x92",
        // "CFURLCreateCopyAppendingPathComponent" / M(Rot) / S(76) / L(37)
        "\x8f\x92\xa1\x9e\x98\x8f\xbe\xb1\xad\xc0\xb1\x8f\xbb\xbc\xc5\x8d\xbc\xbc\xb1\xba\xb0\xb5\xba\xb3\x9c\xad\xc0\xb4\x8f\xbb\xb9\xbc\xbb\xba\xb1\xba\xc0\x4c",
        // "" / M(None) / S(0) / L(0)
        "\x95\x71\x46\x18\x98\x38\xbd\x34\xc7\x50\x0c\xdc\x09\xd6\xb7\xa2\x52\x09\x0c\x0a\x58\x61\x30\x8d\x16\x07\xf4\xef\x8e\x4b\xba\xac",
        // "en0" / M(Xor4) / S(0) / L(3)
        "\x65\x6e\x30\x00\x57\xb1\x4d\x06\x71\x44\x88\x39\x18\x7d\x95\x99",
        // "sk_num" / M(Xor4) / S(249) / L(6)
        "\xe3\xfb\xcf\xfe\xe5\xfd\x90\x43\x47\xd4\x4d\x6a\xfb\xf3\x0c\xed",
        // "IORegistryEntryCreateCFProperty" / M(Xor2) / S(100) / L(31)
        "\x0d\x0b\x16\x21\x23\x2d\x37\x30\x36\x3d\x01\x2a\x30\x36\x3d\x07\x36\x21\x25\x30\x21\x07\x02\x14\x36\x2b\x34\x21\x36\x30\x3d\x44",
        // "CFStringCreateWithCString" / M(Xor2) / S(165) / L(25)
        "\xc4\xc1\xd4\xf3\xf5\xee\xe9\xe0\xc4\xf5\xe2\xe6\xf3\xe2\xd0\xee\xf3\xef\xc4\xd4\xf3\xf5\xee\xe9\xe0\x87\xe4\x9c\x8c\x57\x9e\x3c\x94\xde",
        // "glob" / M(Xor3) / S(3) / L(4)
        "\x74\x7f\x7c\x71\x13\x2e\x71\xcc\xa4\xe8\xa8\xa5\xa9\xb7\xce\xed",
        // "CFNumberCreate" / M(Xor3) / S(24) / L(14)
        "\x6b\x6e\x66\x5d\x45\x4a\x4d\x5a\x6b\x5a\x4d\x49\x5c\x4d\x28\xc0",
        // "SecKeychainSearchCreateFromAttributes" / M(Xor2) / S(0) / L(37)
        "\x75\x43\x45\x6d\x43\x5f\x45\x4e\x47\x4f\x48\x75\x43\x47\x54\x45\x4e\x65\x54\x43\x47\x52\x43\x60\x54\x49\x4b\x67\x52\x52\x54\x4f\x44\x53\x52\x43\x55\x26",
        // "kSecMatchSearchList" / M(Xor2) / S(122) / L(19)
        "\x05\x3d\x0b\x0d\x23\x0f\x1a\x0d\x06\x3d\x0b\x0f\x1c\x0d\x06\x22\x07\x1d\x1a\x6e",
        // "" / M(None) / S(0) / L(0)
        "\x8c\xde\x0e\x58\xcb\xe6\xf3\xed\x98\x12\x39\x75\x28\x76\xc3\xe7\xf5\x9d\xbc\x46\x34\x5b\xd8\xe9\xe5\x67\x0a\x3f\x6d\xd6\x41\xda",
        // "_MASReceipt" / M(Xor2) / S(247) / L(11)
        "\xb8\xaa\xa6\xb4\xb5\x82\x84\x82\x8e\x97\x93\xe7\x00\x67\xb7\x66",
        // "CFBundleIdentifier" / M(Rot) / S(169) / L(18)
        "\xec\xef\xeb\x1e\x17\x0d\x15\x0e\xf2\x0d\x0e\x17\x1d\x12\x0f\x12\x0e\x1b\xa9",
        // "SHA1_Final" / M(Rot) / S(157) / L(10)
        "\xf0\xe5\xde\xce\xfc\xe3\x06\x0b\xfe\x09\x9d\x03\x2b\x66\x82\x31",
        // "/System/Library/Frameworks/CoreFoundation.framework/CoreFoundation" / M(Xor2) / S(225) / L(66)
        "\x8d\xf1\xdb\xd1\xd6\xc7\xcf\x8d\xee\xcb\xc0\xd0\xc3\xd0\xdb\x8d\xe4\xd0\xc3\xcf\xc7\xd5\xcd\xd0\xc9\xd1\x8d\xe1\xcd\xd0\xc7\xe4\xcd\xd7\xcc\xc6\xc3\xd6\xcb\xcd\xcc\x8c\xc4\xd0\xc3\xcf\xc7\xd5\xcd\xd0\xc9\x8d\xe1\xcd\xd0\xc7\xe4\xcd\xd7\xcc\xc6\xc3\xd6\xcb\xcd\xcc\xa2",
        // "SecKeychainOpen" / M(Rot) / S(43) / L(15)
        "\x7e\x90\x8e\x76\x90\xa4\x8e\x93\x8c\x94\x99\x7a\x9b\x90\x99\x2b",
        // "kCFTypeDictionaryKeyCallBacks" / M(Xor2) / S(239) / L(29)
        "\xa2\x8a\x8f\x9d\xb0\xb9\xac\x8d\xa0\xaa\xbd\xa0\xa6\xa7\xa8\xbb\xb0\x82\xac\xb0\x8a\xa8\xa5\xa5\x8b\xa8\xaa\xa2\xba\xc9\x5e\x31\x19\xc7\x50\x9a\xe9\x6c",
        // "dlsym" / M(Xor2) / S(113) / L(5)
        "\x05\x0d\x12\x18\x0c\x61\xdd\x58\x26\x2b\x52\x1b\xff\x2e\x73\xec",
        // "setDelegate:" / M(Xor2) / S(151) / L(12)
        "\xf4\xe2\xf3\xc3\xe2\xeb\xe2\xe0\xe6\xf3\xe2\xbd\x87\xa3\x53\xba",
        // "exit" / M(Xor4) / S(153) / L(4)
        "\xf5\xe8\xf9\xe4\x90\xc2\xa6\xd7\x7a\x18\x41\x9b\x4f\x9d\x93\xf6",
        // "X509_STORE_new" / M(Xor4) / S(47) / L(14)
        "\xa8\xc5\xc0\xc9\xaf\xa3\xa4\xbf\xa2\xb5\xaf\x9e\x95\x87\xf0\xdd",
        // "" / M(None) / S(0) / L(0)
        "\xb8\xfa\xa3\x93\xae\x40\xdf\x6a\x14\x6e\x4d\x11\x2d\xd4\xb4\x2c\x21\x8d\xe5\x4e\xde\xe3\x6b\xb2\x26\x14\xb5\x37\x38\xb2\x0e\x2d",
        // "" / M(None) / S(0) / L(0)
        "\xfe\xca\x27\x16\x49\xee\x32\xc8\x7b\x2f\x61\xe5\x7d\xf5\x7d\x32\x40\xf6\x8a\x35\x9e\x8e\xcb\x8a\xfc\xd8\x6b\x97\xf7\xf0\x38\x4c",
        // "setjmp" / M(Rot) / S(241) / L(6)
        "\x64\x56\x65\x5b\x5e\x61\xf1\xc3\xf4\xee\xb7\xdc\x36\x33\xa2\xcb",
        // "1.2.840.113635.100.6.11.1" / M(Xor4) / S(232) / L(25)
        "\xe1\xfe\xe2\xfe\xe8\xe4\xe0\xfe\xe1\xe1\xe3\xe6\xe3\xe5\xfe\xe1\xe0\xe0\xfe\xe6\xfe\xe1\xe1\xfe\xe1\xd0\x00\xc9\x04\x34\x88\x42\x8e\xcd",
        // "CFArrayGetCount" / M(Xor4) / S(248) / L(15)
        "\xc3\xc6\xc1\xf2\xf2\xe1\xf9\xc7\xe5\xf4\xc3\xef\xf5\xee\xf4\x80",
        // "CFDictionaryAddValue" / M(Xor2) / S(98) / L(20)
        "\x34\x31\x33\x1e\x14\x03\x1e\x18\x19\x16\x05\x0e\x36\x13\x13\x21\x16\x1b\x02\x12\x77",
        // "X509_digest" / M(Xor1) / S(11) / L(11)
        "\x53\x3e\x3b\x32\x54\x6f\x62\x6c\x6e\x78\x7f\x0b\xd1\xe9\x2b\x8e",
        // "CFDictionaryCreateMutable" / M(Rot) / S(18) / L(25)
        "\x55\x58\x56\x7b\x75\x86\x7b\x81\x80\x73\x84\x8b\x55\x84\x77\x73\x86\x77\x5f\x87\x86\x73\x74\x7e\x77\x12\x86\xca\x1e\x55\x0d\xd9\xd8\x36",
        // "kSecClass" / M(Xor2) / S(58) / L(9)
        "\x41\x79\x4f\x49\x69\x46\x4b\x59\x59\x2a\x92\xf7\x38\x4f\x29\x9d",
        // "X509_digest" / M(Xor1) / S(193) / L(11)
        "\x99\xf4\xf1\xf8\x9e\xa5\xa8\xa6\xa4\xb2\xb5\xc1\x22\xb5\x1d\xb9",
        // "longjmp" / M(Xor3) / S(178) / L(7)
        "\xae\xad\xac\xa5\xa8\xaf\xb2\xc2\xc9\x04\x44\xe7\xa3\x5c\xc4\x99",
        // "/System/Library/Keychains/SystemRootCertificates.keychain" / M(Xor4) / S(110) / L(57)
        "\x73\x0f\x25\x2f\x28\x39\x31\x73\x10\x35\x3e\x2e\x3d\x2e\x25\x73\x17\x39\x25\x3f\x34\x3d\x35\x32\x2f\x73\x0f\x25\x2f\x28\x39\x31\x0e\x33\x33\x28\x1f\x39\x2e\x28\x35\x3a\x35\x3f\x3d\x28\x39\x2f\x72\x37\x39\x25\x3f\x34\x3d\x35\x32\x5c\x8c\x1b\x00\x71\xbf\x02\xda\xb3",
        // "X509_free" / M(Xor2) / S(53) / L(9)
        "\x7d\x10\x15\x1c\x7a\x43\x57\x40\x40\x25\x77\x53\xfd\xa3\x2a\xdb",
        // "EVP_DigestUpdate" / M(Rot) / S(139) / L(16)
        "\xd0\xe1\xdb\xea\xcf\xf4\xf2\xf0\xfe\xff\xe0\xfb\xef\xec\xff\xf0\x8b",
        // "" / M(None) / S(0) / L(0)
        "\xf2\x1e\xb0\x47\x57\xbf\xaf\xef\x4c\xef\xc3\xa9\x45\xdc\xe6\x9b\x17\xdc\xcc\xa0\xba\x1d\xf4\xb1\xd8\x09\x66\x01\x97\x73\x19\x8c",
        // "" / M(None) / S(0) / L(0)
        "\xe3\x72\x22\xd4\xaf\xa0\x4c\xa5\xde\xad\x69\xfd\xd4\xae\x96\x4a\x00\x62\x31\xf6\x59\xc5\x32\x66\x3b\x3d\x25\x82\x0f\x0e\xa3\xa7",
        // "CFBundleGetValueForInfoDictionaryKey" / M(Xor1) / S(15) / L(36)
        "\x4c\x49\x4d\x7a\x61\x6b\x63\x6a\x48\x6a\x7b\x59\x6e\x63\x7a\x6a\x49\x60\x7d\x46\x61\x69\x60\x4b\x66\x6c\x7b\x66\x60\x61\x6e\x7d\x76\x44\x6a\x76\x0f",
        // "EVP_get_digestbyname" / M(Xor4) / S(62) / L(20)
        "\x53\x40\x46\x49\x71\x73\x62\x49\x72\x7f\x71\x73\x65\x62\x74\x6f\x78\x77\x7b\x73\x16",
        // "CFBundleCopyBundleURL" / M(Xor3) / S(189) / L(21)
        "\x90\x95\x91\xa6\xbd\xb7\xbf\xb6\x90\xbc\xa3\xaa\x91\xa6\xbd\xb7\xbf\xb6\x86\x81\x9f\xd3",
        // "kSecMatchSearchList" / M(Xor2) / S(58) / L(19)
        "\x45\x7d\x4b\x4d\x63\x4f\x5a\x4d\x46\x7d\x4b\x4f\x5c\x4d\x46\x62\x47\x5d\x5a\x2e",
        // "CFReadStreamOpen" / M(Xor2) / S(133) / L(16)
        "\xd7\xd2\xc6\xf1\xf5\xf0\xc7\xe0\xe6\xf1\xf5\xf9\xdb\xe4\xf1\xfa\x94",
        // "CFDataAppendBytes" / M(Xor2) / S(228) / L(17)
        "\xb5\xb0\xb2\x97\x82\x97\xb7\x86\x86\x93\x98\x92\xb4\x8f\x82\x93\x85\xf6",
        // "1.2.840.113635.100.6.11.1" / M(Xor2) / S(201) / L(25)
        "\xda\xc5\xd9\xc5\xd3\xdf\xdb\xc5\xda\xda\xd8\xdd\xd8\xde\xc5\xda\xdb\xdb\xc5\xdd\xc5\xda\xda\xc5\xda\xeb\x81\x34\x50\x19\x8a\xe5\x17\x35",
        // "SKReceiptRefreshRequest" / M(Xor4) / S(80) / L(23)
        "\x53\x4b\x52\x65\x63\x65\x69\x70\x74\x52\x65\x66\x72\x65\x73\x68\x52\x65\x71\x75\x65\x73\x74\x00\xde\xf9\x67\x53\xac\x24\xd9\x6e",
        // "kSecReturnRef" / M(Xor2) / S(99) / L(13)
        "\x18\x20\x16\x10\x21\x16\x07\x06\x01\x1d\x21\x16\x15\x73\xe6\x31",
        // "" / M(None) / S(0) / L(0)
        "\x10\x16\x3f\x47\x08\x38\x05\xcd\xdc\x6a\x6f\xc4\xc4\x2f\x7f\x71\xce\x28\xdc\x14\x63\x0b\xe9\x3b\x61\x0c\x94\x68\x98\x13\x9f\x10",
        // "ASN1_get_object" / M(Xor1) / S(196) / L(15)
        "\x85\x97\x8a\xf5\x9b\xa3\xa1\xb0\x9b\xab\xa6\xae\xa1\xa7\xb0\xc4",
        // "X509_STORE_add_cert" / M(Rot) / S(128) / L(19)
        "\xd8\xb5\xb0\xb9\xdf\xd3\xd4\xcf\xd2\xc5\xdf\xe1\xe4\xe4\xdf\xe3\xe5\xf2\xf4\x80",
        // "IORegistryEntryGetParentEntry" / M(Xor4) / S(121) / L(29)
        "\xbf\xb9\xa4\x93\x91\x9f\x85\x82\x84\x8f\xb3\x98\x82\x84\x8f\xb1\x93\x82\xa6\x97\x84\x93\x98\x82\xb3\x98\x82\x84\x8f\xf6\xba\x8b\xde\x21\xed\xf4\xb2\x52",
        // "objc_msgSend" / M(Xor4) / S(194) / L(12)
        "\x4f\x42\x4a\x43\x7f\x4d\x53\x47\x73\x45\x4e\x44\x20\xb1\x26\x76",
        // "kSecClassCertificate" / M(Xor2) / S(185) / L(20)
        "\xc7\xff\xc9\xcf\xef\xc0\xcd\xdf\xdf\xef\xc9\xde\xd8\xc5\xca\xc5\xcf\xcd\xd8\xc9\xac",
        // "CFReadStreamClose" / M(Xor2) / S(213) / L(17)
        "\x84\x81\x95\xa2\xa6\xa3\x94\xb3\xb5\xa2\xa6\xaa\x84\xab\xa8\xb4\xa2\xc7",
        // "" / M(None) / S(0) / L(0)
        "\xd1\xff\x8d\x10\xe9\x66\xcb\x8e\x93\x08\x19\x45\x61\x27\x7c\xff\xdb\x19\xee\xa7\x75\x8f\x07\xff\x45\x40\xb9\xf7\x4e\x9f\x02\x4d",
        // "/System/Library/Frameworks/CoreFoundation.framework/CoreFoundation" / M(Xor3) / S(135) / L(66)
        "\xe5\x99\xb3\xb9\xbe\xaf\xa7\xe5\x86\xa3\xa8\xb8\xab\xb8\xb3\xe5\x8c\xb8\xab\xa7\xaf\xbd\xa5\xb8\xa1\xb9\xe5\x89\xa5\xb8\xaf\x8c\xa5\xbf\xa4\xae\xab\xbe\xa3\xa5\xa4\xe4\xac\xb8\xab\xa7\xaf\xbd\xa5\xb8\xa1\xe5\x89\xa5\xb8\xaf\x8c\xa5\xbf\xa4\xae\xab\xbe\xa3\xa5\xa4\xca",
        // "" / M(None) / S(0) / L(0)
        "\xd6\x66\xaa\x7f\xce\x57\xf4\xcf\x4c\xc3\x25\xbc\x95\x59\x33\x62\xc6\x53\xae\xa0\xc4\xff\x0e\x83\x28\x27\x66\x6a\x98\x73\x99\xc4",
        // "PKCS7_get0_signers" / M(Rot) / S(204) / L(18)
        "\x1c\x17\x0f\x1f\x03\x2b\x33\x31\x40\xfc\x2b\x3f\x35\x33\x3a\x31\x3e\x3f\xcc",
        // "CFStringCreateWithBytes" / M(Xor1) / S(46) / L(23)
        "\x6d\x68\x7d\x5a\x5c\x47\x40\x49\x6d\x5c\x4b\x4f\x5a\x4b\x79\x47\x5a\x46\x6c\x57\x5a\x4b\x5d\x2e\x53\xd6\x28\xf1\x1e\xd7\x4f\x30",
        // "2.0.2" / M(Xor1) / S(81) / L(5)
        "\x63\x7f\x61\x7f\x63\x51\x12\x49\x00\xac\x19\xea\x3c\xa0\x31\x7c",
        // "start" / M(Xor3) / S(255) / L(5)
        "\x7c\x7b\x6e\x7d\x7b\x0f\xbd\x83\xc5\xe6\x19\xbf\x0e\xbd\xd2\x0e",
        // "it.iltofa.Turms" / M(Xor4) / S(228) / L(15)
        "\x29\x34\x6e\x29\x2c\x34\x2f\x26\x21\x6e\x14\x35\x32\x2d\x33\x40",
        // "CFDictionaryCreateMutable" / M(Xor4) / S(188) / L(25)
        "\xbb\xbe\xbc\x91\x9b\x8c\x91\x97\x96\x99\x8a\x81\xbb\x8a\x9d\x99\x8c\x9d\xb5\x8d\x8c\x99\x9a\x94\x9d\xf8\x4f\x2c\x57\xbb\x77\x70\x1d\x95",
        // "d2i_PKCS7_bio" / M(Xor4) / S(129) / L(13)
        "\x74\x22\x79\x4f\x40\x5b\x53\x43\x27\x4f\x72\x79\x7f\x10\x86\x3f",
        // "glob_b" / M(Rot) / S(165) / L(6)
        "\x0c\x11\x14\x07\x04\x07\xa5\xc8\x62\x07\x04\xc5\x38\x37\xa7\x7f",
        // "BIO_free" / M(Xor4) / S(192) / L(8)
        "\x42\x49\x4f\x5f\x66\x72\x65\x65\x00\xbf\xd2\xb2\x11\xae\x4b\x8c",
        // "CFDataCreateMutable" / M(Xor2) / S(241) / L(19)
        "\xa6\xa3\xa1\x84\x91\x84\xa6\x97\x80\x84\x91\x80\xa8\x90\x91\x84\x87\x89\x80\xe5",
        // "" / M(None) / S(0) / L(0)
        "\xbc\x56\x1f\xa4\x92\x23\xcb\x79\x52\x9a\xf8\xd5\xcb\x08\xf1\xc1\x17\x92\x91\xe4\x07\x8e\xb3\x11\xaa\x54\x60\x29\xc4\xd1\x03\xd2",
        // "CC_SHA1_Init" / M(Xor1) / S(213) / L(12)
        "\x96\x96\x8a\x86\x9d\x94\xe4\x8a\x9c\xbb\xbc\xa1\xd5\x43\x4c\x31",
        // "%02X" / M(Xor4) / S(204) / L(4)
        "\xe5\xf0\xf2\x98\xc0\x33\x79\x7e\x33\x1c\x17\xf7\x05\xf2\x7c\xdc",
        // "CFDateFormatterCreate" / M(Xor1) / S(62) / L(21)
        "\x7d\x78\x7a\x5f\x4a\x5b\x78\x51\x4c\x53\x5f\x4a\x4a\x5b\x4c\x7d\x4c\x5b\x5f\x4a\x5b\x3e",
        // "/System/Library/Frameworks/IOKit.framework/IOKit" / M(Xor4) / S(178) / L(48)
        "\x3d\x41\x6b\x61\x66\x77\x7f\x3d\x5e\x7b\x70\x60\x73\x60\x6b\x3d\x54\x60\x73\x7f\x77\x65\x7d\x60\x79\x61\x3d\x5b\x5d\x59\x7b\x66\x3c\x74\x60\x73\x7f\x77\x65\x7d\x60\x79\x3d\x5b\x5d\x59\x7b\x66\x12",
        // "SecCertificateCopyData" / M(Xor3) / S(185) / L(22)
        "\x83\xb5\xb3\x93\xb5\xa2\xa4\xb9\xb6\xb9\xb3\xb1\xa4\xb5\x93\xbf\xa0\xa9\x94\xb1\xa4\xb1\xd0",
        // "CFReadStreamCreateWithFile" / M(Rot) / S(17) / L(26)
        "\x54\x57\x63\x76\x72\x75\x64\x85\x83\x76\x72\x7e\x54\x83\x76\x72\x85\x76\x68\x7a\x85\x79\x57\x7a\x7d\x76\x11\x49\x0c\x6e\x11\x5d\xf5\x0f\x32",
        // "CFNumberCreate" / M(Rot) / S(21) / L(14)
        "\x58\x5b\x63\x8a\x82\x77\x7a\x87\x58\x87\x7a\x76\x89\x7a\x15\x41",
        // "/System/Library/Frameworks/AppKit.framework/AppKit" / M(Xor2) / S(63) / L(50)
        "\x23\x5f\x75\x7f\x78\x69\x61\x23\x40\x65\x6e\x7e\x6d\x7e\x75\x23\x4a\x7e\x6d\x61\x69\x7b\x63\x7e\x67\x7f\x23\x4d\x7c\x7c\x47\x65\x78\x22\x6a\x7e\x6d\x61\x69\x7b\x63\x7e\x67\x23\x4d\x7c\x7c\x47\x65\x78\x0c",
        // "NSApplicationMain" / M(Xor2) / S(141) / L(17)
        "\xd1\xcc\xde\xef\xef\xf3\xf6\xfc\xfe\xeb\xf6\xf0\xf1\xd2\xfe\xf6\xf1\x9f",
        // "CC_SHA1_Init" / M(Xor1) / S(116) / L(12)
        "\x37\x37\x2b\x27\x3c\x35\x45\x2b\x3d\x1a\x1d\x00\x74\xef\xf5\x6e",
        // "." / M(Xor2) / S(187) / L(1)
        "\x85\xab\x91\x03\xc8\x53\x31\xe4\x0b\x0e\x54\x7f\x87\x81\x65\xc9",
        // "CC_SHA1_Final" / M(Xor3) / S(48) / L(13)
        "\x03\x03\x1f\x13\x08\x01\x71\x1f\x06\x29\x2e\x21\x2c\x40\x47\x95",
        // "CFStringCompare" / M(Rot) / S(204) / L(15)
        "\x0f\x12\x1f\x40\x3e\x35\x3a\x33\x0f\x3b\x39\x3c\x2d\x3e\x31\xcc",
        // "61:1E:5B:66:2C:59:3A:08:FF:58:D1:4A:E2:24:52:D1:98:DF:6C:60" / M(Xor4) / S(139) / L(59)
        "\xda\xdd\xd6\xdd\xa9\xd6\xd9\xae\xd6\xda\xda\xd6\xde\xaf\xd6\xd9\xd5\xd6\xdf\xad\xd6\xdc\xd4\xd6\xaa\xaa\xd6\xd9\xd4\xd6\xa8\xdd\xd6\xd8\xad\xd6\xa9\xde\xd6\xde\xd8\xd6\xd9\xde\xd6\xa8\xdd\xd6\xd5\xd4\xd6\xa8\xaa\xd6\xda\xaf\xd6\xda\xdc\xec\xdf\xac\xaf\x1c\xeb\x55\xb9\x61",
        // "_MASReceipt/receipt" / M(Xor2) / S(195) / L(19)
        "\x88\x9a\x96\x84\x85\xb2\xb4\xb2\xbe\xa7\xa3\xf8\xa5\xb2\xb4\xb2\xbe\xa7\xa3\xd7",
        // "CC_SHA1_Update" / M(Xor2) / S(21) / L(14)
        "\x46\x46\x5a\x56\x4d\x44\x34\x5a\x50\x75\x61\x64\x71\x60\x05\x87",
        // "CFDictionarySetValue" / M(Xor3) / S(60) / L(20)
        "\x12\x17\x15\x38\x32\x25\x38\x3e\x3f\x30\x23\x28\x02\x34\x25\x07\x30\x3d\x24\x34\x51",
        // "" / M(None) / S(0) / L(0)
        "\x71\x8b\xc3\xc0\x8e\x2b\x70\x05\x3b\x1c\x0e\xe0\xf8\x7f\xcf\x17\x7c\x11\x0a\x6e\xaf\xc8\xc1\xe9\xe4\x93\xe1\xd2\x95\x9f\x09\x4c",
        // "kSecMatchLimitAll" / M(Xor3) / S(157) / L(17)
        "\xc4\xfc\xca\xcc\xe2\xce\xdb\xcc\xc7\xe3\xc6\xc2\xc6\xdb\xee\xc3\xc3\xaf",
        // "CFBundleGetIdentifier" / M(Xor4) / S(237) / L(21)
        "\x1d\x18\x1c\x2b\x30\x3a\x32\x3b\x19\x3b\x2a\x17\x3a\x3b\x30\x2a\x37\x38\x37\x3b\x2c\x5e",
        // "PKCS7_verify" / M(Xor3) / S(205) / L(12)
        "\x8d\x96\x9e\x8e\xea\x82\xab\xb8\xaf\xb4\xbb\xa4\xdd\xb6\x7c\xe5",
        // "en0" / M(Rot) / S(27) / L(3)
        "\x80\x89\x4b\x1b\xd9\x87\x3c\x62\xc9\x75\x04\x95\xa7\xd4\xc2\x03",
        // "kCFTypeArrayCallBacks" / M(Rot) / S(8) / L(21)
        "\x73\x4b\x4e\x5c\x81\x78\x6d\x49\x7a\x7a\x69\x81\x4b\x69\x74\x74\x4a\x69\x6b\x73\x7b\x08",
        // "" / M(None) / S(0) / L(0)
        "\x5f\xdc\xc6\xeb\x0f\x71\xf1\x00\x15\x7f\xd9\x98\xdf\xeb\x50\xc1\x6f\xcc\x48\xf2\x3c\x64\xc9\x24\x2c\xe6\xf9\xa2\x1c\xfe\x13\x3b",
        // "61:1E:5B:66:2C:59:3A:08:FF:58:D1:4A:E2:24:52:D1:98:DF:6C:60" / M(Xor2) / S(220) / L(59)
        "\xae\xa9\xa2\xa9\xdd\xa2\xad\xda\xa2\xae\xae\xa2\xaa\xdb\xa2\xad\xa1\xa2\xab\xd9\xa2\xa8\xa0\xa2\xde\xde\xa2\xad\xa0\xa2\xdc\xa9\xa2\xac\xd9\xa2\xdd\xaa\xa2\xaa\xac\xa2\xad\xaa\xa2\xdc\xa9\xa2\xa1\xa0\xa2\xdc\xde\xa2\xae\xdb\xa2\xae\xa8\x98\x75\x68\xf4\xa7\x38\xb2\x18\xe5",
        // "%02X:" / M(Xor1) / S(186) / L(5)
        "\x9f\x8a\x88\xe2\x80\xba\x6b\xa0\x2d\x8a\xd4\x97\xb3\x15\x1a\x74",
        // "start" / M(Xor3) / S(18) / L(5)
        "\x51\x56\x43\x50\x56\x22\x0d\x95\x72\x52\x85\xc8\x33\x4c\xb9\x4a",
        // "dlopen" / M(Xor1) / S(48) / L(6)
        "\x54\x5c\x5f\x40\x55\x5e\x30\x4c\xf0\x26\xc4\x84\xdc\xa7\x7b\xc9",
        // "" / M(None) / S(0) / L(0)
        "\x06\x8e\x06\x60\xa0\xe3\xc6\xbb\xa2\x3e\x26\xbc\x8b\x5c\x1f\xc0\x67\xfa\xd8\xf2\x82\x0a\x39\x24\xd6\x37\xe4\xae\xd1\x0e\x39\x5a",
        // "kSecMatchLimit" / M(Xor1) / S(73) / L(14)
        "\x22\x1a\x2c\x2a\x04\x28\x3d\x2a\x21\x05\x20\x24\x20\x3d\x49\xa0",
        // "IORegistryEntryCreateCFProperty" / M(Xor3) / S(212) / L(31)
        "\xbd\xbb\xa6\x91\x93\x9d\x87\x80\x86\x8d\xb1\x9a\x80\x86\x8d\xb7\x86\x91\x95\x80\x91\xb7\xb2\xa4\x86\x9b\x84\x91\x86\x80\x8d\xf4",
        // "" / M(None) / S(0) / L(0)
        "\xdd\x9b\x71\x22\x5f\xf3\xa1\xae\x64\x4d\x19\x49\xe1\xbf\xea\x08\x10\xc2\xbe\x6e\x2d\x05\x01\xab\xb1\x6b\xef\x7d\x84\xd3\x19\xf3",
        // "X509_free" / M(Xor1) / S(206) / L(9)
        "\x96\xfb\xfe\xf7\x91\xa8\xbc\xab\xab\xce\x94\x51\x67\xad\x26\x18",
        // "EVP_DigestInit" / M(Xor1) / S(77) / L(14)
        "\x08\x1b\x1d\x12\x09\x24\x2a\x28\x3e\x39\x04\x23\x24\x39\x4d\x52",
        // "X509_STORE_add_cert" / M(Rot) / S(203) / L(19)
        "\x23\x00\xfb\x04\x2a\x1e\x1f\x1a\x1d\x10\x2a\x2c\x2f\x2f\x2a\x2e\x30\x3d\x3f\xcb",
        // "%02x:" / M(Xor4) / S(120) / L(5)
        "\xa5\xb0\xb2\xf8\xba\x80\x7f\xec\xe8\x7f\x0e\xb8\x6b\x4d\x2e\xda",
        // "CFDictionaryGetValue" / M(Xor1) / S(196) / L(20)
        "\x87\x82\x80\xad\xa7\xb0\xad\xab\xaa\xa5\xb6\xbd\x83\xa1\xb0\x92\xa5\xa8\xb1\xa1\xc4",
        // "IORegistryEntryGetParentEntry" / M(Xor2) / S(208) / L(29)
        "\xbf\xb9\xa4\x93\x91\x9f\x85\x82\x84\x8f\xb3\x98\x82\x84\x8f\xb1\x93\x82\xa6\x97\x84\x93\x98\x82\xb3\x98\x82\x84\x8f\xf6\xee\xef\x86\x18\x3b\x75\xe3\x9f",
        // "" / M(None) / S(0) / L(0)
        "\xda\xd8\xa2\x41\x7b\x60\xd5\x5f\xe9\x16\x34\x14\xdc\x34\x22\x2a\x85\x79\xbf\x53\x89\x66\x41\xe9\xc0\x98\x7f\x1e\x78\x41\xd8\x04",
        // "kCFTypeDictionaryKeyCallBacks" / M(Xor3) / S(75) / L(29)
        "\x1a\x32\x37\x25\x08\x01\x14\x35\x18\x12\x05\x18\x1e\x1f\x10\x03\x08\x3a\x14\x08\x32\x10\x1d\x1d\x33\x10\x12\x1a\x02\x71\x66\x40\x22\xe3\xd2\xad\x9e\x72",
        // "CFDataCreate" / M(Xor1) / S(255) / L(12)
        "\xbc\xb9\xbb\x9e\x8b\x9e\xbc\x8d\x9a\x9e\x8b\x9a\xff\xc5\xfe\xed",
        // "" / M(None) / S(0) / L(0)
        "\x63\x03\x15\xcc\xe2\xb6\xe5\xe5\x3c\x44\xaf\xd9\x7b\x9a\x6a\xc8\xaa\x56\xfd\x65\x5b\xd7\x1a\xd6\x74\x9f\x2c\xae\x7d\x1f\x7a\x04",
        // "CFDateFormatterSetFormat" / M(Rot) / S(56) / L(24)
        "\x7b\x7e\x7c\x99\xac\x9d\x7e\xa7\xaa\xa5\x99\xac\xac\x9d\xaa\x8b\x9d\xac\x7e\xa7\xaa\xa5\x99\xac\x38\x03\xfc\xfe\x30\x5a\x05\xeb\x88",
        // "CFEqual" / M(Xor1) / S(239) / L(7)
        "\xac\xa9\xaa\x9e\x9a\x8e\x83\xef\x04\x87\x46\xea\x36\x5c\x72\xf7",
        // "%02x" / M(Xor3) / S(130) / L(4)
        "\xb7\xa2\xa0\xea\x92\x1f\xcc\x24\x33\x2c\x45\x53\x8d\x9f\xc8\xa4",
        // "" / M(None) / S(0) / L(0)
        "\xda\xef\x65\x03\xb9\x88\xbf\xbd\xce\x68\x56\x24\x0b\x69\xce\xea\x23\xe0\xf1\xc9\xc4\xb9\x89\x5f\x29\x26\x67\xdf\xfd\x5d\x25\x7e",
        // "kCFTypeDictionaryValueCallBacks" / M(Xor4) / S(149) / L(31)
        "\xcb\xe3\xe6\xf4\xd9\xd0\xc5\xe4\xc9\xc3\xd4\xc9\xcf\xce\xc1\xd2\xd9\xf6\xc1\xcc\xd5\xc5\xe3\xc1\xcc\xcc\xe2\xc1\xc3\xcb\xd3\xa0",
        // "it.iltofa.Turms" / M(Xor1) / S(32) / L(15)
        "\x49\x54\x0e\x49\x4c\x54\x4f\x46\x41\x0e\x74\x55\x52\x4d\x53\x20",
        // "d2i_PKCS7_bio" / M(Xor2) / S(106) / L(13)
        "\x1e\x48\x13\x25\x2a\x31\x39\x29\x4d\x25\x18\x13\x15\x7a\x5d\x22",
        // "" / M(None) / S(0) / L(0)
        "\x76\x46\x83\x57\x8f\x01\xf9\xc0\x32\x1d\x74\x91\x13\x61\x4c\x15\x76\x05\x46\x9e\x22\x1d\xde\x5b\x78\x1e\x7f\x61\xf8\xbe\xc4\x0d",
        // "CFReadStreamCreateWithFile" / M(Xor2) / S(111) / L(26)
        "\x0f\x0a\x1e\x29\x2d\x28\x1f\x38\x3e\x29\x2d\x21\x0f\x3e\x29\x2d\x38\x29\x1b\x25\x38\x24\x0a\x25\x20\x29\x4c\x1d\xcf\x29\x94\x0a\x18\x0d\xb6",
        // "IOIteratorNext" / M(Xor4) / S(244) / L(14)
        "\x09\x0f\x09\x34\x25\x32\x21\x34\x2f\x32\x0e\x25\x38\x34\x40\xfe",
        // "CFDictionaryAddValue" / M(Xor1) / S(203) / L(20)
        "\x88\x8d\x8f\xa2\xa8\xbf\xa2\xa4\xa5\xaa\xb9\xb2\x8a\xaf\xaf\x9d\xaa\xa7\xbe\xae\xcb",
        // "" / M(None) / S(0) / L(0)
        "\x35\x39\xaf\x7a\x55\x6d\x9e\x0e\x69\xec\x82\x26\x96\x6c\x81\xcd\xad\x48\x5f\x9b\x64\x66\xba\x68\x10\x4a\xa7\x15\xab\x8c\x21\x24",
        // "SecKeychainOpen" / M(Xor2) / S(44) / L(15)
        "\x6f\x59\x5f\x77\x59\x45\x5f\x54\x5d\x55\x52\x73\x4c\x59\x52\x3c",
        // "CFArrayGetValueAtIndex" / M(Xor2) / S(194) / L(22)
        "\x96\x93\x94\xa7\xa7\xb4\xac\x92\xb0\xa1\x83\xb4\xb9\xa0\xb0\x94\xa1\x9c\xbb\xb1\xb0\xad\xd5",
        // "/usr/lib/libSystem.dylib" / M(Xor4) / S(122) / L(24)
        "\x95\xcf\xc9\xc8\x95\xd6\xd3\xd8\x95\xd6\xd3\xd8\xe9\xc3\xc9\xce\xdf\xd7\x94\xde\xc3\xd6\xd3\xd8\xba\x10\x7e\x26\xca\x0a\x1e\xbc\x88",
        // "RTLD_MAIN_ONLY" / M(Xor2) / S(99) / L(14)
        "\x21\x27\x3f\x37\x2c\x3e\x32\x3a\x3d\x2c\x3c\x3d\x3f\x2a\x73\xe1",
        // "CFBundleGetMainBundle" / M(Xor1) / S(197) / L(21)
        "\x86\x83\x87\xb0\xab\xa1\xa9\xa0\x82\xa0\xb1\x88\xa4\xac\xab\x87\xb0\xab\xa1\xa9\xa0\xc5",
        // "CFBundleGetValueForInfoDictionaryKey" / M(Xor3) / S(131) / L(36)
        "\xeb\xee\xea\xdd\xc6\xcc\xc4\xcd\xef\xcd\xdc\xfe\xc9\xc4\xdd\xcd\xee\xc7\xda\xe1\xc6\xce\xc7\xec\xc1\xcb\xdc\xc1\xc7\xc6\xc9\xda\xd1\xe3\xcd\xd1\xa8",
        // "" / M(None) / S(0) / L(0)
        "\xb3\x87\x0e\xed\xca\xdf\x94\xa8\x58\xfe\x3e\x87\xb8\x77\xa1\x0f\x0e\x35\xba\xe3\x13\x37\xec\x11\x85\x28\x6b\x68\xa2\xbe\x7a\xc1",
        // "CFDataGetLength" / M(Xor4) / S(191) / L(15)
        "\xb3\xb6\xb4\x91\x84\x91\xb7\x95\x84\xbc\x95\x9e\x97\x84\x98\xf0",
        // "CFURLCreateFromFileSystemRepresentation" / M(Xor1) / S(173) / L(39)
        "\xee\xeb\xf8\xff\xe1\xee\xdf\xc8\xcc\xd9\xc8\xeb\xdf\xc2\xc0\xeb\xc4\xc1\xc8\xfe\xd4\xde\xd9\xc8\xc0\xff\xc8\xdd\xdf\xc8\xde\xc8\xc3\xd9\xcc\xd9\xc4\xc2\xc3\xad\xd7\x9a\xe8\x10\x6e\x7c\x4f\x59",
        // "" / M(None) / S(0) / L(0)
        "\x94\x84\xe7\x0f\xb3\x09\x2c\x9e\x3a\x2a\xe0\x81\x53\x82\x7c\xff\xc4\x7f\xa9\x43\xe9\x63\xaa\xf2\xf3\x8a\x05\xba\x2b\x8a\x7c\xb9",
        // "" / M(None) / S(0) / L(0)
        "\xc3\x14\xa6\x37\x23\x1f\x92\x0e\x71\x3b\x39\xd0\x4e\x88\x66\x93\x34\xe1\x62\xe8\x92\xf0\x44\xda\xc0\xd3\x69\x7c\xe5\x0c\x0b\x2c",
        // "" / M(None) / S(0) / L(0)
        "\xb9\xa5\x47\x83\x34\xf3\x99\x31\x4b\xc8\xe0\x01\xd0\xba\xad\x19\xc9\x32\x51\xaf\xa4\x6f\xae\x97\x5b\x01\xf0\xa0\xeb\x9f\x75\x3f",
        // "X509_get_ext_by_OBJ" / M(Rot) / S(223) / L(19)
        "\x37\x14\x0f\x18\x3e\x46\x44\x53\x3e\x44\x57\x53\x3e\x41\x58\x3e\x2e\x21\x29\xdf",
        // "CC_SHA1_Final" / M(Xor1) / S(148) / L(13)
        "\xd7\xd7\xcb\xc7\xdc\xd5\xa5\xcb\xd2\xfd\xfa\xf5\xf8\x94\xe5\xad",
        // "X509_free" / M(Xor2) / S(108) / L(9)
        "\x24\x49\x4c\x45\x23\x1a\x0e\x19\x19\x7c\x26\x8e\xf9\x64\x3a\x48",
        // "BIO_free" / M(Rot) / S(99) / L(8)
        "\xa5\xac\xb2\xc2\xc9\xd5\xc8\xc8\x63\x9f\x6c\x61\x0d\x34\x39\xa0",
        // "%02X" / M(Xor4) / S(147) / L(4)
        "\x15\x00\x02\x68\x30\xa2\xc9\x32\x9b\x2f\xaa\x01\x15\xbf\x5d\x89",
        // "" / M(None) / S(0) / L(0)
        "\xf0\x71\xef\x4c\xb8\xac\xe5\x1a\x18\x30\x96\xe2\x4b\xd4\x2b\x28\x78\x68\x8b\x45\x21\x6c\xb6\x79\xb5\xd6\x93\xe7\x3b\xec\x4b\x30",
        // "" / M(None) / S(0) / L(0)
        "\xb0\xb0\x6a\xed\x6e\xd8\xee\xa0\xb9\xe8\x24\x5f\x4d\x42\xe0\xe1\x4c\x1a\x0c\x03\x63\x88\xf4\xbf\xc1\x3f\xe1\xca\x3e\x0c\x2b\x77",
        // "CFBundleUnloadExecutable" / M(Xor4) / S(174) / L(24)
        "\x2d\x28\x2c\x1b\x00\x0a\x02\x0b\x3b\x00\x02\x01\x0f\x0a\x2b\x16\x0b\x0d\x1b\x1a\x0f\x0c\x02\x0b\x6e\xe2\xe5\x75\xf5\x5e\x98\xae\x67",
        // "61:1e:5b:66:2c:59:3a:08:ff:58:d1:4a:e2:24:52:d1:98:df:6c:60" / M(Xor3) / S(98) / L(59)
        "\x90\x97\x9c\x97\xc3\x9c\x93\xc4\x9c\x90\x90\x9c\x94\xc5\x9c\x93\x9f\x9c\x95\xc7\x9c\x96\x9e\x9c\xc0\xc0\x9c\x93\x9e\x9c\xc2\x97\x9c\x92\xc7\x9c\xc3\x94\x9c\x94\x92\x9c\x93\x94\x9c\xc2\x97\x9c\x9f\x9e\x9c\xc2\xc0\x9c\x90\xc5\x9c\x90\x96\xa6\x00\x79\xd4\x34\x94\x2f\x94\xc2",
        // "" / M(None) / S(0) / L(0)
        "\x76\xae\xbe\xec\x87\xe8\x48\x96\x1c\x71\x39\x1e\x08\x2e\x84\xf5\x14\x54\x06\x70\xae\x3e\x04\x38\x3a\xbc\x2e\x82\x51\x06\x58\x23",
        // "CFDataAppendBytes" / M(Xor3) / S(2) / L(17)
        "\x57\x52\x50\x75\x60\x75\x55\x64\x64\x71\x7a\x70\x56\x6d\x60\x71\x67\x14",
        // "CFDateFormatterSetFormat" / M(Rot) / S(235) / L(24)
        "\x2e\x31\x2f\x4c\x5f\x50\x31\x5a\x5d\x58\x4c\x5f\x5f\x50\x5d\x3e\x50\x5f\x31\x5a\x5d\x58\x4c\x5f\xeb\xae\x62\x5c\x67\x49\xef\x3f\x0a",
        // "Apple Root CA" / M(Xor4) / S(123) / L(13)
        "\xf1\xc0\xc0\xdc\xd5\x90\xe2\xdf\xdf\xc4\x90\xf3\xf1\xb0\xa7\x72",
        // "kSecMatchLimit" / M(Xor1) / S(131) / L(14)
        "\xe8\xd0\xe6\xe0\xce\xe2\xf7\xe0\xeb\xcf\xea\xee\xea\xf7\x83\x88",
        // "en0" / M(Xor3) / S(125) / L(3)
        "\xe8\xe3\xbd\x8d\xcb\x5c\x67\xf0\x20\x56\x72\xe6\x0f\x3a\xe2\x3c",
        // "kCFTypeArrayCallBacks" / M(Xor4) / S(132) / L(21)
        "\x33\x1b\x1e\x0c\x21\x28\x3d\x19\x2a\x2a\x39\x21\x1b\x39\x34\x34\x1a\x39\x3b\x33\x2b\x58",
        // "" / M(None) / S(0) / L(0)
        "\xcc\xb2\x25\x2f\x3a\xb2\x5d\x56\x05\xb7\xfc\xf3\xda\xb5\xba\x88\x04\x24\x9c\xbb\xbb\x25\x1f\x52\xe1\x0c\xc6\x57\xad\x95\x39\xc5",
        // "setDelegate:" / M(Xor1) / S(134) / L(12)
        "\xf5\xe3\xf2\xc2\xe3\xea\xe3\xe1\xe7\xf2\xe3\xbc\x86\x4e\xd1\x5d",
        // "PKCS7_free" / M(Rot) / S(29) / L(10)
        "\x6d\x68\x60\x70\x54\x7c\x83\x8f\x82\x82\x1d\xf9\x23\x01\x77\x42",
        // "" / M(None) / S(0) / L(0)
        "\x6c\x81\x21\x14\x53\xcf\x3a\x8c\x50\xe1\xd4\xf2\x83\xdf\x19\xe7\xdb\x22\xbb\xfa\x58\xc3\xea\x07\x46\xa4\x0d\x25\x5f\x8d\x1c\x79",
        // "" / M(None) / S(0) / L(0)
        "\x67\x1b\x1f\xe8\x32\xdb\x6f\x1c\x49\x79\x00\xc1\xcd\x5b\x68\xda\xc5\x22\x4a\x88\x35\xab\xa9\xf2\x1a\x06\xf5\x6b\x9c\x5e\x1d\x33",
        // "2.0.2" / M(Xor2) / S(129) / L(5)
        "\xa3\xbf\xa1\xbf\xa3\x91\xdc\xe5\xc3\x2c\xf1\x48\x69\x9d\x6c\x09",
        // "sk_num" / M(Xor4) / S(168) / L(6)
        "\xf3\xeb\xdf\xee\xf5\xed\x80\x3f\x85\x20\xad\x6a\xbc\xc4\xc9\x6d",
        // "611e5b662c593a08ff58d14ae22452d198df6c60" / M(Xor2) / S(253) / L(40)
        "\xfa\xfd\xfd\xa9\xf9\xae\xfa\xfa\xfe\xaf\xf9\xf5\xff\xad\xfc\xf4\xaa\xaa\xf9\xf4\xa8\xfd\xf8\xad\xa9\xfe\xfe\xf8\xf9\xfe\xa8\xfd\xf5\xf4\xa8\xaa\xfa\xaf\xfa\xfc\xcc\xa8\x91\xce\x16\xe4\x3d\xce\xf8",
        // "/usr/lib/libobjc.dylib" / M(Xor4) / S(70) / L(22)
        "\x65\x3f\x39\x38\x65\x26\x23\x28\x65\x26\x23\x28\x25\x28\x20\x29\x64\x2e\x33\x26\x23\x28\x4a",
        // "." / M(Xor3) / S(119) / L(1)
        "\xa9\x87\x9b\xb6\xd0\x18\x2a\xf8\x04\xc4\xbd\xc1\x80\x26\x17\x4b",
        // "" / M(None) / S(0) / L(0)
        "\x98\x5a\xf2\xc2\x11\xbd\x7f\x01\x5c\x99\xb0\xd0\x8d\x3e\x5e\x53\x8a\x07\x30\xf3\xf1\xbd\x5c\x33\x82\xc4\xf5\x70\xc9\xb1\x9d\x47",
        // "globfree" / M(Xor4) / S(92) / L(8)
        "\xa7\xac\xaf\xa2\xa6\xb2\xa5\xa5\xc0\x84\x7c\x86\x5c\x49\x15\xb2",
        // "X509_STORE_new" / M(Xor4) / S(85) / L(14)
        "\x08\x65\x60\x69\x0f\x03\x04\x1f\x02\x15\x0f\x3e\x35\x27\x50\xf4",
        // "" / M(None) / S(0) / L(0)
        "\x1c\x66\x11\xfd\xce\x29\x7c\x72\x97\x42\x58\x42\xba\xeb\x96\xe6\x84\x31\x75\x2c\x95\x6b\x95\x50\x3e\x8b\xb1\x14\xef\x55\x85\xea",
        // "strncmp" / M(Xor3) / S(137) / L(7)
        "\xea\xed\xeb\xf7\xfa\xf4\xe9\x99\x76\x0b\x14\x4e\x90\x36\x0e\xf9",
        // "CFDateFormatterSetFormat" / M(Rot) / S(38) / L(24)
        "\x69\x6c\x6a\x87\x9a\x8b\x6c\x95\x98\x93\x87\x9a\x9a\x8b\x98\x79\x8b\x9a\x6c\x95\x98\x93\x87\x9a\x26\x79\xfd\x32\xdc\x95\x48\x97\xb0",
        // "kSecMatchSubjectContains" / M(Xor4) / S(66) / L(24)
        "\xe9\xd1\xe7\xe1\xcf\xe3\xf6\xe1\xea\xd1\xf7\xe0\xe8\xe7\xe1\xf6\xc1\xed\xec\xf6\xe3\xeb\xec\xf1\x82\x97\xc4\x18\xc4\x3c\xd1\xe2\xd4",
        // "" / M(None) / S(0) / L(0)
        "\x01\x6d\x78\x4b\x84\x72\xbd\xa3\x83\xfe\x7e\xc4\x28\xf0\x9e\x31\x85\x6a\xbe\xb4\xc1\x47\xc2\x31\x65\xa3\x84\x83\xa5\x09\xb4\xf3",
        // "" / M(None) / S(0) / L(0)
        "\xbf\x59\xc3\xf5\xc2\xa5\x48\x52\xab\x0b\x6e\xe0\xaa\x4d\x8d\x0c\x26\x0d\x8f\x6b\xb0\x7b\x36\x0d\xad\x1e\x87\x8e\xaf\x17\x5b\x30",
        // "exit" / M(Xor1) / S(232) / L(4)
        "\x8d\x90\x81\x9c\xe8\x2a\x84\x8d\x5b\xfd\x08\xc3\x41\x0b\x60\x86",
        // "longjmp" / M(Xor1) / S(24) / L(7)
        "\x74\x77\x76\x7f\x72\x75\x68\x18\xd3\xac\x2d\xb9\x74\xd3\x3a\x6b",
        // "." / M(Xor2) / S(138) / L(1)
        "\xb4\x9a\x06\x19\x27\x6c\xff\x88\xce\x37\x28\x5d\x21\x3e\x10\x75",
        // "" / M(None) / S(0) / L(0)
        "\x52\x72\x56\x48\x46\x50\xa3\x79\x44\xb1\x24\x55\x97\x47\xfb\x57\xf6\x66\xfc\x16\x59\x9d\x98\x8f\x06\x51\x9f\x7a\x5f\xf7\xae\x32",
        // "EVP_DigestInit" / M(Xor2) / S(171) / L(14)
        "\xfe\xed\xeb\xe4\xff\xd2\xdc\xde\xc8\xcf\xf2\xd5\xd2\xcf\xbb\xaf",
        // "BIO_write" / M(Xor4) / S(35) / L(9)
        "\x72\x79\x7f\x6f\x47\x42\x59\x44\x55\x30\x77\x6f\x09\x57\x74\x92",
        // "SHA1_Update" / M(Xor3) / S(252) / L(11)
        "\x5f\x44\x4d\x3d\x53\x59\x7c\x68\x6d\x78\x69\x0c\x2c\x2c\x04\x3f",
        // "/usr/lib/libobjc.dylib" / M(Xor4) / S(122) / L(22)
        "\xd9\x83\x85\x84\xd9\x9a\x9f\x94\xd9\x9a\x9f\x94\x99\x94\x9c\x95\xd8\x92\x8f\x9a\x9f\x94\xf6",
        // "" / M(None) / S(0) / L(0)
        "\xc7\xbc\xbb\x54\xb6\x46\x11\xce\x16\x29\x6f\x99\x21\x99\x75\x1e\x18\x36\xef\x35\xb8\x63\x82\x20\xab\x99\x8d\xf2\x99\x5d\x68\x75",
        // "CC_SHA1" / M(Xor3) / S(103) / L(7)
        "\x34\x34\x28\x24\x3f\x36\x46\x77\x95\x15\x8e\x41\x01\xbb\x56\xb9",
        // "" / M(None) / S(0) / L(0)
        "\x9a\xfb\xe6\xfd\x25\x62\xe1\xd8\x4e\xc6\x27\x24\xe4\x34\x0c\xe6\xa5\x05\xed\x6d\x5e\x51\xca\x51\x22\xbf\x6e\xb9\x21\xae\xec\x3e",
        // "" / M(None) / S(0) / L(0)
        "\xdb\xa9\x72\xfd\xb4\x41\x11\x31\x90\xe9\x48\x4a\x05\x31\x55\x59\x77\xcd\x83\xe0\x3c\xb9\x88\x5c\x20\x3c\x8a\x27\xae\xa0\xc6\x1c",
        // "" / M(None) / S(0) / L(0)
        "\x35\x3d\xdb\x99\x2f\xdb\x90\x4b\x8e\x1f\xe9\x7e\x15\x10\xc9\xc5\x9f\x31\x2e\xf9\x00\x4c\x77\xbf\x73\x35\x21\x1a\x11\x36\xa1\x45",
        // "IOIteratorNext" / M(Xor3) / S(54) / L(14)
        "\x0f\x09\x0f\x32\x23\x34\x27\x32\x29\x34\x08\x23\x3e\x32\x46\x26",
        // "_MASReceipt" / M(Xor3) / S(78) / L(11)
        "\x01\x13\x1f\x0d\x0c\x3b\x3d\x3b\x37\x2e\x2a\x5e\x68\x58\x9f\xbd",
        // "setjmp" / M(Xor3) / S(235) / L(6)
        "\x88\x9e\x8f\x91\x96\x8b\xfb\x07\xa0\x63\x34\x9e\xa2\xad\x2a\x15",
        // "/System/Library/Frameworks/Security.framework/Security" / M(Rot) / S(118) / L(54)
        "\xa5\xc9\xef\xe9\xea\xdb\xe3\xa5\xc2\xdf\xd8\xe8\xd7\xe8\xef\xa5\xbc\xe8\xd7\xe3\xdb\xed\xe5\xe8\xe1\xe9\xa5\xc9\xdb\xd9\xeb\xe8\xdf\xea\xef\xa4\xdc\xe8\xd7\xe3\xdb\xed\xe5\xe8\xe1\xa5\xc9\xdb\xd9\xeb\xe8\xdf\xea\xef\x76",
        // "PKCS7_get0_signers" / M(Xor2) / S(30) / L(18)
        "\x5d\x46\x4e\x5e\x3a\x52\x6a\x68\x79\x3d\x52\x7e\x64\x6a\x63\x68\x7f\x7e\x0d",
        // "CFStringGetFileSystemRepresentation" / M(Xor3) / S(136) / L(35)
        "\xef\xea\xff\xd8\xde\xc5\xc2\xcb\xeb\xc9\xd8\xea\xc5\xc0\xc9\xff\xd5\xdf\xd8\xc9\xc1\xfe\xc9\xdc\xde\xc9\xdf\xc9\xc2\xd8\xcd\xd8\xc5\xc3\xc2\xac",
        // "exit" / M(Rot) / S(116) / L(4)
        "\xd9\xec\xdd\xe8\x74\x1b\xea\xc5\x41\x39\x65\xe4\xe3\x93\x10\x61",
        // "OpenSSL_add_all_digests" / M(Xor4) / S(191) / L(23)
        "\xaf\x90\x85\x8e\xb3\xb3\xac\xbf\x81\x84\x84\xbf\x81\x8c\x8c\xbf\x84\x89\x87\x85\x93\x94\x93\xe0\x19\x55\x40\xfc\x88\x60\xd6\x3c",
        // "receipt" / M(Rot) / S(48) / L(7)
        "\xa2\x95\x93\x95\x99\xa0\xa4\x30\xa5\x9d\xab\x71\x8c\xf2\xd5\xfe",
        // "CFArrayCreateMutable" / M(Xor1) / S(173) / L(20)
        "\xee\xeb\xec\xdf\xdf\xcc\xd4\xee\xdf\xc8\xcc\xd9\xc8\xe0\xd8\xd9\xcc\xcf\xc1\xc8\xad",
        // "" / M(None) / S(0) / L(0)
        "\x5b\x28\x61\x87\x1c\x45\x90\xb1\x2d\x52\xb1\x42\xb9\x3c\xe4\x61\xc8\x55\x05\x93\x8e\x90\x7a\xf0\xe2\xb3\x38\xa7\xbe\x4b\xbb\xdc",
        // "/System/Library/Frameworks/Security.framework/Security" / M(Xor4) / S(194) / L(54)
        "\x81\xfd\xd7\xdd\xda\xcb\xc3\x81\xe2\xc7\xcc\xdc\xcf\xdc\xd7\x81\xe8\xdc\xcf\xc3\xcb\xd9\xc1\xdc\xc5\xdd\x81\xfd\xcb\xcd\xdb\xdc\xc7\xda\xd7\x80\xc8\xdc\xcf\xc3\xcb\xd9\xc1\xdc\xc5\x81\xfd\xcb\xcd\xdb\xdc\xc7\xda\xd7\xae",
        // "IOServiceGetMatchingServices" / M(Xor4) / S(209) / L(28)
        "\x7c\x7a\x66\x50\x47\x43\x5c\x56\x50\x72\x50\x41\x78\x54\x41\x56\x5d\x5c\x5b\x52\x66\x50\x47\x43\x5c\x56\x50\x46\x35\xab\xca\xf0\x34\x28\x4c\x71\x36",
        // "CFBundleIdentifier" / M(Rot) / S(62) / L(18)
        "\x81\x84\x80\xb3\xac\xa2\xaa\xa3\x87\xa2\xa3\xac\xb2\xa7\xa4\xa7\xa3\xb0\x3e",
        // "strncmp" / M(Xor2) / S(77) / L(7)
        "\x2e\x29\x2f\x33\x3e\x30\x2d\x5d\xe4\xff\x16\x66\xdc\x6b\xa1\x47",
        // "%02x:" / M(Xor1) / S(93) / L(5)
        "\x78\x6d\x6f\x25\x67\x5d\xb4\xd6\x7d\xe8\x8c\x59\x3d\xcc\x0e\x50",
        // "" / M(None) / S(0) / L(0)
        "\xf1\x96\xcc\xd2\x57\x8d\xe1\x3e\x68\xd8\xf3\x6c\xbd\xe7\x44\x83\x52\x6e\xe1\x6a\x77\x56\x8a\x7f\x36\xca\xba\x49\xed\x02\xd0\xef",
        // "CFStringGetFileSystemRepresentation" / M(Xor2) / S(233) / L(35)
        "\x8e\x8b\x9e\xb9\xbf\xa4\xa3\xaa\x8a\xa8\xb9\x8b\xa4\xa1\xa8\x9e\xb4\xbe\xb9\xa8\xa0\x9f\xa8\xbd\xbf\xa8\xbe\xa8\xa3\xb9\xac\xb9\xa4\xa2\xa3\xcd",
        // "SHA1_Init" / M(Xor2) / S(1) / L(9)
        "\x42\x59\x50\x20\x4e\x58\x7f\x78\x65\x11\x38\x14\x6d\xf8\x2a\x66",
        // "" / M(None) / S(0) / L(0)
        "\xea\xd8\x4e\x4c\x7f\xfd\x1c\x44\x02\x97\xb1\x24\x18\x24\x65\x62\x7c\x6d\xed\x75\x5d\xb8\x0b\x02\xac\xf3\x83\x0b\x0e\xe3\x21\x23",
        // "" / M(None) / S(0) / L(0)
        "\xd6\x5c\xba\x98\xce\x1f\x1d\xef\xf2\x73\x7c\x02\xf8\xd1\x73\x34\x1d\xc7\xc6\xe1\xf4\xec\xcd\xc6\x02\xf2\x91\xe6\x2e\xfc\x26\x12",
        // "" / M(None) / S(0) / L(0)
        "\xa5\x3d\xa7\x16\x2b\x93\xef\x48\x50\x26\xae\x7b\xc3\x1e\x35\xe6\xf1\x91\x79\x27\xb5\x25\xfc\xc3\xb7\x7c\xf0\xb8\xf4\x89\x00\xa9",
        // "OBJ_txt2obj" / M(Xor1) / S(209) / L(11)
        "\x9e\x93\x9b\x8e\xa5\xa9\xa5\xe3\xbe\xb3\xbb\xd1\x25\x29\x8e\x50",
        // "X509_STORE_new" / M(Xor4) / S(94) / L(14)
        "\xb8\xd5\xd0\xd9\xbf\xb3\xb4\xaf\xb2\xa5\xbf\x8e\x85\x97\xe0\x29",
        // "SKReceiptRefreshRequest" / M(Rot) / S(254) / L(23)
        "\x51\x49\x50\x63\x61\x63\x67\x6e\x72\x50\x63\x64\x70\x63\x71\x66\x50\x63\x6f\x73\x63\x71\x72\xfe\xe4\x5b\x8f\x61\xba\x9d\xa7\xa4",
        // "ASN1_get_object" / M(Rot) / S(140) / L(15)
        "\xcd\xdf\xda\xbd\xeb\xf3\xf1\x00\xeb\xfb\xee\xf6\xf1\xef\x00\x8c",
        // "61:1e:5b:66:2c:59:3a:08:ff:58:d1:4a:e2:24:52:d1:98:df:6c:60" / M(Xor1) / S(252) / L(59)
        "\xca\xcd\xc6\xcd\x99\xc6\xc9\x9e\xc6\xca\xca\xc6\xce\x9f\xc6\xc9\xc5\xc6\xcf\x9d\xc6\xcc\xc4\xc6\x9a\x9a\xc6\xc9\xc4\xc6\x98\xcd\xc6\xc8\x9d\xc6\x99\xce\xc6\xce\xc8\xc6\xc9\xce\xc6\x98\xcd\xc6\xc5\xc4\xc6\x98\x9a\xc6\xca\x9f\xc6\xca\xcc\xfc\xeb\xab\x8c\x9c\x89\x72\xd0\xa0",
        // "X509_STORE_add_cert" / M(Rot) / S(187) / L(19)
        "\x13\xf0\xeb\xf4\x1a\x0e\x0f\x0a\x0d\x00\x1a\x1c\x1f\x1f\x1a\x1e\x20\x2d\x2f\xbb",
        // "IORegistryEntryCreateCFProperty" / M(Xor3) / S(173) / L(31)
        "\x84\x82\x9f\xa8\xaa\xa4\xbe\xb9\xbf\xb4\x88\xa3\xb9\xbf\xb4\x8e\xbf\xa8\xac\xb9\xa8\x8e\x8b\x9d\xbf\xa2\xbd\xa8\xbf\xb9\xb4\xcd",
        // "CFStringCreateWithCString" / M(Xor3) / S(74) / L(25)
        "\x2f\x2a\x3f\x18\x1e\x05\x02\x0b\x2f\x1e\x09\x0d\x18\x09\x3b\x05\x18\x04\x2f\x3f\x18\x1e\x05\x02\x0b\x6c\x0b\x9c\xc1\xd8\x0d\xf6\x04\xd3",
        // "CFBundleUnloadExecutable" / M(Xor4) / S(166) / L(24)
        "\x25\x20\x24\x13\x08\x02\x0a\x03\x33\x08\x0a\x09\x07\x02\x23\x1e\x03\x05\x13\x12\x07\x04\x0a\x03\x66\x58\xef\x8e\x5c\x5c\x5d\x49\xee",
        // "IOMasterPort" / M(Xor4) / S(246) / L(12)
        "\x29\x2f\x2d\x01\x13\x14\x05\x12\x30\x0f\x12\x14\x60\xf0\xa1\x10",
        // "61:1e:5b:66:2c:59:3a:08:ff:58:d1:4a:e2:24:52:d1:98:df:6c:60" / M(Xor2) / S(121) / L(59)
        "\x0b\x0c\x07\x0c\x58\x07\x08\x5f\x07\x0b\x0b\x07\x0f\x5e\x07\x08\x04\x07\x0e\x5c\x07\x0d\x05\x07\x5b\x5b\x07\x08\x05\x07\x59\x0c\x07\x09\x5c\x07\x58\x0f\x07\x0f\x09\x07\x08\x0f\x07\x59\x0c\x07\x04\x05\x07\x59\x5b\x07\x0b\x5e\x07\x0b\x0d\x3d\xc2\x92\x3a\x96\xbc\x7f\xeb\x80",
        // "611e5b662c593a08ff58d14ae22452d198df6c60" / M(Xor3) / S(238) / L(40)
        "\x29\x2e\x2e\x7a\x2a\x7d\x29\x29\x2d\x7c\x2a\x26\x2c\x7e\x2f\x27\x79\x79\x2a\x27\x7b\x2e\x2b\x7e\x7a\x2d\x2d\x2b\x2a\x2d\x7b\x2e\x26\x27\x7b\x79\x29\x7c\x29\x2f\x1f\x7b\x4f\xc4\xe8\x53\x61\x63\x8d",
        // "EVP_DigestFinal" / M(Xor3) / S(204) / L(15)
        "\x99\x8a\x8c\x83\x98\xb5\xbb\xb9\xaf\xa8\x9a\xb5\xb2\xbd\xb0\xdc",
        // "CFDictionarySetValue" / M(Xor3) / S(186) / L(20)
        "\x8c\x89\x8b\xa6\xac\xbb\xa6\xa0\xa1\xae\xbd\xb6\x9c\xaa\xbb\x99\xae\xa3\xba\xaa\xcf",
        // "BIO_s_mem" / M(Rot) / S(35) / L(9)
        "\x65\x6c\x72\x82\x96\x82\x90\x88\x90\x23\x19\x36\x1d\xa7\xf1\xc9",
        // "dlopen" / M(Xor1) / S(239) / L(6)
        "\x8b\x83\x80\x9f\x8a\x81\xef\x65\xf4\x04\x77\xc4\x72\x69\xe5\x58",
        // "CFReadStreamClose" / M(Rot) / S(6) / L(17)
        "\x49\x4c\x58\x6b\x67\x6a\x59\x7a\x78\x6b\x67\x73\x49\x72\x75\x79\x6b\x06",
        // "CFBundleUnloadExecutable" / M(Xor4) / S(104) / L(24)
        "\x2b\x2e\x2a\x1d\x06\x0c\x04\x0d\x3d\x06\x04\x07\x09\x0c\x2d\x10\x0d\x0b\x1d\x1c\x09\x0a\x04\x0d\x68\xcc\xa3\x30\xa2\x51\x10\xbb\x45",
        // "/System/Library/Keychains/SystemRootCertificates.keychain" / M(Xor2) / S(134) / L(57)
        "\xeb\x97\xbd\xb7\xb0\xa1\xa9\xeb\x88\xad\xa6\xb6\xa5\xb6\xbd\xeb\x8f\xa1\xbd\xa7\xac\xa5\xad\xaa\xb7\xeb\x97\xbd\xb7\xb0\xa1\xa9\x96\xab\xab\xb0\x87\xa1\xb6\xb0\xad\xa2\xad\xa7\xa5\xb0\xa1\xb7\xea\xaf\xa1\xbd\xa7\xac\xa5\xad\xaa\xc4\x5a\xbf\x1a\xcf\x76\xcf\xbf\xe3",
        // "" / M(None) / S(0) / L(0)
        "\x23\x56\x53\x7c\x0e\x54\xfe\x37\xd5\x34\x68\xcd\x37\xa7\xc9\x3f\x3a\x15\xf6\x76\x08\x9c\x12\xfb\x1a\x51\xc2\xaf\x85\x9a\x4a\x18",
        // "CC_SHA1_Final" / M(Xor2) / S(34) / L(13)
        "\x71\x71\x6d\x61\x7a\x73\x03\x6d\x74\x5b\x5c\x53\x5e\x32\x1d\x48",
        // "EVP_DigestUpdate" / M(Xor4) / S(70) / L(16)
        "\xe3\xf0\xf6\xf9\xe2\xcf\xc1\xc3\xd5\xd2\xf3\xd6\xc2\xc7\xd2\xc3\xa6",
        // "IOObjectRelease" / M(Xor3) / S(115) / L(15)
        "\xca\xcc\xcc\xe1\xe9\xe6\xe0\xf7\xd1\xe6\xef\xe6\xe2\xf0\xe6\x83",
        // "SecCertificateCopyData" / M(Xor2) / S(26) / L(22)
        "\x5e\x68\x6e\x4e\x68\x7f\x79\x64\x6b\x64\x6e\x6c\x79\x68\x4e\x62\x7d\x74\x49\x6c\x79\x6c\x0d",
        // "Contents" / M(Xor2) / S(196) / L(8)
        "\x97\xbb\xba\xa0\xb1\xba\xa0\xa7\xd4\x8f\x0d\x14\xdc\x9f\x00\x19",
        // "CFBundleGetValueForInfoDictionaryKey" / M(Xor2) / S(171) / L(36)
        "\xcd\xc8\xcc\xfb\xe0\xea\xe2\xeb\xc9\xeb\xfa\xd8\xef\xe2\xfb\xeb\xc8\xe1\xfc\xc7\xe0\xe8\xe1\xca\xe7\xed\xfa\xe7\xe1\xe0\xef\xfc\xf7\xc5\xeb\xf7\x8e",
        // "kCFTypeDictionaryValueCallBacks" / M(Xor2) / S(209) / L(31)
        "\x9a\xb2\xb7\xa5\x88\x81\x94\xb5\x98\x92\x85\x98\x9e\x9f\x90\x83\x88\xa7\x90\x9d\x84\x94\xb2\x90\x9d\x9d\xb3\x90\x92\x9a\x82\xf1",
        // "Contents/_MASReceipt/receipt" / M(Xor1) / S(231) / L(28)
        "\xa4\x88\x89\x93\x82\x89\x93\x94\xc8\xb8\xaa\xa6\xb4\xb5\x82\x84\x82\x8e\x97\x93\xc8\x95\x82\x84\x82\x8e\x97\x93\xe7\x95\x84\xb7\xe8\x0a\x13\xbf\x1a",
        // "" / M(None) / S(0) / L(0)
        "\x50\x7a\x13\xf5\xe6\x8d\x1c\xb1\x56\x64\x30\x3e\x1c\x5f\xb1\xbc\x62\x9f\xf6\x44\x04\x65\x5f\x0a\x06\xd9\x69\x18\x6d\x70\x1a\x24",
        // "CFBundleGetIdentifier" / M(Xor3) / S(109) / L(21)
        "\xc0\xc5\xc1\xf6\xed\xe7\xef\xe6\xc4\xe6\xf7\xca\xe7\xe6\xed\xf7\xea\xe5\xea\xe6\xf1\x83",
        // "" / M(None) / S(0) / L(0)
        "\xde\x04\x9d\xf8\x8b\x6a\x8e\x7e\xb2\x57\x7f\xc3\x98\xac\x9b\x0f\x4a\xe9\x46\x6d\x2c\xd9\xfe\x2c\x9c\x0f\x58\xee\x02\xb2\x23\xd7",
        // "kSecClass" / M(Xor2) / S(153) / L(9)
        "\xe2\xda\xec\xea\xca\xe5\xe8\xfa\xfa\x89\x0a\xbc\x09\x2b\xae\x4d",
        // "CFDataCreateMutable" / M(Xor4) / S(104) / L(19)
        "\x63\x66\x64\x41\x54\x41\x63\x52\x45\x41\x54\x45\x6d\x55\x54\x41\x42\x4c\x45\x20",
        // "" / M(None) / S(0) / L(0)
        "\xb1\xd8\xbf\x58\xc7\x04\x20\x53\x54\x0d\xfe\x97\x39\x86\x0c\xda\x3d\x59\xbf\x7f\x6e\x67\x00\x06\x52\xc4\x39\x32\xa2\x89\x5e\x5f",
        // "EVP_get_digestbyname" / M(Xor3) / S(200) / L(20)
        "\x98\x8b\x8d\x82\xba\xb8\xa9\x82\xb9\xb4\xba\xb8\xae\xa9\xbf\xa4\xb3\xbc\xb0\xb8\xdd",
        // "sel_registerName" / M(Xor1) / S(33) / L(16)
        "\x52\x44\x4d\x7e\x53\x44\x46\x48\x52\x55\x44\x53\x6f\x40\x4c\x44\x21",
        // "Apple Root CA" / M(Xor3) / S(177) / L(13)
        "\x80\xb1\xb1\xad\xa4\xe1\x93\xae\xae\xb5\xe1\x82\x80\xc1\xe4\x1f",
        // "OpenSSL_add_all_digests" / M(Xor2) / S(66) / L(23)
        "\x2d\x12\x07\x0c\x31\x31\x2e\x3d\x03\x06\x06\x3d\x03\x0e\x0e\x3d\x06\x0b\x05\x07\x11\x16\x11\x62\xaf\x69\x0d\x90\x9a\xfa\x74\x23",
        // "CFArrayAppendValue" / M(Xor1) / S(133) / L(18)
        "\xc6\xc3\xc4\xf7\xf7\xe4\xfc\xc4\xf5\xf5\xe0\xeb\xe1\xd3\xe4\xe9\xf0\xe0\x85",
        // "sk_free" / M(Xor3) / S(45) / L(7)
        "\x4e\x56\x62\x5b\x4f\x58\x58\x3d\xe6\x99\x56\x44\xf2\x3f\xaf\xe7",
        // "CC_SHA1" / M(Xor4) / S(74) / L(7)
        "\xe3\xe3\xff\xf3\xe8\xe1\x91\xa0\x3f\x24\xfc\x61\x3d\xbc\x09\x16",
        // "SHA1_Update" / M(Xor4) / S(234) / L(11)
        "\xf3\xe8\xe1\x91\xff\xf5\xd0\xc4\xc1\xd4\xc5\xa0\xb0\xa4\x2d\xd0",
        // "dlsym" / M(Rot) / S(222) / L(5)
        "\x42\x4a\x51\x57\x4b\xde\xd5\x37\xca\x9a\x9c\x9a\x51\xaa\xe2\x93",
        // "SHA1_Final" / M(Rot) / S(134) / L(10)
        "\xd9\xce\xc7\xb7\xe5\xcc\xef\xf4\xe7\xf2\x86\xd5\x2d\xbf\xeb\x7b",
        // "IOMasterPort" / M(Xor1) / S(143) / L(12)
        "\xc6\xc0\xc2\xee\xfc\xfb\xea\xfd\xdf\xe0\xfd\xfb\x8f\x5c\x8c\xae",
        // "" / M(None) / S(0) / L(0)
        "\x03\x72\xc4\x01\x73\x15\x02\x70\xab\xec\xad\xac\x6b\x96\x2b\x95\xbc\x94\xb4\xcf\x0f\x9a\x79\x52\xd5\x4c\x93\xc5\x91\x0b\x50\xe3",
        // "SHA1_Final" / M(Xor3) / S(122) / L(10)
        "\xd9\xc2\xcb\xbb\xd5\xcc\xe3\xe4\xeb\xe6\x8a\x2d\xa8\x01\xca\x27",
        // "d2i_X509_bio" / M(Xor2) / S(189) / L(12)
        "\xc9\x9f\xc4\xf2\xf5\x98\x9d\x94\xf2\xcf\xc4\xc2\xad\xa2\x33\xbe",
        // "alloc" / M(Rot) / S(19) / L(5)
        "\x74\x7f\x7f\x82\x76\x13\x4a\x9c\x8d\x24\x67\x10\x4f\x88\xe8\xf4",
        // "" / M(None) / S(0) / L(0)
        "\x61\x12\xe9\x8c\x1b\x76\xae\xa7\x9d\x2a\xcb\x9e\x58\x66\x8d\x00\xee\xed\x9e\xdd\xf7\x52\x0e\x1f\x11\xb2\x17\xe6\xf9\x8c\xc1\x04",
        // "RTLD_MAIN_ONLY" / M(Rot) / S(254) / L(14)
        "\x50\x52\x4a\x42\x5d\x4b\x3f\x47\x4c\x5d\x4d\x4c\x4a\x57\xfe\xb7",
        // "CFStringCreateWithBytes" / M(Xor4) / S(36) / L(23)
        "\xc3\xc6\xd3\xf4\xf2\xe9\xee\xe7\xc3\xf2\xe5\xe1\xf4\xe5\xd7\xe9\xf4\xe8\xc2\xf9\xf4\xe5\xf3\x80\x8a\x7c\xe1\x9e\x5a\x64\x0c\xc8",
        // "611e5b662c593a08ff58d14ae22452d198df6c60" / M(Xor2) / S(71) / L(40)
        "\x40\x47\x47\x13\x43\x14\x40\x40\x44\x15\x43\x4f\x45\x17\x46\x4e\x10\x10\x43\x4e\x12\x47\x42\x17\x13\x44\x44\x42\x43\x44\x12\x47\x4f\x4e\x12\x10\x40\x15\x40\x46\x76\x84\xf6\x7f\x7d\x52\xff\x38\x17",
        // "globfree" / M(Xor3) / S(195) / L(8)
        "\xb4\xbf\xbc\xb1\xb5\xa1\xb6\xb6\xd3\xb7\x31\x43\x6b\x91\x42\x0f",
        // "CFDictionarySetValue" / M(Xor1) / S(192) / L(20)
        "\x83\x86\x84\xa9\xa3\xb4\xa9\xaf\xae\xa1\xb2\xb9\x93\xa5\xb4\x96\xa1\xac\xb5\xa5\xc0",
        // "d2i_X509_bio" / M(Xor1) / S(163) / L(12)
        "\xc7\x91\xca\xfc\xfb\x96\x93\x9a\xfc\xc1\xca\xcc\xa3\x22\xc2\x73",
        // "kCFBundleIdentifierKey" / M(Xor4) / S(191) / L(22)
        "\x42\x6a\x6f\x6b\x5c\x47\x4d\x45\x4c\x60\x4d\x4c\x47\x5d\x40\x4f\x40\x4c\x5b\x62\x4c\x50\x29",
        // "CFBundleVersion" / M(Xor1) / S(39) / L(15)
        "\x64\x61\x65\x52\x49\x43\x4b\x42\x71\x42\x55\x54\x4e\x48\x49\x27",
        // "CFURLCreateFromFileSystemRepresentation" / M(Rot) / S(224) / L(39)
        "\x23\x26\x35\x32\x2c\x23\x52\x45\x41\x54\x45\x26\x52\x4f\x4d\x26\x49\x4c\x45\x33\x59\x53\x54\x45\x4d\x32\x45\x50\x52\x45\x53\x45\x4e\x54\x41\x54\x49\x4f\x4e\xe0\x49\x07\x16\xe4\x85\x01\x3c\xbd",
        // "CFURLCreateWithFileSystemPathRelativeToBase" / M(Xor1) / S(254) / L(43)
        "\xbd\xb8\xab\xac\xb2\xbd\x8c\x9b\x9f\x8a\x9b\xa9\x97\x8a\x96\xb8\x97\x92\x9b\xad\x87\x8d\x8a\x9b\x93\xae\x9f\x8a\x96\xac\x9b\x92\x9f\x8a\x97\x88\x9b\xaa\x91\xbc\x9f\x8d\x9b\xfe\x44\xbe\x20\xd4\x15\x3d\xb2\x98",
        // "CFNumberCreate" / M(Xor2) / S(103) / L(14)
        "\x34\x31\x39\x02\x1a\x15\x12\x05\x34\x05\x12\x16\x03\x12\x77\xa5",
        // "" / M(None) / S(0) / L(0)
        "\x4e\x82\xe1\xcc\x3e\xc5\x08\xbc\xa6\xc6\x30\x32\xa2\x27\x43\xb5\x3a\xe1\xae\xaa\x12\xc4\x21\x5c\xc3\x67\xaa\x4f\x38\xe9\x9f\xe0",
        // "CFDataGetBytePtr" / M(Xor1) / S(66) / L(16)
        "\x01\x04\x06\x23\x36\x23\x05\x27\x36\x00\x3b\x36\x27\x12\x36\x30\x42",
        // "" / M(None) / S(0) / L(0)
        "\x84\x05\x6e\x25\xc4\x66\xbc\x39\xb3\xbd\x2e\x4c\x40\x4a\xfe\xb4\xee\xb0\x3c\xaa\x53\xd8\x64\x6e\xfd\xdc\x5d\x18\x00\xa2\xff\x6c",
        // "" / M(None) / S(0) / L(0)
        "\x13\x73\x04\x55\xe6\xf8\xb7\x85\xf3\xfe\x6e\x67\x70\x49\xf8\x55\x69\xce\xf1\x1f\xe8\xfd\xe0\x17\xf1\xfb\x21\x6e\x7f\xc4\x81\x2e",
        // "strncmp" / M(Xor4) / S(201) / L(7)
        "\xe3\xe4\xe2\xfe\xf3\xfd\xe0\x90\x32\xcf\xd3\x6f\x35\xc9\x7e\x8d",
        // "" / M(None) / S(0) / L(0)
        "\xca\x2f\xdd\xd8\xda\xb4\xbc\x98\x47\x6d\xb9\x34\xef\x67\x8d\xe6\xea\x62\xf7\x92\x22\x3b\xeb\xe5\xa9\xd4\x77\x0e\x1e\x02\xc8\x5a",
        // "" / M(None) / S(0) / L(0)
        "\xb7\x01\xae\x3c\x59\x90\xc8\x83\xe3\x8e\x28\x56\xda\xa5\x2c\x0c\x52\x4c\xf7\x71\xa5\x7e\x65\x6f\x78\xdc\x2a\x9d\x5a\x2b\xd0\xc3",
        // "" / M(None) / S(0) / L(0)
        "\x89\x2a\x0b\x98\x8c\xe8\xb9\xdd\x10\xaa\x9a\xb1\x96\x6c\x7f\x39\x5c\x9a\xe3\x80\xa8\x9c\x8a\xf3\x77\x84\x30\xc1\x03\xe0\xc9\x05",
        // "1.2.840.113635.100.6.11.1" / M(Xor4) / S(13) / L(25)
        "\x8b\x94\x88\x94\x82\x8e\x8a\x94\x8b\x8b\x89\x8c\x89\x8f\x94\x8b\x8a\x8a\x94\x8c\x94\x8b\x8b\x94\x8b\xba\x70\x1d\xc6\x9b\x74\x1c\xf0\x34",
        // "" / M(None) / S(0) / L(0)
        "\x7e\x7e\xbc\x28\x0f\xc0\x8d\x18\xf0\x5c\x8d\x24\xd6\xc8\xe4\x84\x65\xa5\x6d\x99\x28\xf0\xf9\x83\xab\x8d\xdc\x64\xd9\xf8\x50\xf8",
        // "SecKeychainSearchCopyNext" / M(Xor1) / S(147) / L(25)
        "\xc0\xf6\xf0\xd8\xf6\xea\xf0\xfb\xf2\xfa\xfd\xc0\xf6\xf2\xe1\xf0\xfb\xd0\xfc\xe3\xea\xdd\xf6\xeb\xe7\x93\xbc\xd8\x61\xe9\x30\xd0\x23\xdc",
        // "" / M(None) / S(0) / L(0)
        "\xb9\x3d\x24\x71\x95\xb6\x54\xd7\x35\x3e\x13\x0e\x74\x9a\xf9\xf3\xd8\xa3\xe4\x9f\x07\xd1\xb5\x86\xc4\x7e\x03\x9d\x2b\xd6\xc3\x19",
        // "kSecMatchLimit" / M(Xor2) / S(102) / L(14)
        "\x1d\x25\x13\x15\x3b\x17\x02\x15\x1e\x3a\x1f\x1b\x1f\x02\x76\xaa",
        // "CFURLCreateWithFileSystemPathRelativeToBase" / M(Xor3) / S(25) / L(43)
        "\x0e\x0b\x18\x1f\x01\x0e\x3f\x28\x2c\x39\x28\x1a\x24\x39\x25\x0b\x24\x21\x28\x1e\x34\x3e\x39\x28\x20\x1d\x2c\x39\x25\x1f\x28\x21\x2c\x39\x24\x3b\x28\x19\x22\x0f\x2c\x3e\x28\x4d\x61\x27\x82\x22\x55\x72\x91\x10",
        // "receipt" / M(Xor3) / S(107) / L(7)
        "\x09\x1e\x18\x1e\x12\x0b\x0f\x7b\x44\x53\x21\x00\x9b\x11\xe7\xb0",
        // "" / M(None) / S(0) / L(0)
        "\x27\x4f\x11\xc7\x54\x4a\x8b\x71\xcd\xc9\xb4\x88\xe9\x28\xce\x25\xc8\x5e\x60\x3b\xcd\x7a\x34\xa0\x16\xd5\x5f\xcd\x62\x0a\x4c\xc4",
        // "IOServiceGetMatchingServices" / M(Xor4) / S(202) / L(28)
        "\x7b\x7d\x61\x57\x40\x44\x5b\x51\x57\x75\x57\x46\x7f\x53\x46\x51\x5a\x5b\x5c\x55\x61\x57\x40\x44\x5b\x51\x57\x41\x32\x37\x34\x9b\xeb\x59\x12\xf2\xa8",
        // "61:1E:5B:66:2C:59:3A:08:FF:58:D1:4A:E2:24:52:D1:98:DF:6C:60" / M(Rot) / S(191) / L(59)
        "\xf5\xf0\xf9\xf0\x04\xf9\xf4\x01\xf9\xf5\xf5\xf9\xf1\x02\xf9\xf4\xf8\xf9\xf2\x00\xf9\xef\xf7\xf9\x05\x05\xf9\xf4\xf7\xf9\x03\xf0\xf9\xf3\x00\xf9\x04\xf1\xf9\xf1\xf3\xf9\xf4\xf1\xf9\x03\xf0\xf9\xf8\xf7\xf9\x03\x05\xf9\xf5\x02\xf9\xf5\xef\xbf\x46\x10\xa9\xe6\x03\xef\x02\x55",
        // "BIO_s_mem" / M(Rot) / S(187) / L(9)
        "\xfd\x04\x0a\x1a\x2e\x1a\x28\x20\x28\xbb\x7d\x8a\x99\xe6\xfe\x90",
        // "kSecClassCertificate" / M(Xor1) / S(201) / L(20)
        "\xa2\x9a\xac\xaa\x8a\xa5\xa8\xba\xba\x8a\xac\xbb\xbd\xa0\xaf\xa0\xaa\xa8\xbd\xac\xc9",
        // "_MASReceipt/receipt" / M(Xor2) / S(23) / L(19)
        "\x5c\x4e\x42\x50\x51\x66\x60\x66\x6a\x73\x77\x2c\x71\x66\x60\x66\x6a\x73\x77\x03",
        // "SecKeychainSearchCreateFromAttributes" / M(Xor4) / S(206) / L(37)
        "\xc7\xf1\xf7\xdf\xf1\xed\xf7\xfc\xf5\xfd\xfa\xc7\xf1\xf5\xe6\xf7\xfc\xd7\xe6\xf1\xf5\xe0\xf1\xd2\xe6\xfb\xf9\xd5\xe0\xe0\xe6\xfd\xf6\xe1\xe0\xf1\xe7\x94",
        // "IOMACAddress" / M(Xor3) / S(35) / L(12)
        "\x7a\x7c\x7e\x72\x70\x72\x57\x57\x41\x56\x40\x40\x33\x6c\x75\x31",
        // "" / M(None) / S(0) / L(0)
        "\x70\x4a\x5a\xeb\xb1\xd1\x25\xb2\xdb\x86\x3e\xcb\x03\x3a\x51\x24\x67\x2e\x3d\x5d\x74\xb8\xcd\x63\xde\xc7\x6d\x68\x99\xba\x4c\x1a",
        // "CFDateFormatterCreate" / M(Xor3) / S(180) / L(21)
        "\x89\x8c\x8e\xab\xbe\xaf\x8c\xa5\xb8\xa7\xab\xbe\xbe\xaf\xb8\x89\xb8\xaf\xab\xbe\xaf\xca",
        // "IOBSDNameMatching" / M(Xor2) / S(190) / L(17)
        "\xe5\xe3\xee\xff\xe8\xe2\xcd\xc1\xc9\xe1\xcd\xd8\xcf\xc4\xc5\xc2\xcb\xac",
        // "" / M(None) / S(0) / L(0)
        "\xee\x2e\x4a\x1d\x24\x93\xd3\xa4\xf6\x32\xfd\x70\x06\x7b\xd2\xb3\xf7\x98\x60\xf9\x71\x92\x77\x55\x5b\x2b\xa1\x94\xac\x91\xdf\x36",
        // "" / M(None) / S(0) / L(0)
        "\x8f\x0b\xce\x93\x34\xd5\x51\xb4\x36\xa5\xfc\x7a\x47\x3b\xeb\x88\x6b\x41\xc6\x05\x0d\xbb\x3b\xb7\x9f\x3e\x4f\x91\x5f\xfd\x52\x42",
        // "Contents" / M(Xor1) / S(22) / L(8)
        "\x55\x79\x78\x62\x73\x78\x62\x65\x16\x93\xdf\x69\x40\x16\xda\xa7",
        // "CFDataCreateMutable" / M(Xor1) / S(101) / L(19)
        "\x26\x23\x21\x04\x11\x04\x26\x17\x00\x04\x11\x00\x28\x10\x11\x04\x07\x09\x00\x65",
        // "SHA1" / M(Xor4) / S(134) / L(4)
        "\x33\x28\x21\x51\x60\xe9\x1f\xf8\xe7\xa3\xaf\xde\x90\xfa\x6c\xe1",
        // "IOServiceGetMatchingServices" / M(Rot) / S(218) / L(28)
        "\x23\x29\x2d\x3f\x4c\x50\x43\x3d\x3f\x21\x3f\x4e\x27\x3b\x4e\x3d\x42\x43\x48\x41\x2d\x3f\x4c\x50\x43\x3d\x3f\x4d\xda\x8a\x83\xf9\x6c\x35\x60\xe4\x93",
        // "CFBundleGetMainBundle" / M(Xor4) / S(85) / L(21)
        "\x0d\x08\x0c\x3b\x20\x2a\x22\x2b\x09\x2b\x3a\x03\x2f\x27\x20\x0c\x3b\x20\x2a\x22\x2b\x4e",
        // "SHA1_Init" / M(Xor3) / S(129) / L(9)
        "\xc2\xd9\xd0\xa0\xce\xd8\xff\xf8\xe5\x91\x87\xa6\xc4\x4b\x88\x5d",
        // "" / M(None) / S(0) / L(0)
        "\xfb\x58\x73\x8b\x34\x97\xc8\x6e\x2c\x1e\x32\x6c\x84\xbc\x1a\xa4\x8c\x63\x45\x1b\x31\xe1\xe4\x4c\x0f\x76\x1f\xa8\xa1\xba\xeb\xc8",
        // "" / M(None) / S(0) / L(0)
        "\x78\xdd\x47\xdb\xb6\x2e\x6e\xc7\xb5\x63\xc0\xf2\x89\x5a\xd3\x52\x2e\xd8\x71\xb7\x5c\x98\x56\x33\xdf\x96\x44\x58\xe0\x99\x00\x65",
        // "SHA1" / M(Xor2) / S(17) / L(4)
        "\x52\x49\x40\x30\x01\xe8\xc3\x42\x5c\x03\x87\x74\xc6\x57\xfd\x4e",
        // "CFStringCreateWithCString" / M(Xor1) / S(232) / L(25)
        "\xab\xae\xbb\x9c\x9a\x81\x86\x8f\xab\x9a\x8d\x89\x9c\x8d\xbf\x81\x9c\x80\xab\xbb\x9c\x9a\x81\x86\x8f\xe8\x35\xa5\x01\xde\x53\x77\xce\x0c",
        // "" / M(None) / S(0) / L(0)
        "\x69\xcf\xab\x92\x33\xc0\xd1\x3a\x35\x6c\xaa\x7a\x85\x4c\xf5\xdc\x96\x89\x63\x49\xd9\x52\xc7\x13\x74\x77\x2f\x24\xfb\xad\xf6\x7a",
        // "SecItemCopyMatching" / M(Xor1) / S(214) / L(19)
        "\x85\xb3\xb5\x9f\xa2\xb3\xbb\x95\xb9\xa6\xaf\x9b\xb7\xa2\xb5\xbe\xbf\xb8\xb1\xd6",
        // "glob_b" / M(Xor3) / S(145) / L(6)
        "\xc6\xcd\xce\xc3\xfe\xc3\xa1\x6e\xf4\x0c\x2f\x12\xb6\x67\xe9\x8a",
        // "kCFTypeDictionaryValueCallBacks" / M(Xor4) / S(169) / L(31)
        "\x4b\x63\x66\x74\x59\x50\x45\x64\x49\x43\x54\x49\x4f\x4e\x41\x52\x59\x76\x41\x4c\x55\x45\x63\x41\x4c\x4c\x62\x41\x43\x4b\x53\x20",
        // "kSecReturnRef" / M(Xor2) / S(213) / L(13)
        "\xae\x96\xa0\xa6\x97\xa0\xb1\xb0\xb7\xab\x97\xa0\xa3\xc5\x80\xc9",
        // "" / M(None) / S(0) / L(0)
        "\x2d\x54\x47\x0e\xd5\x86\x5c\x52\x42\xe8\x53\x12\xbe\x04\x6c\xcc\x22\xcc\x28\xbc\x9e\x52\x6f\xee\xa1\x57\x4a\x24\xea\x4a\xde\xe3",
        // "ASN1_get_object" / M(Xor3) / S(204) / L(15)
        "\x9d\x8f\x92\xed\x83\xbb\xb9\xa8\x83\xb3\xbe\xb6\xb9\xbf\xa8\xdc",
        // "CFArrayGetValueAtIndex" / M(Xor1) / S(191) / L(22)
        "\xfc\xf9\xfe\xcd\xcd\xde\xc6\xf8\xda\xcb\xe9\xde\xd3\xca\xda\xfe\xcb\xf6\xd1\xdb\xda\xc7\xbf",
        // "" / M(None) / S(0) / L(0)
        "\x29\xc1\x27\x72\x8d\xf1\x6f\xc9\x67\x97\x20\x1d\xb3\x74\xa4\x85\xd6\xd8\xd9\xd6\xc2\xab\x9c\x4a\x2a\x86\xe7\x63\xf8\x6b\xe2\x79",
        // "receipt" / M(Xor1) / S(74) / L(7)
        "\x38\x2f\x29\x2f\x23\x3a\x3e\x4a\x53\x73\x80\xb3\xfd\x62\x35\x2a",
        // "CFBundleIdentifier" / M(Xor4) / S(118) / L(18)
        "\x81\x84\x80\xb7\xac\xa6\xae\xa7\x8b\xa6\xa7\xac\xb6\xab\xa4\xab\xa7\xb0\xc2",
        // "CFRelease" / M(Xor1) / S(214) / L(9)
        "\x95\x90\x84\xb3\xba\xb3\xb7\xa5\xb3\xd6\x49\xa8\xdd\x2f\x28\x68",
        // "ASN1_OBJECT_free" / M(Xor3) / S(190) / L(16)
        "\x8e\x9c\x81\xfe\x90\x80\x8d\x85\x8a\x8c\x9b\x90\xa9\xbd\xaa\xaa\xcf",
        // "" / M(None) / S(0) / L(0)
        "\x80\xbb\xf2\xa0\x51\xf7\x28\x9d\xf6\x50\xe2\xc7\x8f\xc3\x52\x56\x2d\xc4\x3c\x87\x51\x73\x00\xb0\x40\x6b\x7f\xed\xa0\x77\xa0\xc9",
        // "glob" / M(Xor3) / S(175) / L(4)
        "\xd8\xd3\xd0\xdd\xbf\x0c\x6f\x3a\x53\x96\xba\xc6\xda\xba\xf6\x9f",
        // "" / M(None) / S(0) / L(0)
        "\xa1\xcf\x3b\xeb\xe4\xe0\x32\x7f\xab\x15\x9a\x3a\x5a\x29\x4a\x7a\x45\x7c\xe3\x0b\xca\x6a\xd8\xb6\x1a\x22\x65\x65\x12\x47\x6a\x76",
        // "" / M(None) / S(0) / L(0)
        "\xa5\xcd\x2d\x54\x68\x28\x0c\xb2\x7f\xbf\xa4\x46\xa8\x95\xd7\x89\x50\x5d\x87\x3a\x64\x58\x5f\x2a\x2a\x6e\xbd\x90\x78\x09\x73\xf8",
        // "sk_value" / M(Rot) / S(67) / L(8)
        "\xb6\xae\xa2\xb9\xa4\xaf\xb8\xa8\x43\x98\x9f\x29\x0d\xb5\xf4\x77",
        // "SecKeychainOpen" / M(Rot) / S(53) / L(15)
        "\x88\x9a\x98\x80\x9a\xae\x98\x9d\x96\x9e\xa3\x84\xa5\x9a\xa3\x35",
        // "" / M(None) / S(0) / L(0)
        "\x95\xda\x96\x14\x81\xb5\xa2\xbb\x2c\x85\x83\x8f\x06\x7f\x57\xef\xf8\xf7\xa7\x82\xcf\x60\x02\xad\x37\x53\xbe\x54\xa7\x56\x10\xc4",
        // "" / M(None) / S(0) / L(0)
        "\x93\x1e\xc2\x18\x8f\x58\x32\x60\x64\x90\x93\xe1\x89\xfe\x28\x7c\x37\x6a\xd1\x23\x62\x1c\xe8\xd1\x47\x77\x51\x68\x26\x49\x88\xcb",
        // "globfree" / M(Xor3) / S(200) / L(8)
        "\xbf\xb4\xb7\xba\xbe\xaa\xbd\xbd\xd8\xfa\xdb\x3f\x42\x8b\xca\xed",
        // "CFStringCompare" / M(Xor2) / S(192) / L(15)
        "\x93\x96\x83\xa4\xa2\xb9\xbe\xb7\x93\xbf\xbd\xa0\xb1\xa2\xb5\xd0",
        // "Contents/_MASReceipt" / M(Xor4) / S(184) / L(20)
        "\x5b\x77\x76\x6c\x7d\x76\x6c\x6b\x37\x47\x55\x59\x4b\x4a\x7d\x7b\x7d\x71\x68\x6c\x18",
        // "CFDateFormatterCreateDateFromString" / M(Xor2) / S(126) / L(35)
        "\x19\x1c\x1e\x3b\x2e\x3f\x1c\x35\x28\x37\x3b\x2e\x2e\x3f\x28\x19\x28\x3f\x3b\x2e\x3f\x1e\x3b\x2e\x3f\x1c\x28\x35\x37\x09\x2e\x28\x33\x34\x3d\x5a",
        // "sk_value" / M(Xor1) / S(220) / L(8)
        "\xaf\xb7\x83\xaa\xbd\xb0\xa9\xb9\xdc\xa1\x36\x59\x4f\x20\xbf\x5b",
        // "BIO_new" / M(Xor2) / S(211) / L(7)
        "\x81\x8a\x8c\x9c\xad\xa6\xb4\xc3\xc7\x56\xc9\xcb\x34\xb5\xc9\xe7",
        // "Contents/_MASReceipt/receipt" / M(Rot) / S(91) / L(28)
        "\x9e\xca\xc9\xcf\xc0\xc9\xcf\xce\x8a\xba\xa8\x9c\xae\xad\xc0\xbe\xc0\xc4\xcb\xcf\x8a\xcd\xc0\xbe\xc0\xc4\xcb\xcf\x5b\x65\xa8\xbc\x9a\x46\x3c\x74\xff",
        // "" / M(None) / S(0) / L(0)
        "\x21\xf3\xfc\x24\xf6\x58\xc7\x7b\xc0\x3c\xb1\xac\xfe\xe6\xc5\x65\x0b\x47\x03\x3f\x30\xc6\x3b\xc7\xfd\xcf\x1c\x6a\x62\xd9\x99\xe9",
        // "CFReadStreamRead" / M(Xor2) / S(78) / L(16)
        "\x1c\x19\x0d\x3a\x3e\x3b\x0c\x2b\x2d\x3a\x3e\x32\x0d\x3a\x3e\x3b\x5f",
        // "ASN1_OBJECT_free" / M(Rot) / S(100) / L(16)
        "\xa5\xb7\xb2\x95\xc3\xb3\xa6\xae\xa9\xa7\xb8\xc3\xca\xd6\xc9\xc9\x64",
        // "X509_STORE_free" / M(Xor4) / S(234) / L(15)
        "\xf8\x95\x90\x99\xff\xf3\xf4\xef\xf2\xe5\xff\xc6\xd2\xc5\xc5\xa0",
        // "Contents/_MASReceipt/receipt" / M(Xor4) / S(91) / L(28)
        "\x64\x48\x49\x53\x42\x49\x53\x54\x08\x78\x6a\x66\x74\x75\x42\x44\x42\x4e\x57\x53\x08\x55\x42\x44\x42\x4e\x57\x53\x27\x1d\x47\x15\xe3\x39\xd6\x31\x04",
        // "yyyy'-'MM'-'dd'T'HH':'mm':'ss'Z'" / M(Xor4) / S(36) / L(32)
        "\xdd\xdd\xdd\xdd\x83\x89\x83\xe9\xe9\x83\x89\x83\xc0\xc0\x83\xf0\x83\xec\xec\x83\x9e\x83\xc9\xc9\x83\x9e\x83\xd7\xd7\x83\xfe\x83\xa4",
        // "CFDictionaryCreateMutable" / M(Rot) / S(254) / L(25)
        "\x41\x44\x42\x67\x61\x72\x67\x6d\x6c\x5f\x70\x77\x41\x70\x63\x5f\x72\x63\x4b\x73\x72\x5f\x60\x6a\x63\xfe\xbe\x42\x4e\x9a\xb4\x18\xf6\x8c",
        // "PKCS7_get0_signers" / M(Xor2) / S(253) / L(18)
        "\xbe\xa5\xad\xbd\xd9\xb1\x89\x8b\x9a\xde\xb1\x9d\x87\x89\x80\x8b\x9c\x9d\xee",
        // "CFArrayGetCount" / M(Xor4) / S(249) / L(15)
        "\xd3\xd6\xd1\xe2\xe2\xf1\xe9\xd7\xf5\xe4\xd3\xff\xe5\xfe\xe4\x90",
        // "setjmp" / M(Xor3) / S(5) / L(6)
        "\x66\x70\x61\x7f\x78\x65\x15\x9c\x7f\x0f\xd5\x20\xcc\x2e\x2f\xae",
        // "IORegistryEntryGetParentEntry" / M(Xor1) / S(145) / L(29)
        "\xd8\xde\xc3\xf4\xf6\xf8\xe2\xe5\xe3\xe8\xd4\xff\xe5\xe3\xe8\xd6\xf4\xe5\xc1\xf0\xe3\xf4\xff\xe5\xd4\xff\xe5\xe3\xe8\x91\x21\x6b\xab\x39\xd2\xed\xd5\x25",
        // "PKCS7_verify" / M(Rot) / S(200) / L(12)
        "\x18\x13\x0b\x1b\xff\x27\x3e\x2d\x3a\x31\x2e\x41\xc8\xdf\xba\x6d",
        // "CFArrayCreateMutable" / M(Xor1) / S(6) / L(20)
        "\x45\x40\x47\x74\x74\x67\x7f\x45\x74\x63\x67\x72\x63\x4b\x73\x72\x67\x64\x6a\x63\x06",
        // "OBJ_txt2obj" / M(Rot) / S(5) / L(11)
        "\x54\x47\x4f\x64\x79\x7d\x79\x37\x74\x67\x6f\x05\xaf\xc9\x89\xac",
        // "X509_NAME_get_text_by_NID" / M(Rot) / S(113) / L(25)
        "\xc9\xa6\xa1\xaa\xd0\xbf\xb2\xbe\xb6\xd0\xd8\xd6\xe5\xd0\xe5\xd6\xe9\xe5\xd0\xd3\xea\xd0\xbf\xba\xb5\x71\x91\xd0\x45\x1a\x5c\xc8\x8f\x72",
        // "" / M(None) / S(0) / L(0)
        "\xd0\x56\x30\xdd\x00\x42\xb7\xd1\x5f\x8a\x20\x23\xeb\x21\x95\x7f\x79\x82\x4c\xbb\xe7\xaf\x31\x38\x22\xa5\xf4\x18\x58\x85\xc4\xee",
        // "" / M(None) / S(0) / L(0)
        "\xdd\x27\x8b\xdb\xfa\xa3\xcf\x8c\xcd\x80\xf2\x75\xde\x8c\x95\xc5\xac\x76\x76\x49\x80\x14\x25\xe1\x78\x09\x51\x24\x47\x14\x01\xd2",
        // "" / M(None) / S(0) / L(0)
        "\xbd\x9f\x30\x76\x42\x09\xe9\xb4\xd5\xd6\x44\x9d\x2e\x1d\x13\x40\x2c\xea\xc7\x34\x3d\xb0\xed\x0a\x69\xec\xab\x83\x60\xc6\xa2\x18",
        // "BIO_write" / M(Rot) / S(245) / L(9)
        "\x37\x3e\x44\x54\x6c\x67\x5e\x69\x5a\xf5\x2e\x1a\x3a\xb9\xf0\xa8",
        // "CFArrayGetCount" / M(Xor2) / S(208) / L(15)
        "\x83\x86\x81\xb2\xb2\xa1\xb9\x87\xa5\xb4\x83\xaf\xb5\xae\xb4\xc0",
        // "" / M(None) / S(0) / L(0)
        "\xab\x1c\x30\x41\x5e\x78\xb2\x6b\x49\x8c\x82\x4c\xd6\x74\xf4\x6e\x9f\x65\x79\xc4\xb3\x3b\x30\xa4\xf3\x14\x45\x01\xaa\x71\x02\x69",
        // "CFRelease" / M(Xor2) / S(189) / L(9)
        "\xee\xeb\xff\xc8\xc1\xc8\xcc\xde\xc8\xad\x68\x08\x91\xea\x91\x78",
        // "longjmp" / M(Xor3) / S(157) / L(7)
        "\xc1\xc2\xc3\xca\xc7\xc0\xdd\xad\xc3\xc9\x56\x7a\x2e\xa0\x0b\x67",
        // "RTLD_MAIN_ONLY" / M(Rot) / S(134) / L(14)
        "\xd8\xda\xd2\xca\xe5\xd3\xc7\xcf\xd4\xe5\xd5\xd4\xd2\xdf\x86\x3d",
        // "" / M(None) / S(0) / L(0)
        "\x8c\xb8\x1b\xe1\x46\x9e\x4c\xbe\x4a\x61\xba\x79\xfc\xb1\xda\xc4\xf8\x97\x3e\x5f\x1b\x30\x16\x42\x8f\x78\x25\x7c\x31\x14\x1f\x8a",
        // "CFDataGetLength" / M(Xor4) / S(148) / L(15)
        "\x03\x06\x04\x21\x34\x21\x07\x25\x34\x0c\x25\x2e\x27\x34\x28\x40",
        // "alloc" / M(Xor1) / S(85) / L(5)
        "\x34\x39\x39\x3a\x36\x55\x45\x30\x4e\x4c\xef\xa9\x2f\x41\xf4\x0a",
        // "kSecMatchSubjectContains" / M(Rot) / S(56) / L(24)
        "\xa3\x8b\x9d\x9b\x85\x99\xac\x9b\xa0\x8b\xad\x9a\xa2\x9d\x9b\xac\x7b\xa7\xa6\xac\x99\xa1\xa6\xab\x38\x4e\x9e\xaa\xe7\xd8\xbc\x73\x29",
        // "" / M(None) / S(0) / L(0)
        "\x41\x20\x91\x5d\x78\x43\x93\xda\x6d\xe2\x86\x54\x1f\xff\x8e\xb1\x84\xcd\xdb\x2d\x40\xed\x49\x01\x77\xfa\x4f\xe9\x25\x09\x2a\x70",
        // "CFDateFormatterCreateDateFromString" / M(Xor3) / S(148) / L(35)
        "\xfb\xfe\xfc\xd9\xcc\xdd\xfe\xd7\xca\xd5\xd9\xcc\xcc\xdd\xca\xfb\xca\xdd\xd9\xcc\xdd\xfc\xd9\xcc\xdd\xfe\xca\xd7\xd5\xeb\xcc\xca\xd1\xd6\xdf\xb8",
        // "IOObjectRelease" / M(Xor1) / S(225) / L(15)
        "\xa8\xae\xae\x83\x8b\x84\x82\x95\xb3\x84\x8d\x84\x80\x92\x84\xe1",
        // "CFStringGetFileSystemRepresentation" / M(Xor4) / S(248) / L(35)
        "\xa3\xa6\xb3\x94\x92\x89\x8e\x87\xa7\x85\x94\xa6\x89\x8c\x85\xb3\x99\x93\x94\x85\x8d\xb2\x85\x90\x92\x85\x93\x85\x8e\x94\x81\x94\x89\x8f\x8e\xe0",
        // "BIO_new" / M(Rot) / S(56) / L(7)
        "\x7a\x81\x87\x97\xa6\x9d\xaf\x38\x8b\x8e\xfb\xb5\x9f\x6c\x41\x9c",
        // "CFEqual" / M(Xor3) / S(166) / L(7)
        "\xf5\xf0\xf3\xc7\xc3\xd7\xda\xb6\xba\xf3\xff\xa4\xcb\x5d\x22\xd4",
        // "CFBundleGetIdentifier" / M(Xor3) / S(77) / L(21)
        "\x20\x25\x21\x16\x0d\x07\x0f\x06\x24\x06\x17\x2a\x07\x06\x0d\x17\x0a\x05\x0a\x06\x11\x63",
        // "" / M(None) / S(0) / L(0)
        "\xf4\xd8\xf3\xa8\x91\xda\x36\x46\x12\x70\x83\xed\xf0\x28\xf8\x8e\x00\x2b\x2d\x48\xee\x16\x60\xd0\x2c\xb9\x6a\xcf\xb1\xb9\xa3\x26",
        // "" / M(None) / S(0) / L(0)
        "\xcf\x15\xd0\x32\x0e\x65\xb9\xf6\xcc\xb0\x00\xf8\xff\x33\xa1\xa6\xce\x95\x7e\x56\x58\x71\xcc\xcd\x08\xdd\xd7\x5f\xcc\xd1\x8c\x1c",
        // "" / M(None) / S(0) / L(0)
        "\xa4\xd3\xec\xf8\x29\xc5\xec\x59\x5c\x97\xc9\x98\xbe\xee\x04\x5e\xb0\x8c\xf7\x51\xec\xd2\x9a\xb2\x71\xfd\x45\x15\x3c\xf4\x09\x72",
        // "/System/Library/Frameworks/AppKit.framework/AppKit" / M(Xor3) / S(244) / L(50)
        "\x08\x74\x5e\x54\x53\x42\x4a\x08\x6b\x4e\x45\x55\x46\x55\x5e\x08\x61\x55\x46\x4a\x42\x50\x48\x55\x4c\x54\x08\x66\x57\x57\x6c\x4e\x53\x09\x41\x55\x46\x4a\x42\x50\x48\x55\x4c\x08\x66\x57\x57\x6c\x4e\x53\x27",
        // "%02X" / M(Rot) / S(31) / L(4)
        "\x44\x4f\x51\x77\x1f\xdd\xca\x29\x71\x82\xf7\x9e\x07\xf4\xdd\xef",
        // "CFArrayAppendValue" / M(Xor2) / S(103) / L(18)
        "\x37\x32\x35\x06\x06\x15\x0d\x35\x04\x04\x11\x1a\x10\x22\x15\x18\x01\x11\x74",
        // "" / M(None) / S(0) / L(0)
        "\x53\x69\x2e\x67\x74\xb3\xa2\x6f\xe5\xf2\x5e\x06\x84\xf9\x33\x55\x6c\xda\x1a\xb6\x95\x98\x12\x31\x7f\x83\xc9\xc1\x50\x38\xb7\xed",
        // "CFBundleShortVersionString" / M(Xor1) / S(201) / L(26)
        "\x8a\x8f\x8b\xbc\xa7\xad\xa5\xac\x9a\xa1\xa6\xbb\xbd\x9f\xac\xbb\xba\xa0\xa6\xa7\x9a\xbd\xbb\xa0\xa7\xae\xc9\x66\x44\x57\x05\xe9\xbc\x8c\xc5",
        // "IOBSDNameMatching" / M(Rot) / S(38) / L(17)
        "\x6f\x75\x68\x79\x6a\x74\x87\x93\x8b\x73\x87\x9a\x89\x8e\x8f\x94\x8d\x26",
        // "%02x:" / M(Rot) / S(53) / L(5)
        "\x5a\x65\x67\xad\x6f\x35\x1f\x98\x86\xa3\xe0\x89\x8e\x8f\x1a\xd8",
        // "ASN1_OBJECT_free" / M(Xor1) / S(249) / L(16)
        "\xb8\xaa\xb7\xc8\xa6\xb6\xbb\xb3\xbc\xba\xad\xa6\x9f\x8b\x9c\x9c\xf9",
        // "CFBundleCopyBundleURL" / M(Xor2) / S(187) / L(21)
        "\xee\xeb\xef\xd8\xc3\xc9\xc1\xc8\xee\xc2\xdd\xd4\xef\xd8\xc3\xc9\xc1\xc8\xf8\xff\xe1\xad",
        // "init" / M(Xor4) / S(161) / L(4)
        "\x79\x7e\x79\x64\x10\x87\x6c\x64\x00\xe2\xef\x8a\x82\xf6\x08\x12",
        // "CFStringCompare" / M(Xor4) / S(214) / L(15)
        "\x23\x26\x33\x14\x12\x09\x0e\x07\x23\x0f\x0d\x10\x01\x12\x05\x60",
        // "611E5B662C593A08FF58D14AE22452D198DF6C60" / M(Rot) / S(166) / L(40)
        "\xdc\xd7\xd7\xeb\xdb\xe8\xdc\xdc\xd8\xe9\xdb\xdf\xd9\xe7\xd6\xde\xec\xec\xdb\xde\xea\xd7\xda\xe7\xeb\xd8\xd8\xda\xdb\xd8\xea\xd7\xdf\xde\xea\xec\xdc\xe9\xdc\xd6\xa6\xdc\x1a\xd0\xe6\xf5\x7e\x0a\x4b",
        // "611E5B662C593A08FF58D14AE22452D198DF6C60" / M(Xor4) / S(120) / L(40)
        "\xce\xc9\xc9\xbd\xcd\xba\xce\xce\xca\xbb\xcd\xc1\xcb\xb9\xc8\xc0\xbe\xbe\xcd\xc0\xbc\xc9\xcc\xb9\xbd\xca\xca\xcc\xcd\xca\xbc\xc9\xc1\xc0\xbc\xbe\xce\xbb\xce\xc8\xf8\xc9\x3f\x1f\x55\xa9\xda\x7f\xf5",
        // "" / M(None) / S(0) / L(0)
        "\xb2\xd6\x39\xb8\x69\x0a\x2b\x5a\x1f\x1d\x37\x36\x3d\x01\xa0\x40\x7d\xc1\x4b\x7a\xa3\xd0\xbb\x66\xb6\x58\x2d\xbc\x49\x97\x44\x8a",
        // "SecKeychainSearchCopyNext" / M(Xor4) / S(205) / L(25)
        "\x69\x5f\x59\x71\x5f\x43\x59\x52\x5b\x53\x54\x69\x5f\x5b\x48\x59\x52\x79\x55\x4a\x43\x74\x5f\x42\x4e\x3a\x45\xf6\x14\x0d\x2f\xf5\x21\x9b",
        // "sk_free" / M(Xor1) / S(167) / L(7)
        "\xd4\xcc\xf8\xc1\xd5\xc2\xc2\xa7\xb3\xc2\xe3\xd7\x4b\x44\x35\xd4",
        // "CFDataGetLength" / M(Rot) / S(198) / L(15)
        "\x09\x0c\x0a\x27\x3a\x27\x0d\x2b\x3a\x12\x2b\x34\x2d\x3a\x2e\xc6",
        // "CFArrayGetValueAtIndex" / M(Xor4) / S(208) / L(22)
        "\xf3\xf6\xf1\xc2\xc2\xd1\xc9\xf7\xd5\xc4\xe6\xd1\xdc\xc5\xd5\xf1\xc4\xf9\xde\xd4\xd5\xc8\xb0",
        // "kSecClassCertificate" / M(Rot) / S(144) / L(20)
        "\xfb\xe3\xf5\xf3\xd3\xfc\xf1\x03\x03\xd3\xf5\x02\x04\xf9\xf6\xf9\xf3\xf1\x04\xf5\x90",
        // "SKReceiptRefreshRequest" / M(Xor2) / S(133) / L(23)
        "\xf6\xee\xf7\xc0\xc6\xc0\xcc\xd5\xd1\xf7\xc0\xc3\xd7\xc0\xd6\xcd\xf7\xc0\xd4\xd0\xc0\xd6\xd1\xa5\xcc\xf1\x66\x96\xe0\xbc\x1d\x39",
        // "" / M(None) / S(0) / L(0)
        "\xd2\x40\xce\x4e\xbc\x31\xb5\x2c\x5c\x58\x6a\x1b\xf4\x41\x75\x19\xcd\x71\x94\x93\xee\x1f\xa8\x28\x03\xf8\xe9\x1b\x4d\xf9\xa5\xf3",
        // "/usr/lib/libSystem.dylib" / M(Xor2) / S(170) / L(24)
        "\xa4\xfe\xf8\xf9\xa4\xe7\xe2\xe9\xa4\xe7\xe2\xe9\xd8\xf2\xf8\xff\xee\xe6\xa5\xef\xf2\xe7\xe2\xe9\x8b\x0c\x79\x0d\xf2\xad\x46\xf9\x08",
        // "/System/Library/Frameworks/CoreFoundation.framework/CoreFoundation" / M(Xor2) / S(2) / L(66)
        "\x6e\x12\x38\x32\x35\x24\x2c\x6e\x0d\x28\x23\x33\x20\x33\x38\x6e\x07\x33\x20\x2c\x24\x36\x2e\x33\x2a\x32\x6e\x02\x2e\x33\x24\x07\x2e\x34\x2f\x25\x20\x35\x28\x2e\x2f\x6f\x27\x33\x20\x2c\x24\x36\x2e\x33\x2a\x6e\x02\x2e\x33\x24\x07\x2e\x34\x2f\x25\x20\x35\x28\x2e\x2f\x41",
        // "" / M(None) / S(0) / L(0)
        "\xc1\xde\xcb\x22\x0c\x5e\xca\x64\xf4\xda\xe6\x0f\xe1\x9b\xbd\x8e\x54\x34\xd3\x2e\x4a\x4b\xe5\xdf\x7e\xf0\x82\x9a\x25\x57\x62\xf7",
        // "CFDateFormatterCreate" / M(Xor2) / S(69) / L(21)
        "\x10\x15\x17\x32\x27\x36\x15\x3c\x21\x3e\x32\x27\x27\x36\x21\x10\x21\x36\x32\x27\x36\x53",
        // "" / M(None) / S(0) / L(0)
        "\x64\x90\x34\xe5\x5f\xda\x5b\x3e\x1d\x5f\xc0\xc0\xd5\x5d\x42\x24\x79\xf9\x99\xb3\xd3\x4d\x90\xc9\x79\x3b\xed\x27\xfe\xf0\x08\xb5",
        // "_MASReceipt" / M(Xor2) / S(132) / L(11)
        "\xcb\xd9\xd5\xc7\xc6\xf1\xf7\xf1\xfd\xe4\xe0\x94\xdb\x1e\x7f\x35",
        // "CC_SHA1_Init" / M(Xor4) / S(254) / L(12)
        "\xa3\xa3\xbf\xb3\xa8\xa1\xd1\xbf\xa9\x8e\x89\x94\xe0\x9b\x38\x66",
        // "NSApplicationMain" / M(Xor3) / S(214) / L(17)
        "\xa6\xbb\xa9\x98\x98\x84\x81\x8b\x89\x9c\x81\x87\x86\xa5\x89\x81\x86\xe8",
        // "sel_registerName" / M(Xor2) / S(60) / L(16)
        "\x5e\x48\x41\x72\x5f\x48\x4a\x44\x5e\x59\x48\x5f\x63\x4c\x40\x48\x2d",
        // "kSecMatchLimitAll" / M(Xor4) / S(31) / L(17)
        "\x45\x7d\x4b\x4d\x63\x4f\x5a\x4d\x46\x62\x47\x43\x47\x5a\x6f\x42\x42\x2e",
        // "CFDataAppendBytes" / M(Xor1) / S(214) / L(17)
        "\x95\x90\x92\xb7\xa2\xb7\x97\xa6\xa6\xb3\xb8\xb2\x94\xaf\xa2\xb3\xa5\xd6",
        // "" / M(None) / S(0) / L(0)
        "\xbd\x86\x4f\x21\xc6\x60\x4b\x30\xba\xda\x95\x96\x77\x97\x4e\xb5\x76\x46\xad\xfd\x59\x72\xee\xaf\xd2\xad\x95\x3e\x14\xfa\xf2\xed",
        // "init" / M(Xor1) / S(181) / L(4)
        "\xdc\xdb\xdc\xc1\xb5\xb4\xc2\xcd\x68\x62\xcd\x8c\x33\x00\x02\x90",
        // "objc_getClass" / M(Xor3) / S(236) / L(13)
        "\x93\x9e\x96\x9f\xa3\x9b\x99\x88\xbf\x90\x9d\x8f\x8f\xfc\xf1\xd6",
        // "kSecReturnRef" / M(Xor4) / S(131) / L(13)
        "\x5b\x63\x55\x53\x62\x55\x44\x45\x42\x5e\x62\x55\x56\x30\x46\xae",
        // "kCFBundleIdentifierKey" / M(Xor3) / S(252) / L(22)
        "\x78\x50\x55\x51\x66\x7d\x77\x7f\x76\x5a\x77\x76\x7d\x67\x7a\x75\x7a\x76\x61\x58\x76\x6a\x13",
        // "sk_num" / M(Rot) / S(149) / L(6)
        "\x08\x00\xf4\x03\x0a\x02\x95\xde\xf2\x8d\xe9\xe8\xfd\xc3\x6f\x0d",
        // "objc_getClass" / M(Xor3) / S(133) / L(13)
        "\xfa\xf7\xff\xf6\xca\xf2\xf0\xe1\xd6\xf9\xf4\xe6\xe6\x95\x09\x03",
        // "kSecMatchSubjectContains" / M(Xor1) / S(180) / L(24)
        "\xdf\xe7\xd1\xd7\xf9\xd5\xc0\xd7\xdc\xe7\xc1\xd6\xde\xd1\xd7\xc0\xf7\xdb\xda\xc0\xd5\xdd\xda\xc7\xb4\x75\x4c\x69\x02\xa9\xeb\x0e\xea",
        // "CFBundleCopyBundleURL" / M(Rot) / S(137) / L(21)
        "\xcc\xcf\xcb\xfe\xf7\xed\xf5\xee\xcc\xf8\xf9\x02\xcb\xfe\xf7\xed\xf5\xee\xde\xdb\xd5\x89",
        // "/usr/lib/libobjc.dylib" / M(Xor1) / S(244) / L(22)
        "\xdb\x81\x87\x86\xdb\x98\x9d\x96\xdb\x98\x9d\x96\x9b\x96\x9e\x97\xda\x90\x8d\x98\x9d\x96\xf4",
        // "sha1" / M(Xor1) / S(208) / L(4)
        "\xa3\xb8\xb1\xe1\xd0\x9f\x7b\x2b\xb0\x00\x40\xe1\x80\x2a\x57\x94",
        // "" / M(None) / S(0) / L(0)
        "\xa4\xe6\x2a\x3f\xe5\xab\xd6\xc4\x82\x52\x06\xd6\xf4\x1e\xdb\xca\x68\x3f\x91\xbf\xdb\x0e\xc2\xd0\xe2\x68\xf6\x86\x7b\x9f\x5a\xf5",
        // "kCFBundleIdentifierKey" / M(Xor4) / S(126) / L(22)
        "\x39\x11\x14\x10\x27\x3c\x36\x3e\x37\x1b\x36\x37\x3c\x26\x3b\x34\x3b\x37\x20\x19\x37\x2b\x52",
        // "OBJ_txt2obj" / M(Xor3) / S(168) / L(11)
        "\xf7\xfa\xf2\xe7\xcc\xc0\xcc\x8a\xd7\xda\xd2\xb8\x30\x70\xca\x39",
        // "BIO_new" / M(Xor2) / S(49) / L(7)
        "\x63\x68\x6e\x7e\x4f\x44\x56\x21\xda\xb1\x49\xcc\x4e\x06\x5f\x67",
        // "X509_NAME_get_text_by_NID" / M(Xor4) / S(123) / L(25)
        "\x0e\x63\x66\x6f\x09\x18\x17\x1b\x13\x09\x31\x33\x22\x09\x22\x33\x2e\x22\x09\x34\x2f\x09\x18\x1f\x12\x56\x51\xfd\xf1\x38\x27\x80\x66\x6b",
        // "%02X:" / M(Xor3) / S(231) / L(5)
        "\xd2\xc7\xc5\xaf\xcd\xf7\x6e\x18\xf4\x99\x5b\x7d\x1e\xc3\xf6\x1a",
        // "CC_SHA1" / M(Xor3) / S(173) / L(7)
        "\xfe\xfe\xe2\xee\xf5\xfc\x8c\xbd\x01\xed\xc3\xa7\x17\x5a\xe9\x2b",
        // "2.0.2" / M(Xor3) / S(209) / L(5)
        "\xd3\xcf\xd1\xcf\xd3\xe1\xae\xed\x64\x82\xca\x02\xe9\x18\x19\x75",
        // "BIO_write" / M(Xor3) / S(47) / L(9)
        "\x7d\x76\x70\x60\x48\x4d\x56\x4b\x5a\x3f\x85\x7a\x13\x57\x1c\xd0",
        // "NSApplicationMain" / M(Rot) / S(45) / L(17)
        "\x7b\x80\x6e\x9d\x9d\x99\x96\x90\x8e\xa1\x96\x9c\x9b\x7a\x8e\x96\x9b\x2d",
        // "%02X:" / M(Xor2) / S(16) / L(5)
        "\x25\x30\x32\x58\x3a\x00\xf8\x20\x6c\x15\x69\xa2\x0d\x39\x70\x5c",
        // "" / M(None) / S(0) / L(0)
        "\x57\x43\x90\xa1\xa2\x2f\xd9\xab\xdd\x6d\x6b\x99\x96\xe0\xec\x02\xcb\x2d\x47\x8d\x7f\x53\x92\xae\x8e\xe7\xae\x44\x09\xa6\xeb\xd6",
        // "X509_STORE_free" / M(Xor2) / S(65) / L(15)
        "\x09\x64\x61\x68\x0e\x02\x05\x1e\x03\x14\x0e\x37\x23\x34\x34\x51",
        // "" / M(None) / S(0) / L(0)
        "\x74\x98\x6a\x5b\x88\xfa\xdd\x66\x73\x64\x78\x4e\x8e\x6f\x3d\x34\xd9\x0f\xd8\x36\x96\xb3\x0a\x80\xce\xf7\x36\x46\xa7\xdf\xcd\x77",
        // "IOIteratorNext" / M(Xor1) / S(232) / L(14)
        "\xa1\xa7\xa1\x9c\x8d\x9a\x89\x9c\x87\x9a\xa6\x8d\x90\x9c\xe8\xba",
        // "dlopen" / M(Xor4) / S(225) / L(6)
        "\x74\x7c\x7f\x60\x75\x7e\x10\xd5\x2e\x07\xa8\x9c\xf9\xf9\x4d\x8f",
        // "CFRelease" / M(Xor3) / S(148) / L(9)
        "\xe7\xe2\xf6\xc1\xc8\xc1\xc5\xd7\xc1\xa4\x79\x78\x8c\x6c\xb8\xe0",
        // "X509_STORE_free" / M(Xor4) / S(32) / L(15)
        "\x58\x35\x30\x39\x5f\x53\x54\x4f\x52\x45\x5f\x66\x72\x65\x65\x00",
        // "sel_registerName" / M(Xor4) / S(3) / L(16)
        "\x40\x56\x5f\x6c\x41\x56\x54\x5a\x40\x47\x56\x41\x7d\x52\x5e\x56\x33",
        // "CFBundleShortVersionString" / M(Rot) / S(148) / L(26)
        "\xd7\xda\xd6\x09\x02\xf8\x00\xf9\xe7\xfc\x03\x06\x08\xea\xf9\x06\x07\xfd\x03\x02\xe7\x08\x06\xfd\x02\xfb\x94\x11\xac\x47\xf3\xd6\xe7\xb7\x77",
        // "glob" / M(Xor4) / S(156) / L(4)
        "\xa7\xac\xaf\xa2\xc0\xf3\x37\x35\xc3\xef\xb2\x73\xaf\x0e\xe4\x41",
        // "" / M(None) / S(0) / L(0)
        "\xf9\x07\x20\x47\x51\x7d\xc5\x97\x53\x38\xb5\x48\xbc\xdf\xa3\x0e\x19\xb7\x0d\xc2\xfe\x0b\x08\xfd\x9e\x63\x3a\x40\xa8\x60\xa0\xdc",
        // "dlsym" / M(Xor3) / S(192) / L(5)
        "\xb4\xbc\xa3\xa9\xbd\xd0\x61\xd0\xcc\x9c\x18\x39\x5c\x39\x08\x8d",
        // "CFReadStreamClose" / M(Xor1) / S(247) / L(17)
        "\xb4\xb1\xa5\x92\x96\x93\xa4\x83\x85\x92\x96\x9a\xb4\x9b\x98\x84\x92\xf7",
        // "strlen" / M(Xor4) / S(183) / L(6)
        "\x03\x04\x02\x1c\x15\x1e\x70\xba\x7f\x8d\x4a\xe1\xb2\xac\x6d\x71",
        // "" / M(None) / S(0) / L(0)
        "\x11\x40\x99\x46\xb3\x5e\x90\xcb\xf5\x21\x29\xd4\xb5\xff\x77\xd1\x59\xd3\x0c\x67\x36\x6d\xd6\x1d\xf5\xe0\xae\x0b\xca\x67\x06\x87",
        // "CFBundleVersion" / M(Xor1) / S(92) / L(15)
        "\x1f\x1a\x1e\x29\x32\x38\x30\x39\x0a\x39\x2e\x2f\x35\x33\x32\x5c",
        // "" / M(None) / S(0) / L(0)
        "\x42\x94\x1f\xe7\x2a\xa4\x96\x48\x5e\x3a\xb6\x97\xd5\x9b\x26\x81\x6d\x5a\x91\x9c\x96\x39\xd6\x89\xfd\x05\x26\xcb\x34\xec\x35\xad",
        // "X509_get_ext_by_OBJ" / M(Xor4) / S(220) / L(19)
        "\x68\x05\x00\x09\x6f\x57\x55\x44\x6f\x55\x48\x44\x6f\x52\x49\x6f\x7f\x72\x7a\x30",
        // "" / M(None) / S(0) / L(0)
        "\xc3\xee\x1e\x1d\x2a\xdc\xaa\xd7\x66\xb2\xd5\x99\xd7\x9d\x47\x6b\xe3\xa8\xe5\xfe\x33\x1a\x52\x94\xd0\x30\xc9\x0c\x7a\xba\x9d\x86",
        // "" / M(None) / S(0) / L(0)
        "\xd4\x04\xc1\x3b\xc3\x89\x3a\x01\x77\xe9\xb7\x97\x06\xbb\x37\x68\x34\xf6\x01\x28\x71\x7b\x0f\x3c\x1a\x1a\x5b\xee\x18\x20\x9d\x64",
        // "objc_msgSend" / M(Rot) / S(220) / L(12)
        "\x4b\x3e\x46\x3f\x3b\x49\x4f\x43\x2f\x41\x4a\x40\xdc\x35\x0f\xe0",
        // "alloc" / M(Rot) / S(124) / L(5)
        "\xdd\xe8\xe8\xeb\xdf\x7c\x61\x95\xaa\xb3\x6f\x56\x48\x19\x47\xc6",
        // "CFBundleVersion" / M(Xor4) / S(250) / L(15)
        "\xe3\xe6\xe2\xd5\xce\xc4\xcc\xc5\xf6\xc5\xd2\xd3\xc9\xcf\xce\xa0",
        // "/System/Library/Frameworks/Security.framework/Security" / M(Xor2) / S(147) / L(54)
        "\x8b\xf7\xdd\xd7\xd0\xc1\xc9\x8b\xe8\xcd\xc6\xd6\xc5\xd6\xdd\x8b\xe2\xd6\xc5\xc9\xc1\xd3\xcb\xd6\xcf\xd7\x8b\xf7\xc1\xc7\xd1\xd6\xcd\xd0\xdd\x8a\xc2\xd6\xc5\xc9\xc1\xd3\xcb\xd6\xcf\x8b\xf7\xc1\xc7\xd1\xd6\xcd\xd0\xdd\xa4",
        // "d2i_X509_bio" / M(Xor1) / S(117) / L(12)
        "\x11\x47\x1c\x2a\x2d\x40\x45\x4c\x2a\x17\x1c\x1a\x75\xc7\xbd\xa9",
        // "CFReadStreamCreateWithFile" / M(Xor2) / S(220) / L(26)
        "\xbc\xb9\xad\x9a\x9e\x9b\xac\x8b\x8d\x9a\x9e\x92\xbc\x8d\x9a\x9e\x8b\x9a\xa8\x96\x8b\x97\xb9\x96\x93\x9a\xff\x2b\x0e\xd6\x72\x45\xae\x67\x20",
        // "" / M(None) / S(0) / L(0)
        "\x3a\xec\xe2\x40\x96\x8b\x34\x7a\x74\xef\xfd\x0b\xa8\xd6\x84\x94\x15\xaf\xb0\x8b\xa1\x7c\xe8\x6f\xc9\xd5\x58\x83\xf3\xae\xcd\xfc",
        // "EVP_MD_CTX_init" / M(Rot) / S(34) / L(15)
        "\x67\x78\x72\x81\x6f\x66\x81\x65\x76\x7a\x81\x8b\x90\x8b\x96\x22",
        // "_MASReceipt/receipt" / M(Xor4) / S(60) / L(19)
        "\xef\xfd\xf1\xe3\xe2\xd5\xd3\xd5\xd9\xc0\xc4\x9f\xc2\xd5\xd3\xd5\xd9\xc0\xc4\xb0",
        // "" / M(None) / S(0) / L(0)
        "\x74\xc8\x9a\xfb\x13\x61\xe3\xa0\xe0\x52\x77\xe6\xd9\x92\x53\xab\x51\x86\x96\x94\x2d\xee\x97\x3e\x77\x19\xa6\x9b\x78\xd2\x96\xd4",
        // "" / M(None) / S(0) / L(0)
        "\x0e\xaa\x93\xc2\xfd\xf1\x40\x69\x5d\x29\xf5\x0d\x4f\xfa\xd7\x8b\x5e\x3f\xdd\x57\x36\xfa\x66\xa0\xba\xef\x68\x51\x63\xf2\x5f\x76",
        // "CFBundleShortVersionString" / M(Xor4) / S(151) / L(26)
        "\xe6\xe3\xe7\xd0\xcb\xc1\xc9\xc0\xf6\xcd\xca\xd7\xd1\xf3\xc0\xd7\xd6\xcc\xca\xcb\xf6\xd1\xd7\xcc\xcb\xc2\xa5\xb4\x35\x83\x19\xce\xe9\x25\x63",
        // "CFArrayAppendValue" / M(Xor1) / S(180) / L(18)
        "\xf7\xf2\xf5\xc6\xc6\xd5\xcd\xf5\xc4\xc4\xd1\xda\xd0\xe2\xd5\xd8\xc1\xd1\xb4",
        // "EVP_DigestInit" / M(Rot) / S(96) / L(14)
        "\xa5\xb6\xb0\xbf\xa4\xc9\xc7\xc5\xd3\xd4\xa9\xce\xc9\xd4\x60\xe5",
        // "" / M(None) / S(0) / L(0)
        "\xf4\x4e\xf1\xcc\x43\x59\xd4\xc6\x28\x56\xb6\xd6\xb8\x9c\xd7\xd7\x5f\xb6\x33\x27\x6e\xa4\x74\x97\xb5\x45\xd1\x30\xad\xe7\x95\x97",
        // "/System/Library/Frameworks/IOKit.framework/IOKit" / M(Xor1) / S(17) / L(48)
        "\x3e\x42\x68\x62\x65\x74\x7c\x3e\x5d\x78\x73\x63\x70\x63\x68\x3e\x57\x63\x70\x7c\x74\x66\x7e\x63\x7a\x62\x3e\x58\x5e\x5a\x78\x65\x3f\x77\x63\x70\x7c\x74\x66\x7e\x63\x7a\x3e\x58\x5e\x5a\x78\x65\x11",
        // "SecItemCopyMatching" / M(Rot) / S(72) / L(19)
        "\x9b\xad\xab\x91\xbc\xad\xb5\x8b\xb7\xb8\xc1\x95\xa9\xbc\xab\xb0\xb1\xb6\xaf\x48",
        // "yyyy'-'MM'-'dd'T'HH':'mm':'ss'Z'" / M(Rot) / S(89) / L(32)
        "\xd2\xd2\xd2\xd2\x80\x86\x80\xa6\xa6\x80\x86\x80\xbd\xbd\x80\xad\x80\xa1\xa1\x80\x93\x80\xc6\xc6\x80\x93\x80\xcc\xcc\x80\xb3\x80\x59",
        // "" / M(None) / S(0) / L(0)
        "\x01\x9e\x56\x79\x41\x3a\xb3\x87\xdf\x27\x24\x0e\x8b\xc2\x2b\x22\x3a\x22\x7f\x33\x44\x78\xe0\x5d\x4c\x52\x76\xca\x17\x99\x12\xa1",
        // "setDelegate:" / M(Xor3) / S(124) / L(12)
        "\xff\xe9\xf8\xc8\xe9\xe0\xe9\xeb\xed\xf8\xe9\xb6\x8c\xa9\xf2\xb3",
        // "Contents/_MASReceipt" / M(Xor4) / S(158) / L(20)
        "\xb5\x99\x98\x82\x93\x98\x82\x85\xd9\xa9\xbb\xb7\xa5\xa4\x93\x95\x93\x9f\x86\x82\xf6",
        // "OpenSSL_add_all_digests" / M(Xor2) / S(14) / L(23)
        "\x61\x5e\x4b\x40\x7d\x7d\x62\x71\x4f\x4a\x4a\x71\x4f\x42\x42\x71\x4a\x47\x49\x4b\x5d\x5a\x5d\x2e\xcb\x56\x35\x50\xe0\xe1\x7e\xb5",
        // "PKCS7_verify" / M(Xor1) / S(167) / L(12)
        "\xf7\xec\xe4\xf4\x90\xf8\xd1\xc2\xd5\xce\xc1\xde\xa7\xa8\x58\xaf",
        // "IOMACAddress" / M(Xor4) / S(17) / L(12)
        "\x59\x5f\x5d\x51\x53\x51\x74\x74\x62\x75\x63\x63\x10\x04\x23\xd6",
        // "CFURLCreateFromFileSystemRepresentation" / M(Xor4) / S(40) / L(39)
        "\xc3\xc6\xd5\xd2\xcc\xc3\xf2\xe5\xe1\xf4\xe5\xc6\xf2\xef\xed\xc6\xe9\xec\xe5\xd3\xf9\xf3\xf4\xe5\xed\xd2\xe5\xf0\xf2\xe5\xf3\xe5\xee\xf4\xe1\xf4\xe9\xef\xee\x80\x0f\x3d\x59\xd4\xd9\xe1\x15\x04",
        // "init" / M(Xor3) / S(147) / L(4)
        "\xca\xcd\xca\xd7\xa3\xdc\xc5\x46\x25\xe1\xbc\x29\xda\x15\xb0\x62",
        // "SHA1_Init" / M(Xor2) / S(140) / L(9)
        "\xcf\xd4\xdd\xad\xc3\xd5\xf2\xf5\xe8\x9c\x85\xf2\xbd\x83\xa0\x64",
        // "CFDateFormatterCreateDateFromString" / M(Xor3) / S(253) / L(35)
        "\x62\x67\x65\x40\x55\x44\x67\x4e\x53\x4c\x40\x55\x55\x44\x53\x62\x53\x44\x40\x55\x44\x65\x40\x55\x44\x67\x53\x4e\x4c\x72\x55\x53\x48\x4f\x46\x21",
        // "" / M(None) / S(0) / L(0)
        "\x76\x8f\xb1\xa9\x11\x14\xab\x3c\x7b\x10\xa7\x3b\x5f\xfc\xb6\x58\xf8\x7e\xba\xe3\xcf\xfc\x85\x60\x28\xc7\xc7\x97\x29\x9e\xdb\xa3",
        // "" / M(None) / S(0) / L(0)
        "\xac\x14\x67\x50\x62\x2f\x6b\xe2\x2a\x01\x78\x61\xa9\xe4\xd8\xec\x2a\xae\x03\x80\x6f\x73\xc5\xd3\xe3\x9c\x42\xc1\xb2\x7b\xd1\x99",
        // "SecItemCopyMatching" / M(Xor3) / S(16) / L(19)
        "\x77\x41\x47\x6d\x50\x41\x49\x67\x4b\x54\x5d\x69\x45\x50\x47\x4c\x4d\x4a\x43\x24",
        // "" / M(None) / S(0) / L(0)
        "\xe5\xa6\xc3\xfe\x53\xd2\x7f\x0c\x54\x0b\xdf\x4f\x8c\x11\x9a\x54\xe4\x2b\x55\x68\xec\x60\xd2\x12\x2f\xc1\x8c\x63\xdc\x99\x62\x1e",
        // "Contents/_MASReceipt" / M(Xor1) / S(12) / L(20)
        "\x4f\x63\x62\x78\x69\x62\x78\x7f\x23\x53\x41\x4d\x5f\x5e\x69\x6f\x69\x65\x7c\x78\x0c",
        // "" / M(None) / S(0) / L(0)
        "\xac\x6c\x81\x59\x57\xc7\x51\xd5\xca\xd7\x2a\x07\x87\x64\x01\xd0\x6d\x81\x34\x4e\x9e\x37\x36\xc7\xf9\x56\x7d\xf9\x7a\xb8\xba\x7e",
        // "" / M(None) / S(0) / L(0)
        "\x40\x08\x24\x85\x89\x36\x52\x13\xbe\xd3\x33\x9d\xc1\x9a\xdc\x67\xc7\x36\xe6\xe3\x1f\xaa\x63\x2e\x2b\x78\x35\xd2\x3d\x1b\x82\xb7",
        // "sk_value" / M(Xor1) / S(122) / L(8)
        "\x09\x11\x25\x0c\x1b\x16\x0f\x1f\x7a\xfb\x19\xfd\x2f\xee\xcd\x6f",
        // "IOMasterPort" / M(Xor3) / S(166) / L(12)
        "\xff\xf9\xfb\xd7\xc5\xc2\xd3\xc4\xe6\xd9\xc4\xc2\xb6\xe1\x72\x70",
        // "BIO_free" / M(Rot) / S(17) / L(8)
        "\x53\x5a\x60\x70\x77\x83\x76\x76\x11\x85\x72\xb1\xd0\x96\x45\xaa",
        // "SHA1" / M(Xor2) / S(173) / L(4)
        "\xee\xf5\xfc\x8c\xbd\x86\x10\x34\x57\xb0\xd8\xff\x12\x35\x5f\x04",
        // "EVP_get_digestbyname" / M(Xor2) / S(213) / L(20)
        "\x85\x96\x90\x9f\xa7\xa5\xb4\x9f\xa4\xa9\xa7\xa5\xb3\xb4\xa2\xb9\xae\xa1\xad\xa5\xc0",
        // "sha1" / M(Rot) / S(44) / L(4)
        "\x9f\x94\x8d\x5d\x2c\x10\xbb\x7c\xdf\x1c\x35\xe1\x15\x66\x3b\x88",
        // "" / M(None) / S(0) / L(0)
        "\x19\x57\xd3\xe9\xa2\x66\xf3\x05\xba\xfd\x68\xbb\x18\x8b\x64\xcb\x2a\x04\xc4\xa7\x7a\x9f\xfb\x89\xef\xcd\xb1\x9f\x93\xec\x20\xb9",
        // "CFURLCreateWithFileSystemPathRelativeToBase" / M(Xor1) / S(0) / L(43)
        "\x43\x46\x55\x52\x4c\x43\x72\x65\x61\x74\x65\x57\x69\x74\x68\x46\x69\x6c\x65\x53\x79\x73\x74\x65\x6d\x50\x61\x74\x68\x52\x65\x6c\x61\x74\x69\x76\x65\x54\x6f\x42\x61\x73\x65\x00\x9c\x2b\x70\x9b\xf1\xda\xe9\x1f",
        // "start" / M(Rot) / S(230) / L(5)
        "\x59\x5a\x47\x58\x5a\xe6\x52\xc1\xb0\xa6\xc2\xc9\x4b\x7e\x6e\x06",
        // "" / M(None) / S(0) / L(0)
        "\x19\x36\x35\x06\x82\x50\x03\xfc\x0c\xe1\x1e\x77\x2f\xc3\x32\xa2\x89\x67\x21\x9d\x87\x96\x96\x60\x3d\x9d\xb4\x9c\xe4\xa2\x01\xbd",
        // "EVP_DigestUpdate" / M(Xor2) / S(201) / L(16)
        "\x9d\x8e\x88\x87\x9c\xb1\xbf\xbd\xab\xac\x8d\xa8\xbc\xb9\xac\xbd\xd8",
        // "/System/Library/Keychains/SystemRootCertificates.keychain" / M(Xor2) / S(60) / L(57)
        "\x51\x2d\x07\x0d\x0a\x1b\x13\x51\x32\x17\x1c\x0c\x1f\x0c\x07\x51\x35\x1b\x07\x1d\x16\x1f\x17\x10\x0d\x51\x2d\x07\x0d\x0a\x1b\x13\x2c\x11\x11\x0a\x3d\x1b\x0c\x0a\x17\x18\x17\x1d\x1f\x0a\x1b\x0d\x50\x15\x1b\x07\x1d\x16\x1f\x17\x10\x7e\x61\x2a\x2a\xe2\xda\x29\x23\x42",
        // "/System/Library/Frameworks/IOKit.framework/IOKit" / M(Xor3) / S(44) / L(48)
        "\x72\x0e\x24\x2e\x29\x38\x30\x72\x11\x34\x3f\x2f\x3c\x2f\x24\x72\x1b\x2f\x3c\x30\x38\x2a\x32\x2f\x36\x2e\x72\x14\x12\x16\x34\x29\x73\x3b\x2f\x3c\x30\x38\x2a\x32\x2f\x36\x72\x14\x12\x16\x34\x29\x5d",
        // "" / M(None) / S(0) / L(0)
        "\xf1\x87\x9c\xa0\x5c\xa0\x99\x88\x7b\x5c\x86\xdd\x18\x64\xf3\x8f\x8f\x14\xeb\xf7\x07\x7d\xb7\x5b\x45\xae\x69\xe2\xf4\x62\x63\x84",
        // "" / M(None) / S(0) / L(0)
        "\x65\xc2\xf1\x52\xab\xcd\xaf\xfa\xd8\x0d\xb1\x90\x8f\x19\xa8\xe1\x58\x06\x32\x02\xae\x9f\x5a\x6c\x21\xda\xae\x0a\xf5\xcb\xd9\x81",
        // "EVP_DigestFinal" / M(Xor2) / S(51) / L(15)
        "\x66\x75\x73\x7c\x67\x4a\x44\x46\x50\x57\x65\x4a\x4d\x42\x4f\x23",
        // "CFURLCreateCopyAppendingPathComponent" / M(Xor2) / S(103) / L(37)
        "\x02\x07\x14\x13\x0d\x02\x33\x24\x20\x35\x24\x02\x2e\x31\x38\x00\x31\x31\x24\x2f\x25\x28\x2f\x26\x11\x20\x35\x29\x02\x2e\x2c\x31\x2e\x2f\x24\x2f\x35\x41",
        // "strlen" / M(Xor4) / S(162) / L(6)
        "\x53\x54\x52\x4c\x45\x4e\x20\xf8\xf1\x02\x39\x20\xea\x4c\x3b\xfe",
        // "" / M(None) / S(0) / L(0)
        "\x84\x78\x2b\x87\xd5\xd9\xe6\xad\xbc\xe5\xc4\x05\xce\x17\x00\xd8\x8c\x8f\x33\xe9\x6c\x97\xab\xe3\x3e\x78\x26\x23\xf7\xd5\x13\x2a",
        // "kSecMatchSearchList" / M(Rot) / S(217) / L(19)
        "\x44\x2c\x3e\x3c\x26\x3a\x4d\x3c\x41\x2c\x3e\x3a\x4b\x3c\x41\x25\x42\x4c\x4d\xd9",
        // "CFReadStreamOpen" / M(Xor2) / S(188) / L(16)
        "\xee\xeb\xff\xc8\xcc\xc9\xfe\xd9\xdf\xc8\xcc\xc0\xe2\xdd\xc8\xc3\xad",
        // "CFDataCreate" / M(Rot) / S(158) / L(12)
        "\xe1\xe4\xe2\xff\x12\xff\xe1\x10\x03\xff\x12\x03\x9e\x92\x00\xdf",
        // "" / M(None) / S(0) / L(0)
        "\x50\xcc\xcc\x89\x4a\x91\xe0\x7f\x79\xa3\xce\xc5\x32\xc3\xc1\x3d\x9b\x35\xe4\xd2\xd4\x03\x6d\x5a\x28\x5f\xbb\x4b\x8f\x55\xcc\x3c",
        // "X509_NAME_get_text_by_NID" / M(Rot) / S(136) / L(25)
        "\xe0\xbd\xb8\xc1\xe7\xd6\xc9\xd5\xcd\xe7\xef\xed\xfc\xe7\xfc\xed\x00\xfc\xe7\xea\x01\xe7\xd6\xd1\xcc\x88\x8d\x40\xd6\x56\xad\x67\xa9\x88",
        // "" / M(None) / S(0) / L(0)
        "\x6b\x21\x36\x09\xe5\x3d\x16\x4e\xf3\xfd\x05\x99\xc3\xa7\x76\xe4\x50\xc7\x67\xab\x46\xbe\x5d\x14\x60\xaa\x52\x41\xac\xa3\x69\x2b",
        // "BIO_s_mem" / M(Xor2) / S(9) / L(9)
        "\x5b\x50\x56\x46\x6a\x46\x74\x7c\x74\x19\x33\x4c\x9c\x4c\x04\x8f",
        // "SecKeychainSearchCopyNext" / M(Xor4) / S(223) / L(25)
        "\xcd\xfb\xfd\xd5\xfb\xe7\xfd\xf6\xff\xf7\xf0\xcd\xfb\xff\xec\xfd\xf6\xdd\xf1\xee\xe7\xd0\xfb\xe6\xea\x9e\x02\x4d\xd2\x63\xa5\x64\x70\x7f",
        // "CFURLCreateCopyAppendingPathComponent" / M(Xor2) / S(129) / L(37)
        "\xe4\xe1\xf2\xf5\xeb\xe4\xd5\xc2\xc6\xd3\xc2\xe4\xc8\xd7\xde\xe6\xd7\xd7\xc2\xc9\xc3\xce\xc9\xc0\xf7\xc6\xd3\xcf\xe4\xc8\xca\xd7\xc8\xc9\xc2\xc9\xd3\xa7",
        // "/System/Library/Frameworks/AppKit.framework/AppKit" / M(Xor4) / S(85) / L(50)
        "\xc0\xbc\x96\x9c\x9b\x8a\x82\xc0\xa3\x86\x8d\x9d\x8e\x9d\x96\xc0\xa9\x9d\x8e\x82\x8a\x98\x80\x9d\x84\x9c\xc0\xae\x9f\x9f\xa4\x86\x9b\xc1\x89\x9d\x8e\x82\x8a\x98\x80\x9d\x84\xc0\xae\x9f\x9f\xa4\x86\x9b\xef",
        // "/usr/lib/libSystem.dylib" / M(Rot) / S(152) / L(24)
        "\xc7\x0d\x0b\x0a\xc7\x04\x01\xfa\xc7\x04\x01\xfa\xeb\x11\x0b\x0c\xfd\x05\xc6\xfc\x11\x04\x01\xfa\x98\xb8\x9a\x0d\x5c\xbe\x4c\xcb\x05",
        // "Apple Root CA" / M(Xor1) / S(96) / L(13)
        "\x21\x10\x10\x0c\x05\x40\x32\x0f\x0f\x14\x40\x23\x21\x60\x0f\xd1",
        // "CFDictionaryGetValue" / M(Xor4) / S(195) / L(20)
        "\xbc\xb9\xbb\x96\x9c\x8b\x96\x90\x91\x9e\x8d\x86\xb8\x9a\x8b\xa9\x9e\x93\x8a\x9a\xff",
        // "objc_msgSend" / M(Xor2) / S(34) / L(12)
        "\x5d\x50\x58\x51\x6d\x5f\x41\x55\x61\x57\x5c\x56\x32\xf0\xdb\x79",
        // "" / M(None) / S(0) / L(0)
        "\xaf\xd0\xbf\x98\x00\x1a\xc7\xb7\xe4\x1c\x6b\x28\xbd\xaf\xfc\x13\xfe\x11\xf8\x4e\xa9\x29\xd3\x40\x72\x66\x49\x4c\x3d\xfc\x86\x3c",
        // "" / M(None) / S(0) / L(0)
        "\x18\xe8\x2e\x9a\xe9\xc6\xe7\x3d\xc8\x55\xb2\xf8\x15\x34\x41\x1f\x38\xec\xf7\x5f\x66\x6c\xa4\x73\xb7\xd6\x6a\x65\x30\x01\xd0\xa7",
        // "" / M(None) / S(0) / L(0)
        "\x54\x15\x75\xc5\x99\xc8\xd2\xde\xd8\x0c\x56\x49\xc3\x66\x9b\xfe\xae\x72\xe1\xd7\xcb\x85\x6c\x71\x94\x18\x25\x24\x2c\x1f\x6a\xe9",
        // "" / M(None) / S(0) / L(0)
        "\x7d\xa6\xa1\xcc\x70\xda\x83\x39\x3d\x84\x7d\x8e\xa0\x1e\x07\x46\x42\x51\x40\x0c\xd4\xb0\x3c\x6b\x98\xcf\x24\xcd\x57\xf8\x5b\x9f",
        // "PKCS7_free" / M(Rot) / S(145) / L(10)
        "\xe1\xdc\xd4\xe4\xc8\xf0\xf7\x03\xf6\xf6\x91\x09\x21\xeb\x61\xb8",
        // "glob_b" / M(Xor3) / S(81) / L(6)
        "\x06\x0d\x0e\x03\x3e\x03\x61\x31\x17\xb0\x1b\x24\x5c\x9f\x5c\x0d",
        // "Contents" / M(Rot) / S(175) / L(8)
        "\xf2\x1e\x1d\x23\x14\x1d\x23\x22\xaf\x6f\x5b\x32\xae\x3f\x01\xa5",
        // "kSecClass" / M(Xor3) / S(31) / L(9)
        "\x44\x7c\x4a\x4c\x6c\x43\x4e\x5c\x5c\x2f\xff\xbe\xc7\x7e\x6c\x1a",
        // "strlen" / M(Xor1) / S(228) / L(6)
        "\x97\x90\x96\x88\x81\x8a\xe4\x3e\x8f\x30\x49\xf7\xc6\xd0\x5a\x81",
        // "" / M(None) / S(0) / L(0)
        "\xce\xd2\xcb\x34\xc6\x7d\xf7\x68\x30\x90\x97\xbf\xb1\xbb\x34\x29\x80\x56\x00\x5e\xc7\x72\x8e\xde\xd7\xce\x00\x3c\x14\x06\x41\xd4",
        // "CFDataGetBytePtr" / M(Xor4) / S(120) / L(16)
        "\xbb\xbe\xbc\x99\x8c\x99\xbf\x9d\x8c\xba\x81\x8c\x9d\xa8\x8c\x8a\xf8",
        // "kSecMatchLimitAll" / M(Xor2) / S(205) / L(17)
        "\xb4\x8c\xba\xbc\x92\xbe\xab\xbc\xb7\x93\xb6\xb2\xb6\xab\x9e\xb3\xb3\xdf",
        // "CFReadStreamRead" / M(Rot) / S(98) / L(16)
        "\xa5\xa8\xb4\xc7\xc3\xc6\xb5\xd6\xd4\xc7\xc3\xcf\xb4\xc7\xc3\xc6\x62",
        // "CFDataGetBytePtr" / M(Rot) / S(238) / L(16)
        "\x31\x34\x32\x4f\x62\x4f\x35\x53\x62\x30\x67\x62\x53\x3e\x62\x60\xee",
    };
    
    // Table for storing pointers
    static void *RV_Pointers[573] = {
        ((void *) NULL),
        ((void *) SHA1_Update),
        ((void *) EVP_DigestFinal),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) X509_digest),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) sk_free),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) EVP_MD_CTX_init),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) X509_get_ext_by_OBJ),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) CFStringCreateWithBytes),
        ((void *) d2i_PKCS7_bio),
        ((void *) PKCS7_free),
        ((void *) NULL),
        ((void *) EVP_MD_CTX_init),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) sk_num),
        ((void *) NULL),
        ((void *) CFStringCreateWithCString),
        ((void *) glob),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) SHA1_Final),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) dlsym),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) X509_STORE_new),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) X509_digest),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) X509_digest),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) X509_free),
        ((void *) EVP_DigestUpdate),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) EVP_get_digestbyname),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) ASN1_get_object),
        ((void *) X509_STORE_add_cert),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) PKCS7_get0_signers),
        ((void *) CFStringCreateWithBytes),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) d2i_PKCS7_bio),
        ((void *) glob_b),
        ((void *) BIO_free),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) PKCS7_verify),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) dlopen),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) X509_free),
        ((void *) EVP_DigestInit),
        ((void *) X509_STORE_add_cert),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) d2i_PKCS7_bio),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) RTLD_MAIN_ONLY),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) X509_get_ext_by_OBJ),
        ((void *) NULL),
        ((void *) X509_free),
        ((void *) BIO_free),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) PKCS7_free),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) sk_num),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) globfree),
        ((void *) X509_STORE_new),
        ((void *) NULL),
        ((void *) strncmp),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) EVP_DigestInit),
        ((void *) BIO_write),
        ((void *) SHA1_Update),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) PKCS7_get0_signers),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) OpenSSL_add_all_digests),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) strncmp),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) SHA1_Init),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) OBJ_txt2obj),
        ((void *) X509_STORE_new),
        ((void *) NULL),
        ((void *) ASN1_get_object),
        ((void *) NULL),
        ((void *) X509_STORE_add_cert),
        ((void *) NULL),
        ((void *) CFStringCreateWithCString),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) EVP_DigestFinal),
        ((void *) NULL),
        ((void *) BIO_s_mem),
        ((void *) dlopen),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) EVP_DigestUpdate),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) EVP_get_digestbyname),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) OpenSSL_add_all_digests),
        ((void *) NULL),
        ((void *) sk_free),
        ((void *) NULL),
        ((void *) SHA1_Update),
        ((void *) dlsym),
        ((void *) SHA1_Final),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) SHA1_Final),
        ((void *) d2i_X509_bio),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) RTLD_MAIN_ONLY),
        ((void *) CFStringCreateWithBytes),
        ((void *) NULL),
        ((void *) globfree),
        ((void *) NULL),
        ((void *) d2i_X509_bio),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) strncmp),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) BIO_s_mem),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) SHA1),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) SHA1_Init),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) SHA1),
        ((void *) CFStringCreateWithCString),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) glob_b),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) ASN1_get_object),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) ASN1_OBJECT_free),
        ((void *) NULL),
        ((void *) glob),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) sk_value),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) globfree),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) sk_value),
        ((void *) BIO_new),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) ASN1_OBJECT_free),
        ((void *) X509_STORE_free),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) PKCS7_get0_signers),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) PKCS7_verify),
        ((void *) NULL),
        ((void *) OBJ_txt2obj),
        ((void *) X509_NAME_get_text_by_NID),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) BIO_write),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) RTLD_MAIN_ONLY),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) BIO_new),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) ASN1_OBJECT_free),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) sk_free),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) sk_num),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) OBJ_txt2obj),
        ((void *) BIO_new),
        ((void *) X509_NAME_get_text_by_NID),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) BIO_write),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) X509_STORE_free),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) dlopen),
        ((void *) NULL),
        ((void *) X509_STORE_free),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) glob),
        ((void *) NULL),
        ((void *) dlsym),
        ((void *) NULL),
        ((void *) strlen),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) X509_get_ext_by_OBJ),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) d2i_X509_bio),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) EVP_MD_CTX_init),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) EVP_DigestInit),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) OpenSSL_add_all_digests),
        ((void *) PKCS7_verify),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) SHA1_Init),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) sk_value),
        ((void *) NULL),
        ((void *) BIO_free),
        ((void *) SHA1),
        ((void *) EVP_get_digestbyname),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) EVP_DigestUpdate),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) EVP_DigestFinal),
        ((void *) NULL),
        ((void *) strlen),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) X509_NAME_get_text_by_NID),
        ((void *) NULL),
        ((void *) BIO_s_mem),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) PKCS7_free),
        ((void *) glob_b),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) strlen),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
    };
    
    // Push a new diagnostic context
#pragma clang diagnostic push
    // When getting primary MAC address, an effectless alignment requirement increase is reported
#pragma clang diagnostic ignored "-Wcast-align"
    // In RELEASE mode, static variable are inlined but their declaration are not removed
#pragma clang diagnostic ignored "-Wunused"
    // In DEBUG mode, static variable are not inlined
#pragma clang diagnostic ignored "-Wused-but-marked-unused"
    
    // Global variables
    static int RV_RHZNVGLIATFX __unused;
    static int RV_KHFJZNQZOHCB __unused;
    static int RV_BUBHQVCEHSTM __unused;
    static int RV_VTDLAHQPKOZD __unused;
    static int RV_APFJIQNNAHUJ __unused;
    static int RV_KSFOTXHUXRJV __unused;
    static int RV_MAUEZLNOTUMG __unused;
    static int RV_KKYSZVFAWLCE __unused;
    
    
#define RV_ASN1_get_object_012E0060 ((__RV_ASN1_get_object) RV_LookupFunction015(RV_ObfuscationFunction003, 302, 254, 16, RV_ObfuscationFunction006, 96, 196, 16))
#define RV_ASN1_get_object_019200FF ((__RV_ASN1_get_object) RV_LookupFunction015(RV_ObfuscationFunction003, 402, 134, 16, RV_ObfuscationFunction003, 255, 140, 16))
#define RV_ASN1_OBJECT_free_0192016B ((__RV_ASN1_OBJECT_free) RV_LookupFunction015(RV_ObfuscationFunction003, 402, 134, 16, RV_ObfuscationFunction009, 363, 190, 17))
#define RV_BIO_free_00AD0210 ((__RV_BIO_free) RV_LookupFunction015(RV_ObfuscationFunction007, 173, 99, 16, RV_ObfuscationFunction003, 528, 17, 16))
#define RV_BIO_free_012E0210 ((__RV_BIO_free) RV_LookupFunction015(RV_ObfuscationFunction003, 302, 254, 16, RV_ObfuscationFunction003, 528, 17, 16))
#define RV_BIO_free_01920210 ((__RV_BIO_free) RV_LookupFunction015(RV_ObfuscationFunction003, 402, 134, 16, RV_ObfuscationFunction003, 528, 17, 16))
#define RV_BIO_new_01920179 ((__RV_BIO_new) RV_LookupFunction015(RV_ObfuscationFunction003, 402, 134, 16, RV_ObfuscationFunction007, 377, 211, 16))
#define RV_BIO_new_0192019B ((__RV_BIO_new) RV_LookupFunction015(RV_ObfuscationFunction003, 402, 134, 16, RV_ObfuscationFunction004, 411, 56, 16))
#define RV_BIO_s_mem_00AD010A ((__RV_BIO_s_mem) RV_LookupFunction015(RV_ObfuscationFunction007, 173, 99, 16, RV_ObfuscationFunction004, 266, 35, 16))
#define RV_BIO_s_mem_00AD0227 ((__RV_BIO_s_mem) RV_LookupFunction015(RV_ObfuscationFunction007, 173, 99, 16, RV_ObfuscationFunction007, 551, 9, 16))
#define RV_BIO_s_mem_0192010A ((__RV_BIO_s_mem) RV_LookupFunction015(RV_ObfuscationFunction003, 402, 134, 16, RV_ObfuscationFunction004, 266, 35, 16))
#define RV_BIO_write_00AD00DE ((__RV_BIO_write) RV_LookupFunction015(RV_ObfuscationFunction007, 173, 99, 16, RV_ObfuscationFunction00C, 222, 35, 16))
#define RV_BIO_write_00AD01D4 ((__RV_BIO_write) RV_LookupFunction015(RV_ObfuscationFunction007, 173, 99, 16, RV_ObfuscationFunction00A, 468, 47, 16))
#define RV_BIO_write_012E01D4 ((__RV_BIO_write) RV_LookupFunction015(RV_ObfuscationFunction003, 302, 254, 16, RV_ObfuscationFunction00A, 468, 47, 16))
#define RV_CC_SHA1_Final_01B600B7 ((__RV_CC_SHA1_Final) RV_LookupFunction015(RV_ObfuscationFunction008, 438, 170, 33, RV_ObfuscationFunction006, 183, 148, 16))
#define RV_CFArrayAppendValue_01B70122 ((__RV_CFArrayAppendValue) RV_LookupFunction015(RV_ObfuscationFunction007, 439, 2, 67, RV_ObfuscationFunction006, 290, 133, 19))
#define RV_CFArrayAppendValue_01B701F7 ((__RV_CFArrayAppendValue) RV_LookupFunction015(RV_ObfuscationFunction007, 439, 2, 67, RV_ObfuscationFunction005, 503, 180, 19))
#define RV_CFArrayGetValueAtIndex_003F01B2 ((__RV_CFArrayGetValueAtIndex) RV_LookupFunction015(RV_ObfuscationFunction007, 63, 225, 67, RV_ObfuscationFunction00B, 434, 208, 23))
#define RV_CFArrayGetValueAtIndex_00670166 ((__RV_CFArrayGetValueAtIndex) RV_LookupFunction015(RV_ObfuscationFunction00A, 103, 135, 67, RV_ObfuscationFunction006, 358, 191, 23))
#define RV_CFBundleGetMainBundle_01B700AE ((__RV_CFBundleGetMainBundle) RV_LookupFunction015(RV_ObfuscationFunction007, 439, 2, 67, RV_ObfuscationFunction006, 174, 197, 22))
#define RV_CFBundleUnloadExecutable_00670104 ((__RV_CFBundleUnloadExecutable) RV_LookupFunction015(RV_ObfuscationFunction00A, 103, 135, 67, RV_ObfuscationFunction00C, 260, 166, 33))
#define RV_CFDataAppendBytes_006701C0 ((__RV_CFDataAppendBytes) RV_LookupFunction015(RV_ObfuscationFunction00A, 103, 135, 67, RV_ObfuscationFunction006, 448, 214, 18))
#define RV_CFDataAppendBytes_01B701C0 ((__RV_CFDataAppendBytes) RV_LookupFunction015(RV_ObfuscationFunction007, 439, 2, 67, RV_ObfuscationFunction006, 448, 214, 18))
#define RV_CFDataCreateMutable_0067011C ((__RV_CFDataCreateMutable) RV_LookupFunction015(RV_ObfuscationFunction00A, 103, 135, 67, RV_ObfuscationFunction00B, 284, 104, 20))
#define RV_CFDataCreateMutable_01B70156 ((__RV_CFDataCreateMutable) RV_LookupFunction015(RV_ObfuscationFunction007, 439, 2, 67, RV_ObfuscationFunction005, 342, 101, 20))
#define RV_CFDataGetBytePtr_003F0239 ((__RV_CFDataGetBytePtr) RV_LookupFunction015(RV_ObfuscationFunction007, 63, 225, 67, RV_ObfuscationFunction00B, 569, 120, 17))
#define RV_CFDataGetBytePtr_01B7023C ((__RV_CFDataGetBytePtr) RV_LookupFunction015(RV_ObfuscationFunction007, 439, 2, 67, RV_ObfuscationFunction004, 572, 238, 17))
#define RV_CFDataGetLength_003F0194 ((__RV_CFDataGetLength) RV_LookupFunction015(RV_ObfuscationFunction007, 63, 225, 67, RV_ObfuscationFunction00C, 404, 148, 16))
#define RV_CFDataGetLength_00670194 ((__RV_CFDataGetLength) RV_LookupFunction015(RV_ObfuscationFunction00A, 103, 135, 67, RV_ObfuscationFunction00C, 404, 148, 16))
#define RV_CFDataGetLength_01B700B1 ((__RV_CFDataGetLength) RV_LookupFunction015(RV_ObfuscationFunction007, 439, 2, 67, RV_ObfuscationFunction00B, 177, 191, 16))
#define RV_CFDictionaryCreateMutable_003F006E ((__RV_CFDictionaryCreateMutable) RV_LookupFunction015(RV_ObfuscationFunction007, 63, 225, 67, RV_ObfuscationFunction00C, 110, 188, 34))
#define RV_CFDictionaryCreateMutable_003F0181 ((__RV_CFDictionaryCreateMutable) RV_LookupFunction015(RV_ObfuscationFunction007, 63, 225, 67, RV_ObfuscationFunction004, 385, 254, 34))
#define RV_CFDictionaryCreateMutable_00670181 ((__RV_CFDictionaryCreateMutable) RV_LookupFunction015(RV_ObfuscationFunction00A, 103, 135, 67, RV_ObfuscationFunction004, 385, 254, 34))
#define RV_CFDictionarySetValue_003F0132 ((__RV_CFDictionarySetValue) RV_LookupFunction015(RV_ObfuscationFunction007, 63, 225, 67, RV_ObfuscationFunction005, 306, 192, 21))
#define RV_CFDictionarySetValue_00670084 ((__RV_CFDictionarySetValue) RV_LookupFunction015(RV_ObfuscationFunction00A, 103, 135, 67, RV_ObfuscationFunction009, 132, 60, 21))
#define RV_CFEqual_0067009F ((__RV_CFEqual) RV_LookupFunction015(RV_ObfuscationFunction00A, 103, 135, 67, RV_ObfuscationFunction005, 159, 239, 16))
#define RV_CFNumberCreate_01B70138 ((__RV_CFNumberCreate) RV_LookupFunction015(RV_ObfuscationFunction007, 439, 2, 67, RV_ObfuscationFunction007, 312, 103, 16))
#define RV_CFReadStreamClose_006701E3 ((__RV_CFReadStreamClose) RV_LookupFunction015(RV_ObfuscationFunction00A, 103, 135, 67, RV_ObfuscationFunction005, 483, 247, 18))
#define RV_CFReadStreamClose_01B701E3 ((__RV_CFReadStreamClose) RV_LookupFunction015(RV_ObfuscationFunction007, 439, 2, 67, RV_ObfuscationFunction005, 483, 247, 18))
#define RV_CFReadStreamRead_003F0019 ((__RV_CFReadStreamRead) RV_LookupFunction015(RV_ObfuscationFunction007, 63, 225, 67, RV_ObfuscationFunction00C, 25, 44, 17))
#define RV_CFReadStreamRead_00670019 ((__RV_CFReadStreamRead) RV_LookupFunction015(RV_ObfuscationFunction00A, 103, 135, 67, RV_ObfuscationFunction00C, 25, 44, 17))
#define RV_CFRelease_003F0190 ((__RV_CFRelease) RV_LookupFunction015(RV_ObfuscationFunction007, 63, 225, 67, RV_ObfuscationFunction008, 400, 189, 16))
#define RV_CFRelease_00670190 ((__RV_CFRelease) RV_LookupFunction015(RV_ObfuscationFunction00A, 103, 135, 67, RV_ObfuscationFunction008, 400, 189, 16))
#define RV_CFRelease_006701DC ((__RV_CFRelease) RV_LookupFunction015(RV_ObfuscationFunction00A, 103, 135, 67, RV_ObfuscationFunction009, 476, 148, 16))
#define RV_CFRelease_01B70190 ((__RV_CFRelease) RV_LookupFunction015(RV_ObfuscationFunction007, 439, 2, 67, RV_ObfuscationFunction008, 400, 189, 16))
#define RV_CFRelease_01B701DC ((__RV_CFRelease) RV_LookupFunction015(RV_ObfuscationFunction007, 439, 2, 67, RV_ObfuscationFunction009, 476, 148, 16))
#define RV_CFURLCreateWithFileSystemPathRelativeToBase_003F0146 ((__RV_CFURLCreateWithFileSystemPathRelativeToBase) RV_LookupFunction015(RV_ObfuscationFunction007, 63, 225, 67, RV_ObfuscationFunction00A, 326, 25, 52))
#define RV_CFURLCreateWithFileSystemPathRelativeToBase_01B70215 ((__RV_CFURLCreateWithFileSystemPathRelativeToBase) RV_LookupFunction015(RV_ObfuscationFunction007, 439, 2, 67, RV_ObfuscationFunction006, 533, 0, 52))
#define RV_d2i_PKCS7_bio_00AD00A4 ((__RV_d2i_PKCS7_bio) RV_LookupFunction015(RV_ObfuscationFunction007, 173, 99, 16, RV_ObfuscationFunction007, 164, 106, 16))
#define RV_d2i_PKCS7_bio_012E00A4 ((__RV_d2i_PKCS7_bio) RV_LookupFunction015(RV_ObfuscationFunction003, 302, 254, 16, RV_ObfuscationFunction007, 164, 106, 16))
#define RV_d2i_PKCS7_bio_019200A4 ((__RV_d2i_PKCS7_bio) RV_LookupFunction015(RV_ObfuscationFunction003, 402, 134, 16, RV_ObfuscationFunction007, 164, 106, 16))
#define RV_d2i_X509_bio_00AD0133 ((__RV_d2i_X509_bio) RV_LookupFunction015(RV_ObfuscationFunction007, 173, 99, 16, RV_ObfuscationFunction005, 307, 163, 16))
#define RV_EVP_DigestFinal_00AD021D ((__RV_EVP_DigestFinal) RV_LookupFunction015(RV_ObfuscationFunction007, 173, 99, 16, RV_ObfuscationFunction007, 541, 51, 16))
#define RV_EVP_DigestInit_012E00DD ((__RV_EVP_DigestInit) RV_LookupFunction015(RV_ObfuscationFunction003, 302, 254, 16, RV_ObfuscationFunction008, 221, 171, 16))
#define RV_EVP_DigestUpdate_012E0053 ((__RV_EVP_DigestUpdate) RV_LookupFunction015(RV_ObfuscationFunction003, 302, 254, 16, RV_ObfuscationFunction003, 83, 139, 17))
#define RV_EVP_get_digestbyname_01920057 ((__RV_EVP_get_digestbyname) RV_LookupFunction015(RV_ObfuscationFunction003, 402, 134, 16, RV_ObfuscationFunction00B, 87, 62, 21))
#define RV_EVP_MD_CTX_init_00AD01F2 ((__RV_EVP_MD_CTX_init) RV_LookupFunction015(RV_ObfuscationFunction007, 173, 99, 16, RV_ObfuscationFunction004, 498, 34, 16))
#define RV_exit_00AC00D9 ((__RV_exit) RV_LookupFunction015(RV_ObfuscationFunction00C, 172, 122, 33, RV_ObfuscationFunction005, 217, 232, 16))
#define RV_exit_01B60044 ((__RV_exit) RV_LookupFunction015(RV_ObfuscationFunction008, 438, 170, 33, RV_ObfuscationFunction00C, 68, 153, 16))
#define RV_exit_01B600D9 ((__RV_exit) RV_LookupFunction015(RV_ObfuscationFunction008, 438, 170, 33, RV_ObfuscationFunction005, 217, 232, 16))
#define RV_exit_01B600EC ((__RV_exit) RV_LookupFunction015(RV_ObfuscationFunction008, 438, 170, 33, RV_ObfuscationFunction003, 236, 116, 16))
#define RV_exit_022B0044 ((__RV_exit) RV_LookupFunction015(RV_ObfuscationFunction003, 555, 152, 33, RV_ObfuscationFunction00C, 68, 153, 16))
#define RV_exit_022B00D9 ((__RV_exit) RV_LookupFunction015(RV_ObfuscationFunction003, 555, 152, 33, RV_ObfuscationFunction005, 217, 232, 16))
#define RV_exit_022B00EC ((__RV_exit) RV_LookupFunction015(RV_ObfuscationFunction003, 555, 152, 33, RV_ObfuscationFunction003, 236, 116, 16))
#define RV_RHZNVGLIATFX_003F009C ((__RV_CFDataCreate) RV_LookupFunction015(RV_ObfuscationFunction007, 63, 225, 67, RV_ObfuscationFunction005, RV_RHZNVGLIATFX, 255, 16))
#define RV_RHZNVGLIATFX_003F01AB ((__RV_CFStringCompare) RV_LookupFunction015(RV_ObfuscationFunction007, 63, 225, 67, RV_ObfuscationFunction00C, RV_RHZNVGLIATFX, 214, 16))
#define RV_RHZNVGLIATFX_003F0223 ((__RV_CFDataCreate) RV_LookupFunction015(RV_ObfuscationFunction007, 63, 225, 67, RV_ObfuscationFunction003, RV_RHZNVGLIATFX, 158, 16))
#define RV_RHZNVGLIATFX_0067011C ((__RV_CFDataCreateMutable) RV_LookupFunction015(RV_ObfuscationFunction00A, 103, 135, 67, RV_ObfuscationFunction00B, RV_RHZNVGLIATFX, 104, 20))
#define RV_RHZNVGLIATFX_01B70187 ((__RV_CFArrayCreateMutable) RV_LookupFunction015(RV_ObfuscationFunction007, 439, 2, 67, RV_ObfuscationFunction006, RV_RHZNVGLIATFX, 6, 21))
#define RV_KHFJZNQZOHCB_003F0115 ((__RV_CFBundleGetValueForInfoDictionaryKey) RV_LookupFunction015(RV_ObfuscationFunction007, 63, 225, 67, RV_ObfuscationFunction008, RV_KHFJZNQZOHCB, 171, 37))
#define RV_KHFJZNQZOHCB_00670136 ((__RV_CFURLCreateFromFileSystemRepresentation) RV_LookupFunction015(RV_ObfuscationFunction00A, 103, 135, 67, RV_ObfuscationFunction003, RV_KHFJZNQZOHCB, 224, 48))
#define RV_KHFJZNQZOHCB_00AC0083 ((__RV_CC_SHA1_Update) RV_LookupFunction015(RV_ObfuscationFunction00C, 172, 122, 33, RV_ObfuscationFunction007, RV_KHFJZNQZOHCB, 21, 16))
#define RV_KHFJZNQZOHCB_00E90171 ((__RV_SecKeychainOpen) RV_LookupFunction015(RV_ObfuscationFunction003, 233, 118, 55, RV_ObfuscationFunction003, RV_KHFJZNQZOHCB, 53, 16))
#define RV_KHFJZNQZOHCB_01B700B1 ((__RV_CFDataGetLength) RV_LookupFunction015(RV_ObfuscationFunction007, 439, 2, 67, RV_ObfuscationFunction00B, RV_KHFJZNQZOHCB, 191, 16))
#define RV_KHFJZNQZOHCB_01B70177 ((__RV_CFDateFormatterCreateDateFromString) RV_LookupFunction015(RV_ObfuscationFunction007, 439, 2, 67, RV_ObfuscationFunction008, RV_KHFJZNQZOHCB, 126, 36))
#define RV_KHFJZNQZOHCB_01FA0128 ((__RV_IOMasterPort) RV_LookupFunction015(RV_ObfuscationFunction005, 506, 17, 49, RV_ObfuscationFunction005, RV_KHFJZNQZOHCB, 143, 16))
#define RV_BUBHQVCEHSTM_003F004B ((__RV_CFDictionaryAddValue) RV_LookupFunction015(RV_ObfuscationFunction007, 63, 225, 67, RV_ObfuscationFunction007, RV_BUBHQVCEHSTM, 98, 21))
#define RV_BUBHQVCEHSTM_01B7001D ((__RV_CFDictionaryGetValue) RV_LookupFunction015(RV_ObfuscationFunction007, 439, 2, 67, RV_ObfuscationFunction009, RV_BUBHQVCEHSTM, 159, 21))
#define RV_BUBHQVCEHSTM_01B70058 ((__RV_CFBundleCopyBundleURL) RV_LookupFunction015(RV_ObfuscationFunction007, 439, 2, 67, RV_ObfuscationFunction009, RV_BUBHQVCEHSTM, 189, 22))
#define RV_BUBHQVCEHSTM_01B70072 ((__RV_CFDataCreateMutable) RV_LookupFunction015(RV_ObfuscationFunction007, 439, 2, 67, RV_ObfuscationFunction008, RV_BUBHQVCEHSTM, 241, 20))
#define RV_BUBHQVCEHSTM_01B7007A ((__RV_CFNumberCreate) RV_LookupFunction015(RV_ObfuscationFunction007, 439, 2, 67, RV_ObfuscationFunction004, RV_BUBHQVCEHSTM, 21, 16))
#define RV_BUBHQVCEHSTM_01B7023C ((__RV_CFDataGetBytePtr) RV_LookupFunction015(RV_ObfuscationFunction007, 439, 2, 67, RV_ObfuscationFunction004, RV_BUBHQVCEHSTM, 238, 17))
#define RV_BUBHQVCEHSTM_01FA01A6 ((__RV_IOBSDNameMatching) RV_LookupFunction015(RV_ObfuscationFunction005, 506, 17, 49, RV_ObfuscationFunction003, RV_BUBHQVCEHSTM, 38, 18))
#define RV_VTDLAHQPKOZD_003F019D ((__RV_CFBundleGetIdentifier) RV_LookupFunction015(RV_ObfuscationFunction007, 63, 225, 67, RV_ObfuscationFunction009, RV_VTDLAHQPKOZD, 77, 22))
#define RV_VTDLAHQPKOZD_006701F7 ((__RV_CFArrayAppendValue) RV_LookupFunction015(RV_ObfuscationFunction00A, 103, 135, 67, RV_ObfuscationFunction005, RV_VTDLAHQPKOZD, 180, 19))
#define RV_VTDLAHQPKOZD_00670239 ((__RV_CFDataGetBytePtr) RV_LookupFunction015(RV_ObfuscationFunction00A, 103, 135, 67, RV_ObfuscationFunction00B, RV_VTDLAHQPKOZD, 120, 17))
#define RV_VTDLAHQPKOZD_01B7005A ((__RV_CFReadStreamOpen) RV_LookupFunction015(RV_ObfuscationFunction007, 439, 2, 67, RV_ObfuscationFunction007, RV_VTDLAHQPKOZD, 133, 17))
#define RV_VTDLAHQPKOZD_01B70138 ((__RV_CFNumberCreate) RV_LookupFunction015(RV_ObfuscationFunction007, 439, 2, 67, RV_ObfuscationFunction007, RV_VTDLAHQPKOZD, 103, 16))
#define RV_VTDLAHQPKOZD_021A0149 ((__RV_IOServiceGetMatchingServices) RV_LookupFunction015(RV_ObfuscationFunction009, 538, 44, 49, RV_ObfuscationFunction00C, RV_VTDLAHQPKOZD, 202, 37))
#define RV_APFJIQNNAHUJ_003F0056 ((__RV_CFBundleGetValueForInfoDictionaryKey) RV_LookupFunction015(RV_ObfuscationFunction007, 63, 225, 67, RV_ObfuscationFunction006, RV_APFJIQNNAHUJ, 15, 37))
#define RV_APFJIQNNAHUJ_003F005B ((__RV_CFDataAppendBytes) RV_LookupFunction015(RV_ObfuscationFunction007, 63, 225, 67, RV_ObfuscationFunction008, RV_APFJIQNNAHUJ, 228, 18))
#define RV_APFJIQNNAHUJ_0067002D ((__RV_CFArrayCreateMutable) RV_LookupFunction015(RV_ObfuscationFunction00A, 103, 135, 67, RV_ObfuscationFunction00A, RV_APFJIQNNAHUJ, 166, 21))
#define RV_APFJIQNNAHUJ_006700F7 ((__RV_CFStringGetFileSystemRepresentation) RV_LookupFunction015(RV_ObfuscationFunction00A, 103, 135, 67, RV_ObfuscationFunction007, RV_APFJIQNNAHUJ, 233, 36))
#define RV_APFJIQNNAHUJ_0067022D ((__RV_CFDictionaryGetValue) RV_LookupFunction015(RV_ObfuscationFunction00A, 103, 135, 67, RV_ObfuscationFunction00C, RV_APFJIQNNAHUJ, 195, 21))
#define RV_APFJIQNNAHUJ_01A101D5 ((__RV_NSApplicationMain) RV_LookupFunction015(RV_ObfuscationFunction00A, 417, 244, 51, RV_ObfuscationFunction003, RV_APFJIQNNAHUJ, 45, 18))
#define RV_APFJIQNNAHUJ_01B7018E ((__RV_CFArrayGetCount) RV_LookupFunction015(RV_ObfuscationFunction007, 439, 2, 67, RV_ObfuscationFunction008, RV_APFJIQNNAHUJ, 208, 16))
#define RV_APFJIQNNAHUJ_01FA00E6 ((__RV_IOIteratorNext) RV_LookupFunction015(RV_ObfuscationFunction005, 506, 17, 49, RV_ObfuscationFunction009, RV_APFJIQNNAHUJ, 54, 16))
#define RV_KSFOTXHUXRJV_003F00C1 ((__RV_CFDateFormatterSetFormat) RV_LookupFunction015(RV_ObfuscationFunction007, 63, 225, 67, RV_ObfuscationFunction003, RV_KSFOTXHUXRJV, 235, 33))
#define RV_KSFOTXHUXRJV_00670098 ((__RV_CFDictionaryGetValue) RV_LookupFunction015(RV_ObfuscationFunction00A, 103, 135, 67, RV_ObfuscationFunction006, RV_KSFOTXHUXRJV, 196, 21))
#define RV_KSFOTXHUXRJV_00E90160 ((__RV_SecItemCopyMatching) RV_LookupFunction015(RV_ObfuscationFunction003, 233, 118, 55, RV_ObfuscationFunction006, RV_KSFOTXHUXRJV, 214, 20))
#define RV_KSFOTXHUXRJV_01B7005B ((__RV_CFDataAppendBytes) RV_LookupFunction015(RV_ObfuscationFunction007, 439, 2, 67, RV_ObfuscationFunction008, RV_KSFOTXHUXRJV, 228, 18))
#define RV_KSFOTXHUXRJV_01FA0102 ((__RV_IORegistryEntryCreateCFProperty) RV_LookupFunction015(RV_ObfuscationFunction005, 506, 17, 49, RV_ObfuscationFunction009, RV_KSFOTXHUXRJV, 173, 32))
#define RV_MAUEZLNOTUMG_003F00A6 ((__RV_CFReadStreamCreateWithFile) RV_LookupFunction015(RV_ObfuscationFunction007, 63, 225, 67, RV_ObfuscationFunction007, RV_MAUEZLNOTUMG, 111, 35))
#define RV_MAUEZLNOTUMG_00670038 ((__RV_CFNumberCreate) RV_LookupFunction015(RV_ObfuscationFunction00A, 103, 135, 67, RV_ObfuscationFunction00A, RV_MAUEZLNOTUMG, 24, 16))
#define RV_MAUEZLNOTUMG_00670175 ((__RV_CFStringCompare) RV_LookupFunction015(RV_ObfuscationFunction00A, 103, 135, 67, RV_ObfuscationFunction008, RV_MAUEZLNOTUMG, 192, 16))
#define RV_MAUEZLNOTUMG_00AC01D2 ((__RV_CC_SHA1) RV_LookupFunction015(RV_ObfuscationFunction00C, 172, 122, 33, RV_ObfuscationFunction009, RV_MAUEZLNOTUMG, 173, 16))
#define RV_MAUEZLNOTUMG_01B701B9 ((__RV_CFDateFormatterCreate) RV_LookupFunction015(RV_ObfuscationFunction007, 439, 2, 67, RV_ObfuscationFunction007, RV_MAUEZLNOTUMG, 69, 22))
#define RV_MAUEZLNOTUMG_01EE0228 ((__RV_SecKeychainSearchCopyNext) RV_LookupFunction015(RV_ObfuscationFunction007, 494, 147, 55, RV_ObfuscationFunction00B, RV_MAUEZLNOTUMG, 223, 34))
#define RV_MAUEZLNOTUMG_021A0062 ((__RV_IORegistryEntryGetParentEntry) RV_LookupFunction015(RV_ObfuscationFunction009, 538, 44, 49, RV_ObfuscationFunction00C, RV_MAUEZLNOTUMG, 121, 38))
#define RV_KKYSZVFAWLCE_003F0080 ((__RV_CFStringCompare) RV_LookupFunction015(RV_ObfuscationFunction007, 63, 225, 67, RV_ObfuscationFunction003, RV_KKYSZVFAWLCE, 204, 16))
#define RV_KKYSZVFAWLCE_003F00A8 ((__RV_CFDictionaryAddValue) RV_LookupFunction015(RV_ObfuscationFunction007, 63, 225, 67, RV_ObfuscationFunction005, RV_KKYSZVFAWLCE, 203, 21))
#define RV_KKYSZVFAWLCE_006701AB ((__RV_CFStringCompare) RV_LookupFunction015(RV_ObfuscationFunction00A, 103, 135, 67, RV_ObfuscationFunction00C, RV_KKYSZVFAWLCE, 214, 16))
#define RV_KKYSZVFAWLCE_00F10039 ((__RV_SecKeychainSearchCreateFromAttributes) RV_LookupFunction015(RV_ObfuscationFunction00B, 241, 194, 55, RV_ObfuscationFunction007, RV_KKYSZVFAWLCE, 0, 38))
#define RV_KKYSZVFAWLCE_01B70098 ((__RV_CFDictionaryGetValue) RV_LookupFunction015(RV_ObfuscationFunction007, 439, 2, 67, RV_ObfuscationFunction006, RV_KKYSZVFAWLCE, 196, 21))
#define RV_KKYSZVFAWLCE_01B70229 ((__RV_CFURLCreateCopyAppendingPathComponent) RV_LookupFunction015(RV_ObfuscationFunction007, 439, 2, 67, RV_ObfuscationFunction007, RV_KKYSZVFAWLCE, 129, 38))
#define RV_KKYSZVFAWLCE_022B01BC ((__RV_CC_SHA1_Init) RV_LookupFunction015(RV_ObfuscationFunction003, 555, 152, 33, RV_ObfuscationFunction00C, RV_KKYSZVFAWLCE, 254, 16))
#define RV_IOObjectRelease_01FA0199 ((__RV_IOObjectRelease) RV_LookupFunction015(RV_ObfuscationFunction005, 506, 17, 49, RV_ObfuscationFunction006, 409, 225, 16))
#define RV_kCFBundleIdentifierKey_00670134 ((__RV_kCFBundleIdentifierKey) RV_LookupFunction015(RV_ObfuscationFunction00A, 103, 135, 67, RV_ObfuscationFunction00B, 308, 191, 23))
#define RV_kCFTypeArrayCallBacks_003F00C5 ((__RV_kCFTypeArrayCallBacks) RV_LookupFunction015(RV_ObfuscationFunction007, 63, 225, 67, RV_ObfuscationFunction00C, 197, 132, 22))
#define RV_kCFTypeArrayCallBacks_01B70025 ((__RV_kCFTypeArrayCallBacks) RV_LookupFunction015(RV_ObfuscationFunction007, 439, 2, 67, RV_ObfuscationFunction005, 37, 97, 22))
#define RV_kCFTypeArrayCallBacks_01B700C5 ((__RV_kCFTypeArrayCallBacks) RV_LookupFunction015(RV_ObfuscationFunction007, 439, 2, 67, RV_ObfuscationFunction00C, 197, 132, 22))
#define RV_kCFTypeDictionaryKeyCallBacks_003F001B ((__RV_kCFTypeDictionaryKeyCallBacks) RV_LookupFunction015(RV_ObfuscationFunction007, 63, 225, 67, RV_ObfuscationFunction007, 27, 120, 38))
#define RV_kCFTypeDictionaryKeyCallBacks_003F0041 ((__RV_kCFTypeDictionaryKeyCallBacks) RV_LookupFunction015(RV_ObfuscationFunction007, 63, 225, 67, RV_ObfuscationFunction008, 65, 239, 38))
#define RV_kCFTypeDictionaryKeyCallBacks_003F009B ((__RV_kCFTypeDictionaryKeyCallBacks) RV_LookupFunction015(RV_ObfuscationFunction007, 63, 225, 67, RV_ObfuscationFunction00A, 155, 75, 38))
#define RV_kCFTypeDictionaryKeyCallBacks_01B7009B ((__RV_kCFTypeDictionaryKeyCallBacks) RV_LookupFunction015(RV_ObfuscationFunction007, 439, 2, 67, RV_ObfuscationFunction00A, 155, 75, 38))
#define RV_kCFTypeDictionaryValueCallBacks_003F00A2 ((__RV_kCFTypeDictionaryValueCallBacks) RV_LookupFunction015(RV_ObfuscationFunction007, 63, 225, 67, RV_ObfuscationFunction00B, 162, 149, 32))
#define RV_kCFTypeDictionaryValueCallBacks_003F0116 ((__RV_kCFTypeDictionaryValueCallBacks) RV_LookupFunction015(RV_ObfuscationFunction007, 63, 225, 67, RV_ObfuscationFunction008, 278, 209, 32))
#define RV_kCFTypeDictionaryValueCallBacks_006700A2 ((__RV_kCFTypeDictionaryValueCallBacks) RV_LookupFunction015(RV_ObfuscationFunction00A, 103, 135, 67, RV_ObfuscationFunction00B, 162, 149, 32))
#define RV_kSecClass_00E9011B ((__RV_kSecClass) RV_LookupFunction015(RV_ObfuscationFunction003, 233, 118, 55, RV_ObfuscationFunction008, 283, 153, 16))
#define RV_kSecClass_01EE004E ((__RV_kSecClass) RV_LookupFunction015(RV_ObfuscationFunction007, 494, 147, 55, RV_ObfuscationFunction008, 78, 58, 16))
#define RV_kSecClassCertificate_00E901B3 ((__RV_kSecClassCertificate) RV_LookupFunction015(RV_ObfuscationFunction003, 233, 118, 55, RV_ObfuscationFunction003, 435, 144, 21))
#define RV_kSecClassCertificate_01EE0064 ((__RV_kSecClassCertificate) RV_LookupFunction015(RV_ObfuscationFunction007, 494, 147, 55, RV_ObfuscationFunction008, 100, 185, 21))
#define RV_kSecMatchLimit_00E90145 ((__RV_kSecMatchLimit) RV_LookupFunction015(RV_ObfuscationFunction003, 233, 118, 55, RV_ObfuscationFunction007, 325, 102, 16))
#define RV_kSecMatchLimit_00F10091 ((__RV_kSecMatchLimit) RV_LookupFunction015(RV_ObfuscationFunction00B, 241, 194, 55, RV_ObfuscationFunction006, 145, 73, 16))
#define RV_kSecMatchLimitAll_00E90086 ((__RV_kSecMatchLimitAll) RV_LookupFunction015(RV_ObfuscationFunction003, 233, 118, 55, RV_ObfuscationFunction00A, 134, 157, 18))
#define RV_kSecMatchLimitAll_00F10086 ((__RV_kSecMatchLimitAll) RV_LookupFunction015(RV_ObfuscationFunction00B, 241, 194, 55, RV_ObfuscationFunction00A, 134, 157, 18))
#define RV_kSecMatchSearchList_00E90059 ((__RV_kSecMatchSearchList) RV_LookupFunction015(RV_ObfuscationFunction003, 233, 118, 55, RV_ObfuscationFunction008, 89, 58, 20))
#define RV_kSecMatchSearchList_00F1003A ((__RV_kSecMatchSearchList) RV_LookupFunction015(RV_ObfuscationFunction00B, 241, 194, 55, RV_ObfuscationFunction008, 58, 122, 20))
#define RV_kSecMatchSubjectContains_00F10196 ((__RV_kSecMatchSubjectContains) RV_LookupFunction015(RV_ObfuscationFunction00B, 241, 194, 55, RV_ObfuscationFunction003, 406, 56, 33))
#define RV_kSecMatchSubjectContains_01EE00D6 ((__RV_kSecMatchSubjectContains) RV_LookupFunction015(RV_ObfuscationFunction007, 494, 147, 55, RV_ObfuscationFunction00C, 214, 66, 33))
#define RV_kSecReturnRef_00F1005E ((__RV_kSecReturnRef) RV_LookupFunction015(RV_ObfuscationFunction00B, 241, 194, 55, RV_ObfuscationFunction008, 94, 99, 16))
#define RV_longjmp_00AC00DA ((__RV_longjmp) RV_LookupFunction015(RV_ObfuscationFunction00C, 172, 122, 33, RV_ObfuscationFunction006, 218, 24, 16))
#define RV_longjmp_00AC0191 ((__RV_longjmp) RV_LookupFunction015(RV_ObfuscationFunction00C, 172, 122, 33, RV_ObfuscationFunction00A, 401, 157, 16))
#define RV_longjmp_01B600DA ((__RV_longjmp) RV_LookupFunction015(RV_ObfuscationFunction008, 438, 170, 33, RV_ObfuscationFunction006, 218, 24, 16))
#define RV_longjmp_01B60191 ((__RV_longjmp) RV_LookupFunction015(RV_ObfuscationFunction008, 438, 170, 33, RV_ObfuscationFunction00A, 401, 157, 16))
#define RV_longjmp_022B0050 ((__RV_longjmp) RV_LookupFunction015(RV_ObfuscationFunction003, 555, 152, 33, RV_ObfuscationFunction00A, 80, 178, 16))
#define RV_longjmp_022B0191 ((__RV_longjmp) RV_LookupFunction015(RV_ObfuscationFunction003, 555, 152, 33, RV_ObfuscationFunction00A, 401, 157, 16))
#define RV_OBJ_txt2obj_012E01CE ((__RV_OBJ_txt2obj) RV_LookupFunction015(RV_ObfuscationFunction003, 302, 254, 16, RV_ObfuscationFunction009, 462, 168, 16))
#define RV_objc_getClass_00CE0015 ((__RV_objc_getClass) RV_LookupFunction015(RV_ObfuscationFunction00B, 206, 70, 23, RV_ObfuscationFunction008, 21, 87, 16))
#define RV_objc_getClass_00CE01C3 ((__RV_objc_getClass) RV_LookupFunction015(RV_ObfuscationFunction00B, 206, 70, 23, RV_ObfuscationFunction009, 451, 236, 16))
#define RV_objc_getClass_00CE01C7 ((__RV_objc_getClass) RV_LookupFunction015(RV_ObfuscationFunction00B, 206, 70, 23, RV_ObfuscationFunction00A, 455, 133, 16))
#define RV_objc_getClass_00E00015 ((__RV_objc_getClass) RV_LookupFunction015(RV_ObfuscationFunction00B, 224, 122, 23, RV_ObfuscationFunction008, 21, 87, 16))
#define RV_objc_getClass_00E001C3 ((__RV_objc_getClass) RV_LookupFunction015(RV_ObfuscationFunction00B, 224, 122, 23, RV_ObfuscationFunction009, 451, 236, 16))
#define RV_objc_getClass_01CA0015 ((__RV_objc_getClass) RV_LookupFunction015(RV_ObfuscationFunction005, 458, 244, 23, RV_ObfuscationFunction008, 21, 87, 16))
#define RV_objc_getClass_01CA01C3 ((__RV_objc_getClass) RV_LookupFunction015(RV_ObfuscationFunction005, 458, 244, 23, RV_ObfuscationFunction009, 451, 236, 16))
#define RV_objc_getClass_01CA01C7 ((__RV_objc_getClass) RV_LookupFunction015(RV_ObfuscationFunction005, 458, 244, 23, RV_ObfuscationFunction00A, 455, 133, 16))
#define RV_objc_msgSend_00CE01EB ((__RV_objc_msgSend) RV_LookupFunction015(RV_ObfuscationFunction00B, 206, 70, 23, RV_ObfuscationFunction004, 491, 220, 16))
#define RV_objc_msgSend_00CE022E ((__RV_objc_msgSend) RV_LookupFunction015(RV_ObfuscationFunction00B, 206, 70, 23, RV_ObfuscationFunction008, 558, 34, 16))
#define RV_objc_msgSend_00E001EB ((__RV_objc_msgSend) RV_LookupFunction015(RV_ObfuscationFunction00B, 224, 122, 23, RV_ObfuscationFunction004, 491, 220, 16))
#define RV_objc_msgSend_00E0022E ((__RV_objc_msgSend) RV_LookupFunction015(RV_ObfuscationFunction00B, 224, 122, 23, RV_ObfuscationFunction008, 558, 34, 16))
#define RV_objc_msgSend_01CA0063 ((__RV_objc_msgSend) RV_LookupFunction015(RV_ObfuscationFunction005, 458, 244, 23, RV_ObfuscationFunction00B, 99, 194, 16))
#define RV_objc_msgSend_01CA01EB ((__RV_objc_msgSend) RV_LookupFunction015(RV_ObfuscationFunction005, 458, 244, 23, RV_ObfuscationFunction004, 491, 220, 16))
#define RV_objc_msgSend_01CA022E ((__RV_objc_msgSend) RV_LookupFunction015(RV_ObfuscationFunction005, 458, 244, 23, RV_ObfuscationFunction008, 558, 34, 16))
#define RV_OpenSSL_add_all_digests_01920121 ((__RV_OpenSSL_add_all_digests) RV_LookupFunction015(RV_ObfuscationFunction003, 402, 134, 16, RV_ObfuscationFunction008, 289, 66, 32))
#define RV_PKCS7_free_00AD00C8 ((__RV_PKCS7_free) RV_LookupFunction015(RV_ObfuscationFunction007, 173, 99, 16, RV_ObfuscationFunction004, 200, 29, 16))
#define RV_PKCS7_get0_signers_00AD0069 ((__RV_PKCS7_get0_signers) RV_LookupFunction015(RV_ObfuscationFunction007, 173, 99, 16, RV_ObfuscationFunction004, 105, 204, 19))
#define RV_PKCS7_verify_012E0186 ((__RV_PKCS7_verify) RV_LookupFunction015(RV_ObfuscationFunction003, 302, 254, 16, RV_ObfuscationFunction004, 390, 200, 16))
#define RV_SecCertificateCopyData_00E90078 ((__RV_SecCertificateCopyData) RV_LookupFunction015(RV_ObfuscationFunction003, 233, 118, 55, RV_ObfuscationFunction00A, 120, 185, 23))
#define RV_SecCertificateCopyData_00F10113 ((__RV_SecCertificateCopyData) RV_LookupFunction015(RV_ObfuscationFunction00B, 241, 194, 55, RV_ObfuscationFunction008, 275, 26, 23))
#define RV_sel_registerName_00CE011F ((__RV_sel_registerName) RV_LookupFunction015(RV_ObfuscationFunction00B, 206, 70, 23, RV_ObfuscationFunction005, 287, 33, 17))
#define RV_sel_registerName_00CE01DE ((__RV_sel_registerName) RV_LookupFunction015(RV_ObfuscationFunction00B, 206, 70, 23, RV_ObfuscationFunction00B, 478, 3, 17))
#define RV_sel_registerName_00E0011F ((__RV_sel_registerName) RV_LookupFunction015(RV_ObfuscationFunction00B, 224, 122, 23, RV_ObfuscationFunction005, 287, 33, 17))
#define RV_sel_registerName_00E001BE ((__RV_sel_registerName) RV_LookupFunction015(RV_ObfuscationFunction00B, 224, 122, 23, RV_ObfuscationFunction008, 446, 60, 17))
#define RV_sel_registerName_01CA011F ((__RV_sel_registerName) RV_LookupFunction015(RV_ObfuscationFunction005, 458, 244, 23, RV_ObfuscationFunction005, 287, 33, 17))
#define RV_sel_registerName_01CA01DE ((__RV_sel_registerName) RV_LookupFunction015(RV_ObfuscationFunction005, 458, 244, 23, RV_ObfuscationFunction00B, 478, 3, 17))
#define RV_setjmp_01B60048 ((__RV_setjmp) RV_LookupFunction015(RV_ObfuscationFunction008, 438, 170, 33, RV_ObfuscationFunction004, 72, 241, 16))
#define RV_SHA1_012E015D ((__RV_SHA1) RV_LookupFunction015(RV_ObfuscationFunction003, 302, 254, 16, RV_ObfuscationFunction008, 349, 17, 16))
#define RV_SHA1_Final_0192012A ((__RV_SHA1_Final) RV_LookupFunction015(RV_ObfuscationFunction003, 402, 134, 16, RV_ObfuscationFunction00A, 298, 122, 16))
#define RV_SHA1_Init_00AD0205 ((__RV_SHA1_Init) RV_LookupFunction015(RV_ObfuscationFunction007, 173, 99, 16, RV_ObfuscationFunction008, 517, 140, 16))
#define RV_SHA1_Update_00AD0001 ((__RV_SHA1_Update) RV_LookupFunction015(RV_ObfuscationFunction007, 173, 99, 16, RV_ObfuscationFunction004, 1, 28, 16))
#define RV_sk_free_01920123 ((__RV_sk_free) RV_LookupFunction015(RV_ObfuscationFunction003, 402, 134, 16, RV_ObfuscationFunction00A, 291, 45, 16))
#define RV_sk_num_01920034 ((__RV_sk_num) RV_LookupFunction015(RV_ObfuscationFunction003, 402, 134, 16, RV_ObfuscationFunction00B, 52, 249, 16))
#define RV_sk_value_00AD0170 ((__RV_sk_value) RV_LookupFunction015(RV_ObfuscationFunction007, 173, 99, 16, RV_ObfuscationFunction003, 368, 67, 16))
#define RV_X509_digest_012E004C ((__RV_X509_digest) RV_LookupFunction015(RV_ObfuscationFunction003, 302, 254, 16, RV_ObfuscationFunction006, 76, 11, 16))
#define RV_X509_free_012E0094 ((__RV_X509_free) RV_LookupFunction015(RV_ObfuscationFunction003, 302, 254, 16, RV_ObfuscationFunction005, 148, 206, 16))
#define RV_X509_get_ext_by_OBJ_012E00B6 ((__RV_X509_get_ext_by_OBJ) RV_LookupFunction015(RV_ObfuscationFunction003, 302, 254, 16, RV_ObfuscationFunction003, 182, 223, 20))
#define RV_X509_NAME_get_text_by_NID_00AD0189 ((__RV_X509_NAME_get_text_by_NID) RV_LookupFunction015(RV_ObfuscationFunction007, 173, 99, 16, RV_ObfuscationFunction004, 393, 113, 34))
#define RV_X509_STORE_add_cert_01920061 ((__RV_X509_STORE_add_cert) RV_LookupFunction015(RV_ObfuscationFunction003, 402, 134, 16, RV_ObfuscationFunction003, 97, 128, 20))
#define RV_X509_STORE_free_0192017E ((__RV_X509_STORE_free) RV_LookupFunction015(RV_ObfuscationFunction003, 402, 134, 16, RV_ObfuscationFunction00C, 382, 234, 16))
#define RV_X509_STORE_new_019200FD ((__RV_X509_STORE_new) RV_LookupFunction015(RV_ObfuscationFunction003, 402, 134, 16, RV_ObfuscationFunction00B, 253, 94, 16))
    
    
    // CodeBlock ObfuscationFunction / M(Rot)
    inline static void RV_ObfuscationFunction003(const char *RV_p1, char *RV_p2, int RV_p3, int RV_p4) {
        int RV_i1 = 0;
        while(RV_i1 < RV_p4) { RV_p2[RV_i1] = (char) (RV_p1[RV_i1] - RV_p3); RV_i1++; }
    }
    
    __RETURN_RETAINED inline static CFStringRef RV_ObfuscationFunction003CF(const char *RV_p1, int RV_p3, int RV_p4) {
        char RV_tmp1[573];
        char *RV_tmp2 = RV_tmp1;
        RV_ObfuscationFunction003(RV_p1, RV_tmp1, RV_p3, RV_p4);
        while(*RV_tmp2) { RV_tmp2++; }
        CFStringRef RV_str1 = ((__RV_CFStringCreateWithBytes) RV_Pointers[106])(NULL, (const UInt8 *) RV_tmp1, (CFIndex) (RV_tmp2 - RV_tmp1), kCFStringEncodingUTF8, false);
        return RV_str1;
    }
    
    
    // CodeBlock ObfuscationFunction / M(Rot)
    inline static void RV_ObfuscationFunction004(const char *RV_p1, char *RV_p2, int RV_p3, int RV_p4) {
        int RV_i1 = 0;
        while(RV_i1 < RV_p4) { RV_p2[RV_i1] = (char) (RV_p1[RV_i1] - RV_p3); RV_i1++; }
    }
    
    __RETURN_RETAINED inline static CFStringRef RV_ObfuscationFunction004CF(const char *RV_p1, int RV_p3, int RV_p4) {
        char RV_tmp1[573];
        RV_ObfuscationFunction004(RV_p1, RV_tmp1, RV_p3, RV_p4);
        CFStringRef RV_str1 = ((__RV_CFStringCreateWithCString) RV_Pointers[259])(NULL, RV_tmp1, kCFStringEncodingUTF8);
        return RV_str1;
    }
    
    
    // CodeBlock ObfuscationFunction / M(Xor1)
    inline static void RV_ObfuscationFunction005(const char *RV_p1, char *RV_p2, int RV_p3, int RV_p4) {
        int RV_i1 = 0;
        while(RV_i1 < RV_p4) { RV_p2[RV_i1] = RV_p1[RV_i1] ^ (char) RV_p3; RV_i1++; }
    }
    
    __RETURN_RETAINED inline static CFStringRef RV_ObfuscationFunction005CF(const char *RV_p1, int RV_p3, int RV_p4) {
        char RV_tmp1[573];
        char *RV_tmp2 = RV_tmp1;
        RV_ObfuscationFunction005(RV_p1, RV_tmp1, RV_p3, RV_p4);
        while(*RV_tmp2) { RV_tmp2++; }
        CFStringRef RV_str1 = ((__RV_CFStringCreateWithBytes) RV_Pointers[42])(NULL, (const UInt8 *) RV_tmp1, (CFIndex) (RV_tmp2 - RV_tmp1), kCFStringEncodingUTF8, false);
        return RV_str1;
    }
    
    
    // CodeBlock ObfuscationFunction / M(Xor1)
    inline static void RV_ObfuscationFunction006(const char *RV_p1, char *RV_p2, int RV_p3, int RV_p4) {
        int RV_i1 = 0;
        while(RV_i1 < RV_p4) { RV_p2[RV_i1] = RV_p1[RV_i1] ^ (char) RV_p3; RV_i1++; }
    }
    
    __RETURN_RETAINED inline static CFStringRef RV_ObfuscationFunction006CF(const char *RV_p1, int RV_p3, int RV_p4) {
        char RV_tmp1[573];
        RV_ObfuscationFunction006(RV_p1, RV_tmp1, RV_p3, RV_p4);
        CFStringRef RV_str1 = ((__RV_CFStringCreateWithCString) RV_Pointers[259])(NULL, RV_tmp1, kCFStringEncodingUTF8);
        return RV_str1;
    }
    
    
    // CodeBlock ObfuscationFunction / M(Xor2)
    inline static void RV_ObfuscationFunction007(const char *RV_p1, char *RV_p2, int RV_p3, int RV_p4) {
        int RV_i1 = 0;
        while(RV_i1 < RV_p4) { RV_p2[RV_i1] = (char) (RV_p1[RV_i1] ^ RV_p3 ^ RV_p4); RV_i1++; }
    }
    
    __RETURN_RETAINED inline static CFStringRef RV_ObfuscationFunction007CF(const char *RV_p1, int RV_p3, int RV_p4) {
        char RV_tmp1[573];
        char *RV_tmp2 = RV_tmp1;
        RV_ObfuscationFunction007(RV_p1, RV_tmp1, RV_p3, RV_p4);
        while(*RV_tmp2) { RV_tmp2++; }
        CFStringRef RV_str1 = ((__RV_CFStringCreateWithBytes) RV_Pointers[42])(NULL, (const UInt8 *) RV_tmp1, (CFIndex) (RV_tmp2 - RV_tmp1), kCFStringEncodingUTF8, false);
        return RV_str1;
    }
    
    
    // CodeBlock ObfuscationFunction / M(Xor2)
    inline static void RV_ObfuscationFunction008(const char *RV_p1, char *RV_p2, int RV_p3, int RV_p4) {
        int RV_i1 = 0;
        while(RV_i1 < RV_p4) { RV_p2[RV_i1] = (char) (RV_p1[RV_i1] ^ RV_p3 ^ RV_p4); RV_i1++; }
    }
    
    __RETURN_RETAINED inline static CFStringRef RV_ObfuscationFunction008CF(const char *RV_p1, int RV_p3, int RV_p4) {
        char RV_tmp1[573];
        RV_ObfuscationFunction008(RV_p1, RV_tmp1, RV_p3, RV_p4);
        CFStringRef RV_str1 = ((__RV_CFStringCreateWithCString) RV_Pointers[54])(NULL, RV_tmp1, kCFStringEncodingUTF8);
        return RV_str1;
    }
    
    
    // CodeBlock ObfuscationFunction / M(Xor3)
    inline static void RV_ObfuscationFunction009(const char *RV_p1, char *RV_p2, int RV_p3, int RV_p4) {
        int RV_i1 = 0;
        while(RV_i1 < RV_p4) { RV_p2[RV_i1] = (char) (RV_p1[RV_i1] ^ (RV_p3 + RV_p4)); RV_i1++; }
    }
    
    __RETURN_RETAINED inline static CFStringRef RV_ObfuscationFunction009CF(const char *RV_p1, int RV_p3, int RV_p4) {
        char RV_tmp1[573];
        char *RV_tmp2 = RV_tmp1;
        RV_ObfuscationFunction009(RV_p1, RV_tmp1, RV_p3, RV_p4);
        while(*RV_tmp2) { RV_tmp2++; }
        CFStringRef RV_str1 = ((__RV_CFStringCreateWithBytes) RV_Pointers[42])(NULL, (const UInt8 *) RV_tmp1, (CFIndex) (RV_tmp2 - RV_tmp1), kCFStringEncodingUTF8, false);
        return RV_str1;
    }
    
    
    // CodeBlock ObfuscationFunction / M(Xor3)
    inline static void RV_ObfuscationFunction00A(const char *RV_p1, char *RV_p2, int RV_p3, int RV_p4) {
        int RV_i1 = 0;
        while(RV_i1 < RV_p4) { RV_p2[RV_i1] = (char) (RV_p1[RV_i1] ^ (RV_p3 + RV_p4)); RV_i1++; }
    }
    
    __RETURN_RETAINED inline static CFStringRef RV_ObfuscationFunction00ACF(const char *RV_p1, int RV_p3, int RV_p4) {
        char RV_tmp1[573];
        RV_ObfuscationFunction00A(RV_p1, RV_tmp1, RV_p3, RV_p4);
        CFStringRef RV_str1 = ((__RV_CFStringCreateWithCString) RV_Pointers[54])(NULL, RV_tmp1, kCFStringEncodingUTF8);
        return RV_str1;
    }
    
    
    // CodeBlock ObfuscationFunction / M(Xor4)
    inline static void RV_ObfuscationFunction00B(const char *RV_p1, char *RV_p2, int RV_p3, int RV_p4) {
        int RV_i1 = 0;
        while(RV_i1 < RV_p4) { RV_p2[RV_i1] = (char) (RV_p1[RV_i1] ^ (RV_p3 * RV_p4)); RV_i1++; }
    }
    
    __RETURN_RETAINED inline static CFStringRef RV_ObfuscationFunction00BCF(const char *RV_p1, int RV_p3, int RV_p4) {
        char RV_tmp1[573];
        char *RV_tmp2 = RV_tmp1;
        RV_ObfuscationFunction00B(RV_p1, RV_tmp1, RV_p3, RV_p4);
        while(*RV_tmp2) { RV_tmp2++; }
        CFStringRef RV_str1 = ((__RV_CFStringCreateWithBytes) RV_Pointers[106])(NULL, (const UInt8 *) RV_tmp1, (CFIndex) (RV_tmp2 - RV_tmp1), kCFStringEncodingUTF8, false);
        return RV_str1;
    }
    
    
    // CodeBlock ObfuscationFunction / M(Xor4)
    inline static void RV_ObfuscationFunction00C(const char *RV_p1, char *RV_p2, int RV_p3, int RV_p4) {
        int RV_i1 = 0;
        while(RV_i1 < RV_p4) { RV_p2[RV_i1] = (char) (RV_p1[RV_i1] ^ (RV_p3 * RV_p4)); RV_i1++; }
    }
    
    __RETURN_RETAINED inline static CFStringRef RV_ObfuscationFunction00CCF(const char *RV_p1, int RV_p3, int RV_p4) {
        char RV_tmp1[573];
        RV_ObfuscationFunction00C(RV_p1, RV_tmp1, RV_p3, RV_p4);
        CFStringRef RV_str1 = ((__RV_CFStringCreateWithCString) RV_Pointers[259])(NULL, RV_tmp1, kCFStringEncodingUTF8);
        return RV_str1;
    }
    
    
    // CodeBlock LookupFunction
    inline static void *RV_LookupFunction015(RV_decrypt RV_func1, int RV_index1, int RV_val1, int RV_len1, RV_decrypt RV_func2, int RV_index2, int RV_val2, int RV_len2) {
        char RV_tmp1[573], RV_tmp2[573];
        // Load the library if needed
        if (RV_Pointers[RV_index1] == NULL) {
            RV_func1(RV_Strings[RV_index1], RV_tmp1, RV_val1, RV_len1);
            RV_Pointers[RV_index1] = ((__RV_dlopen) RV_Pointers[475])(RV_tmp1, RTLD_NOW | RTLD_FIRST);
        }
        // Load the function if needed
        if (RV_Pointers[RV_index2] == NULL) {
            RV_func2(RV_Strings[RV_index2], RV_tmp2, RV_val2, RV_len2);
            RV_Pointers[RV_index2] = ((__RV_dlsym) RV_Pointers[482])(RV_Pointers[RV_index1], RV_tmp2);
        }
        return RV_Pointers[RV_index2];
    }
    
    
    
    
    // CodeBlock GetMainBundle
#if DEBUG
    inline static void RV_GetMainBundle016(RV_CheckingContext *RV_ctx) {
        __RV_RECEIPT_LOG("RV - Retrieving main bundle");
        // Retrieve the main bundle
        RV_ctx->main_bundle = RV_CFBundleGetMainBundle_01B700AE();
        if (!RV_ctx->main_bundle) {
            // Dead code
            RV_CFRelease_01B70190(RV_ctx->main_bundle);
            RV_CFBundleUnloadExecutable_00670104((CFBundleRef) RV_ctx->main_bundle);
        }
        // Global variables computation
        // Set to 284
        RV_RHZNVGLIATFX = 284;
        // Set to 310
        RV_KHFJZNQZOHCB = 310;
        // Set to 88
        RV_BUBHQVCEHSTM = 88;
        // Set to 90
        RV_VTDLAHQPKOZD = 90;
        // Set to 247
        RV_APFJIQNNAHUJ = 247;
        // Set to 91
        RV_KSFOTXHUXRJV = 91;
        // Set to 166
        RV_MAUEZLNOTUMG = 166;
        // Set to 553
        RV_KKYSZVFAWLCE = 553;
    }
#else
#define RV_GetMainBundle016(RV_ctx) { \
__RV_RECEIPT_LOG("RV - Retrieving main bundle"); \
RV_ctx->main_bundle = RV_CFBundleGetMainBundle_01B700AE(); \
if (!RV_ctx->main_bundle) { \
RV_CFRelease_01B70190(RV_ctx->main_bundle); \
RV_CFBundleUnloadExecutable_00670104((CFBundleRef) RV_ctx->main_bundle); \
} \
RV_RHZNVGLIATFX = 284; \
RV_KHFJZNQZOHCB = 310; \
RV_BUBHQVCEHSTM = 88; \
RV_VTDLAHQPKOZD = 90; \
RV_APFJIQNNAHUJ = 247; \
RV_KSFOTXHUXRJV = 91; \
RV_MAUEZLNOTUMG = 166; \
RV_KKYSZVFAWLCE = 553; \
}
#endif
    
    
    // CodeBlock LoadReceipt
#ifndef RECEIGEN_EXTERNAL_RECEIPT
#if DEBUG
    inline static void RV_LoadReceipt034(RV_CheckingContext *RV_ctx) {
        CFStringRef RV_str1;
        CFURLRef RV_url1, RV_url2;
        CFReadStreamRef RV_stream;
        CFMutableDataRef RV_data;
        CFIndex RV_count;
        uint8_t RV_buffer[573];
        volatile int RV_code = 33; RV_code -= 9; RV_code *= 7; RV_code += 5;
        __RV_RECEIPT_LOG("RV - Loading receipt");
        // Compute the path to the receipt
        RV_url1 = RV_BUBHQVCEHSTM_01B70058((CFBundleRef) RV_ctx->main_bundle);
        RV_str1 = RV_ObfuscationFunction00CCF((RV_Strings[511]), 158, 21);
        RV_url2 = RV_KKYSZVFAWLCE_01B70229(NULL, RV_url1, RV_str1, true);
        RV_CFRelease_00670190(RV_str1);
        RV_CFRelease_00670190(RV_url1);
        RV_str1 = RV_ObfuscationFunction006CF((RV_Strings[360]), 74, 16);
        RV_url1 = RV_KKYSZVFAWLCE_01B70229(NULL, RV_url2, RV_str1, true);
        RV_CFRelease_00670190(RV_str1);
        RV_CFRelease_00670190(RV_url2);
        RV_url2 = RV_url1;
        RV_url1 = NULL;
        // Create a stream from the receipt file
        RV_stream = RV_MAUEZLNOTUMG_003F00A6(kCFAllocatorDefault, RV_url2);
        if (RV_stream == NULL || !RV_VTDLAHQPKOZD_01B7005A(RV_stream)) {
            __RV_RECEIPT_LOG("RV - Error while opening receipt");
            RV_exit_01B60044(RV_code);
            // Dead code
            RV_CFRelease_00670190(RV_url1);
            RV_CFRelease_00670190(RV_str1);
            RV_CFRelease_00670190(RV_url1);
            goto RV_LoadReceipt034_RV_bail;
        }
        // Create the data object that will contains receipt data
        RV_data = RV_RHZNVGLIATFX_0067011C(kCFAllocatorDefault, 0);
        // Read the receipt by chunks
        do {
            RV_count = RV_CFReadStreamRead_00670019(RV_stream, &RV_buffer[0], 573);
            if (RV_count > 0) {
                RV_KSFOTXHUXRJV_01B7005B(RV_data, RV_buffer, RV_count);
            }
        } while (RV_count > 0);
        // Close the stream
        RV_CFReadStreamClose_01B701E3(RV_stream);
        if (RV_ctx->receipt_data) RV_CFRelease_00670190(RV_ctx->receipt_data);
        RV_ctx->receipt_data = RV_data;
        // Global variables computation
        // From 310 to 296
        RV_KHFJZNQZOHCB += 282; RV_KHFJZNQZOHCB /= 2;
        // From 88 to 422
        RV_BUBHQVCEHSTM -= 18; RV_BUBHQVCEHSTM *= 6; RV_BUBHQVCEHSTM += 2;
        // From 90 to 329
        RV_VTDLAHQPKOZD -= 25; RV_VTDLAHQPKOZD *= 5; RV_VTDLAHQPKOZD += 4;
        // From 247 to 230
        RV_APFJIQNNAHUJ += 213; RV_APFJIQNNAHUJ /= 2;
        // From 91 to 258
        RV_KSFOTXHUXRJV -= 27; RV_KSFOTXHUXRJV *= 4; RV_KSFOTXHUXRJV += 2;
        // From 166 to 98
        RV_MAUEZLNOTUMG += 128; RV_MAUEZLNOTUMG /= 3;
    RV_LoadReceipt034_RV_bail:
        if (RV_stream) RV_CFRelease_00670190(RV_stream);
        RV_CFRelease_00670190(RV_url2);
    }
#else
#define RV_LoadReceipt034(RV_ctx) { \
CFStringRef RV_str1; \
CFURLRef RV_url1, RV_url2; \
CFReadStreamRef RV_stream; \
CFMutableDataRef RV_data; \
CFIndex RV_count; \
uint8_t RV_buffer[573]; \
volatile int RV_code = 33; RV_code -= 9; RV_code *= 7; RV_code += 5;  \
__RV_RECEIPT_LOG("RV - Loading receipt"); \
RV_url1 = RV_BUBHQVCEHSTM_01B70058((CFBundleRef) RV_ctx->main_bundle); \
RV_str1 = RV_ObfuscationFunction00CCF((RV_Strings[511]), 158, 21); \
RV_url2 = RV_KKYSZVFAWLCE_01B70229(NULL, RV_url1, RV_str1, true); \
RV_CFRelease_00670190(RV_str1); \
RV_CFRelease_00670190(RV_url1); \
RV_str1 = RV_ObfuscationFunction006CF((RV_Strings[360]), 74, 16); \
RV_url1 = RV_KKYSZVFAWLCE_01B70229(NULL, RV_url2, RV_str1, true); \
RV_CFRelease_00670190(RV_str1); \
RV_CFRelease_00670190(RV_url2); \
RV_url2 = RV_url1; \
RV_url1 = NULL; \
RV_stream = RV_MAUEZLNOTUMG_003F00A6(kCFAllocatorDefault, RV_url2); \
if (RV_stream == NULL || !RV_VTDLAHQPKOZD_01B7005A(RV_stream)) { \
__RV_RECEIPT_LOG("RV - Error while opening receipt"); \
RV_exit_01B60044(RV_code); \
RV_CFRelease_00670190(RV_url1); \
RV_CFRelease_00670190(RV_str1); \
RV_CFRelease_00670190(RV_url1); \
goto RV_LoadReceipt034_RV_bail; \
} \
RV_data = RV_RHZNVGLIATFX_0067011C(kCFAllocatorDefault, 0); \
do { \
RV_count = RV_CFReadStreamRead_00670019(RV_stream, &RV_buffer[0], 573); \
if (RV_count > 0) { \
RV_KSFOTXHUXRJV_01B7005B(RV_data, RV_buffer, RV_count); \
} \
} while (RV_count > 0); \
RV_CFReadStreamClose_01B701E3(RV_stream); \
if (RV_ctx->receipt_data) RV_CFRelease_00670190(RV_ctx->receipt_data); \
RV_ctx->receipt_data = RV_data; \
RV_KHFJZNQZOHCB += 282; RV_KHFJZNQZOHCB /= 2;  \
RV_BUBHQVCEHSTM -= 18; RV_BUBHQVCEHSTM *= 6; RV_BUBHQVCEHSTM += 2;  \
RV_VTDLAHQPKOZD -= 25; RV_VTDLAHQPKOZD *= 5; RV_VTDLAHQPKOZD += 4;  \
RV_APFJIQNNAHUJ += 213; RV_APFJIQNNAHUJ /= 2;  \
RV_KSFOTXHUXRJV -= 27; RV_KSFOTXHUXRJV *= 4; RV_KSFOTXHUXRJV += 2;  \
RV_MAUEZLNOTUMG += 128; RV_MAUEZLNOTUMG /= 3;  \
RV_LoadReceipt034_RV_bail: \
if (RV_stream) RV_CFRelease_00670190(RV_stream);     \
RV_CFRelease_00670190(RV_url2); \
}
#endif
#endif
    
#ifdef RECEIGEN_EXTERNAL_RECEIPT
#if DEBUG
    inline static void RV_LoadReceipt034(RV_CheckingContext *RV_ctx) {
        CFStringRef RV_str1;
        CFURLRef RV_url1 = NULL;
        CFReadStreamRef RV_stream = NULL;
        CFMutableDataRef RV_data;
        CFIndex RV_count;
        uint8_t RV_buffer[573];
        char RV_path[PATH_MAX];
        int RV_status;
        glob_t RV_glob_buffer;
        char *RV_expanded_path;
        volatile int RV_code = 5; RV_code -= 1; RV_code *= 36; RV_code += 29;
        RV_str1 = RV_ObfuscationFunction007CF((RV_Strings[126]), 187, 16);
        __RV_RECEIPT_LOG("RV - Loading external receipt at '%s'", CFStringGetCStringPtr(RV_str1, CFStringGetSystemEncoding()));
        // Compute the path to the receipt
        if (!RV_APFJIQNNAHUJ_006700F7(RV_str1, RV_path, PATH_MAX)) {
            __RV_RECEIPT_LOG("RV - Cannot convert receipt path");
            RV_exit_01B600D9(RV_code);
            // Dead code
            goto RV_LoadReceipt034_RV_bail;
        }
        RV_status = ((__RV_glob_b) RV_Pointers[564])(RV_path, GLOB_TILDE | GLOB_ERR, NULL, &RV_glob_buffer);
        if (RV_status != 0 || RV_glob_buffer.gl_pathc != 1) {
            ((__RV_globfree) RV_Pointers[209])(&RV_glob_buffer);
            __RV_RECEIPT_LOG("RV - Error while globbing receipt path");
            RV_exit_01B600D9(RV_code);
            // Dead code
            RV_CFRelease_006701DC(RV_str1);
            RV_CFRelease_006701DC(RV_url1);
            RV_CFRelease_006701DC(RV_str1);
            goto RV_LoadReceipt034_RV_bail;
        }
        // Get the globbed path
        RV_expanded_path = RV_glob_buffer.gl_pathv[0];
        __RV_RECEIPT_LOG("RV - Receipt path resolved to '%s'", RV_expanded_path);
        RV_url1 = RV_KHFJZNQZOHCB_00670136(kCFAllocatorDefault, (const UInt8 *) RV_expanded_path, (CFIndex) ((__RV_strlen) RV_Pointers[567])(RV_expanded_path), false);
        ((__RV_globfree) RV_Pointers[209])(&RV_glob_buffer);
        // Create a stream from the receipt file
        RV_stream = RV_MAUEZLNOTUMG_003F00A6(kCFAllocatorDefault, RV_url1);
        if (RV_stream == NULL || !RV_VTDLAHQPKOZD_01B7005A(RV_stream)) {
            __RV_RECEIPT_LOG("RV - Error while opening receipt");
            RV_exit_01B600D9(RV_code);
            // Dead code
            RV_CFRelease_006701DC(RV_str1);
            RV_CFRelease_006701DC(RV_url1);
            RV_CFRelease_006701DC(RV_str1);
            goto RV_LoadReceipt034_RV_bail;
        }
        // Create the data object that will contains receipt data
        RV_data = RV_RHZNVGLIATFX_0067011C(kCFAllocatorDefault, 0);
        // Read the receipt by chunks
        do {
            RV_count = RV_CFReadStreamRead_003F0019(RV_stream, &RV_buffer[0], 573);
            if (RV_count > 0) {
                RV_KSFOTXHUXRJV_01B7005B(RV_data, RV_buffer, RV_count);
            }
        } while (RV_count > 0);
        // Close the stream
        RV_CFReadStreamClose_006701E3(RV_stream);
        if (RV_ctx->receipt_data) RV_CFRelease_006701DC(RV_ctx->receipt_data);
        RV_ctx->receipt_data = RV_data;
        // Global variables computation
        // From 310 to 296
        RV_KHFJZNQZOHCB += 282; RV_KHFJZNQZOHCB /= 2;
        // From 88 to 422
        RV_BUBHQVCEHSTM -= 18; RV_BUBHQVCEHSTM *= 6; RV_BUBHQVCEHSTM += 2;
        // From 90 to 329
        RV_VTDLAHQPKOZD -= 25; RV_VTDLAHQPKOZD *= 5; RV_VTDLAHQPKOZD += 4;
        // From 247 to 230
        RV_APFJIQNNAHUJ += 213; RV_APFJIQNNAHUJ /= 2;
        // From 91 to 258
        RV_KSFOTXHUXRJV -= 27; RV_KSFOTXHUXRJV *= 4; RV_KSFOTXHUXRJV += 2;
        // From 166 to 98
        RV_MAUEZLNOTUMG += 128; RV_MAUEZLNOTUMG /= 3;
    RV_LoadReceipt034_RV_bail:
        if (RV_stream) RV_CFRelease_006701DC(RV_stream);
        RV_CFRelease_006701DC(RV_str1);
        if (RV_url1) RV_CFRelease_006701DC(RV_url1);
    }
#else
#define RV_LoadReceipt034(RV_ctx) { \
CFStringRef RV_str1; \
CFURLRef RV_url1 = NULL; \
CFReadStreamRef RV_stream = NULL; \
CFMutableDataRef RV_data; \
CFIndex RV_count; \
uint8_t RV_buffer[573]; \
char RV_path[PATH_MAX]; \
int RV_status; \
glob_t RV_glob_buffer; \
char *RV_expanded_path; \
volatile int RV_code = 5; RV_code -= 1; RV_code *= 36; RV_code += 29;  \
RV_str1 = RV_ObfuscationFunction007CF((RV_Strings[126]), 187, 16); \
__RV_RECEIPT_LOG("RV - Loading external receipt at '%s'", CFStringGetCStringPtr(RV_str1, CFStringGetSystemEncoding())); \
if (!RV_APFJIQNNAHUJ_006700F7(RV_str1, RV_path, PATH_MAX)) { \
__RV_RECEIPT_LOG("RV - Cannot convert receipt path"); \
RV_exit_01B600D9(RV_code); \
goto RV_LoadReceipt034_RV_bail; \
} \
RV_status = ((__RV_glob_b) RV_Pointers[564])(RV_path, GLOB_TILDE | GLOB_ERR, NULL, &RV_glob_buffer); \
if (RV_status != 0 || RV_glob_buffer.gl_pathc != 1) { \
((__RV_globfree) RV_Pointers[209])(&RV_glob_buffer); \
__RV_RECEIPT_LOG("RV - Error while globbing receipt path"); \
RV_exit_01B600D9(RV_code); \
RV_CFRelease_006701DC(RV_str1); \
RV_CFRelease_006701DC(RV_url1); \
RV_CFRelease_006701DC(RV_str1); \
goto RV_LoadReceipt034_RV_bail; \
} \
RV_expanded_path = RV_glob_buffer.gl_pathv[0]; \
__RV_RECEIPT_LOG("RV - Receipt path resolved to '%s'", RV_expanded_path); \
RV_url1 = RV_KHFJZNQZOHCB_00670136(kCFAllocatorDefault, (const UInt8 *) RV_expanded_path, (CFIndex) ((__RV_strlen) RV_Pointers[567])(RV_expanded_path), false); \
((__RV_globfree) RV_Pointers[209])(&RV_glob_buffer); \
RV_stream = RV_MAUEZLNOTUMG_003F00A6(kCFAllocatorDefault, RV_url1); \
if (RV_stream == NULL || !RV_VTDLAHQPKOZD_01B7005A(RV_stream)) { \
__RV_RECEIPT_LOG("RV - Error while opening receipt"); \
RV_exit_01B600D9(RV_code); \
RV_CFRelease_006701DC(RV_str1); \
RV_CFRelease_006701DC(RV_url1); \
RV_CFRelease_006701DC(RV_str1); \
goto RV_LoadReceipt034_RV_bail; \
} \
RV_data = RV_RHZNVGLIATFX_0067011C(kCFAllocatorDefault, 0); \
do { \
RV_count = RV_CFReadStreamRead_003F0019(RV_stream, &RV_buffer[0], 573); \
if (RV_count > 0) { \
RV_KSFOTXHUXRJV_01B7005B(RV_data, RV_buffer, RV_count); \
} \
} while (RV_count > 0); \
RV_CFReadStreamClose_006701E3(RV_stream); \
if (RV_ctx->receipt_data) RV_CFRelease_006701DC(RV_ctx->receipt_data); \
RV_ctx->receipt_data = RV_data; \
RV_KHFJZNQZOHCB += 282; RV_KHFJZNQZOHCB /= 2;  \
RV_BUBHQVCEHSTM -= 18; RV_BUBHQVCEHSTM *= 6; RV_BUBHQVCEHSTM += 2;  \
RV_VTDLAHQPKOZD -= 25; RV_VTDLAHQPKOZD *= 5; RV_VTDLAHQPKOZD += 4;  \
RV_APFJIQNNAHUJ += 213; RV_APFJIQNNAHUJ /= 2;  \
RV_KSFOTXHUXRJV -= 27; RV_KSFOTXHUXRJV *= 4; RV_KSFOTXHUXRJV += 2;  \
RV_MAUEZLNOTUMG += 128; RV_MAUEZLNOTUMG /= 3;  \
RV_LoadReceipt034_RV_bail: \
if (RV_stream) RV_CFRelease_006701DC(RV_stream);     \
RV_CFRelease_006701DC(RV_str1); \
if (RV_url1) RV_CFRelease_006701DC(RV_url1); \
}
#endif
#endif
    
    
    // CodeBlock GetGUID
#if DEBUG
    inline static void RV_GetGUID04B(RV_CheckingContext *RV_ctx) {
        kern_return_t RV_kernResult;
        mach_port_t RV_master_port;
        CFMutableDictionaryRef RV_matching_dict = NULL;
        io_iterator_t RV_iterator;
        io_object_t RV_service, RV_parent_service;
        char *RV_str1;
        CFStringRef RV_str2;
        RV_str2 = RV_ObfuscationFunction00CCF((RV_Strings[514]), 17, 16);
        __RV_RECEIPT_LOG("RV - Getting MAC address");
        // Open a MACH port
        RV_kernResult = RV_KHFJZNQZOHCB_01FA0128(MACH_PORT_NULL, &RV_master_port);
        if (RV_kernResult != KERN_SUCCESS) {
            // Dead code
            RV_CFRelease_00670190(RV_str2);
            RV_CFRelease_00670190(RV_matching_dict);
            RV_CFRelease_00670190(RV_str2);
            goto RV_GetGUID04B_RV_bail;
        }
        // Create a search for primary interface
        char RV_str1_[573];
        RV_ObfuscationFunction004((RV_Strings[137]), RV_str1_, 27, 16);
        RV_str1 = RV_str1_;
        RV_matching_dict = RV_BUBHQVCEHSTM_01FA01A6(RV_master_port, 0, RV_str1);
        if (!RV_matching_dict) {
            // Dead code
            RV_CFRelease_00670190(RV_str2);
            RV_CFRelease_00670190(RV_matching_dict);
            RV_CFRelease_00670190(RV_str2);
            goto RV_GetGUID04B_RV_bail;
        }
        // Perform the search
        RV_kernResult = RV_VTDLAHQPKOZD_021A0149(RV_master_port, RV_matching_dict, &RV_iterator);
        if (RV_kernResult != KERN_SUCCESS) {
            // Dead code
            RV_CFRelease_00670190(RV_matching_dict);
            RV_CFRelease_00670190(RV_str2);
            RV_CFRelease_00670190(RV_matching_dict);
            goto RV_GetGUID04B_RV_bail;
        }
        // Iterate over the result
        while((RV_service = RV_APFJIQNNAHUJ_01FA00E6(RV_iterator)) != 0) {
            RV_kernResult = RV_MAUEZLNOTUMG_021A0062(RV_service, kIOServicePlane, &RV_parent_service);
            if (RV_kernResult == KERN_SUCCESS) {
                if (RV_ctx->guid_data) RV_CFRelease_00670190(RV_ctx->guid_data);
                RV_ctx->guid_data = (CFDataRef) RV_KSFOTXHUXRJV_01FA0102(RV_parent_service, RV_str2, NULL, 0);
                RV_IOObjectRelease_01FA0199(RV_parent_service);
            }
            RV_IOObjectRelease_01FA0199(RV_iterator);
            RV_IOObjectRelease_01FA0199(RV_service);
        }
        // Global variables computation
        // From 284 to 391
        RV_RHZNVGLIATFX -= 154; RV_RHZNVGLIATFX *= 3; RV_RHZNVGLIATFX += 1;
        // From 296 to 369
        RV_KHFJZNQZOHCB -= 173; RV_KHFJZNQZOHCB *= 3;
        // Set to 75
        RV_BUBHQVCEHSTM = 75;
        // Set to 503
        RV_VTDLAHQPKOZD = 503;
        // From 230 to 398
        RV_APFJIQNNAHUJ -= 98; RV_APFJIQNNAHUJ *= 3; RV_APFJIQNNAHUJ += 2;
        // Set to 352
        RV_KSFOTXHUXRJV = 352;
        // From 98 to 552
        RV_MAUEZLNOTUMG -= 20; RV_MAUEZLNOTUMG *= 7; RV_MAUEZLNOTUMG += 6;
        // From 553 to 57
        RV_KKYSZVFAWLCE += 74; RV_KKYSZVFAWLCE /= 11;
    RV_GetGUID04B_RV_bail:
        RV_CFRelease_00670190(RV_str2);
    }
#else
#define RV_GetGUID04B(RV_ctx) { \
kern_return_t RV_kernResult; \
mach_port_t RV_master_port; \
CFMutableDictionaryRef RV_matching_dict = NULL; \
io_iterator_t RV_iterator; \
io_object_t RV_service, RV_parent_service; \
char *RV_str1; \
CFStringRef RV_str2; \
RV_str2 = RV_ObfuscationFunction00CCF((RV_Strings[514]), 17, 16);  \
__RV_RECEIPT_LOG("RV - Getting MAC address"); \
RV_kernResult = RV_KHFJZNQZOHCB_01FA0128(MACH_PORT_NULL, &RV_master_port); \
if (RV_kernResult != KERN_SUCCESS) { \
RV_CFRelease_00670190(RV_str2); \
RV_CFRelease_00670190(RV_matching_dict); \
RV_CFRelease_00670190(RV_str2); \
goto RV_GetGUID04B_RV_bail; \
} \
char RV_str1_[573]; \
RV_ObfuscationFunction004((RV_Strings[137]), RV_str1_, 27, 16); \
RV_str1 = RV_str1_; \
RV_matching_dict = RV_BUBHQVCEHSTM_01FA01A6(RV_master_port, 0, RV_str1); \
if (!RV_matching_dict) { \
RV_CFRelease_00670190(RV_str2); \
RV_CFRelease_00670190(RV_matching_dict); \
RV_CFRelease_00670190(RV_str2); \
goto RV_GetGUID04B_RV_bail; \
} \
RV_kernResult = RV_VTDLAHQPKOZD_021A0149(RV_master_port, RV_matching_dict, &RV_iterator); \
if (RV_kernResult != KERN_SUCCESS) { \
RV_CFRelease_00670190(RV_matching_dict); \
RV_CFRelease_00670190(RV_str2); \
RV_CFRelease_00670190(RV_matching_dict); \
goto RV_GetGUID04B_RV_bail; \
} \
while((RV_service = RV_APFJIQNNAHUJ_01FA00E6(RV_iterator)) != 0) { \
RV_kernResult = RV_MAUEZLNOTUMG_021A0062(RV_service, kIOServicePlane, &RV_parent_service); \
if (RV_kernResult == KERN_SUCCESS) { \
if (RV_ctx->guid_data) RV_CFRelease_00670190(RV_ctx->guid_data); \
RV_ctx->guid_data = (CFDataRef) RV_KSFOTXHUXRJV_01FA0102(RV_parent_service, RV_str2, NULL, 0); \
RV_IOObjectRelease_01FA0199(RV_parent_service); \
} \
RV_IOObjectRelease_01FA0199(RV_iterator); \
RV_IOObjectRelease_01FA0199(RV_service); \
} \
RV_RHZNVGLIATFX -= 154; RV_RHZNVGLIATFX *= 3; RV_RHZNVGLIATFX += 1;  \
RV_KHFJZNQZOHCB -= 173; RV_KHFJZNQZOHCB *= 3;  \
RV_BUBHQVCEHSTM = 75; \
RV_VTDLAHQPKOZD = 503; \
RV_APFJIQNNAHUJ -= 98; RV_APFJIQNNAHUJ *= 3; RV_APFJIQNNAHUJ += 2;  \
RV_KSFOTXHUXRJV = 352; \
RV_MAUEZLNOTUMG -= 20; RV_MAUEZLNOTUMG *= 7; RV_MAUEZLNOTUMG += 6;  \
RV_KKYSZVFAWLCE += 74; RV_KKYSZVFAWLCE /= 11;  \
RV_GetGUID04B_RV_bail: \
RV_CFRelease_00670190(RV_str2); \
}
#endif
    
    
    // CodeBlock GetRootCA
#if MAC_OS_X_VERSION_MIN_REQUIRED > MAC_OS_X_VERSION_10_6
#if DEBUG
    inline static void RV_GetRootCA04F(RV_CheckingContext *RV_ctx) {
        OSStatus RV_status;
        SecKeychainRef RV_keychain = NULL;
        CFTypeRef RV_searchList = NULL;
        CFDictionaryRef RV_searchDict = NULL;
        char *RV_str1;
        CFTypeRef RV_str2 = NULL;
        CFIndex RV_idx;
        CFTypeRef RV_results = NULL;
        SecCertificateRef RV_certificate = NULL;
        volatile CFIndex RV_count1 = 1; RV_count1 /= 1;
        volatile CFIndex RV_count2 = 1; RV_count2 -= 1; RV_count2 *= 7; RV_count2 += 5;
        const void *RV_searchKeys[5];
        const void *RV_searchValues[5];
        volatile int RV_code = 167; RV_code -= 110; RV_code *= 3; RV_code += 2;
        __RV_RECEIPT_LOG("RV - Loading Apple Root CA");
        char RV_str1_[573];
        RV_ObfuscationFunction008((RV_Strings[537]), RV_str1_, 60, 66);
        RV_str1 = RV_str1_;
        RV_status = RV_KHFJZNQZOHCB_00E90171(RV_str1, &RV_keychain);
        if (RV_status != errSecSuccess) {
            RV_exit_00AC00D9(RV_code);
            // Dead code
            // TODO
            goto RV_GetRootCA04F_RV_bail;
        }
        // Create a search list within the system Keychain
        RV_searchList = CFArrayCreate(kCFAllocatorDefault, (const void **)&RV_keychain, RV_count1, RV_kCFTypeArrayCallBacks_003F00C5);
        // Create the criteria dictionary to find the Apple Root CA certificate
        RV_str2 = RV_ObfuscationFunction00ACF((RV_Strings[288]), 177, 16);
        RV_searchKeys[0] = *RV_kSecClass_00E9011B;
        RV_searchValues[0] = *RV_kSecClassCertificate_01EE0064;
        RV_searchKeys[1] = *RV_kSecMatchSearchList_00E90059;
        RV_searchValues[1] = RV_searchList;
        RV_searchKeys[2] = *RV_kSecMatchSubjectContains_01EE00D6;
        RV_searchValues[2] = RV_str2;
        RV_searchKeys[3] = *RV_kSecMatchLimit_00E90145;
        RV_searchValues[3] = *RV_kSecMatchLimitAll_00F10086;
        RV_searchKeys[4] = *RV_kSecReturnRef_00F1005E;
        RV_searchValues[4] = kCFBooleanTrue;
        RV_searchDict = CFDictionaryCreate(kCFAllocatorDefault, RV_searchKeys, RV_searchValues, RV_count2, NULL, NULL);
        // Perform the actual search
        RV_status = RV_KSFOTXHUXRJV_00E90160(RV_searchDict, &RV_results);
        if (RV_status != errSecSuccess) {
            RV_exit_00AC00D9(RV_code);
            // Dead code
            // TODO
            goto RV_GetRootCA04F_RV_bail;
        }
        // Iterate over the results and copy the certificate data
        for(RV_idx = 0; RV_idx < RV_APFJIQNNAHUJ_01B7018E((CFArrayRef) RV_results); RV_idx++) {
            RV_certificate = (SecCertificateRef) RV_CFArrayGetValueAtIndex_00670166((CFArrayRef) RV_results, RV_idx);
            if (RV_ctx->ca_data) RV_CFRelease_00670190(RV_ctx->ca_data);
            RV_ctx->ca_data = RV_SecCertificateCopyData_00F10113(RV_certificate);
        }
        // Global variables computation
        // From 369 to 277
        RV_KHFJZNQZOHCB += 185; RV_KHFJZNQZOHCB /= 2;
        // From 503 to 413
        RV_VTDLAHQPKOZD += 323; RV_VTDLAHQPKOZD /= 2;
        // From 57 to 128
        RV_KKYSZVFAWLCE -= 25; RV_KKYSZVFAWLCE *= 4;
    RV_GetRootCA04F_RV_bail:
        if (RV_str2) RV_CFRelease_00670190(RV_str2);
        if (RV_results) RV_CFRelease_00670190(RV_results);
        if (RV_searchDict) RV_CFRelease_00670190(RV_searchDict);
        if (RV_searchList) RV_CFRelease_00670190(RV_searchList);
        if (RV_keychain) RV_CFRelease_00670190(RV_keychain);
    }
#else
#define RV_GetRootCA04F(RV_ctx) { \
OSStatus RV_status; \
SecKeychainRef RV_keychain = NULL; \
CFTypeRef RV_searchList = NULL; \
CFDictionaryRef RV_searchDict = NULL; \
char *RV_str1; \
CFTypeRef RV_str2 = NULL; \
CFIndex RV_idx; \
CFTypeRef RV_results = NULL; \
SecCertificateRef RV_certificate = NULL; \
volatile CFIndex RV_count1 = 1; RV_count1 /= 1;  \
volatile CFIndex RV_count2 = 1; RV_count2 -= 1; RV_count2 *= 7; RV_count2 += 5;  \
const void *RV_searchKeys[5]; \
const void *RV_searchValues[5]; \
volatile int RV_code = 167; RV_code -= 110; RV_code *= 3; RV_code += 2;  \
__RV_RECEIPT_LOG("RV - Loading Apple Root CA"); \
char RV_str1_[573]; \
RV_ObfuscationFunction008((RV_Strings[537]), RV_str1_, 60, 66); \
RV_str1 = RV_str1_; \
RV_status = RV_KHFJZNQZOHCB_00E90171(RV_str1, &RV_keychain); \
if (RV_status != errSecSuccess) { \
RV_exit_00AC00D9(RV_code); \
goto RV_GetRootCA04F_RV_bail; \
} \
RV_searchList = CFArrayCreate(kCFAllocatorDefault, (const void **)&RV_keychain, RV_count1, RV_kCFTypeArrayCallBacks_003F00C5); \
RV_str2 = RV_ObfuscationFunction00ACF((RV_Strings[288]), 177, 16); \
RV_searchKeys[0] = *RV_kSecClass_00E9011B; \
RV_searchValues[0] = *RV_kSecClassCertificate_01EE0064; \
RV_searchKeys[1] = *RV_kSecMatchSearchList_00E90059; \
RV_searchValues[1] = RV_searchList; \
RV_searchKeys[2] = *RV_kSecMatchSubjectContains_01EE00D6; \
RV_searchValues[2] = RV_str2; \
RV_searchKeys[3] = *RV_kSecMatchLimit_00E90145; \
RV_searchValues[3] = *RV_kSecMatchLimitAll_00F10086; \
RV_searchKeys[4] = *RV_kSecReturnRef_00F1005E; \
RV_searchValues[4] = kCFBooleanTrue; \
RV_searchDict = CFDictionaryCreate(kCFAllocatorDefault, RV_searchKeys, RV_searchValues, RV_count2, NULL, NULL); \
RV_status = RV_KSFOTXHUXRJV_00E90160(RV_searchDict, &RV_results); \
if (RV_status != errSecSuccess) { \
RV_exit_00AC00D9(RV_code); \
goto RV_GetRootCA04F_RV_bail; \
} \
for(RV_idx = 0; RV_idx < RV_APFJIQNNAHUJ_01B7018E((CFArrayRef) RV_results); RV_idx++) { \
RV_certificate = (SecCertificateRef) RV_CFArrayGetValueAtIndex_00670166((CFArrayRef) RV_results, RV_idx); \
if (RV_ctx->ca_data) RV_CFRelease_00670190(RV_ctx->ca_data); \
RV_ctx->ca_data = RV_SecCertificateCopyData_00F10113(RV_certificate); \
} \
RV_KHFJZNQZOHCB += 185; RV_KHFJZNQZOHCB /= 2;  \
RV_VTDLAHQPKOZD += 323; RV_VTDLAHQPKOZD /= 2;  \
RV_KKYSZVFAWLCE -= 25; RV_KKYSZVFAWLCE *= 4;  \
RV_GetRootCA04F_RV_bail: \
if (RV_str2) RV_CFRelease_00670190(RV_str2); \
if (RV_results) RV_CFRelease_00670190(RV_results); \
if (RV_searchDict) RV_CFRelease_00670190(RV_searchDict); \
if (RV_searchList) RV_CFRelease_00670190(RV_searchList); \
if (RV_keychain) RV_CFRelease_00670190(RV_keychain); \
}
#endif
#endif
    
#if MAC_OS_X_VERSION_MIN_REQUIRED == MAC_OS_X_VERSION_10_6
#if DEBUG
    inline static void RV_GetRootCA04F(RV_CheckingContext *RV_ctx) {
        OSStatus RV_status;
        SecKeychainRef RV_keychain = NULL;
        CFTypeRef RV_searchList = NULL;
        char *RV_str1, *RV_str2;
        SecKeychainAttributeList RV_attributeList;
        SecKeychainAttribute RV_attribute;
        SecKeychainSearchRef RV_searchRef = NULL;
        SecKeychainItemRef RV_itemRef = nil;
        volatile CFIndex RV_count1 = 1; RV_count1 /= 1;
        volatile CFIndex RV_count2 = 4; RV_count2 -= 3; RV_count2 *= 3; RV_count2 += 2;
        volatile CFIndex RV_count3 = 7; RV_count3 -= 3; RV_count3 *= 3; RV_count3 += 1;
        volatile int RV_code = 52; RV_code -= 18; RV_code *= 5; RV_code += 3;
        __RV_RECEIPT_LOG("RV - Loading Apple Root CA");
        char RV_str1_[573];
        RV_ObfuscationFunction00B((RV_Strings[81]), RV_str1_, 110, 66);
        RV_str1 = RV_str1_;
        RV_status = RV_KHFJZNQZOHCB_00E90171(RV_str1, &RV_keychain);
        if (RV_status != errSecSuccess) {
            RV_exit_01B600D9(RV_code);
            // Dead code
            goto RV_GetRootCA04F_RV_bail;
        }
        // Create a search list within the system Keychain
        RV_searchList = CFArrayCreate(kCFAllocatorDefault, (const void **)&RV_keychain, RV_count1, RV_kCFTypeArrayCallBacks_01B700C5);
        // Create the criteria dictionary to find the Apple Root CA certificate
        char RV_str2_[573];
        RV_ObfuscationFunction005((RV_Strings[556]), RV_str2_, 96, 16);
        RV_str2 = RV_str2_;
        RV_attributeList.count = 1;
        RV_attributeList.attr  = &RV_attribute;
        RV_attribute.tag = kSecLabelItemAttr;
        RV_attribute.data = RV_str2;
        RV_attribute.length = (UInt32) RV_count3;
        RV_status = RV_KKYSZVFAWLCE_00F10039(RV_searchList, kSecCertificateItemClass, &RV_attributeList, &RV_searchRef);
        if (RV_status != errSecSuccess) {
            RV_exit_01B600D9(RV_code);
            // Dead code
            goto RV_GetRootCA04F_RV_bail;
        }
        // Iterate over the results and copy the certificate data
        while(RV_MAUEZLNOTUMG_01EE0228(RV_searchRef, &RV_itemRef) == noErr) {
            if (RV_ctx->ca_data) RV_CFRelease_006701DC(RV_ctx->ca_data);
            RV_ctx->ca_data = RV_SecCertificateCopyData_00E90078((SecCertificateRef) RV_itemRef);
        }
        // Global variables computation
        // From 369 to 277
        RV_KHFJZNQZOHCB += 185; RV_KHFJZNQZOHCB /= 2;
        // From 503 to 413
        RV_VTDLAHQPKOZD += 323; RV_VTDLAHQPKOZD /= 2;
        // From 57 to 128
        RV_KKYSZVFAWLCE -= 25; RV_KKYSZVFAWLCE *= 4;
    RV_GetRootCA04F_RV_bail:
        if (RV_itemRef) RV_CFRelease_006701DC(RV_itemRef);
        if (RV_searchRef) RV_CFRelease_006701DC(RV_searchRef);
        if (RV_searchList) RV_CFRelease_006701DC(RV_searchList);
        if (RV_keychain) RV_CFRelease_006701DC(RV_keychain);
    }
#else
#define RV_GetRootCA04F(RV_ctx) { \
OSStatus RV_status; \
SecKeychainRef RV_keychain = NULL; \
CFTypeRef RV_searchList = NULL; \
char *RV_str1, *RV_str2; \
SecKeychainAttributeList RV_attributeList; \
SecKeychainAttribute RV_attribute; \
SecKeychainSearchRef RV_searchRef = NULL; \
SecKeychainItemRef RV_itemRef = nil; \
volatile CFIndex RV_count1 = 1; RV_count1 /= 1;  \
volatile CFIndex RV_count2 = 4; RV_count2 -= 3; RV_count2 *= 3; RV_count2 += 2;  \
volatile CFIndex RV_count3 = 7; RV_count3 -= 3; RV_count3 *= 3; RV_count3 += 1;  \
volatile int RV_code = 52; RV_code -= 18; RV_code *= 5; RV_code += 3;  \
__RV_RECEIPT_LOG("RV - Loading Apple Root CA"); \
char RV_str1_[573]; \
RV_ObfuscationFunction00B((RV_Strings[81]), RV_str1_, 110, 66); \
RV_str1 = RV_str1_; \
RV_status = RV_KHFJZNQZOHCB_00E90171(RV_str1, &RV_keychain); \
if (RV_status != errSecSuccess) { \
RV_exit_01B600D9(RV_code); \
goto RV_GetRootCA04F_RV_bail; \
} \
RV_searchList = CFArrayCreate(kCFAllocatorDefault, (const void **)&RV_keychain, RV_count1, RV_kCFTypeArrayCallBacks_01B700C5); \
char RV_str2_[573]; \
RV_ObfuscationFunction005((RV_Strings[556]), RV_str2_, 96, 16); \
RV_str2 = RV_str2_; \
RV_attributeList.count = 1; \
RV_attributeList.attr  = &RV_attribute; \
RV_attribute.tag = kSecLabelItemAttr; \
RV_attribute.data = RV_str2; \
RV_attribute.length = (UInt32) RV_count3; \
RV_status = RV_KKYSZVFAWLCE_00F10039(RV_searchList, kSecCertificateItemClass, &RV_attributeList, &RV_searchRef); \
if (RV_status != errSecSuccess) { \
RV_exit_01B600D9(RV_code); \
goto RV_GetRootCA04F_RV_bail; \
} \
while(RV_MAUEZLNOTUMG_01EE0228(RV_searchRef, &RV_itemRef) == noErr) { \
if (RV_ctx->ca_data) RV_CFRelease_006701DC(RV_ctx->ca_data); \
RV_ctx->ca_data = RV_SecCertificateCopyData_00E90078((SecCertificateRef) RV_itemRef); \
} \
RV_KHFJZNQZOHCB += 185; RV_KHFJZNQZOHCB /= 2;  \
RV_VTDLAHQPKOZD += 323; RV_VTDLAHQPKOZD /= 2;  \
RV_KKYSZVFAWLCE -= 25; RV_KKYSZVFAWLCE *= 4;  \
RV_GetRootCA04F_RV_bail: \
if (RV_itemRef) RV_CFRelease_006701DC(RV_itemRef); \
if (RV_searchRef) RV_CFRelease_006701DC(RV_searchRef); \
if (RV_searchList) RV_CFRelease_006701DC(RV_searchList); \
if (RV_keychain) RV_CFRelease_006701DC(RV_keychain); \
}
#endif
#endif
    
    
    // CodeBlock CheckBundleIdentifier
#if DEBUG
    inline static void RV_CheckBundleIdentifier05C(RV_CheckingContext *RV_ctx) {
        CFStringRef RV_str1 = RV_ObfuscationFunction005CF((RV_Strings[39]), 218, 16);
        __RV_RECEIPT_LOG("RV - Checking bundle identifier");
        CFStringRef RV_str2 = (CFStringRef) RV_KHFJZNQZOHCB_003F0115((CFBundleRef) RV_ctx->main_bundle, *RV_kCFBundleIdentifierKey_00670134);
        if (RV_KKYSZVFAWLCE_003F0080(RV_str1, RV_str2, 0) != kCFCompareEqualTo) {
            __RV_RECEIPT_LOG("RV - Bundle identifier mismatch (expecting '%s' but actual value is '%s')", CFStringGetCStringPtr(RV_str1, CFStringGetSystemEncoding()), CFStringGetCStringPtr(RV_str2, CFStringGetSystemEncoding()));
            volatile int RV_code = 59; RV_code -= 16; RV_code *= 4; RV_code += 1;
            RV_exit_01B60044(RV_code);
            // Dead code
            RV_CFRelease_003F0190(RV_str1);
            RV_CFRelease_003F0190(RV_str2);
            RV_CFRelease_003F0190(RV_str1);
        }
        // Global variables computation
        // From 391 to 427
        RV_RHZNVGLIATFX -= 249; RV_RHZNVGLIATFX *= 3; RV_RHZNVGLIATFX += 1;
        // From 398 to 86
        RV_APFJIQNNAHUJ += 118; RV_APFJIQNNAHUJ /= 6;
        RV_CFRelease_003F0190(RV_str1);
    }
#else
#define RV_CheckBundleIdentifier05C(RV_ctx) { \
CFStringRef RV_str1 = RV_ObfuscationFunction005CF((RV_Strings[39]), 218, 16); \
__RV_RECEIPT_LOG("RV - Checking bundle identifier"); \
CFStringRef RV_str2 = (CFStringRef) RV_KHFJZNQZOHCB_003F0115((CFBundleRef) RV_ctx->main_bundle, *RV_kCFBundleIdentifierKey_00670134); \
if (RV_KKYSZVFAWLCE_003F0080(RV_str1, RV_str2, 0) != kCFCompareEqualTo) { \
__RV_RECEIPT_LOG("RV - Bundle identifier mismatch (expecting '%s' but actual value is '%s')", CFStringGetCStringPtr(RV_str1, CFStringGetSystemEncoding()), CFStringGetCStringPtr(RV_str2, CFStringGetSystemEncoding())); \
volatile int RV_code = 59; RV_code -= 16; RV_code *= 4; RV_code += 1;  \
RV_exit_01B60044(RV_code); \
RV_CFRelease_003F0190(RV_str1); \
RV_CFRelease_003F0190(RV_str2); \
RV_CFRelease_003F0190(RV_str1); \
} \
RV_RHZNVGLIATFX -= 249; RV_RHZNVGLIATFX *= 3; RV_RHZNVGLIATFX += 1;  \
RV_APFJIQNNAHUJ += 118; RV_APFJIQNNAHUJ /= 6;  \
RV_CFRelease_003F0190(RV_str1); \
}
#endif
    
    
    // CodeBlock CheckBundleVersion
#if DEBUG
    inline static void RV_CheckBundleVersion05E(RV_CheckingContext *RV_ctx) {
        __RV_RECEIPT_LOG("RV - Checking bundle version");
        CFStringRef RV_str1 = RV_ObfuscationFunction00ACF((RV_Strings[467]), 209, 16);
        CFStringRef RV_str2 = RV_ObfuscationFunction00CCF((RV_Strings[502]), 151, 35);
        volatile int RV_code = 98; RV_code -= 41; RV_code *= 3; RV_code += 2;
        CFStringRef RV_str3 = (CFStringRef) RV_APFJIQNNAHUJ_003F0056((CFBundleRef) RV_ctx->main_bundle, RV_str2);
        if (RV_RHZNVGLIATFX_003F01AB(RV_str1, RV_str3, 0) != kCFCompareEqualTo) {
            __RV_RECEIPT_LOG("RV - Bundle version mismatch (expecting '%s' but actual value is '%s')", CFStringGetCStringPtr(RV_str1, CFStringGetSystemEncoding()), CFStringGetCStringPtr(RV_str3, CFStringGetSystemEncoding()));
            RV_exit_00AC00D9(RV_code);
            // Dead code
            RV_CFRelease_003F0190(RV_str1);
            RV_CFRelease_003F0190(RV_str2);
            RV_CFRelease_003F0190(RV_str1);
        }
        // Global variables computation
        // From 427 to 547
        RV_RHZNVGLIATFX -= 245; RV_RHZNVGLIATFX *= 3; RV_RHZNVGLIATFX += 1;
        // From 277 to 375
        RV_KHFJZNQZOHCB -= 152; RV_KHFJZNQZOHCB *= 3;
        // From 75 to 29
        RV_BUBHQVCEHSTM += 41; RV_BUBHQVCEHSTM /= 4;
        // From 413 to 312
        RV_VTDLAHQPKOZD += 211; RV_VTDLAHQPKOZD /= 2;
        // From 86 to 45
        RV_APFJIQNNAHUJ += 49; RV_APFJIQNNAHUJ /= 3;
        // From 352 to 193
        RV_KSFOTXHUXRJV += 227; RV_KSFOTXHUXRJV /= 3;
        // From 552 to 441
        RV_MAUEZLNOTUMG += 330; RV_MAUEZLNOTUMG /= 2;
        // From 128 to 168
        RV_KKYSZVFAWLCE -= 72; RV_KKYSZVFAWLCE *= 3;
        RV_CFRelease_003F0190(RV_str2);
        RV_CFRelease_003F0190(RV_str1);
    }
#else
#define RV_CheckBundleVersion05E(RV_ctx) { \
__RV_RECEIPT_LOG("RV - Checking bundle version"); \
CFStringRef RV_str1 = RV_ObfuscationFunction00ACF((RV_Strings[467]), 209, 16); \
CFStringRef RV_str2 = RV_ObfuscationFunction00CCF((RV_Strings[502]), 151, 35); \
volatile int RV_code = 98; RV_code -= 41; RV_code *= 3; RV_code += 2;  \
CFStringRef RV_str3 = (CFStringRef) RV_APFJIQNNAHUJ_003F0056((CFBundleRef) RV_ctx->main_bundle, RV_str2); \
if (RV_RHZNVGLIATFX_003F01AB(RV_str1, RV_str3, 0) != kCFCompareEqualTo) { \
__RV_RECEIPT_LOG("RV - Bundle version mismatch (expecting '%s' but actual value is '%s')", CFStringGetCStringPtr(RV_str1, CFStringGetSystemEncoding()), CFStringGetCStringPtr(RV_str3, CFStringGetSystemEncoding())); \
RV_exit_00AC00D9(RV_code); \
RV_CFRelease_003F0190(RV_str1); \
RV_CFRelease_003F0190(RV_str2); \
RV_CFRelease_003F0190(RV_str1); \
} \
RV_RHZNVGLIATFX -= 245; RV_RHZNVGLIATFX *= 3; RV_RHZNVGLIATFX += 1;  \
RV_KHFJZNQZOHCB -= 152; RV_KHFJZNQZOHCB *= 3;  \
RV_BUBHQVCEHSTM += 41; RV_BUBHQVCEHSTM /= 4;  \
RV_VTDLAHQPKOZD += 211; RV_VTDLAHQPKOZD /= 2;  \
RV_APFJIQNNAHUJ += 49; RV_APFJIQNNAHUJ /= 3;  \
RV_KSFOTXHUXRJV += 227; RV_KSFOTXHUXRJV /= 3;  \
RV_MAUEZLNOTUMG += 330; RV_MAUEZLNOTUMG /= 2;  \
RV_KKYSZVFAWLCE -= 72; RV_KKYSZVFAWLCE *= 3;  \
RV_CFRelease_003F0190(RV_str2); \
RV_CFRelease_003F0190(RV_str1); \
}
#endif
    
    
    // CodeBlock GetReceiptInformation
#if DEBUG
    inline static void RV_GetReceiptInformation062X(const unsigned char *RV_data, long RV_length, int *RV_payload) {
        const unsigned char *RV_ptr = RV_data;
        long RV_size = RV_length;
        *RV_payload = 0;
        do {
            *RV_payload <<= 8;
            *RV_payload += (uint8_t) *RV_ptr++;
        } while(--RV_size > 0);
    }
#else
    inline static void RV_GetReceiptInformation062X(const unsigned char *RV_data, long RV_length, int *RV_payload) { \
        const unsigned char *RV_ptr = RV_data; \
        long RV_size = RV_length; \
        *RV_payload = 0; \
        do { \
            *RV_payload <<= 8; \
            *RV_payload += (uint8_t) *RV_ptr++; \
        } while(--RV_size > 0); \
    }
#endif
    
#if DEBUG
    inline static void RV_GetReceiptInformation062(RV_CheckingContext *RV_ctx) {
        RV_ParsingContext RV_receipt_context;
        RV_ParsingContext *RV_current_context;
        CFNumberRef RV_key;
        RV_ReceiptAttributeType RV_key1, RV_key2;
        CFTypeRef RV_value1, RV_value2;
        int RV_type;
        int RV_xclass;
        long RV_length;
        CFDateFormatterRef RV_formatter = NULL;
        BIO *RV_bio_p7;
        PKCS7 *RV_pkcs7;
        ASN1_OCTET_STRING *RV_contentRV_content;
        const unsigned char *RV_seq_end;
        int RV_attr_type;
        int RV_attr_version;
        int RV_str_type;
        long RV_str_length;
        const unsigned char *RV_str_ptr;
        volatile int RV_code = 172; RV_code -= 115; RV_code *= 3; RV_code += 2;
        RV_ParsingContext RV_inapp_context;
        int RV_number;
        int RV_num_type;
        long RV_num_length;
        const unsigned char *RV_num_ptr;
        __RV_RECEIPT_LOG("RV - Parsing receipt");
        // Put the receipt data into a memory buffer
        RV_bio_p7 = RV_BIO_new_0192019B(RV_BIO_s_mem_00AD0227());
        RV_BIO_write_012E01D4(RV_bio_p7, (void *) RV_CFDataGetBytePtr_003F0239((CFDataRef) RV_ctx->receipt_data), (int) RV_CFDataGetLength_003F0194((CFDataRef) RV_ctx->receipt_data));
        RV_pkcs7 = RV_d2i_PKCS7_bio_00AD00A4(RV_bio_p7, NULL);
        if (!RV_pkcs7) {
            RV_exit_01B600EC(RV_code);
            // Dead code
            RV_ctx->receipt_data = NULL;
            goto RV_GetReceiptInformation062_RV_bail;
        }
        if (!PKCS7_type_is_signed(RV_pkcs7)) {
            RV_exit_01B600EC(RV_code);
            // Dead code
            RV_ctx->receipt_data = NULL;
            goto RV_GetReceiptInformation062_RV_bail;
        }
        if (!PKCS7_type_is_data(RV_pkcs7->d.sign->contents)) {
            RV_exit_01B600EC(RV_code);
            // Dead code
            RV_ctx->receipt_data = NULL;
            goto RV_GetReceiptInformation062_RV_bail;
        }
        // Create a formatter to parse ISO-3339 dates
        RV_formatter = RV_MAUEZLNOTUMG_01B701B9(NULL, NULL, kCFDateFormatterNoStyle, kCFDateFormatterNoStyle);
        RV_value1 = RV_ObfuscationFunction00ACF((RV_Strings[4]), 29, 33);
        RV_KSFOTXHUXRJV_003F00C1(RV_formatter, (CFStringRef) RV_value1);
        RV_CFRelease_00670190(RV_value1);
        // Initial context
        RV_contentRV_content = RV_pkcs7->d.sign->contents->d.data;
        RV_receipt_context.ptr = RV_contentRV_content->data;
        RV_receipt_context.end = RV_receipt_context.ptr + RV_contentRV_content->length;
        RV_receipt_context.parent = NULL;
        RV_receipt_context.dictionary = NULL;
        RV_current_context = &RV_receipt_context;
        while(RV_current_context->ptr < RV_current_context->end) {
            if (!RV_current_context->dictionary) {
                // Create the target dictionary
                RV_current_context->dictionary = RV_CFDictionaryCreateMutable_00670181(kCFAllocatorDefault, (CFIndex) 573, RV_kCFTypeDictionaryKeyCallBacks_003F0041, RV_kCFTypeDictionaryValueCallBacks_006700A2);
                // Decode payload from ASN.1
                RV_ASN1_get_object_019200FF(&RV_current_context->ptr, &RV_length, &RV_type, &RV_xclass, RV_current_context->end - RV_current_context->ptr);
                if (RV_type != V_ASN1_SET) {
                    RV_exit_01B600EC(RV_code);
                    goto RV_GetReceiptInformation062_RV_bail;
                }
            }
            // Iterate over attributes
            while(RV_current_context->ptr < RV_current_context->end) {
                // Parse attribute sequence
                RV_ASN1_get_object_019200FF(&RV_current_context->ptr, &RV_length, &RV_type, &RV_xclass, RV_current_context->end - RV_current_context->ptr);
                if (RV_type != V_ASN1_SEQUENCE) {
                    RV_exit_01B600EC(RV_code);
                    goto RV_GetReceiptInformation062_RV_bail;
                }
                RV_seq_end = RV_current_context->ptr + RV_length;
                RV_attr_type = 0;
                RV_attr_version = 0;
                // Parse the attribute type
                RV_ASN1_get_object_019200FF(&RV_current_context->ptr, &RV_length, &RV_type, &RV_xclass, RV_current_context->end - RV_current_context->ptr);
                if (RV_type != V_ASN1_INTEGER) {
                    RV_exit_01B600EC(RV_code);
                    goto RV_GetReceiptInformation062_RV_bail;
                }
                RV_GetReceiptInformation062X((RV_current_context->ptr), (RV_length), (&RV_attr_type));
                RV_current_context->ptr += RV_length;
                // Parse the attribute version
                RV_ASN1_get_object_019200FF(&RV_current_context->ptr, &RV_length, &RV_type, &RV_xclass, RV_current_context->end - RV_current_context->ptr);
                if (RV_type != V_ASN1_INTEGER) {
                    RV_exit_01B600EC(RV_code);
                    goto RV_GetReceiptInformation062_RV_bail;
                }
                RV_GetReceiptInformation062X((RV_current_context->ptr), (RV_length), (&RV_attr_version));
                RV_current_context->ptr += RV_length;
                // Check the attribute value
                RV_ASN1_get_object_019200FF(&RV_current_context->ptr, &RV_length, &RV_type, &RV_xclass, RV_current_context->end - RV_current_context->ptr);
                if (RV_type != V_ASN1_OCTET_STRING) {
                    RV_exit_01B600EC(RV_code);
                    goto RV_GetReceiptInformation062_RV_bail;
                }
                RV_key1 = (RV_ReceiptAttributeType) (RV_StoreNone + (RV_attr_type << 2));
                RV_key2 = (RV_ReceiptAttributeType) (RV_StoreNone + (RV_attr_type << 2) + 1);
                RV_value1 = NULL;
                RV_value2 = NULL;
                __RV_RECEIPT_LOG("RV - Parsing receipt - Found attribute %s%d", RV_current_context->parent ? "--- " : "- ", RV_attr_type);
                switch (RV_attr_type) {
                        // Attributes encoded as ASN.1 UTF8STRING
                    case RV_ReceiptAttributeTypeBundleId:
                    case RV_ReceiptAttributeTypeBundleVersion:
                    case RV_ReceiptAttributeTypeOriginalApplicationVersion:
                    case RV_InAppAttributeTypeProductIdentifer:
                    case RV_InAppAttributeTypeTransactionIdentifer:
                    case RV_InAppAttributeTypeOriginalTransactionIdentifer:
                    {
                        RV_str_type = 0;
                        RV_str_length = 0;
                        RV_str_ptr = RV_current_context->ptr;
                        RV_ASN1_get_object_019200FF(&RV_str_ptr, &RV_str_length, &RV_str_type, &RV_xclass, RV_seq_end - RV_str_ptr);
                        if (RV_str_type != V_ASN1_UTF8STRING) {
                            RV_exit_01B600EC(RV_code);
                            goto RV_GetReceiptInformation062_RV_bail;
                        }
                        RV_value1 = ((__RV_CFStringCreateWithBytes) RV_Pointers[42])(NULL, (const UInt8 *) RV_str_ptr, (CFIndex) RV_str_length, kCFStringEncodingUTF8, false);
                        RV_value2 = RV_RHZNVGLIATFX_003F0223(NULL, (const UInt8 *) RV_current_context->ptr, (CFIndex) RV_length);
                        __RV_RECEIPT_LOG("RV - Parsing receipt -       attribute %s%d => %s", RV_current_context->parent ? "--- " : "- ", RV_attr_type, CFStringGetCStringPtr((CFStringRef) RV_value1, CFStringGetSystemEncoding()));
                        break;
                    }
                        // Attributes encoded as ASN.1 IA5STRING
                    case RV_ReceiptAttributeTypeExpirationDate:
                    case RV_InAppAttributeTypeCancellationDate:
                    case RV_InAppAttributeTypeOriginalPurchaseDate:
                    case RV_InAppAttributeTypePurchaseDate:
                    case RV_InAppAttributeTypeSubscriptionExpirationDate:
                    {
                        RV_str_type = 0;
                        RV_str_length = 0;
                        RV_str_ptr = RV_current_context->ptr;
                        RV_ASN1_get_object_019200FF(&RV_str_ptr, &RV_str_length, &RV_str_type, &RV_xclass, RV_seq_end - RV_str_ptr);
                        if (RV_str_type != V_ASN1_IA5STRING) {
                            RV_exit_01B600EC(RV_code);
                            goto RV_GetReceiptInformation062_RV_bail;
                        }
                        RV_value2 = ((__RV_CFStringCreateWithBytes) RV_Pointers[42])(NULL, (const UInt8 *) RV_str_ptr, (CFIndex) RV_str_length, kCFStringEncodingASCII, false);
                        RV_value1 = RV_KHFJZNQZOHCB_01B70177(NULL, RV_formatter, (CFStringRef) RV_value2, NULL);
                        __RV_RECEIPT_LOG("RV - Parsing receipt -       attribute %s%d => %s", RV_current_context->parent ? "--- " : "- ", RV_attr_type, CFStringGetCStringPtr((CFStringRef) RV_value2, CFStringGetSystemEncoding()));
                        break;
                    }
                        // Attributes encoded as ASN.1 INTEGER
                    case RV_InAppAttributeTypeQuantity:
                    case RV_InAppAttributeTypeWebOrderLineItemId:
                    {
                        RV_num_type = 0;
                        RV_num_length = 0;
                        RV_num_ptr = RV_current_context->ptr;
                        RV_ASN1_get_object_019200FF(&RV_num_ptr, &RV_num_length, &RV_num_type, &RV_xclass, RV_seq_end - RV_num_ptr);
                        if (RV_num_type != V_ASN1_INTEGER) {
                            RV_exit_01B600EC(RV_code);
                            goto RV_GetReceiptInformation062_RV_bail;
                        }
                        RV_GetReceiptInformation062X((RV_num_ptr), (RV_num_length), (&RV_number));
                        RV_value1 = RV_VTDLAHQPKOZD_01B70138(NULL, kCFNumberIntType, &RV_number);
                        __RV_RECEIPT_LOG("RV - Parsing receipt -       attribute %s%d => %d", RV_current_context->parent ? "--- " : "- ", RV_attr_type, RV_number);
                        break;
                    }
                        // Attributes encoded as ASN.1 OCTETSTRING
                    case RV_ReceiptAttributeTypeOpaqueValue:
                    case RV_ReceiptAttributeTypeHash:
                    {
                        RV_value1 = RV_RHZNVGLIATFX_003F0223(NULL, (const UInt8 *) RV_current_context->ptr, (CFIndex) RV_length);
                        __RV_RECEIPT_LOG("RV - Parsing receipt -       attribute %s%d => [%lu bytes]", RV_current_context->parent ? "--- " : "- ", RV_attr_type, RV_CFDataGetLength_003F0194((CFDataRef) RV_value1));
                        break;
                    }
                        // Attributes encoded as ASN.1 SET
                    case RV_ReceiptAttributeTypeInAppPurchase:
                    {
                        // Push a child context to parse InApp purchase
                        RV_inapp_context.ptr = RV_current_context->ptr;
                        RV_inapp_context.end = RV_inapp_context.ptr + RV_length;
                        RV_inapp_context.dictionary = NULL;
                        RV_inapp_context.parent = RV_current_context;
                        RV_current_context = &RV_inapp_context;
                        goto RV_GetReceiptInformation062_RV_key;
                    }
                    default:
                        break;
                }
                if (RV_value1) {
                    RV_key = RV_VTDLAHQPKOZD_01B70138(NULL, kCFNumberIntType, &RV_key1);
                    RV_KKYSZVFAWLCE_003F00A8((CFMutableDictionaryRef) RV_current_context->dictionary, RV_key, RV_value1);
                    RV_CFRelease_00670190(RV_key);
                    RV_CFRelease_00670190(RV_value1);
                }
                if (RV_value2) {
                    RV_key = RV_VTDLAHQPKOZD_01B70138(NULL, kCFNumberIntType, &RV_key2);
                    RV_KKYSZVFAWLCE_003F00A8((CFMutableDictionaryRef) RV_current_context->dictionary, RV_key, RV_value2);
                    RV_CFRelease_00670190(RV_key);
                    RV_CFRelease_00670190(RV_value2);
                }
                // Move past the attribute
                RV_current_context->ptr += RV_length;
            }
        RV_GetReceiptInformation062_RV_key:
            // If the current context is a new one, continue parsing
            if (!RV_current_context->dictionary) {
                continue;
            }
            // If the current context has a parent, pop it.
            if (RV_current_context->parent) {
                __RV_RECEIPT_LOG("RV - Parsing receipt - Add an InApp purchase");
                RV_key1 = RV_StoreReceiptAttributeTypeInAppPurchase;
                RV_key = RV_VTDLAHQPKOZD_01B70138(NULL, kCFNumberIntType, &RV_key1);
                RV_value1 = RV_BUBHQVCEHSTM_01B7001D((CFDictionaryRef) RV_current_context->parent->dictionary, RV_key);
                if (!RV_value1) {
                    RV_value1 = RV_APFJIQNNAHUJ_0067002D(kCFAllocatorDefault, 0, RV_kCFTypeArrayCallBacks_01B70025);
                    RV_CFDictionarySetValue_00670084((CFMutableDictionaryRef) RV_current_context->parent->dictionary, RV_key, RV_value1);
                    RV_CFRelease_00670190(RV_value1);
                }
                RV_CFArrayAppendValue_01B701F7((CFMutableArrayRef) RV_value1, RV_current_context->dictionary);
                RV_CFRelease_00670190(RV_current_context->dictionary);
                RV_CFRelease_00670190(RV_key);
                // Switch to parent context
                RV_current_context = RV_current_context->parent;
                // Move past the child context
                RV_current_context->ptr = RV_inapp_context.end;
            }
        }
        if (RV_ctx->receipt_dict) RV_CFRelease_00670190(RV_ctx->receipt_dict);
        RV_ctx->receipt_dict = RV_receipt_context.dictionary;
        // Global variables computation
        // From 375 to 177
        RV_KHFJZNQZOHCB += 333; RV_KHFJZNQZOHCB /= 4;
        // From 29 to 572
        RV_BUBHQVCEHSTM -= 2; RV_BUBHQVCEHSTM *= 21; RV_BUBHQVCEHSTM += 5;
    RV_GetReceiptInformation062_RV_bail:
        if (RV_pkcs7) RV_PKCS7_free_00AD00C8(RV_pkcs7);
        if (RV_bio_p7) RV_BIO_free_012E0210(RV_bio_p7);
        if (RV_formatter) RV_CFRelease_00670190(RV_formatter);
    }
#else
#define RV_GetReceiptInformation062(RV_ctx) { \
RV_ParsingContext RV_receipt_context; \
RV_ParsingContext *RV_current_context; \
CFNumberRef RV_key; \
RV_ReceiptAttributeType RV_key1, RV_key2; \
CFTypeRef RV_value1, RV_value2; \
int RV_type; \
int RV_xclass; \
long RV_length; \
CFDateFormatterRef RV_formatter = NULL; \
BIO *RV_bio_p7; \
PKCS7 *RV_pkcs7; \
ASN1_OCTET_STRING *RV_contentRV_content; \
const unsigned char *RV_seq_end; \
int RV_attr_type; \
int RV_attr_version; \
int RV_str_type; \
long RV_str_length; \
const unsigned char *RV_str_ptr; \
volatile int RV_code = 172; RV_code -= 115; RV_code *= 3; RV_code += 2;  \
RV_ParsingContext RV_inapp_context; \
int RV_number; \
int RV_num_type; \
long RV_num_length; \
const unsigned char *RV_num_ptr; \
__RV_RECEIPT_LOG("RV - Parsing receipt"); \
RV_bio_p7 = RV_BIO_new_0192019B(RV_BIO_s_mem_00AD0227()); \
RV_BIO_write_012E01D4(RV_bio_p7, (void *) RV_CFDataGetBytePtr_003F0239((CFDataRef) RV_ctx->receipt_data), (int) RV_CFDataGetLength_003F0194((CFDataRef) RV_ctx->receipt_data)); \
RV_pkcs7 = RV_d2i_PKCS7_bio_00AD00A4(RV_bio_p7, NULL); \
if (!RV_pkcs7) { \
RV_exit_01B600EC(RV_code); \
RV_ctx->receipt_data = NULL; \
goto RV_GetReceiptInformation062_RV_bail; \
} \
if (!PKCS7_type_is_signed(RV_pkcs7)) { \
RV_exit_01B600EC(RV_code); \
RV_ctx->receipt_data = NULL; \
goto RV_GetReceiptInformation062_RV_bail; \
} \
if (!PKCS7_type_is_data(RV_pkcs7->d.sign->contents)) { \
RV_exit_01B600EC(RV_code); \
RV_ctx->receipt_data = NULL; \
goto RV_GetReceiptInformation062_RV_bail; \
} \
RV_formatter = RV_MAUEZLNOTUMG_01B701B9(NULL, NULL, kCFDateFormatterNoStyle, kCFDateFormatterNoStyle); \
RV_value1 = RV_ObfuscationFunction00ACF((RV_Strings[4]), 29, 33);  \
RV_KSFOTXHUXRJV_003F00C1(RV_formatter, (CFStringRef) RV_value1); \
RV_CFRelease_00670190(RV_value1); \
RV_contentRV_content = RV_pkcs7->d.sign->contents->d.data; \
RV_receipt_context.ptr = RV_contentRV_content->data; \
RV_receipt_context.end = RV_receipt_context.ptr + RV_contentRV_content->length; \
RV_receipt_context.parent = NULL; \
RV_receipt_context.dictionary = NULL; \
RV_current_context = &RV_receipt_context; \
while(RV_current_context->ptr < RV_current_context->end) { \
if (!RV_current_context->dictionary) { \
RV_current_context->dictionary = RV_CFDictionaryCreateMutable_00670181(kCFAllocatorDefault, (CFIndex) 573, RV_kCFTypeDictionaryKeyCallBacks_003F0041, RV_kCFTypeDictionaryValueCallBacks_006700A2); \
RV_ASN1_get_object_019200FF(&RV_current_context->ptr, &RV_length, &RV_type, &RV_xclass, RV_current_context->end - RV_current_context->ptr); \
if (RV_type != V_ASN1_SET) { \
RV_exit_01B600EC(RV_code); \
goto RV_GetReceiptInformation062_RV_bail; \
} \
} \
while(RV_current_context->ptr < RV_current_context->end) { \
RV_ASN1_get_object_019200FF(&RV_current_context->ptr, &RV_length, &RV_type, &RV_xclass, RV_current_context->end - RV_current_context->ptr); \
if (RV_type != V_ASN1_SEQUENCE) { \
RV_exit_01B600EC(RV_code); \
goto RV_GetReceiptInformation062_RV_bail; \
} \
RV_seq_end = RV_current_context->ptr + RV_length; \
RV_attr_type = 0; \
RV_attr_version = 0; \
RV_ASN1_get_object_019200FF(&RV_current_context->ptr, &RV_length, &RV_type, &RV_xclass, RV_current_context->end - RV_current_context->ptr); \
if (RV_type != V_ASN1_INTEGER) { \
RV_exit_01B600EC(RV_code); \
goto RV_GetReceiptInformation062_RV_bail; \
} \
RV_GetReceiptInformation062X((RV_current_context->ptr), (RV_length), (&RV_attr_type)); \
RV_current_context->ptr += RV_length; \
RV_ASN1_get_object_019200FF(&RV_current_context->ptr, &RV_length, &RV_type, &RV_xclass, RV_current_context->end - RV_current_context->ptr); \
if (RV_type != V_ASN1_INTEGER) { \
RV_exit_01B600EC(RV_code); \
goto RV_GetReceiptInformation062_RV_bail; \
} \
RV_GetReceiptInformation062X((RV_current_context->ptr), (RV_length), (&RV_attr_version)); \
RV_current_context->ptr += RV_length; \
RV_ASN1_get_object_019200FF(&RV_current_context->ptr, &RV_length, &RV_type, &RV_xclass, RV_current_context->end - RV_current_context->ptr); \
if (RV_type != V_ASN1_OCTET_STRING) { \
RV_exit_01B600EC(RV_code); \
goto RV_GetReceiptInformation062_RV_bail; \
} \
RV_key1 = (RV_ReceiptAttributeType) (RV_StoreNone + (RV_attr_type << 2)); \
RV_key2 = (RV_ReceiptAttributeType) (RV_StoreNone + (RV_attr_type << 2) + 1); \
RV_value1 = NULL; \
RV_value2 = NULL; \
__RV_RECEIPT_LOG("RV - Parsing receipt - Found attribute %s%d", RV_current_context->parent ? "--- " : "- ", RV_attr_type); \
switch (RV_attr_type) { \
case RV_ReceiptAttributeTypeBundleId: \
case RV_ReceiptAttributeTypeBundleVersion: \
case RV_ReceiptAttributeTypeOriginalApplicationVersion: \
case RV_InAppAttributeTypeProductIdentifer: \
case RV_InAppAttributeTypeTransactionIdentifer: \
case RV_InAppAttributeTypeOriginalTransactionIdentifer: \
{ \
RV_str_type = 0; \
RV_str_length = 0; \
RV_str_ptr = RV_current_context->ptr; \
RV_ASN1_get_object_019200FF(&RV_str_ptr, &RV_str_length, &RV_str_type, &RV_xclass, RV_seq_end - RV_str_ptr); \
if (RV_str_type != V_ASN1_UTF8STRING) { \
RV_exit_01B600EC(RV_code); \
goto RV_GetReceiptInformation062_RV_bail; \
} \
RV_value1 = ((__RV_CFStringCreateWithBytes) RV_Pointers[42])(NULL, (const UInt8 *) RV_str_ptr, (CFIndex) RV_str_length, kCFStringEncodingUTF8, false); \
RV_value2 = RV_RHZNVGLIATFX_003F0223(NULL, (const UInt8 *) RV_current_context->ptr, (CFIndex) RV_length); \
__RV_RECEIPT_LOG("RV - Parsing receipt -       attribute %s%d => %s", RV_current_context->parent ? "--- " : "- ", RV_attr_type, CFStringGetCStringPtr((CFStringRef) RV_value1, CFStringGetSystemEncoding())); \
break; \
} \
case RV_ReceiptAttributeTypeExpirationDate: \
case RV_InAppAttributeTypeCancellationDate: \
case RV_InAppAttributeTypeOriginalPurchaseDate: \
case RV_InAppAttributeTypePurchaseDate: \
case RV_InAppAttributeTypeSubscriptionExpirationDate: \
{ \
RV_str_type = 0; \
RV_str_length = 0; \
RV_str_ptr = RV_current_context->ptr; \
RV_ASN1_get_object_019200FF(&RV_str_ptr, &RV_str_length, &RV_str_type, &RV_xclass, RV_seq_end - RV_str_ptr); \
if (RV_str_type != V_ASN1_IA5STRING) { \
RV_exit_01B600EC(RV_code); \
goto RV_GetReceiptInformation062_RV_bail; \
} \
RV_value2 = ((__RV_CFStringCreateWithBytes) RV_Pointers[42])(NULL, (const UInt8 *) RV_str_ptr, (CFIndex) RV_str_length, kCFStringEncodingASCII, false); \
RV_value1 = RV_KHFJZNQZOHCB_01B70177(NULL, RV_formatter, (CFStringRef) RV_value2, NULL); \
__RV_RECEIPT_LOG("RV - Parsing receipt -       attribute %s%d => %s", RV_current_context->parent ? "--- " : "- ", RV_attr_type, CFStringGetCStringPtr((CFStringRef) RV_value2, CFStringGetSystemEncoding())); \
break; \
} \
case RV_InAppAttributeTypeQuantity: \
case RV_InAppAttributeTypeWebOrderLineItemId: \
{ \
RV_num_type = 0; \
RV_num_length = 0; \
RV_num_ptr = RV_current_context->ptr; \
RV_ASN1_get_object_019200FF(&RV_num_ptr, &RV_num_length, &RV_num_type, &RV_xclass, RV_seq_end - RV_num_ptr); \
if (RV_num_type != V_ASN1_INTEGER) { \
RV_exit_01B600EC(RV_code); \
goto RV_GetReceiptInformation062_RV_bail; \
} \
RV_GetReceiptInformation062X((RV_num_ptr), (RV_num_length), (&RV_number)); \
RV_value1 = RV_VTDLAHQPKOZD_01B70138(NULL, kCFNumberIntType, &RV_number); \
__RV_RECEIPT_LOG("RV - Parsing receipt -       attribute %s%d => %d", RV_current_context->parent ? "--- " : "- ", RV_attr_type, RV_number); \
break; \
} \
case RV_ReceiptAttributeTypeOpaqueValue: \
case RV_ReceiptAttributeTypeHash: \
{ \
RV_value1 = RV_RHZNVGLIATFX_003F0223(NULL, (const UInt8 *) RV_current_context->ptr, (CFIndex) RV_length); \
__RV_RECEIPT_LOG("RV - Parsing receipt -       attribute %s%d => [%lu bytes]", RV_current_context->parent ? "--- " : "- ", RV_attr_type, RV_CFDataGetLength_003F0194((CFDataRef) RV_value1)); \
break; \
} \
case RV_ReceiptAttributeTypeInAppPurchase: \
{ \
RV_inapp_context.ptr = RV_current_context->ptr; \
RV_inapp_context.end = RV_inapp_context.ptr + RV_length; \
RV_inapp_context.dictionary = NULL; \
RV_inapp_context.parent = RV_current_context; \
RV_current_context = &RV_inapp_context; \
goto RV_GetReceiptInformation062_RV_key; \
} \
default: \
break; \
} \
if (RV_value1) { \
RV_key = RV_VTDLAHQPKOZD_01B70138(NULL, kCFNumberIntType, &RV_key1); \
RV_KKYSZVFAWLCE_003F00A8((CFMutableDictionaryRef) RV_current_context->dictionary, RV_key, RV_value1); \
RV_CFRelease_00670190(RV_key); \
RV_CFRelease_00670190(RV_value1); \
} \
if (RV_value2) { \
RV_key = RV_VTDLAHQPKOZD_01B70138(NULL, kCFNumberIntType, &RV_key2); \
RV_KKYSZVFAWLCE_003F00A8((CFMutableDictionaryRef) RV_current_context->dictionary, RV_key, RV_value2); \
RV_CFRelease_00670190(RV_key); \
RV_CFRelease_00670190(RV_value2); \
} \
RV_current_context->ptr += RV_length; \
} \
RV_GetReceiptInformation062_RV_key: \
if (!RV_current_context->dictionary) { \
continue; \
} \
if (RV_current_context->parent) { \
__RV_RECEIPT_LOG("RV - Parsing receipt - Add an InApp purchase"); \
RV_key1 = RV_StoreReceiptAttributeTypeInAppPurchase; \
RV_key = RV_VTDLAHQPKOZD_01B70138(NULL, kCFNumberIntType, &RV_key1); \
RV_value1 = RV_BUBHQVCEHSTM_01B7001D((CFDictionaryRef) RV_current_context->parent->dictionary, RV_key); \
if (!RV_value1) { \
RV_value1 = RV_APFJIQNNAHUJ_0067002D(kCFAllocatorDefault, 0, RV_kCFTypeArrayCallBacks_01B70025); \
RV_CFDictionarySetValue_00670084((CFMutableDictionaryRef) RV_current_context->parent->dictionary, RV_key, RV_value1); \
RV_CFRelease_00670190(RV_value1); \
} \
RV_CFArrayAppendValue_01B701F7((CFMutableArrayRef) RV_value1, RV_current_context->dictionary); \
RV_CFRelease_00670190(RV_current_context->dictionary); \
RV_CFRelease_00670190(RV_key); \
RV_current_context = RV_current_context->parent; \
RV_current_context->ptr = RV_inapp_context.end; \
} \
} \
if (RV_ctx->receipt_dict) RV_CFRelease_00670190(RV_ctx->receipt_dict); \
RV_ctx->receipt_dict = RV_receipt_context.dictionary; \
RV_KHFJZNQZOHCB += 333; RV_KHFJZNQZOHCB /= 4;  \
RV_BUBHQVCEHSTM -= 2; RV_BUBHQVCEHSTM *= 21; RV_BUBHQVCEHSTM += 5;  \
RV_GetReceiptInformation062_RV_bail: \
if (RV_pkcs7) RV_PKCS7_free_00AD00C8(RV_pkcs7); \
if (RV_bio_p7) RV_BIO_free_012E0210(RV_bio_p7); \
if (RV_formatter) RV_CFRelease_00670190(RV_formatter); \
}
#endif
    
    
    // CodeBlock CheckReceiptSignature
#if DEBUG
    inline static void RV_CheckReceiptSignature073(RV_CheckingContext *RV_ctx) {
        BIO *RV_bio_p7 = NULL;
        PKCS7 *RV_pkcs7 = NULL;
        STACK_OF(X509) *RV_certificates = NULL;
        X509 *RV_certificate = NULL;
        int RV_count, RV_index1;
        unsigned int RV_index2;
        ASN1_OBJECT *RV_oid = NULL;
        char *RV_str1;
        char *RV_str3;
        char *RV_str4;
        char *RV_str5;
        int RV_verify, RV_status;
        BIO *RV_bio_apple = NULL;
        X509 *RV_apple = NULL;
        X509_STORE *RV_store = NULL;
        volatile int RV_code = 140; RV_code -= 83; RV_code *= 3; RV_code += 2;
        __RV_RECEIPT_LOG("RV - Checking receipt signature");
        // Put the receipt data into a memory buffer
        RV_bio_p7 = RV_BIO_new_01920179(RV_BIO_s_mem_00AD010A());
        RV_BIO_write_00AD01D4(RV_bio_p7, (void *) RV_BUBHQVCEHSTM_01B7023C((CFDataRef) RV_ctx->receipt_data), (int) RV_KHFJZNQZOHCB_01B700B1((CFDataRef) RV_ctx->receipt_data));
        RV_pkcs7 = RV_d2i_PKCS7_bio_012E00A4(RV_bio_p7, NULL);
        if (!RV_pkcs7) {
            RV_exit_022B0044(RV_code);
            RV_ctx->receipt_dict = NULL;
            goto RV_CheckReceiptSignature073_RV_bail;
        }
        if (!PKCS7_type_is_signed(RV_pkcs7)) {
            RV_exit_022B0044(RV_code);
            RV_ctx->receipt_dict = NULL;
            goto RV_CheckReceiptSignature073_RV_bail;
        }
        if (!PKCS7_type_is_data(RV_pkcs7->d.sign->contents)) {
            RV_exit_022B0044(RV_code);
            RV_ctx->receipt_dict = NULL;
            goto RV_CheckReceiptSignature073_RV_bail;
        }
        RV_OpenSSL_add_all_digests_01920121();
        // If the Apple Root CA certificate has been loaded, then check the receipt against it.
        if (RV_ctx->ca_data) {
            RV_bio_apple = RV_BIO_new_01920179(RV_BIO_s_mem_00AD010A());
            RV_BIO_write_00AD01D4(RV_bio_apple, (void *) RV_BUBHQVCEHSTM_01B7023C((CFDataRef) RV_ctx->ca_data), (int) RV_KHFJZNQZOHCB_01B700B1((CFDataRef) RV_ctx->ca_data));
            RV_apple = RV_d2i_X509_bio_00AD0133(RV_bio_apple, NULL);
            if (!RV_apple) {
                RV_exit_022B0044(RV_code);
                goto RV_CheckReceiptSignature073_RV_bail;
            }
            RV_store = RV_X509_STORE_new_019200FD();
            RV_X509_STORE_add_cert_01920061(RV_store, RV_apple);
            // Check that the PKCS7_verify function is not tampered with
            RV_verify = RV_PKCS7_verify_012E0186(NULL, NULL, RV_store, NULL, NULL, 0) * 3010;
            if (RV_verify == 3010) {
                RV_exit_022B0044(RV_code);
                goto RV_CheckReceiptSignature073_RV_bail;
            }
            // Check that the PKCS7 content is signed by the Apple Root CA certificate
            RV_verify = RV_PKCS7_verify_012E0186(RV_pkcs7, NULL, RV_store, NULL, NULL, 0) * 3010;
            if (RV_verify != 3010) {
                RV_exit_022B0044(RV_code);
                goto RV_CheckReceiptSignature073_RV_bail;
            }
        }
        // Extract the certificates from the receipt.
        // One of them must be the Apple Root CA certificate with the correct fingerprint.
        RV_verify = 0;
        RV_certificates = RV_pkcs7->d.sign->cert;
        RV_count = RV_sk_num_01920034((const _STACK *) RV_certificates);
        for(RV_index1 = 0; RV_index1 < RV_count; RV_index1++) {
            RV_certificate = (X509 *) RV_sk_value_00AD0170((const _STACK *) RV_certificates, RV_index1);
            char RV_common_name[573];
            // Check that the X509_NAME_get_text_by_NID function is not tampered with
            RV_status = RV_X509_NAME_get_text_by_NID_00AD0189(NULL, NID_commonName, NULL, 0);
            if (RV_status > 0) {
                RV_exit_022B0044(RV_code);
                goto RV_CheckReceiptSignature073_RV_bail;
            }
            // Retrieve the common name
            RV_status = RV_X509_NAME_get_text_by_NID_00AD0189(RV_certificate->cert_info->subject, NID_commonName, RV_common_name, 573);
            if (RV_status <= 0) {
                RV_exit_022B0044(RV_code);
                goto RV_CheckReceiptSignature073_RV_bail;
            }
            volatile unsigned int RV_digest_length = 2; RV_digest_length -= 1; RV_digest_length *= 12; RV_digest_length += 8;
            const EVP_MD *RV_digester = EVP_sha1();
            unsigned char RV_digest[EVP_MAX_MD_SIZE];
            unsigned int RV_len = 0;
            // Check that the X509_digest function is not tampered with
            RV_status = RV_X509_digest_012E004C(NULL, RV_digester, RV_digest, &RV_len) * 3010;
            if (RV_status == 3010 || RV_len > 0) {
                RV_exit_022B0044(RV_code);
                goto RV_CheckReceiptSignature073_RV_bail;
            }
            RV_status = RV_X509_digest_012E004C(RV_certificate, RV_digester, RV_digest, &RV_len) * 3010;
            if (RV_status != 3010 || RV_len != RV_digest_length) {
                RV_exit_022B0044(RV_code);
                goto RV_CheckReceiptSignature073_RV_bail;
            }
            char RV_fingerprint[573];
            volatile unsigned int RV_increment = 2; RV_increment -= 1; RV_increment *= 3;
            for(RV_index2 = 0; RV_index2 < RV_digest_length; RV_index2++) {
                snprintf(&RV_fingerprint[RV_index2 * RV_increment], RV_increment + 1, "%02X:", RV_digest[RV_index2]);
            }
            char RV_str3_[573];
            RV_ObfuscationFunction008((RV_Strings[140]), RV_str3_, 220, 68);
            RV_str3 = RV_str3_;
            // Check the common name and the fingerprint
            char RV_str1_[573];
            RV_ObfuscationFunction00A((RV_Strings[288]), RV_str1_, 177, 16);
            RV_str1 = RV_str1_;
            volatile size_t RV_num = 4; RV_num -= 2; RV_num *= 5; RV_num += 3;
            if (((__RV_strncmp) RV_Pointers[244])(RV_common_name, RV_str1, RV_num) == 0 && ((__RV_strncmp) RV_Pointers[244])(RV_fingerprint, RV_str3, RV_digest_length * RV_increment - 1) == 0) {
                RV_verify = 3010;
                break;
            }
        }
        // Check that the last selected certificate is right one.
        if (RV_certificate == NULL || RV_verify != 3010) {
            RV_exit_022B0044(RV_code);
            goto RV_CheckReceiptSignature073_RV_bail;
        }
        // Check that the X509_get_ext_by_OBJ function is not tampered with
        char RV_str4_[573];
        RV_ObfuscationFunction00B((RV_Strings[73]), RV_str4_, 232, 34);
        RV_str4 = RV_str4_;
        RV_oid = RV_OBJ_txt2obj_012E01CE(RV_str4, 0);
        RV_verify = RV_X509_get_ext_by_OBJ_012E00B6(RV_certificate, RV_oid, 0);
        RV_ASN1_OBJECT_free_0192016B(RV_oid);
        if (RV_verify >= 0) {
            RV_exit_022B0044(RV_code);
            goto RV_CheckReceiptSignature073_RV_bail;
        }
        // Extract the signer certificate from the receipt
        // The certificate must have the extension OID "1.2.840.113635.100.6.11.1"
        char RV_str5_[573];
        RV_ObfuscationFunction00B((RV_Strings[321]), RV_str5_, 13, 34);
        RV_str5 = RV_str5_;
        RV_certificates = RV_PKCS7_get0_signers_00AD0069(RV_pkcs7, NULL, 0);
        RV_count = RV_sk_num_01920034((const _STACK *) RV_certificates);
        for(RV_index1 = 0; RV_index1 < RV_count; RV_index1++) {
            RV_certificate = (X509 *) RV_sk_value_00AD0170((const _STACK *) RV_certificates, RV_index1);
            RV_oid = RV_OBJ_txt2obj_012E01CE(RV_str5, 0);
            RV_verify = RV_X509_get_ext_by_OBJ_012E00B6(RV_certificate, RV_oid, 0);
            RV_ASN1_OBJECT_free_0192016B(RV_oid);
            if (RV_verify == -1) {
                sk_X509_free (RV_certificates);
                RV_certificates = NULL;
                continue;
            } else {
                break;
            }
        }
        if (RV_certificate == NULL || RV_verify < 0) {
            RV_exit_022B0044(RV_code);
            goto RV_CheckReceiptSignature073_RV_bail;
        }
        // Global variables computation
        // From 572 to 122
        RV_BUBHQVCEHSTM += 160; RV_BUBHQVCEHSTM /= 6;
        // From 441 to 373
        RV_MAUEZLNOTUMG += 305; RV_MAUEZLNOTUMG /= 2;
        // Set to 152
        RV_KKYSZVFAWLCE = 152;
    RV_CheckReceiptSignature073_RV_bail:
        if (RV_bio_p7) RV_BIO_free_00AD0210(RV_bio_p7);
        if (RV_pkcs7) RV_PKCS7_free_00AD00C8(RV_pkcs7);
        if (RV_certificates) sk_X509_free (RV_certificates);
        if (RV_apple) RV_X509_free_012E0094(RV_apple);
        if (RV_bio_apple) RV_BIO_free_00AD0210(RV_bio_apple);
        if (RV_store) RV_X509_STORE_free_0192017E(RV_store);
    }
#else
#define RV_CheckReceiptSignature073(RV_ctx) { \
BIO *RV_bio_p7 = NULL; \
PKCS7 *RV_pkcs7 = NULL; \
STACK_OF(X509) *RV_certificates = NULL; \
X509 *RV_certificate = NULL; \
int RV_count, RV_index1; \
unsigned int RV_index2; \
ASN1_OBJECT *RV_oid = NULL; \
char *RV_str1; \
char *RV_str3; \
char *RV_str4; \
char *RV_str5; \
int RV_verify, RV_status; \
BIO *RV_bio_apple = NULL; \
X509 *RV_apple = NULL; \
X509_STORE *RV_store = NULL; \
volatile int RV_code = 140; RV_code -= 83; RV_code *= 3; RV_code += 2;  \
__RV_RECEIPT_LOG("RV - Checking receipt signature"); \
RV_bio_p7 = RV_BIO_new_01920179(RV_BIO_s_mem_00AD010A()); \
RV_BIO_write_00AD01D4(RV_bio_p7, (void *) RV_BUBHQVCEHSTM_01B7023C((CFDataRef) RV_ctx->receipt_data), (int) RV_KHFJZNQZOHCB_01B700B1((CFDataRef) RV_ctx->receipt_data)); \
RV_pkcs7 = RV_d2i_PKCS7_bio_012E00A4(RV_bio_p7, NULL); \
if (!RV_pkcs7) { \
RV_exit_022B0044(RV_code); \
RV_ctx->receipt_dict = NULL; \
goto RV_CheckReceiptSignature073_RV_bail; \
} \
if (!PKCS7_type_is_signed(RV_pkcs7)) { \
RV_exit_022B0044(RV_code); \
RV_ctx->receipt_dict = NULL; \
goto RV_CheckReceiptSignature073_RV_bail; \
} \
if (!PKCS7_type_is_data(RV_pkcs7->d.sign->contents)) { \
RV_exit_022B0044(RV_code); \
RV_ctx->receipt_dict = NULL; \
goto RV_CheckReceiptSignature073_RV_bail; \
} \
RV_OpenSSL_add_all_digests_01920121(); \
if (RV_ctx->ca_data) { \
RV_bio_apple = RV_BIO_new_01920179(RV_BIO_s_mem_00AD010A()); \
RV_BIO_write_00AD01D4(RV_bio_apple, (void *) RV_BUBHQVCEHSTM_01B7023C((CFDataRef) RV_ctx->ca_data), (int) RV_KHFJZNQZOHCB_01B700B1((CFDataRef) RV_ctx->ca_data)); \
RV_apple = RV_d2i_X509_bio_00AD0133(RV_bio_apple, NULL); \
if (!RV_apple) { \
RV_exit_022B0044(RV_code); \
goto RV_CheckReceiptSignature073_RV_bail; \
} \
RV_store = RV_X509_STORE_new_019200FD(); \
RV_X509_STORE_add_cert_01920061(RV_store, RV_apple); \
RV_verify = RV_PKCS7_verify_012E0186(NULL, NULL, RV_store, NULL, NULL, 0) * 3010; \
if (RV_verify == 3010) { \
RV_exit_022B0044(RV_code); \
goto RV_CheckReceiptSignature073_RV_bail; \
} \
RV_verify = RV_PKCS7_verify_012E0186(RV_pkcs7, NULL, RV_store, NULL, NULL, 0) * 3010; \
if (RV_verify != 3010) { \
RV_exit_022B0044(RV_code); \
goto RV_CheckReceiptSignature073_RV_bail; \
} \
} \
RV_verify = 0; \
RV_certificates = RV_pkcs7->d.sign->cert; \
RV_count = RV_sk_num_01920034((const _STACK *) RV_certificates); \
for(RV_index1 = 0; RV_index1 < RV_count; RV_index1++) { \
RV_certificate = (X509 *) RV_sk_value_00AD0170((const _STACK *) RV_certificates, RV_index1); \
char RV_common_name[573]; \
RV_status = RV_X509_NAME_get_text_by_NID_00AD0189(NULL, NID_commonName, NULL, 0); \
if (RV_status > 0) { \
RV_exit_022B0044(RV_code); \
goto RV_CheckReceiptSignature073_RV_bail; \
} \
RV_status = RV_X509_NAME_get_text_by_NID_00AD0189(RV_certificate->cert_info->subject, NID_commonName, RV_common_name, 573); \
if (RV_status <= 0) { \
RV_exit_022B0044(RV_code); \
goto RV_CheckReceiptSignature073_RV_bail; \
} \
volatile unsigned int RV_digest_length = 2; RV_digest_length -= 1; RV_digest_length *= 12; RV_digest_length += 8;  \
const EVP_MD *RV_digester = EVP_sha1(); \
unsigned char RV_digest[EVP_MAX_MD_SIZE]; \
unsigned int RV_len = 0; \
RV_status = RV_X509_digest_012E004C(NULL, RV_digester, RV_digest, &RV_len) * 3010; \
if (RV_status == 3010 || RV_len > 0) { \
RV_exit_022B0044(RV_code); \
goto RV_CheckReceiptSignature073_RV_bail; \
} \
RV_status = RV_X509_digest_012E004C(RV_certificate, RV_digester, RV_digest, &RV_len) * 3010; \
if (RV_status != 3010 || RV_len != RV_digest_length) { \
RV_exit_022B0044(RV_code); \
goto RV_CheckReceiptSignature073_RV_bail; \
} \
char RV_fingerprint[573]; \
volatile unsigned int RV_increment = 2; RV_increment -= 1; RV_increment *= 3;  \
for(RV_index2 = 0; RV_index2 < RV_digest_length; RV_index2++) { \
snprintf(&RV_fingerprint[RV_index2 * RV_increment], RV_increment + 1, "%02X:", RV_digest[RV_index2]); \
} \
char RV_str3_[573]; \
RV_ObfuscationFunction008((RV_Strings[140]), RV_str3_, 220, 68); \
RV_str3 = RV_str3_; \
char RV_str1_[573]; \
RV_ObfuscationFunction00A((RV_Strings[288]), RV_str1_, 177, 16); \
RV_str1 = RV_str1_; \
volatile size_t RV_num = 4; RV_num -= 2; RV_num *= 5; RV_num += 3;  \
if (((__RV_strncmp) RV_Pointers[244])(RV_common_name, RV_str1, RV_num) == 0 && ((__RV_strncmp) RV_Pointers[244])(RV_fingerprint, RV_str3, RV_digest_length * RV_increment - 1) == 0) { \
RV_verify = 3010; \
break; \
} \
} \
if (RV_certificate == NULL || RV_verify != 3010) { \
RV_exit_022B0044(RV_code); \
goto RV_CheckReceiptSignature073_RV_bail; \
} \
char RV_str4_[573]; \
RV_ObfuscationFunction00B((RV_Strings[73]), RV_str4_, 232, 34); \
RV_str4 = RV_str4_; \
RV_oid = RV_OBJ_txt2obj_012E01CE(RV_str4, 0); \
RV_verify = RV_X509_get_ext_by_OBJ_012E00B6(RV_certificate, RV_oid, 0); \
RV_ASN1_OBJECT_free_0192016B(RV_oid); \
if (RV_verify >= 0) { \
RV_exit_022B0044(RV_code); \
goto RV_CheckReceiptSignature073_RV_bail; \
} \
char RV_str5_[573]; \
RV_ObfuscationFunction00B((RV_Strings[321]), RV_str5_, 13, 34); \
RV_str5 = RV_str5_; \
RV_certificates = RV_PKCS7_get0_signers_00AD0069(RV_pkcs7, NULL, 0); \
RV_count = RV_sk_num_01920034((const _STACK *) RV_certificates); \
for(RV_index1 = 0; RV_index1 < RV_count; RV_index1++) { \
RV_certificate = (X509 *) RV_sk_value_00AD0170((const _STACK *) RV_certificates, RV_index1); \
RV_oid = RV_OBJ_txt2obj_012E01CE(RV_str5, 0); \
RV_verify = RV_X509_get_ext_by_OBJ_012E00B6(RV_certificate, RV_oid, 0); \
RV_ASN1_OBJECT_free_0192016B(RV_oid); \
if (RV_verify == -1) { \
sk_X509_free (RV_certificates); \
RV_certificates = NULL; \
continue; \
} else { \
break; \
} \
} \
if (RV_certificate == NULL || RV_verify < 0) { \
RV_exit_022B0044(RV_code); \
goto RV_CheckReceiptSignature073_RV_bail; \
} \
RV_BUBHQVCEHSTM += 160; RV_BUBHQVCEHSTM /= 6;  \
RV_MAUEZLNOTUMG += 305; RV_MAUEZLNOTUMG /= 2;  \
RV_KKYSZVFAWLCE = 152; \
RV_CheckReceiptSignature073_RV_bail: \
if (RV_bio_p7) RV_BIO_free_00AD0210(RV_bio_p7); \
if (RV_pkcs7) RV_PKCS7_free_00AD00C8(RV_pkcs7); \
if (RV_certificates) sk_X509_free (RV_certificates); \
if (RV_apple) RV_X509_free_012E0094(RV_apple); \
if (RV_bio_apple) RV_BIO_free_00AD0210(RV_bio_apple); \
if (RV_store) RV_X509_STORE_free_0192017E(RV_store); \
}
#endif
    
    
    // CodeBlock CheckReceiptIdentifier
#if DEBUG
    inline static void RV_CheckReceiptIdentifier07E(RV_CheckingContext *RV_ctx) {
        __RV_RECEIPT_LOG("RV - Checking receipt identifier");
        RV_ReceiptAttributeType RV_value = RV_StoreReceiptAttributeTypeBundleId;
        CFStringRef RV_str1 = RV_ObfuscationFunction005CF((RV_Strings[39]), 218, 16);
        volatile int RV_code = 163; RV_code -= 106; RV_code *= 3; RV_code += 2;
        CFNumberRef RV_key = RV_BUBHQVCEHSTM_01B7007A(NULL, kCFNumberIntType, &RV_value);
        CFStringRef RV_str2 = (CFStringRef) RV_KKYSZVFAWLCE_01B70098((CFDictionaryRef) RV_ctx->receipt_dict, RV_key);
        RV_CFRelease_003F0190(RV_key);
        if (RV_MAUEZLNOTUMG_00670175(RV_str1, RV_str2, 0) != kCFCompareEqualTo) {
            __RV_RECEIPT_LOG("RV - Receipt identifier mismatch (expecting '%s' but actual value is '%s')", CFStringGetCStringPtr(RV_str1, CFStringGetSystemEncoding()), CFStringGetCStringPtr(RV_str2, CFStringGetSystemEncoding()));
            RV_exit_022B00EC(RV_code);
            // Dead code
            RV_CFRelease_003F0190(RV_key);
            RV_CFRelease_003F0190(RV_str1);
            RV_CFRelease_003F0190(RV_key);
            RV_CFRelease_003F0190(RV_str1);
        }
        // Global variables computation
        // From 45 to 557
        RV_APFJIQNNAHUJ -= 6; RV_APFJIQNNAHUJ *= 14; RV_APFJIQNNAHUJ += 11;
        // Set to 56
        RV_MAUEZLNOTUMG = 56;
        // From 152 to 427
        RV_KKYSZVFAWLCE -= 46; RV_KKYSZVFAWLCE *= 4; RV_KKYSZVFAWLCE += 3;
        RV_CFRelease_003F0190(RV_str1);
    }
#else
#define RV_CheckReceiptIdentifier07E(RV_ctx) { \
__RV_RECEIPT_LOG("RV - Checking receipt identifier"); \
RV_ReceiptAttributeType RV_value = RV_StoreReceiptAttributeTypeBundleId; \
CFStringRef RV_str1 = RV_ObfuscationFunction005CF((RV_Strings[39]), 218, 16); \
volatile int RV_code = 163; RV_code -= 106; RV_code *= 3; RV_code += 2;  \
CFNumberRef RV_key = RV_BUBHQVCEHSTM_01B7007A(NULL, kCFNumberIntType, &RV_value); \
CFStringRef RV_str2 = (CFStringRef) RV_KKYSZVFAWLCE_01B70098((CFDictionaryRef) RV_ctx->receipt_dict, RV_key); \
RV_CFRelease_003F0190(RV_key); \
if (RV_MAUEZLNOTUMG_00670175(RV_str1, RV_str2, 0) != kCFCompareEqualTo) { \
__RV_RECEIPT_LOG("RV - Receipt identifier mismatch (expecting '%s' but actual value is '%s')", CFStringGetCStringPtr(RV_str1, CFStringGetSystemEncoding()), CFStringGetCStringPtr(RV_str2, CFStringGetSystemEncoding())); \
RV_exit_022B00EC(RV_code); \
RV_CFRelease_003F0190(RV_key); \
RV_CFRelease_003F0190(RV_str1); \
RV_CFRelease_003F0190(RV_key); \
RV_CFRelease_003F0190(RV_str1); \
} \
RV_APFJIQNNAHUJ -= 6; RV_APFJIQNNAHUJ *= 14; RV_APFJIQNNAHUJ += 11;  \
RV_MAUEZLNOTUMG = 56; \
RV_KKYSZVFAWLCE -= 46; RV_KKYSZVFAWLCE *= 4; RV_KKYSZVFAWLCE += 3;  \
RV_CFRelease_003F0190(RV_str1); \
}
#endif
    
    
    // CodeBlock CheckReceiptVersion
#ifndef RECEIGEN_LOOSE_VERSION_CHECK
#if DEBUG
    inline static void RV_CheckReceiptVersion081(RV_CheckingContext *RV_ctx) {
        __RV_RECEIPT_LOG("RV - Checking receipt version");
        RV_ReceiptAttributeType RV_value = RV_StoreReceiptAttributeTypeBundleVersion;
        volatile int RV_code = 107; RV_code -= 50; RV_code *= 3; RV_code += 2;
        CFStringRef RV_str1 = RV_ObfuscationFunction00ACF((RV_Strings[467]), 209, 16);
        CFNumberRef RV_key = RV_MAUEZLNOTUMG_00670038(NULL, kCFNumberIntType, &RV_value);
        CFStringRef RV_str2 = (CFStringRef) RV_APFJIQNNAHUJ_0067022D((CFDictionaryRef) RV_ctx->receipt_dict, RV_key);
        RV_CFRelease_003F0190(RV_key);
        if (RV_KKYSZVFAWLCE_006701AB(RV_str1, RV_str2, 0) != kCFCompareEqualTo) {
            __RV_RECEIPT_LOG("RV - Receipt version mismatch (expecting '%s' but actual value is '%s')", CFStringGetCStringPtr(RV_str1, CFStringGetSystemEncoding()), CFStringGetCStringPtr(RV_str2, CFStringGetSystemEncoding()));
            RV_exit_022B00D9(RV_code);
            // Dead code
            RV_CFRelease_003F0190(RV_key);
            RV_CFRelease_003F0190(RV_str1);
            RV_CFRelease_003F0190(RV_key);
            RV_CFRelease_003F0190(RV_str1);
        }
        // Global variables computation
        // From 547 to 156
        RV_RHZNVGLIATFX += 233; RV_RHZNVGLIATFX /= 5;
        // Set to 131
        RV_KHFJZNQZOHCB = 131;
        // From 122 to 114
        RV_BUBHQVCEHSTM += 106; RV_BUBHQVCEHSTM /= 2;
        // From 312 to 569
        RV_VTDLAHQPKOZD -= 123; RV_VTDLAHQPKOZD *= 3; RV_VTDLAHQPKOZD += 2;
        // From 557 to 91
        RV_APFJIQNNAHUJ += 171; RV_APFJIQNNAHUJ /= 8;
        // From 193 to 152
        RV_KSFOTXHUXRJV += 111; RV_KSFOTXHUXRJV /= 2;
        // From 56 to 466
        RV_MAUEZLNOTUMG -= 10; RV_MAUEZLNOTUMG *= 10; RV_MAUEZLNOTUMG += 6;
        // From 427 to 444
        RV_KKYSZVFAWLCE -= 279; RV_KKYSZVFAWLCE *= 3;
        RV_CFRelease_003F0190(RV_str1);
    }
#else
#define RV_CheckReceiptVersion081(RV_ctx) { \
__RV_RECEIPT_LOG("RV - Checking receipt version"); \
RV_ReceiptAttributeType RV_value = RV_StoreReceiptAttributeTypeBundleVersion; \
volatile int RV_code = 107; RV_code -= 50; RV_code *= 3; RV_code += 2;  \
CFStringRef RV_str1 = RV_ObfuscationFunction00ACF((RV_Strings[467]), 209, 16); \
CFNumberRef RV_key = RV_MAUEZLNOTUMG_00670038(NULL, kCFNumberIntType, &RV_value); \
CFStringRef RV_str2 = (CFStringRef) RV_APFJIQNNAHUJ_0067022D((CFDictionaryRef) RV_ctx->receipt_dict, RV_key); \
RV_CFRelease_003F0190(RV_key); \
if (RV_KKYSZVFAWLCE_006701AB(RV_str1, RV_str2, 0) != kCFCompareEqualTo) { \
__RV_RECEIPT_LOG("RV - Receipt version mismatch (expecting '%s' but actual value is '%s')", CFStringGetCStringPtr(RV_str1, CFStringGetSystemEncoding()), CFStringGetCStringPtr(RV_str2, CFStringGetSystemEncoding())); \
RV_exit_022B00D9(RV_code); \
RV_CFRelease_003F0190(RV_key); \
RV_CFRelease_003F0190(RV_str1); \
RV_CFRelease_003F0190(RV_key); \
RV_CFRelease_003F0190(RV_str1); \
} \
RV_RHZNVGLIATFX += 233; RV_RHZNVGLIATFX /= 5;  \
RV_KHFJZNQZOHCB = 131; \
RV_BUBHQVCEHSTM += 106; RV_BUBHQVCEHSTM /= 2;  \
RV_VTDLAHQPKOZD -= 123; RV_VTDLAHQPKOZD *= 3; RV_VTDLAHQPKOZD += 2;  \
RV_APFJIQNNAHUJ += 171; RV_APFJIQNNAHUJ /= 8;  \
RV_KSFOTXHUXRJV += 111; RV_KSFOTXHUXRJV /= 2;  \
RV_MAUEZLNOTUMG -= 10; RV_MAUEZLNOTUMG *= 10; RV_MAUEZLNOTUMG += 6;  \
RV_KKYSZVFAWLCE -= 279; RV_KKYSZVFAWLCE *= 3;  \
RV_CFRelease_003F0190(RV_str1); \
}
#endif
#endif
    
#ifdef RECEIGEN_LOOSE_VERSION_CHECK
#if DEBUG
    inline static void RV_CheckReceiptVersion081(RV_CheckingContext *RV_ctx) {
        __RV_RECEIPT_LOG("RV - Checking receipt version loosely");
        RV_ReceiptAttributeType RV_value = RV_StoreReceiptAttributeTypeBundleVersion;
        CFStringRef RV_str1 = RV_ObfuscationFunction00ACF((RV_Strings[467]), 209, 16);
        CFNumberRef RV_key = RV_MAUEZLNOTUMG_00670038(NULL, kCFNumberIntType, &RV_value);
        CFStringRef RV_str2 = (CFStringRef) RV_APFJIQNNAHUJ_0067022D((CFDictionaryRef) RV_ctx->receipt_dict, RV_key);
        RV_CFRelease_00670190(RV_key);
        if (RV_KKYSZVFAWLCE_006701AB(RV_str1, RV_str2, 0) != kCFCompareEqualTo) {
            __RV_RECEIPT_LOG("RV - Receipt version mismatch (expecting '%s' but actual value is '%s')", CFStringGetCStringPtr(RV_str1, CFStringGetSystemEncoding()), CFStringGetCStringPtr(RV_str2, CFStringGetSystemEncoding()));
        }
        // Global variables computation
        // From 547 to 156
        RV_RHZNVGLIATFX += 233; RV_RHZNVGLIATFX /= 5;
        // Set to 131
        RV_KHFJZNQZOHCB = 131;
        // From 122 to 114
        RV_BUBHQVCEHSTM += 106; RV_BUBHQVCEHSTM /= 2;
        // From 312 to 569
        RV_VTDLAHQPKOZD -= 123; RV_VTDLAHQPKOZD *= 3; RV_VTDLAHQPKOZD += 2;
        // From 557 to 91
        RV_APFJIQNNAHUJ += 171; RV_APFJIQNNAHUJ /= 8;
        // From 193 to 152
        RV_KSFOTXHUXRJV += 111; RV_KSFOTXHUXRJV /= 2;
        // From 56 to 466
        RV_MAUEZLNOTUMG -= 10; RV_MAUEZLNOTUMG *= 10; RV_MAUEZLNOTUMG += 6;
        // From 427 to 444
        RV_KKYSZVFAWLCE -= 279; RV_KKYSZVFAWLCE *= 3;
        RV_CFRelease_00670190(RV_str1);
    }
#else
#define RV_CheckReceiptVersion081(RV_ctx) { \
__RV_RECEIPT_LOG("RV - Checking receipt version loosely"); \
RV_ReceiptAttributeType RV_value = RV_StoreReceiptAttributeTypeBundleVersion; \
CFStringRef RV_str1 = RV_ObfuscationFunction00ACF((RV_Strings[467]), 209, 16); \
CFNumberRef RV_key = RV_MAUEZLNOTUMG_00670038(NULL, kCFNumberIntType, &RV_value); \
CFStringRef RV_str2 = (CFStringRef) RV_APFJIQNNAHUJ_0067022D((CFDictionaryRef) RV_ctx->receipt_dict, RV_key); \
RV_CFRelease_00670190(RV_key); \
if (RV_KKYSZVFAWLCE_006701AB(RV_str1, RV_str2, 0) != kCFCompareEqualTo) { \
__RV_RECEIPT_LOG("RV - Receipt version mismatch (expecting '%s' but actual value is '%s')", CFStringGetCStringPtr(RV_str1, CFStringGetSystemEncoding()), CFStringGetCStringPtr(RV_str2, CFStringGetSystemEncoding())); \
} \
RV_RHZNVGLIATFX += 233; RV_RHZNVGLIATFX /= 5;  \
RV_KHFJZNQZOHCB = 131; \
RV_BUBHQVCEHSTM += 106; RV_BUBHQVCEHSTM /= 2;  \
RV_VTDLAHQPKOZD -= 123; RV_VTDLAHQPKOZD *= 3; RV_VTDLAHQPKOZD += 2;  \
RV_APFJIQNNAHUJ += 171; RV_APFJIQNNAHUJ /= 8;  \
RV_KSFOTXHUXRJV += 111; RV_KSFOTXHUXRJV /= 2;  \
RV_MAUEZLNOTUMG -= 10; RV_MAUEZLNOTUMG *= 10; RV_MAUEZLNOTUMG += 6;  \
RV_KKYSZVFAWLCE -= 279; RV_KKYSZVFAWLCE *= 3;  \
RV_CFRelease_00670190(RV_str1); \
}
#endif
#endif
    
    
    // CodeBlock CheckReceiptHash
#if DEBUG
    inline static void RV_CheckReceiptHash0A4(RV_CheckingContext *RV_ctx) {
        CFDataRef RV_data1, RV_data2, RV_data3;
        CFMutableDataRef RV_data4;
        unsigned char RV_digest[573];
        volatile int RV_counter = 4; RV_counter -= 2; RV_counter *= 7; RV_counter += 6;
        RV_ReceiptAttributeType RV_value;
        CFNumberRef RV_key;
        char *RV_str1;
        __RV_RECEIPT_LOG("RV - Checking receipt hash");
        RV_value = RV_StoreReceiptAttributeTypeOpaqueValue;
        RV_key = RV_CFNumberCreate_01B70138(NULL, kCFNumberIntType, &RV_value);
        RV_data1 = (CFDataRef) RV_KSFOTXHUXRJV_00670098((CFDictionaryRef) RV_ctx->receipt_dict, RV_key);
        RV_CFRelease_006701DC(RV_key);
        RV_value = RV_StoreReceiptAttributeTypeBundleIdData;
        RV_key = RV_CFNumberCreate_01B70138(NULL, kCFNumberIntType, &RV_value);
        RV_data2 = (CFDataRef) RV_KSFOTXHUXRJV_00670098((CFDictionaryRef) RV_ctx->receipt_dict, RV_key);
        RV_CFRelease_006701DC(RV_key);
        RV_value = RV_StoreReceiptAttributeTypeHash;
        RV_key = RV_CFNumberCreate_01B70138(NULL, kCFNumberIntType, &RV_value);
        RV_data3 = (CFDataRef) RV_KSFOTXHUXRJV_00670098((CFDictionaryRef) RV_ctx->receipt_dict, RV_key);
        RV_CFRelease_006701DC(RV_key);
        RV_data4 = RV_BUBHQVCEHSTM_01B70072(NULL, RV_CFDataGetLength_01B700B1((CFDataRef) RV_ctx->guid_data) + RV_CFDataGetLength_01B700B1(RV_data1) + RV_CFDataGetLength_01B700B1(RV_data2));
        RV_APFJIQNNAHUJ_003F005B(RV_data4, RV_VTDLAHQPKOZD_00670239((CFDataRef) RV_ctx->guid_data), RV_CFDataGetLength_01B700B1((CFDataRef) RV_ctx->guid_data));
        RV_APFJIQNNAHUJ_003F005B(RV_data4, RV_VTDLAHQPKOZD_00670239(RV_data1), RV_CFDataGetLength_01B700B1(RV_data1));
        RV_APFJIQNNAHUJ_003F005B(RV_data4, RV_VTDLAHQPKOZD_00670239(RV_data2), RV_CFDataGetLength_01B700B1(RV_data2));
        RV_SHA1_012E015D(RV_VTDLAHQPKOZD_00670239(RV_data4), (CC_LONG) RV_CFDataGetLength_01B700B1(RV_data4), RV_digest);
        RV_OpenSSL_add_all_digests_01920121();
        EVP_MD_CTX RV_hashctx2;
        RV_EVP_MD_CTX_init_00AD01F2(&RV_hashctx2);
        char RV_str1_[573];
        RV_ObfuscationFunction005((RV_Strings[459]), RV_str1_, 208, 16);
        RV_str1 = RV_str1_;
        const EVP_MD *RV_digester = EVP_get_digestbyname(RV_str1);
        RV_EVP_DigestInit_012E00DD(&RV_hashctx2, RV_digester);
        RV_EVP_DigestUpdate_012E0053(&RV_hashctx2, (const void *) RV_VTDLAHQPKOZD_00670239((CFDataRef) RV_ctx->guid_data), (size_t) RV_CFDataGetLength_01B700B1((CFDataRef) RV_ctx->guid_data));
        RV_EVP_DigestUpdate_012E0053(&RV_hashctx2, (const void *) RV_VTDLAHQPKOZD_00670239(RV_data1), (size_t) RV_CFDataGetLength_01B700B1(RV_data1));
        RV_EVP_DigestUpdate_012E0053(&RV_hashctx2, (const void *) RV_VTDLAHQPKOZD_00670239(RV_data2), (size_t) RV_CFDataGetLength_01B700B1(RV_data2));
        RV_EVP_DigestFinal_00AD021D(&RV_hashctx2, RV_digest, NULL);
        volatile int RV_code = 45; RV_code -= 11; RV_code *= 5; RV_code += 3;
        const unsigned char *RV_ptr1 = RV_digest;
        const unsigned char *RV_ptr2 = RV_VTDLAHQPKOZD_00670239(RV_data3);
        while(--RV_counter >= 0) {
            if ((*RV_ptr1++) != (*RV_ptr2++)) {
                __RV_RECEIPT_LOG("RV - Receipt hash is invalid");
                RV_CFRelease_006701DC(RV_data4);
                RV_exit_022B0044(RV_code);
                // Dead code
                RV_CFRelease_006701DC(RV_data1);
                RV_CFRelease_006701DC(RV_data2);
                RV_CFRelease_006701DC(RV_data4);
                goto RV_CheckReceiptHash0A4_RV_bail;
            }
        }
        // Global variables computation
        // From 91 to 469
        RV_APFJIQNNAHUJ -= 24; RV_APFJIQNNAHUJ *= 7;
    RV_CheckReceiptHash0A4_RV_bail:
        RV_CFRelease_006701DC(RV_data4);
    }
#else
#define RV_CheckReceiptHash0A4(RV_ctx) { \
CFDataRef RV_data1, RV_data2, RV_data3; \
CFMutableDataRef RV_data4; \
unsigned char RV_digest[573]; \
volatile int RV_counter = 4; RV_counter -= 2; RV_counter *= 7; RV_counter += 6;  \
RV_ReceiptAttributeType RV_value; \
CFNumberRef RV_key; \
char *RV_str1; \
__RV_RECEIPT_LOG("RV - Checking receipt hash"); \
RV_value = RV_StoreReceiptAttributeTypeOpaqueValue; \
RV_key = RV_CFNumberCreate_01B70138(NULL, kCFNumberIntType, &RV_value); \
RV_data1 = (CFDataRef) RV_KSFOTXHUXRJV_00670098((CFDictionaryRef) RV_ctx->receipt_dict, RV_key); \
RV_CFRelease_006701DC(RV_key); \
RV_value = RV_StoreReceiptAttributeTypeBundleIdData; \
RV_key = RV_CFNumberCreate_01B70138(NULL, kCFNumberIntType, &RV_value); \
RV_data2 = (CFDataRef) RV_KSFOTXHUXRJV_00670098((CFDictionaryRef) RV_ctx->receipt_dict, RV_key); \
RV_CFRelease_006701DC(RV_key); \
RV_value = RV_StoreReceiptAttributeTypeHash; \
RV_key = RV_CFNumberCreate_01B70138(NULL, kCFNumberIntType, &RV_value); \
RV_data3 = (CFDataRef) RV_KSFOTXHUXRJV_00670098((CFDictionaryRef) RV_ctx->receipt_dict, RV_key); \
RV_CFRelease_006701DC(RV_key); \
RV_data4 = RV_BUBHQVCEHSTM_01B70072(NULL, RV_CFDataGetLength_01B700B1((CFDataRef) RV_ctx->guid_data) + RV_CFDataGetLength_01B700B1(RV_data1) + RV_CFDataGetLength_01B700B1(RV_data2)); \
RV_APFJIQNNAHUJ_003F005B(RV_data4, RV_VTDLAHQPKOZD_00670239((CFDataRef) RV_ctx->guid_data), RV_CFDataGetLength_01B700B1((CFDataRef) RV_ctx->guid_data)); \
RV_APFJIQNNAHUJ_003F005B(RV_data4, RV_VTDLAHQPKOZD_00670239(RV_data1), RV_CFDataGetLength_01B700B1(RV_data1)); \
RV_APFJIQNNAHUJ_003F005B(RV_data4, RV_VTDLAHQPKOZD_00670239(RV_data2), RV_CFDataGetLength_01B700B1(RV_data2)); \
RV_SHA1_012E015D(RV_VTDLAHQPKOZD_00670239(RV_data4), (CC_LONG) RV_CFDataGetLength_01B700B1(RV_data4), RV_digest); \
RV_OpenSSL_add_all_digests_01920121(); \
EVP_MD_CTX RV_hashctx2; \
RV_EVP_MD_CTX_init_00AD01F2(&RV_hashctx2); \
char RV_str1_[573]; \
RV_ObfuscationFunction005((RV_Strings[459]), RV_str1_, 208, 16); \
RV_str1 = RV_str1_; \
const EVP_MD *RV_digester = EVP_get_digestbyname(RV_str1); \
RV_EVP_DigestInit_012E00DD(&RV_hashctx2, RV_digester); \
RV_EVP_DigestUpdate_012E0053(&RV_hashctx2, (const void *) RV_VTDLAHQPKOZD_00670239((CFDataRef) RV_ctx->guid_data), (size_t) RV_CFDataGetLength_01B700B1((CFDataRef) RV_ctx->guid_data)); \
RV_EVP_DigestUpdate_012E0053(&RV_hashctx2, (const void *) RV_VTDLAHQPKOZD_00670239(RV_data1), (size_t) RV_CFDataGetLength_01B700B1(RV_data1)); \
RV_EVP_DigestUpdate_012E0053(&RV_hashctx2, (const void *) RV_VTDLAHQPKOZD_00670239(RV_data2), (size_t) RV_CFDataGetLength_01B700B1(RV_data2)); \
RV_EVP_DigestFinal_00AD021D(&RV_hashctx2, RV_digest, NULL); \
volatile int RV_code = 45; RV_code -= 11; RV_code *= 5; RV_code += 3;  \
const unsigned char *RV_ptr1 = RV_digest; \
const unsigned char *RV_ptr2 = RV_VTDLAHQPKOZD_00670239(RV_data3); \
while(--RV_counter >= 0) { \
if ((*RV_ptr1++) != (*RV_ptr2++)) { \
__RV_RECEIPT_LOG("RV - Receipt hash is invalid"); \
RV_CFRelease_006701DC(RV_data4); \
RV_exit_022B0044(RV_code); \
RV_CFRelease_006701DC(RV_data1); \
RV_CFRelease_006701DC(RV_data2); \
RV_CFRelease_006701DC(RV_data4); \
goto RV_CheckReceiptHash0A4_RV_bail; \
} \
} \
RV_APFJIQNNAHUJ -= 24; RV_APFJIQNNAHUJ *= 7;  \
RV_CheckReceiptHash0A4_RV_bail: \
RV_CFRelease_006701DC(RV_data4); \
}
#endif
    
    
    // CodeBlock AppRunner
#ifdef RUNNER
#define RUNNER_SIGNATURE int(*_RUNNER_)(int argc, const char *argv[])
    typedef RUNNER_SIGNATURE;
    static uintptr_t RUNNER_ = ((uintptr_t)RUNNER - 469);
#endif
    
    inline static void RV_AppRunner0A6(RV_CheckingContext *RV_ctx) {
        __RV_RECEIPT_LOG("RV - Running applicaition");
#ifdef RUNNER
        ((_RUNNER_)(RUNNER_ + (uintptr_t)RV_APFJIQNNAHUJ))((int) RV_ctx->argc, RV_ctx->argv);
#else
        RV_APFJIQNNAHUJ_01A101D5((int) RV_ctx->argc, RV_ctx->argv);
#endif
    }
    
    
    // CodeBlock CleanUp
#if DEBUG
    inline static void RV_CleanUp0A9(RV_CheckingContext *RV_ctx) {
        __RV_RECEIPT_LOG("RV - Cleaning up");
        if (RV_ctx->receipt_data) {
            RV_CFRelease_01B701DC(RV_ctx->receipt_data);
            RV_ctx->receipt_data = NULL;
        }
        if (RV_ctx->guid_data) {
            RV_CFRelease_01B701DC(RV_ctx->guid_data);
            RV_ctx->guid_data = NULL;
        }
        if (RV_ctx->receipt_dict) {
            RV_CFRelease_01B701DC(RV_ctx->receipt_dict);
            RV_ctx->receipt_dict = NULL;
        }
        if (RV_ctx->ca_data) {
            RV_CFRelease_01B701DC(RV_ctx->ca_data);
            RV_ctx->ca_data = NULL;
        }
    }
#else
#define RV_CleanUp0A9(RV_ctx) { \
__RV_RECEIPT_LOG("RV - Cleaning up"); \
if (RV_ctx->receipt_data) { \
RV_CFRelease_01B701DC(RV_ctx->receipt_data); \
RV_ctx->receipt_data = NULL; \
} \
if (RV_ctx->guid_data) { \
RV_CFRelease_01B701DC(RV_ctx->guid_data); \
RV_ctx->guid_data = NULL; \
} \
if (RV_ctx->receipt_dict) { \
RV_CFRelease_01B701DC(RV_ctx->receipt_dict); \
RV_ctx->receipt_dict = NULL; \
} \
if (RV_ctx->ca_data) { \
RV_CFRelease_01B701DC(RV_ctx->ca_data); \
RV_ctx->ca_data = NULL; \
} \
}
#endif
    
    
    
    
    // CodeBlock EntryPoint
#if DEBUG
    inline static int CheckReceiptAndRun(int _argc, const char *_argv[]) {
        _Pragma("clang diagnostic push")
        _Pragma("clang diagnostic ignored \"-Wused-but-marked-unused\"")
        __RV_RECEIPT_LOG("RV - Entry point");
        // Create contexts
        RV_CheckingContext RV_ctx1 = { NULL, NULL, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL };
        // Arguments for running the application
        RV_ctx1.argc = _argc;
        RV_ctx1.argv = (const char **) _argv;
        // Jump to first step
        goto RV_RV_label00;
    RV_RV_label09:
        RV_CheckReceiptVersion081((&RV_ctx1));
        goto RV_RV_label0A;
    RV_RV_label05:
        RV_CheckBundleVersion05E((&RV_ctx1));
        goto RV_RV_label06;
    RV_RV_label07:
        RV_CheckReceiptSignature073((&RV_ctx1));
        goto RV_RV_label08;
    RV_RV_label02:
        RV_GetGUID04B((&RV_ctx1));
        goto RV_RV_label03;
    RV_RV_label04:
        RV_CheckBundleIdentifier05C((&RV_ctx1));
        goto RV_RV_label05;
    RV_RV_label01:
        RV_LoadReceipt034((&RV_ctx1));
        goto RV_RV_label02;
    RV_RV_label0B:
        RV_AppRunner0A6((&RV_ctx1));
        goto RV_RV_label0C;
    RV_RV_label0A:
        RV_CheckReceiptHash0A4((&RV_ctx1));
        goto RV_RV_label0B;
    RV_RV_label03:
        RV_GetRootCA04F((&RV_ctx1));
        goto RV_RV_label04;
    RV_RV_label00:
        RV_GetMainBundle016((&RV_ctx1));
        goto RV_RV_label01;
    RV_RV_label08:
        RV_CheckReceiptIdentifier07E((&RV_ctx1));
        goto RV_RV_label09;
    RV_RV_label0C:
        RV_CleanUp0A9((&RV_ctx1));
        goto RV_RV_label0D;
    RV_RV_label06:
        RV_GetReceiptInformation062((&RV_ctx1));
        goto RV_RV_label07;
    RV_RV_label0D:
        while(false);
        return 0;
        _Pragma("clang diagnostic pop")
    }
#else
#define CheckReceiptAndRun(_argc, _argv) ({ \
_Pragma("clang diagnostic push") \
_Pragma("clang diagnostic ignored \"-Wused-but-marked-unused\"") \
__RV_RECEIPT_LOG("RV - Entry point"); \
RV_CheckingContext RV_ctx1 = { NULL, NULL, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL }; \
RV_ctx1.argc = _argc; \
RV_ctx1.argv = (const char **) _argv; \
goto RV_RV_label00; \
RV_RV_label09: \
RV_CheckReceiptVersion081((&RV_ctx1)); \
goto RV_RV_label0A; \
RV_RV_label05: \
RV_CheckBundleVersion05E((&RV_ctx1)); \
goto RV_RV_label06; \
RV_RV_label07: \
RV_CheckReceiptSignature073((&RV_ctx1)); \
goto RV_RV_label08; \
RV_RV_label02: \
RV_GetGUID04B((&RV_ctx1)); \
goto RV_RV_label03; \
RV_RV_label04: \
RV_CheckBundleIdentifier05C((&RV_ctx1)); \
goto RV_RV_label05; \
RV_RV_label01: \
RV_LoadReceipt034((&RV_ctx1)); \
goto RV_RV_label02; \
RV_RV_label0B: \
RV_AppRunner0A6((&RV_ctx1)); \
goto RV_RV_label0C; \
RV_RV_label0A: \
RV_CheckReceiptHash0A4((&RV_ctx1)); \
goto RV_RV_label0B; \
RV_RV_label03: \
RV_GetRootCA04F((&RV_ctx1)); \
goto RV_RV_label04; \
RV_RV_label00: \
RV_GetMainBundle016((&RV_ctx1)); \
goto RV_RV_label01; \
RV_RV_label08: \
RV_CheckReceiptIdentifier07E((&RV_ctx1)); \
goto RV_RV_label09; \
RV_RV_label0C: \
RV_CleanUp0A9((&RV_ctx1)); \
goto RV_RV_label0D; \
RV_RV_label06: \
RV_GetReceiptInformation062((&RV_ctx1)); \
goto RV_RV_label07; \
RV_RV_label0D: \
while(false); \
0; \
_Pragma("clang diagnostic pop") \
})
#endif
    
    
    
    
    // Pop the new diagnostic context
#pragma clang diagnostic pop
    
    // C++ epilogue
#ifdef __cplusplus
}
#endif

