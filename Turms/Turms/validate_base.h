//
// This code was generated by RECEIGEN 3.4.0.0 and will use:
//
// Platform                   : OSX
// CFBundleIdentifier         : it.iltofa.Turms
// CFBundleShortVersionString : 2.0.4
// Prefix                     : RV
// Success Behavior           : RunApplication
// Failure Behavior           : ExitWith173
//
// This generated code has to be linked to OpenSSL (either statically or dynamically)
// Refer to the website for more details and specific cases.
//

// C++ prologue
#ifdef __cplusplus
extern "C" {
#endif
    
    // Headers for general purpose functions
#import <AvailabilityMacros.h>
#import <objc/objc.h>
#import <CoreFoundation/CoreFoundation.h>
    // Headers for system calls
#import <dlfcn.h>
#import <setjmp.h>
#import <glob.h>
    
    // Headers for bundle security checks
#import <Security/Security.h>
#import <CommonCrypto/CommonDigest.h>
    
    // Headers from OpenSSL
#import <openssl/bio.h>
#import <openssl/err.h>
#import <openssl/objects.h>
#import <openssl/pkcs7.h>
#import <openssl/sha.h>
#import <openssl/x509.h>
    
    // Define this if you are linking a pre-1.0.0 OpenSSL (like the one found on OS X)
#ifdef RECEIGEN_USE_PRE_1_0_0_OPENSSL
#ifndef _STACK
#define _STACK STACK
#endif
#endif
    
    // Headers for network checks
#import <IOKit/IOKitLib.h>
#import <arpa/inet.h>
#import <ifaddrs.h>
#import <net/if.h>
#import <net/if_dl.h>
    
    // Some compilers provide the capability to test if certain attributes are available.
    // This macro provides a compatibility path for other compilers.
#ifndef __has_feature
#define __has_feature(X)    0
#endif
    
    // Define macros that deal with ARC if enable.
#ifndef __SAFE_CAST
#if __has_feature(objc_arc)
#define __SAFE_CAST(T,X)    (__bridge T) X
#define __RETURN_RETAINED   __attribute__((ns_returns_retained))
#else
#define __SAFE_CAST(T,X)    (T) X
#define __RETURN_RETAINED
#endif
#endif
    
    // Define to turn-off debug logs
#ifndef RECEIGEN_QUIET_DEBUG
#define RECEIGEN_QUIET_DEBUG 0
#endif
    
    // Log statement for debugging purpose
#if RECEIGEN_QUIET_DEBUG
#define __RV_RECEIPT_LOG(...)
#elif defined DEBUG
#if __OBJC__
#define __RV_RECEIPT_LOG(...)    NSLog(@__VA_ARGS__)
#else
#define __RV_RECEIPT_LOG(...)    fprintf(stderr, __VA_ARGS__); fprintf(stderr, "\n")
#endif
#else
#define __RV_RECEIPT_LOG(...)
#endif
    
    // Otherwise specified, check the entitlements
#ifndef RECEIGEN_CHECK_ENTITLEMENTS
#define RECEIGEN_CHECK_ENTITLEMENTS 1
#endif
    
    // Function pointer for string decryption
    typedef void (*RV_decrypt)(const char *, char *, int, int);
    
    // Keys for each receipt attribute
    typedef enum _RV_ReceiptAttributeType {
        
        // Bundle identifier
        RV_ReceiptAttributeTypeBundleId = 2,
        // Application version
        RV_ReceiptAttributeTypeBundleVersion = 3,
        // Opaque value
        RV_ReceiptAttributeTypeOpaqueValue = 4,
        // Hash value
        RV_ReceiptAttributeTypeHash = 5,
        // In-app purchase receipt
        RV_ReceiptAttributeTypeInAppPurchase = 17,
        // Original Application Version
        RV_ReceiptAttributeTypeOriginalApplicationVersion = 19,
        // Receipt Expiration Date
        RV_ReceiptAttributeTypeExpirationDate = 21,
        // Quantity
        RV_InAppAttributeTypeQuantity = 1701,
        // Product identifier
        RV_InAppAttributeTypeProductIdentifer = 1702,
        // Transaction identifier
        RV_InAppAttributeTypeTransactionIdentifer = 1703,
        // Purchase date
        RV_InAppAttributeTypePurchaseDate = 1704,
        // Original transaction identifier
        RV_InAppAttributeTypeOriginalTransactionIdentifer = 1705,
        // Original purchase date
        RV_InAppAttributeTypeOriginalPurchaseDate = 1706,
        // Subscription Expiration Date
        RV_InAppAttributeTypeSubscriptionExpirationDate = 1708,
        // Web Order Line Item ID
        RV_InAppAttributeTypeWebOrderLineItemId = 1711,
        // Cancellation Date
        RV_InAppAttributeTypeCancellationDate = 1712,
        
        // Storage key base value
        RV_StoreNone = 924,
        // Bundle identifier
        RV_StoreReceiptAttributeTypeBundleId = RV_StoreNone + (RV_ReceiptAttributeTypeBundleId << 1),
        RV_StoreReceiptAttributeTypeBundleIdData = RV_StoreNone + (RV_ReceiptAttributeTypeBundleId << 1) + 1,
        // Application version
        RV_StoreReceiptAttributeTypeBundleVersion = RV_StoreNone + (RV_ReceiptAttributeTypeBundleVersion << 1),
        RV_StoreReceiptAttributeTypeBundleVersionData = RV_StoreNone + (RV_ReceiptAttributeTypeBundleId << 1) + 1,
        // Opaque value
        RV_StoreReceiptAttributeTypeOpaqueValue = RV_StoreNone + (RV_ReceiptAttributeTypeOpaqueValue << 1),
        // Hash value
        RV_StoreReceiptAttributeTypeHash = RV_StoreNone + (RV_ReceiptAttributeTypeHash << 1),
        // In-app purchase receipt
        RV_StoreReceiptAttributeTypeInAppPurchase = RV_StoreNone + (RV_ReceiptAttributeTypeInAppPurchase << 1),
        // Original Application Version
        RV_StoreReceiptAttributeTypeOriginalApplicationVersion = RV_StoreNone + (RV_ReceiptAttributeTypeOriginalApplicationVersion << 1),
        // Receipt Expiration Date
        RV_StoreReceiptAttributeTypeExpirationDate = RV_StoreNone + (RV_ReceiptAttributeTypeExpirationDate << 1),
        // Quantity
        RV_StoreInAppAttributeTypeQuantity = RV_StoreNone + (RV_InAppAttributeTypeQuantity << 1),
        // Product identifier
        RV_StoreInAppAttributeTypeProductIdentifer = RV_StoreNone + (RV_InAppAttributeTypeProductIdentifer << 1),
        // Transaction identifier
        RV_StoreInAppAttributeTypeTransactionIdentifer = RV_StoreNone + (RV_InAppAttributeTypeTransactionIdentifer << 1),
        // Purchase date
        RV_StoreInAppAttributeTypePurchaseDate = RV_StoreNone + (RV_InAppAttributeTypePurchaseDate << 1),
        // Original transaction identifier
        RV_StoreInAppAttributeTypeOriginalTransactionIdentifer = RV_StoreNone + (RV_InAppAttributeTypeOriginalTransactionIdentifer << 1),
        // Original purchase date
        RV_StoreInAppAttributeTypeOriginalPurchaseDate = RV_StoreNone + (RV_InAppAttributeTypeOriginalPurchaseDate << 1),
        // Subscription Expiration Date
        RV_StoreInAppAttributeTypeSubscriptionExpirationDate = RV_StoreNone + (RV_InAppAttributeTypeSubscriptionExpirationDate << 1),
        // Web Order Line Item ID
        RV_StoreInAppAttributeTypeWebOrderLineItemId = RV_StoreNone + (RV_InAppAttributeTypeWebOrderLineItemId << 1),
        // Cancellation Date
        RV_StoreInAppAttributeTypeCancellationDate = RV_StoreNone + (RV_InAppAttributeTypeCancellationDate << 1)
        
    } RV_ReceiptAttributeType;
    
    // Constants for Receipt info query
#define RV_RECEIPT_ATTRIBUTETYPE_BUNDLE_ID                        [NSNumber numberWithInt:RV_StoreReceiptAttributeTypeBundleId]
#define RV_RECEIPT_ATTRIBUTETYPE_BUNDLE_VERSION                   [NSNumber numberWithInt:RV_StoreReceiptAttributeTypeBundleVersion]
#define RV_RECEIPT_ATTRIBUTETYPE_ORIGINAL_APPLICATION_VERSION     [NSNumber numberWithInt:RV_StoreReceiptAttributeTypeOriginalApplicationVersion]
#define RV_RECEIPT_ATTRIBUTETYPE_EXPIRATION_DATE                  [NSNumber numberWithInt:RV_StoreReceiptAttributeTypeExpirationDate]
    
    // Constants for InApp info query
#define RV_INAPP_ATTRIBUTETYPE_QUANTITY                           [NSNumber numberWithInt:RV_StoreInAppAttributeTypeQuantity]
#define RV_INAPP_ATTRIBUTETYPE_PRODUCTIDENTIFER                   [NSNumber numberWithInt:RV_StoreInAppAttributeTypeProductIdentifer]
#define RV_INAPP_ATTRIBUTETYPE_TRANSACTIONIDENTIFER               [NSNumber numberWithInt:RV_StoreInAppAttributeTypeTransactionIdentifer]
#define RV_INAPP_ATTRIBUTETYPE_PURCHASEDATE                       [NSNumber numberWithInt:RV_StoreInAppAttributeTypePurchaseDate]
#define RV_INAPP_ATTRIBUTETYPE_ORIGINALTRANSACTIONIDENTIFER       [NSNumber numberWithInt:RV_StoreInAppAttributeTypeOriginalTransactionIdentifer]
#define RV_INAPP_ATTRIBUTETYPE_ORIGINALPURCHASEDATE               [NSNumber numberWithInt:RV_StoreInAppAttributeTypeOriginalPurchaseDate]
#define RV_INAPP_ATTRIBUTETYPE_SUBSCRIPTIONEXPIRATIONDATE         [NSNumber numberWithInt:RV_StoreInAppAttributeTypeSubscriptionExpirationDate]
#define RV_INAPP_ATTRIBUTETYPE_WEBORDERLINEITEMID                 [NSNumber numberWithInt:RV_StoreInAppAttributeTypeWebOrderLineItemId]
#define RV_INAPP_ATTRIBUTETYPE_CANCELLATIONDATE                   [NSNumber numberWithInt:RV_StoreInAppAttributeTypeCancellationDate]
    
    // Shared context for receipt validation
    typedef struct _RV_CheckingContext {
        CFTypeRef dummy0008;
        CFTypeRef dummy0006;
        CFTypeRef dummy0003;
        CFTypeRef guid_data;
        CFTypeRef dummy0001;
        CFTypeRef dummy0007;
        CFTypeRef dummy000C;
        CFTypeRef receipt_dict;
        CFTypeRef dummy000A;
        CFTypeRef receipt_data;
        CFTypeRef dummy0004;
        CFTypeRef dummy0000;
        CFTypeRef dummy0009;
        CFTypeRef dummy0005;
        CFTypeRef ca_data;
        CFTypeRef dummy000B;
        CFTypeRef main_bundle;
        const char ** argv;
        CFTypeRef dummy0002;
        long argc;
    } RV_CheckingContext;
    
    // Shared context for receipt parsing
    typedef struct _RV_ParsingContext {
        CFTypeRef dummy0002;
        const unsigned char * end;
        CFTypeRef dummy0003;
        const unsigned char * ptr;
        CFTypeRef dictionary;
        CFTypeRef dummy0001;
        CFTypeRef dummy0004;
        CFTypeRef dummy0000;
        struct _RV_ParsingContext * parent;
    } RV_ParsingContext;
    
    // Symbol ASN1_get_object
    typedef int (*__RV_ASN1_get_object)(const unsigned char **pp, long *plength, int *ptag, int *pclass, long omax);
    // Symbol ASN1_INTEGER_free
    typedef void (*__RV_ASN1_INTEGER_free)(ASN1_INTEGER *a);
    // Symbol ASN1_INTEGER_get
    typedef long (*__RV_ASN1_INTEGER_get)(const ASN1_INTEGER *a);
    // Symbol ASN1_OBJECT_free
    typedef void (*__RV_ASN1_OBJECT_free)(ASN1_OBJECT *a);
    // Symbol BIO_free
    typedef int (*__RV_BIO_free)(BIO *a);
    // Symbol BIO_new
    typedef BIO *(*__RV_BIO_new)(BIO_METHOD *type);
    // Symbol BIO_s_mem
    typedef BIO_METHOD *(*__RV_BIO_s_mem)(void);
    // Symbol BIO_write
    typedef int (*__RV_BIO_write)(BIO *b, const void *buf, int len);
    // Symbol c2i_ASN1_INTEGER
    typedef ASN1_INTEGER *(*__RV_c2i_ASN1_INTEGER)(ASN1_INTEGER **a,const unsigned char **pp, long length);
    // Symbol CC_SHA1
    typedef unsigned char *(*__RV_CC_SHA1)(const void *data, CC_LONG len, unsigned char *md);
    // Symbol CC_SHA1_Final
    typedef int (*__RV_CC_SHA1_Final)(unsigned char *md, CC_SHA1_CTX *c);
    // Symbol CC_SHA1_Init
    typedef int (*__RV_CC_SHA1_Init)(CC_SHA1_CTX *c);
    // Symbol CC_SHA1_Update
    typedef int (*__RV_CC_SHA1_Update)(CC_SHA1_CTX *c, const void *data, CC_LONG len);
    // Symbol CFAbsoluteTimeGetCurrent
    typedef CFAbsoluteTime (*__RV_CFAbsoluteTimeGetCurrent)();
    // Symbol CFArrayAppendValue
    typedef void (*__RV_CFArrayAppendValue)(CFMutableArrayRef theArray, const void *value);
    // Symbol CFArrayCreateMutable
    typedef CFMutableArrayRef (*__RV_CFArrayCreateMutable)(CFAllocatorRef allocator, CFIndex capacity, const CFArrayCallBacks *callBacks);
    // Symbol CFArrayGetCount
    typedef CFIndex (*__RV_CFArrayGetCount)(CFArrayRef theArray);
    // Symbol CFArrayGetValueAtIndex
    typedef const void *(*__RV_CFArrayGetValueAtIndex)(CFArrayRef theArray, CFIndex idx);
    // Symbol CFBundleCopyBundleURL
    typedef CFURLRef (*__RV_CFBundleCopyBundleURL)(CFBundleRef bundle);
    // Symbol CFBundleGetIdentifier
    typedef CFStringRef (*__RV_CFBundleGetIdentifier)(CFBundleRef bundle);
    // Symbol CFBundleGetMainBundle
    typedef CFBundleRef (*__RV_CFBundleGetMainBundle)();
    // Symbol CFBundleGetValueForInfoDictionaryKey
    typedef CFTypeRef (*__RV_CFBundleGetValueForInfoDictionaryKey)(CFBundleRef bundle, CFStringRef key);
    // Symbol CFBundleUnloadExecutable
    typedef void (*__RV_CFBundleUnloadExecutable)(CFBundleRef bundle);
    // Symbol CFDataAppendBytes
    typedef void (*__RV_CFDataAppendBytes)(CFMutableDataRef theData, const UInt8 *bytes, CFIndex length);
    // Symbol CFDataCreate
    typedef CFDataRef (*__RV_CFDataCreate)(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length);
    // Symbol CFDataCreateMutable
    typedef CFMutableDataRef (*__RV_CFDataCreateMutable)(CFAllocatorRef allocator, CFIndex capacity);
    // Symbol CFDataGetBytePtr
    typedef const UInt8 *(*__RV_CFDataGetBytePtr)(CFDataRef theData);
    // Symbol CFDataGetLength
    typedef CFIndex (*__RV_CFDataGetLength)(CFDataRef theData);
    // Symbol CFDateCompare
    typedef CFComparisonResult (*__RV_CFDateCompare)(CFDateRef theString1, CFDateRef theString2, CFStringCompareFlags compareOptions);
    // Symbol CFDateCreate
    typedef CFDateRef (*__RV_CFDateCreate)(CFAllocatorRef allocator, CFAbsoluteTime at);
    // Symbol CFDateFormatterCreate
    typedef CFDateFormatterRef (*__RV_CFDateFormatterCreate)(CFAllocatorRef allocator, CFLocaleRef locale, CFDateFormatterStyle dateStyle, CFDateFormatterStyle timeStyle);
    // Symbol CFDateFormatterCreateDateFromString
    typedef CFDateRef (*__RV_CFDateFormatterCreateDateFromString)(CFAllocatorRef allocator, CFDateFormatterRef formatter, CFStringRef string, CFRange *rangep);
    // Symbol CFDateFormatterSetFormat
    typedef void (*__RV_CFDateFormatterSetFormat)(CFDateFormatterRef formatter, CFStringRef formatString);
    // Symbol CFDateFormatterSetProperty
    typedef void (*__RV_CFDateFormatterSetProperty)(CFDateFormatterRef formatter, CFStringRef key, CFTypeRef value);
    // Symbol CFDictionaryAddValue
    typedef void (*__RV_CFDictionaryAddValue)(CFMutableDictionaryRef theDict, const void *key, const void *value);
    // Symbol CFDictionaryCreateMutable
    typedef CFMutableDictionaryRef (*__RV_CFDictionaryCreateMutable)(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks);
    // Symbol CFDictionaryGetValue
    typedef const void *(*__RV_CFDictionaryGetValue)(CFDictionaryRef theDict, const void *key);
    // Symbol CFDictionarySetValue
    typedef void (*__RV_CFDictionarySetValue)(CFMutableDictionaryRef theDict, const void *key, const void *value);
    // Symbol CFEqual
    typedef Boolean (*__RV_CFEqual)(CFTypeRef cf1, CFTypeRef cf2);
    // Symbol CFNumberCreate
    typedef CFNumberRef (*__RV_CFNumberCreate)(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr);
    // Symbol CFReadStreamClose
    typedef void (*__RV_CFReadStreamClose)(CFReadStreamRef stream);
    // Symbol CFReadStreamCreateWithFile
    typedef CFReadStreamRef (*__RV_CFReadStreamCreateWithFile)(CFAllocatorRef alloc, CFURLRef fileURL);
    // Symbol CFReadStreamOpen
    typedef Boolean (*__RV_CFReadStreamOpen)(CFReadStreamRef stream);
    // Symbol CFReadStreamRead
    typedef CFIndex (*__RV_CFReadStreamRead)(CFReadStreamRef stream, UInt8 *buffer, CFIndex bufferLength);
    // Symbol CFRelease
    typedef void (*__RV_CFRelease)(CFTypeRef cf);
    // Symbol CFStringCompare
    typedef CFComparisonResult (*__RV_CFStringCompare)(CFStringRef theString1, CFStringRef theString2, CFStringCompareFlags compareOptions);
    // Symbol CFStringCreateWithBytes
    typedef CFStringRef (*__RV_CFStringCreateWithBytes)(CFAllocatorRef alloc, const UInt8 *bytes, CFIndex numBytes, CFStringEncoding encoding, Boolean isExternalRepresentation);
    // Symbol CFStringCreateWithCString
    typedef CFStringRef (*__RV_CFStringCreateWithCString)(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding);
    // Symbol CFStringGetFileSystemRepresentation
    typedef Boolean (*__RV_CFStringGetFileSystemRepresentation)(CFStringRef string, char *buffer, CFIndex maxBufLen);
    // Symbol CFTimeZoneCreateWithTimeIntervalFromGMT
    typedef CFTimeZoneRef (*__RV_CFTimeZoneCreateWithTimeIntervalFromGMT)(CFAllocatorRef allocator, CFTimeInterval ti);
    // Symbol CFURLCreateCopyAppendingPathComponent
    typedef CFURLRef (*__RV_CFURLCreateCopyAppendingPathComponent)(CFAllocatorRef allocator, CFURLRef url, CFStringRef pathComponent, Boolean isDirectory);
    // Symbol CFURLCreateFromFileSystemRepresentation
    typedef CFURLRef (*__RV_CFURLCreateFromFileSystemRepresentation)(CFAllocatorRef allocator, const UInt8 *buffer, CFIndex bufLen, Boolean isDirectory);
    // Symbol CFURLCreateWithFileSystemPathRelativeToBase
    typedef CFURLRef (*__RV_CFURLCreateWithFileSystemPathRelativeToBase)(CFAllocatorRef allocator, CFStringRef filePath, CFURLPathStyle pathStyle, Boolean isDirectory, CFURLRef baseURL);
    // Symbol d2i_PKCS7_bio
    typedef PKCS7 *(*__RV_d2i_PKCS7_bio)(BIO *bp,PKCS7 **p7);
    // Symbol d2i_X509_bio
    typedef X509 *(*__RV_d2i_X509_bio)(BIO *bp,X509 **x509);
    // Symbol dlopen
    typedef void *(*__RV_dlopen)(const char * __path, int __mode);
    // Symbol dlsym
    typedef void *(*__RV_dlsym)(void * __handle, const char * __symbol);
    // Symbol EVP_DigestFinal
    typedef int (*__RV_EVP_DigestFinal)(EVP_MD_CTX *ctx, unsigned char *md, unsigned int *s);
    // Symbol EVP_DigestInit
    typedef int (*__RV_EVP_DigestInit)(EVP_MD_CTX *ctx, const EVP_MD *type);
    // Symbol EVP_DigestUpdate
    typedef int (*__RV_EVP_DigestUpdate)(EVP_MD_CTX *ctx, const void *d, size_t cnt);
    // Symbol EVP_get_digestbyname
    typedef const EVP_MD *(*__RV_EVP_get_digestbyname)(const char *name);
    // Symbol EVP_MD_CTX_init
    typedef void (*__RV_EVP_MD_CTX_init)(EVP_MD_CTX *ctx);
    // Symbol exit
    typedef void (*__RV_exit)(int status);
    // Symbol glob
    typedef int (*__RV_glob)(const char * __restrict, int, int (*)(const char *, int), glob_t * __restrict);
    // Symbol glob_b
    typedef int (*__RV_glob_b)(const char * __restrict, int, int (^)(const char *, int), glob_t * __restrict);
    // Symbol globfree
    typedef void (*__RV_globfree)(glob_t *);
    // Symbol IOBSDNameMatching
    typedef CFMutableDictionaryRef (*__RV_IOBSDNameMatching)(mach_port_t masterPort, uint32_t options, const char * bsdName);
    // Symbol IOIteratorNext
    typedef io_object_t (*__RV_IOIteratorNext)(io_iterator_t iterator);
    // Symbol IOMasterPort
    typedef kern_return_t (*__RV_IOMasterPort)(mach_port_t bootstrapPort, mach_port_t *masterPort);
    // Symbol IOObjectRelease
    typedef kern_return_t (*__RV_IOObjectRelease)(io_object_t object);
    // Symbol IORegistryEntryCreateCFProperty
    typedef CFTypeRef (*__RV_IORegistryEntryCreateCFProperty)(io_registry_entry_t entry, CFStringRef key, CFAllocatorRef allocator, IOOptionBits options);
    // Symbol IORegistryEntryGetParentEntry
    typedef kern_return_t (*__RV_IORegistryEntryGetParentEntry)(io_registry_entry_t entry, const io_name_t plane, io_registry_entry_t * parent);
    // Symbol IOServiceGetMatchingServices
    typedef kern_return_t (*__RV_IOServiceGetMatchingServices)(mach_port_t masterPort, CFDictionaryRef matching, io_iterator_t *existing);
    // Symbol kCFBundleIdentifierKey
    typedef const CFStringRef *__RV_kCFBundleIdentifierKey;
    // Symbol kCFDateFormatterTimeZone
    typedef const CFStringRef *__RV_kCFDateFormatterTimeZone;
    // Symbol kCFTypeArrayCallBacks
    typedef const CFArrayCallBacks *__RV_kCFTypeArrayCallBacks;
    // Symbol kCFTypeDictionaryKeyCallBacks
    typedef const CFDictionaryKeyCallBacks *__RV_kCFTypeDictionaryKeyCallBacks;
    // Symbol kCFTypeDictionaryValueCallBacks
    typedef const CFDictionaryValueCallBacks *__RV_kCFTypeDictionaryValueCallBacks;
    // Symbol kSecClass
    typedef const CFTypeRef *__RV_kSecClass;
    // Symbol kSecClassCertificate
    typedef const CFTypeRef *__RV_kSecClassCertificate;
    // Symbol kSecMatchLimit
    typedef const CFTypeRef *__RV_kSecMatchLimit;
    // Symbol kSecMatchLimitAll
    typedef const CFTypeRef *__RV_kSecMatchLimitAll;
    // Symbol kSecMatchSearchList
    typedef const CFTypeRef *__RV_kSecMatchSearchList;
    // Symbol kSecMatchSubjectContains
    typedef const CFTypeRef *__RV_kSecMatchSubjectContains;
    // Symbol kSecReturnRef
    typedef const CFTypeRef *__RV_kSecReturnRef;
    // Symbol longjmp
    typedef void (*__RV_longjmp)(jmp_buf buf, int ret);
    // Symbol NSApplicationMain
    typedef int (*__RV_NSApplicationMain)(int argc, const char *argv[]);
    // Symbol OBJ_txt2obj
    typedef ASN1_OBJECT *(*__RV_OBJ_txt2obj)(const char *s, int no_name);
    // Symbol objc_getClass
    typedef id (*__RV_objc_getClass)(const char *name);
    // Symbol objc_msgSend
    typedef id (*__RV_objc_msgSend)(id theReceiver, SEL theSelector, ...);
    // Symbol OpenSSL_add_all_digests
    typedef void (*__RV_OpenSSL_add_all_digests)();
    // Symbol PKCS7_free
    typedef void (*__RV_PKCS7_free)(PKCS7 *a);
    // Symbol PKCS7_get0_signers
    typedef STACK_OF(X509) *(*__RV_PKCS7_get0_signers)(PKCS7 *p7, STACK_OF(X509) *certs, int flags);
    // Symbol PKCS7_verify
    typedef int (*__RV_PKCS7_verify)(PKCS7 *p7, STACK_OF(X509) *certs, X509_STORE *store, BIO *indata, BIO *out, int flags);
    // Symbol SecCertificateCopyData
    typedef CFDataRef (*__RV_SecCertificateCopyData)(SecCertificateRef certificate);
    // Symbol SecItemCopyMatching
    typedef OSStatus (*__RV_SecItemCopyMatching)(CFDictionaryRef query, CFTypeRef *result);
    // Symbol SecKeychainOpen
    typedef OSStatus (*__RV_SecKeychainOpen)(const char *pathName, SecKeychainRef *keychain);
    // Symbol SecKeychainSearchCopyNext
    typedef OSStatus (*__RV_SecKeychainSearchCopyNext)(SecKeychainSearchRef searchRef, SecKeychainItemRef *itemRef);
    // Symbol SecKeychainSearchCreateFromAttributes
    typedef OSStatus (*__RV_SecKeychainSearchCreateFromAttributes)(CFTypeRef keychainOrArray, SecItemClass itemClass, const SecKeychainAttributeList *attrList, SecKeychainSearchRef *searchRef);
    // Symbol sel_registerName
    typedef SEL (*__RV_sel_registerName)(const char *str);
    // Symbol setjmp
    typedef int (*__RV_setjmp)(jmp_buf buf);
    // Symbol SHA1
    typedef unsigned char *(*__RV_SHA1)(const unsigned char *d, unsigned long n, unsigned char *md);
    // Symbol SHA1_Final
    typedef int (*__RV_SHA1_Final)(unsigned char *md, SHA_CTX *c);
    // Symbol SHA1_Init
    typedef int (*__RV_SHA1_Init)(SHA_CTX *c);
    // Symbol SHA1_Update
    typedef int (*__RV_SHA1_Update)(SHA_CTX *c, const void *data, unsigned long len);
    // Symbol sk_free
    typedef void (*__RV_sk_free)(_STACK *);
    // Symbol sk_num
    typedef int (*__RV_sk_num)(const _STACK *);
    // Symbol sk_value
    typedef void *(*__RV_sk_value)(const _STACK *, int);
    // Symbol strlen
    typedef size_t (*__RV_strlen)(const char *);
    // Symbol strncmp
    typedef int (*__RV_strncmp)(const char *, const char *, size_t);
    // Symbol X509_digest
    typedef int (*__RV_X509_digest)(const X509 *data,const EVP_MD *type,unsigned char *md, unsigned int *len);
    // Symbol X509_free
    typedef void (*__RV_X509_free)(X509 *a);
    // Symbol X509_get_ext_by_OBJ
    typedef int (*__RV_X509_get_ext_by_OBJ)(X509 *x,ASN1_OBJECT *obj,int lastpos);
    // Symbol X509_NAME_get_text_by_NID
    typedef int (*__RV_X509_NAME_get_text_by_NID)(X509_NAME *name, int nid, char *buf,int len);
    // Symbol X509_STORE_add_cert
    typedef int (*__RV_X509_STORE_add_cert)(X509_STORE *ctx, X509 *x);
    // Symbol X509_STORE_free
    typedef void (*__RV_X509_STORE_free)(X509_STORE *v);
    // Symbol X509_STORE_new
    typedef X509_STORE *(*__RV_X509_STORE_new)();
    
    
    // Table for storing strings
    static const char *RV_Strings[608] = {
        // "611e5b662c593a08ff58d14ae22452d198df6c60" / M(Xor4) / S(161) / L(40)
        "\xe7\xe0\xe0\xb4\xe4\xb3\xe7\xe7\xe3\xb2\xe4\xe8\xe2\xb0\xe1\xe9\xb7\xb7\xe4\xe9\xb5\xe0\xe5\xb0\xb4\xe3\xe3\xe5\xe4\xe3\xb5\xe0\xe8\xe9\xb5\xb7\xe7\xb2\xe7\xe1\xd1\x51\x04\x7f\xad\xe0\xa4\x80\x4d",
        // "kSecClassCertificate" / M(Rot) / S(143) / L(20)
        "\xfa\xe2\xf4\xf2\xd2\xfb\xf0\x02\x02\xd2\xf4\x01\x03\xf8\xf5\xf8\xf2\xf0\x03\xf4\x8f",
        // "EVP_DigestInit" / M(Rot) / S(174) / L(14)
        "\xf3\x04\xfe\x0d\xf2\x17\x15\x13\x21\x22\xf7\x1c\x17\x22\xae\x70",
        // "CFTimeZoneCreateWithTimeIntervalFromGMT" / M(Xor2) / S(114) / L(39)
        "\x01\x04\x16\x2b\x2f\x27\x18\x2d\x2c\x27\x01\x30\x27\x23\x36\x27\x15\x2b\x36\x2a\x16\x2b\x2f\x27\x0b\x2c\x36\x27\x30\x34\x23\x2e\x04\x30\x2d\x2f\x05\x0f\x16\x42\xa6\xff\xbd\xd8\x4b\x40\xc0\x66",
        // "objc_getClass" / M(Rot) / S(23) / L(13)
        "\x86\x79\x81\x7a\x76\x7e\x7c\x8b\x5a\x83\x78\x8a\x8a\x17\xdc\x56",
        // "CFDataAppendBytes" / M(Xor3) / S(146) / L(17)
        "\xe7\xe2\xe0\xc5\xd0\xc5\xe5\xd4\xd4\xc1\xca\xc0\xe6\xdd\xd0\xc1\xd7\xa4",
        // "1.2.840.113635.100.6.11.1" / M(Xor3) / S(14) / L(25)
        "\x01\x1e\x02\x1e\x08\x04\x00\x1e\x01\x01\x03\x06\x03\x05\x1e\x01\x00\x00\x1e\x06\x1e\x01\x01\x1e\x01\x30\x74\xfd\xdb\xdb\xfe\xaa\x4e\x8a",
        // "kSecMatchSearchList" / M(Xor1) / S(91) / L(19)
        "\x30\x08\x3e\x38\x16\x3a\x2f\x38\x33\x08\x3e\x3a\x29\x38\x33\x17\x32\x28\x2f\x5b",
        // "IOServiceGetMatchingServices" / M(Xor3) / S(76) / L(28)
        "\x38\x3e\x22\x14\x03\x07\x18\x12\x14\x36\x14\x05\x3c\x10\x05\x12\x19\x18\x1f\x16\x22\x14\x03\x07\x18\x12\x14\x02\x71\xf1\xb5\xdd\x93\x38\x7e\x35\x73",
        // "kCFTypeArrayCallBacks" / M(Xor3) / S(109) / L(21)
        "\xe8\xc0\xc5\xd7\xfa\xf3\xe6\xc2\xf1\xf1\xe2\xfa\xc0\xe2\xef\xef\xc1\xe2\xe0\xe8\xf0\x83",
        // "" / M(None) / S(0) / L(0)
        "\x75\x18\xed\x80\x75\x80\x36\xf6\xcf\x9c\x96\x29\x47\xc0\x04\xf1\x9b\xba\x38\x03\x4e\xcd\x8c\x8f\x96\xa5\x9e\x9f\xc3\x37\x0e\xd6",
        // "611e5b662c593a08ff58d14ae22452d198df6c60" / M(Xor3) / S(138) / L(40)
        "\x8d\x8a\x8a\xde\x8e\xd9\x8d\x8d\x89\xd8\x8e\x82\x88\xda\x8b\x83\xdd\xdd\x8e\x83\xdf\x8a\x8f\xda\xde\x89\x89\x8f\x8e\x89\xdf\x8a\x82\x83\xdf\xdd\x8d\xd8\x8d\x8b\xbb\xb4\xae\x07\xba\x87\x75\xed\xe2",
        // "" / M(None) / S(0) / L(0)
        "\xd6\x81\x9a\xca\xce\x66\x95\xd2\xc0\xf4\xba\x77\x29\xc2\x81\x75\x6a\x79\xa5\x84\x58\x59\xc2\x81\x74\xe9\xa0\xc8\xd8\x67\xb7\x36",
        // "" / M(None) / S(0) / L(0)
        "\xfc\xbf\xe3\x6a\xc4\x24\x2f\xfa\x2c\x33\x42\x49\xb4\xfb\x3d\x0f\x66\x19\x86\xdd\x21\x9b\xb0\x1a\xef\x18\xcf\x5d\xa0\x12\xce\xb7",
        // "" / M(None) / S(0) / L(0)
        "\x2f\xf1\x57\xeb\x85\xb3\xeb\xc5\xb9\xd7\x4c\xe5\x6f\x8d\x7f\xf0\x40\x75\x76\x4f\x3b\x3c\xf7\x50\x8a\x6d\x45\x97\x70\x5d\xb7\x2c",
        // "" / M(None) / S(0) / L(0)
        "\xb8\x58\x04\xb5\xb9\x5b\x94\x7d\x0c\xa5\x36\x19\x46\xc3\x03\xf3\x93\x1c\xfa\xfe\xd0\xf9\x84\x71\xd0\x27\xa9\xf6\x43\x39\xf5\x34",
        // "SecKeychainSearchCopyNext" / M(Rot) / S(196) / L(25)
        "\x17\x29\x27\x0f\x29\x3d\x27\x2c\x25\x2d\x32\x17\x29\x25\x36\x27\x2c\x07\x33\x34\x3d\x12\x29\x3c\x38\xc4\xb2\x17\xa2\x21\xdc\x97\xe7\xf5",
        // "" / M(None) / S(0) / L(0)
        "\x8a\x6b\x88\xe4\xd4\x35\x96\x26\xcb\x73\x75\x7a\x8e\xaf\x2f\x9e\x73\x5c\x2b\x8f\x03\xd1\x44\x0c\x1f\x12\xb3\xa6\x84\x23\x41\xc0",
        // "SecCertificateCopyData" / M(Xor2) / S(30) / L(22)
        "\x5a\x6c\x6a\x4a\x6c\x7b\x7d\x60\x6f\x60\x6a\x68\x7d\x6c\x4a\x66\x79\x70\x4d\x68\x7d\x68\x09",
        // "ASN1_OBJECT_free" / M(Xor1) / S(59) / L(16)
        "\x7a\x68\x75\x0a\x64\x74\x79\x71\x7e\x78\x6f\x64\x5d\x49\x5e\x5e\x3b",
        // "X509_NAME_get_text_by_NID" / M(Xor3) / S(93) / L(25)
        "\x27\x4a\x4f\x46\x20\x31\x3e\x32\x3a\x20\x18\x1a\x0b\x20\x0b\x1a\x07\x0b\x20\x1d\x06\x20\x31\x36\x3b\x7f\x00\x2c\x75\x42\x5d\xb2\x62\x8b",
        // "en0" / M(Xor1) / S(242) / L(3)
        "\x97\x9c\xc2\xf2\x73\xe5\x21\xce\xbf\x94\x34\x9b\xe4\xb6\xc8\xae",
        // "" / M(None) / S(0) / L(0)
        "\x89\xc5\x24\xbe\xbd\x5c\x79\x27\xe2\x1a\xfa\x37\xb4\x62\x02\xef\xb4\x14\xd6\xfa\x44\x4a\xc3\x1f\xa3\x23\xff\x1f\x9e\x86\x38\x07",
        // "CFBundleGetIdentifier" / M(Xor2) / S(33) / L(21)
        "\x74\x71\x75\x42\x59\x53\x5b\x52\x70\x52\x43\x7e\x53\x52\x59\x43\x5e\x51\x5e\x52\x45\x37",
        // "" / M(None) / S(0) / L(0)
        "\x60\xc4\xe5\xae\xd3\x0c\x94\x0a\x04\xe8\xea\x9c\x13\x57\xfc\x5c\x68\x98\x23\xc5\x6e\x4c\xf5\x36\xf3\x9c\x39\xc6\x36\xf4\x79\xe9",
        // "CFBundleGetMainBundle" / M(Xor3) / S(176) / L(21)
        "\x85\x80\x84\xb3\xa8\xa2\xaa\xa3\x81\xa3\xb2\x8b\xa7\xaf\xa8\x84\xb3\xa8\xa2\xaa\xa3\xc6",
        // "CFBundleVersion" / M(Xor1) / S(97) / L(15)
        "\x22\x27\x23\x14\x0f\x05\x0d\x04\x37\x04\x13\x12\x08\x0e\x0f\x61",
        // "/usr/lib/libSystem.dylib" / M(Xor3) / S(42) / L(24)
        "\x64\x3e\x38\x39\x64\x27\x22\x29\x64\x27\x22\x29\x18\x32\x38\x3f\x2e\x26\x65\x2f\x32\x27\x22\x29\x4b\x98\xca\x67\x1b\xd6\x55\x84\x63",
        // "CFDictionaryCreateMutable" / M(Xor4) / S(7) / L(25)
        "\xad\xa8\xaa\x87\x8d\x9a\x87\x81\x80\x8f\x9c\x97\xad\x9c\x8b\x8f\x9a\x8b\xa3\x9b\x9a\x8f\x8c\x82\x8b\xee\xc3\xde\xfd\xd8\xd3\x5e\x5c\x51",
        // "d2i_X509_bio" / M(Rot) / S(3) / L(12)
        "\x67\x35\x6c\x62\x5b\x38\x33\x3c\x62\x65\x6c\x72\x03\x10\xa0\xaf",
        // "" / M(None) / S(0) / L(0)
        "\xe1\x1b\x86\xf9\x36\x72\x86\x2d\x45\x60\x29\x55\x32\xa8\x3c\xa9\x95\xe3\x1c\x4f\x00\x26\x36\xc7\xff\x59\x59\x9c\xcf\x8e\x34\x19",
        // "IOMasterPort" / M(Xor4) / S(89) / L(12)
        "\xd9\xdf\xdd\xf1\xe3\xe4\xf5\xe2\xc0\xff\xe2\xe4\x90\x5e\x38\xf1",
        // "CFBundleUnloadExecutable" / M(Xor3) / S(249) / L(24)
        "\x59\x5c\x58\x6f\x74\x7e\x76\x7f\x4f\x74\x76\x75\x7b\x7e\x5f\x62\x7f\x79\x6f\x6e\x7b\x78\x76\x7f\x1a\xce\x30\xfa\x24\x40\xfb\xb5\xf0",
        // "EVP_DigestFinal" / M(Xor1) / S(58) / L(15)
        "\x7f\x6c\x6a\x65\x7e\x53\x5d\x5f\x49\x4e\x7c\x53\x54\x5b\x56\x3a",
        // "sk_value" / M(Rot) / S(29) / L(8)
        "\x90\x88\x7c\x93\x7e\x89\x92\x82\x1d\xf7\xb9\x9f\x32\xfd\x94\x33",
        // "it.iltofa.Turms" / M(Xor4) / S(158) / L(15)
        "\x89\x94\xce\x89\x8c\x94\x8f\x86\x81\xce\xb4\x95\x92\x8d\x93\xe0",
        // "" / M(None) / S(0) / L(0)
        "\x67\xa7\x32\x01\x0c\xf4\xd6\x4d\x55\xdd\x75\xf2\xfa\x9e\xb7\x24\xc7\x24\xcc\xf1\x3d\xb8\xed\x77\x38\x83\x34\xee\x7a\x34\x90\xab",
        // "EVP_DigestUpdate" / M(Rot) / S(158) / L(16)
        "\xe3\xf4\xee\xfd\xe2\x07\x05\x03\x11\x12\xf3\x0e\x02\xff\x12\x03\x9e",
        // "CFDataGetBytePtr" / M(Rot) / S(142) / L(16)
        "\xd1\xd4\xd2\xef\x02\xef\xd5\xf3\x02\xd0\x07\x02\xf3\xde\x02\x00\x8e",
        // "EVP_MD_CTX_init" / M(Xor4) / S(167) / L(15)
        "\x35\x26\x20\x2f\x3d\x34\x2f\x33\x24\x28\x2f\x19\x1e\x19\x04\x70",
        // "IOServiceGetMatchingServices" / M(Xor3) / S(98) / L(28)
        "\xce\xc8\xd4\xe2\xf5\xf1\xee\xe4\xe2\xc0\xe2\xf3\xca\xe6\xf3\xe4\xef\xee\xe9\xe0\xd4\xe2\xf5\xf1\xee\xe4\xe2\xf4\x87\x72\xb7\xf9\x34\x80\x9d\x8f\x45",
        // "alloc" / M(Rot) / S(131) / L(5)
        "\xe4\xef\xef\xf2\xe6\x83\x00\xcb\xf8\xb4\xed\x28\x2d\x3d\x4b\x2a",
        // "EVP_MD_CTX_init" / M(Xor4) / S(130) / L(15)
        "\x65\x76\x70\x7f\x6d\x64\x7f\x63\x74\x78\x7f\x49\x4e\x49\x54\x20",
        // "CC_SHA1_Update" / M(Rot) / S(15) / L(14)
        "\x52\x52\x6e\x62\x57\x50\x40\x6e\x64\x7f\x73\x70\x83\x74\x0f\x32",
        // "SecKeychainSearchCreateFromAttributes" / M(Xor1) / S(231) / L(37)
        "\xb4\x82\x84\xac\x82\x9e\x84\x8f\x86\x8e\x89\xb4\x82\x86\x95\x84\x8f\xa4\x95\x82\x86\x93\x82\xa1\x95\x88\x8a\xa6\x93\x93\x95\x8e\x85\x92\x93\x82\x94\xe7",
        // "CFDataGetBytePtr" / M(Xor4) / S(115) / L(16)
        "\xe0\xe5\xe7\xc2\xd7\xc2\xe4\xc6\xd7\xe1\xda\xd7\xc6\xf3\xd7\xd1\xa3",
        // "" / M(None) / S(0) / L(0)
        "\x4b\x69\x85\xb5\x14\x22\xbd\x03\x22\xc1\xb4\x70\x0d\x9d\xa3\x35\x61\xf9\x6a\x47\xcb\x48\x8a\x11\x85\xfb\x3d\x1d\x7f\xf1\x79\xa9",
        // "BIO_free" / M(Xor2) / S(189) / L(8)
        "\xef\xe4\xe2\xf2\xcb\xdf\xc8\xc8\xad\xe3\x15\xa7\x28\x7e\xe5\xff",
        // "CFURLCreateCopyAppendingPathComponent" / M(Xor2) / S(205) / L(37)
        "\xa8\xad\xbe\xb9\xa7\xa8\x99\x8e\x8a\x9f\x8e\xa8\x84\x9b\x92\xaa\x9b\x9b\x8e\x85\x8f\x82\x85\x8c\xbb\x8a\x9f\x83\xa8\x84\x86\x9b\x84\x85\x8e\x85\x9f\xeb",
        // "2.0.4" / M(Xor3) / S(177) / L(5)
        "\xf3\xef\xf1\xef\xf5\xc1\x0c\xd4\x4d\x9a\xa5\x9a\x44\xca\xf2\x4f",
        // "" / M(None) / S(0) / L(0)
        "\xeb\x0a\xe4\xbb\x7c\x6f\x9e\xef\x9d\xec\x64\xd2\x1b\x94\x5e\xec\xa3\x53\x28\xe6\x4b\x16\xfb\xd5\x9a\xd9\x90\x0c\xf7\x12\x82\x86",
        // "objc_getClass" / M(Xor1) / S(194) / L(13)
        "\xad\xa0\xa8\xa1\x9d\xa5\xa7\xb6\x81\xae\xa3\xb1\xb1\xc2\xd7\xf8",
        // "_MASReceipt" / M(Xor3) / S(252) / L(11)
        "\x53\x41\x4d\x5f\x5e\x69\x6f\x69\x65\x7c\x78\x0c\x98\x7e\x18\xbc",
        // "CFStringCompare" / M(Xor4) / S(119) / L(15)
        "\x33\x36\x23\x04\x02\x19\x1e\x17\x33\x1f\x1d\x00\x11\x02\x15\x70",
        // "" / M(None) / S(0) / L(0)
        "\x14\xf1\x87\x94\x61\x10\xb7\x33\x67\xb9\xf8\x54\x5c\x20\xd8\x7a\xd5\x11\xdf\x85\xea\x59\xbb\x6f\x22\xf8\xbc\x5f\x31\x56\x18\x6b",
        // "CFStringGetFileSystemRepresentation" / M(Rot) / S(181) / L(35)
        "\xf8\xfb\x08\x29\x27\x1e\x23\x1c\xfc\x1a\x29\xfb\x1e\x21\x1a\x08\x2e\x28\x29\x1a\x22\x07\x1a\x25\x27\x1a\x28\x1a\x23\x29\x16\x29\x1e\x24\x23\xb5",
        // "CFDateFormatterSetProperty" / M(Xor1) / S(47) / L(26)
        "\x6c\x69\x6b\x4e\x5b\x4a\x69\x40\x5d\x42\x4e\x5b\x5b\x4a\x5d\x7c\x4a\x5b\x7f\x5d\x40\x5f\x4a\x5d\x5b\x56\x2f\xec\xa4\x9b\x0d\xe4\xaf\xab\xae",
        // "CFDictionaryAddValue" / M(Xor4) / S(176) / L(20)
        "\x33\x36\x34\x19\x13\x04\x19\x1f\x1e\x11\x02\x09\x31\x14\x14\x26\x11\x1c\x05\x15\x70",
        // "kSecMatchSubjectContains" / M(Rot) / S(210) / L(24)
        "\x3d\x25\x37\x35\x1f\x33\x46\x35\x3a\x25\x47\x34\x3c\x37\x35\x46\x15\x41\x40\x46\x33\x3b\x40\x45\xd2\x72\x5d\x5f\x30\x53\xc9\x93\xb2",
        // "CFBundleCopyBundleURL" / M(Xor2) / S(215) / L(21)
        "\x82\x87\x83\xb4\xaf\xa5\xad\xa4\x82\xae\xb1\xb8\x83\xb4\xaf\xa5\xad\xa4\x94\x93\x8d\xc1",
        // "SecCertificateCopyData" / M(Xor4) / S(95) / L(22)
        "\xda\xec\xea\xca\xec\xfb\xfd\xe0\xef\xe0\xea\xe8\xfd\xec\xca\xe6\xf9\xf0\xcd\xe8\xfd\xe8\x89",
        // "it.iltofa.Turms" / M(Xor4) / S(10) / L(15)
        "\xc9\xd4\x8e\xc9\xcc\xd4\xcf\xc6\xc1\x8e\xf4\xd5\xd2\xcd\xd3\xa0",
        // "/System/Library/Frameworks/IOKit.framework/IOKit" / M(Xor4) / S(243) / L(48)
        "\xac\xd0\xfa\xf0\xf7\xe6\xee\xac\xcf\xea\xe1\xf1\xe2\xf1\xfa\xac\xc5\xf1\xe2\xee\xe6\xf4\xec\xf1\xe8\xf0\xac\xca\xcc\xc8\xea\xf7\xad\xe5\xf1\xe2\xee\xe6\xf4\xec\xf1\xe8\xac\xca\xcc\xc8\xea\xf7\x83",
        // "d2i_PKCS7_bio" / M(Xor3) / S(4) / L(13)
        "\x70\x26\x7d\x4b\x44\x5f\x57\x47\x23\x4b\x76\x7d\x7b\x14\xd1\x8e",
        // "SecKeychainSearchCreateFromAttributes" / M(Rot) / S(80) / L(37)
        "\xa3\xb5\xb3\x9b\xb5\xc9\xb3\xb8\xb1\xb9\xbe\xa3\xb5\xb1\xc2\xb3\xb8\x93\xc2\xb5\xb1\xc4\xb5\x96\xc2\xbf\xbd\x91\xc4\xc4\xc2\xb9\xb2\xc5\xc4\xb5\xc3\x50",
        // "" / M(None) / S(0) / L(0)
        "\x1e\x31\xfa\x19\xb9\xda\x61\x7e\x78\x54\xcb\x1e\x91\x74\xc3\xfa\x0b\x29\x52\xfc\xe4\x26\x12\xe6\xba\xc9\x80\x10\x15\xb4\x1e\x3a",
        // "CFDictionaryCreateMutable" / M(Xor3) / S(235) / L(25)
        "\x4e\x4b\x49\x64\x6e\x79\x64\x62\x63\x6c\x7f\x74\x4e\x7f\x68\x6c\x79\x68\x40\x78\x79\x6c\x6f\x61\x68\x0d\xc5\x5c\x80\x74\x43\x4b\x2a\xa3",
        // "" / M(None) / S(0) / L(0)
        "\x0b\x09\x95\x89\x5f\x73\xcc\x5f\xb0\xc5\x22\x6e\xee\x5b\xd8\xeb\xe9\xf0\x77\xd0\x5a\x92\xca\x0d\x53\x36\x52\x9e\x0a\x14\xad\x60",
        // "61:1e:5b:66:2c:59:3a:08:ff:58:d1:4a:e2:24:52:d1:98:df:6c:60" / M(Rot) / S(205) / L(59)
        "\x03\xfe\x07\xfe\x32\x07\x02\x2f\x07\x03\x03\x07\xff\x30\x07\x02\x06\x07\x00\x2e\x07\xfd\x05\x07\x33\x33\x07\x02\x05\x07\x31\xfe\x07\x01\x2e\x07\x32\xff\x07\xff\x01\x07\x02\xff\x07\x31\xfe\x07\x06\x05\x07\x31\x33\x07\x03\x30\x07\x03\xfd\xcd\xf6\x8f\x83\xa8\x98\x79\xde\xce",
        // "" / M(None) / S(0) / L(0)
        "\xc2\x50\x86\xd1\xef\x96\x7b\x17\x51\x6e\xc0\x80\x1d\x71\x17\x79\xbe\xf7\xc5\x0f\x2d\x76\xc8\x6d\x69\x34\x91\xb5\x90\x26\x50\xc1",
        // "" / M(None) / S(0) / L(0)
        "\x2f\xc1\xa6\x50\x76\x7e\xee\xfc\xa7\x8f\xda\x62\x64\x31\x97\x5f\x4a\xf6\xde\xc9\x74\xa5\xd6\x9d\xd7\x47\xb3\xfe\x26\xb4\x0c\xeb",
        // "CFDataGetLength" / M(Xor4) / S(152) / L(15)
        "\xc3\xc6\xc4\xe1\xf4\xe1\xc7\xe5\xf4\xcc\xe5\xee\xe7\xf4\xe8\x80",
        // "CFDictionaryGetValue" / M(Xor2) / S(1) / L(20)
        "\x57\x52\x50\x7d\x77\x60\x7d\x7b\x7a\x75\x66\x6d\x53\x71\x60\x42\x75\x78\x61\x71\x14",
        // "CFDictionaryAddValue" / M(Xor2) / S(115) / L(20)
        "\x25\x20\x22\x0f\x05\x12\x0f\x09\x08\x07\x14\x1f\x27\x02\x02\x30\x07\x0a\x13\x03\x66",
        // "ASN1_get_object" / M(Rot) / S(78) / L(15)
        "\x8f\xa1\x9c\x7f\xad\xb5\xb3\xc2\xad\xbd\xb0\xb8\xb3\xb1\xc2\x4e",
        // "en0" / M(Xor4) / S(107) / L(3)
        "\xd5\xde\x80\xb0\xbf\xf0\x5e\xa7\x3f\x61\xc0\xfe\x01\x32\x07\x2c",
        // "%02x:" / M(Xor1) / S(235) / L(5)
        "\xce\xdb\xd9\x93\xd1\xeb\x5c\x61\xef\xa7\x86\xcb\xe1\xb2\x11\x34",
        // "" / M(None) / S(0) / L(0)
        "\xaa\xcc\x35\x7b\xe7\x76\x72\x9e\xab\xf0\x1c\x7d\xa8\xb4\x91\xbd\x34\x18\xe2\xce\x69\xee\x5a\xad\xb7\xb6\x39\xab\xa8\x53\x95\x3c",
        // "CC_SHA1" / M(Rot) / S(157) / L(7)
        "\xe0\xe0\xfc\xf0\xe5\xde\xce\x9d\xf5\xf0\x0e\x83\xfc\x45\xdf\x5c",
        // "" / M(None) / S(0) / L(0)
        "\x49\xa5\xec\x3d\x5e\x29\xb7\x3a\xb8\xc6\x37\x30\x0e\x2d\x83\x2f\xc4\xc3\xdc\xc1\x17\x3f\x91\xa0\xca\x8e\xc7\xc1\xf8\xcd\x4e\x6f",
        // "" / M(None) / S(0) / L(0)
        "\x5a\x12\xec\x17\xde\xda\xce\xe1\x3d\x50\x13\x1f\x1f\x74\x33\x86\x83\xf3\xe8\x35\x7a\xd0\xc4\x63\xdd\x03\xe6\x24\x40\xc3\xe1\xe5",
        // "" / M(None) / S(0) / L(0)
        "\xb1\x14\x3b\x46\x3d\x97\x1e\xfd\x16\x0e\xca\x1e\x81\x6a\x6d\x22\x02\xb6\x1b\x26\xe6\xe7\xea\xbf\xd7\x9b\xa2\x5f\x90\x47\xc0\xbc",
        // "kSecReturnRef" / M(Xor2) / S(56) / L(13)
        "\x43\x7b\x4d\x4b\x7a\x4d\x5c\x5d\x5a\x46\x7a\x4d\x4e\x28\x47\x82",
        // "BIO_write" / M(Xor4) / S(110) / L(9)
        "\xa2\xa9\xaf\xbf\x97\x92\x89\x94\x85\xe0\xac\x37\x13\xc0\x4e\x98",
        // "" / M(None) / S(0) / L(0)
        "\xad\x60\xbd\x5b\xca\xe7\x83\x49\x54\x98\xab\x6f\x23\x01\x0c\xac\x89\xd2\xb6\x60\x3f\x03\xc9\xe1\xeb\x1b\x04\xd4\x29\x01\x7f\x8d",
        // "" / M(None) / S(0) / L(0)
        "\x4f\x7f\x35\x53\xa9\x35\xc4\x6d\x3e\x51\x12\x7a\xb1\x57\xee\xea\x34\x02\x4c\xa6\xd1\x65\x04\xe6\xe4\xd9\x1e\x68\x66\xf2\x93\x8f",
        // "CFDateFormatterCreate" / M(Rot) / S(146) / L(21)
        "\xd5\xd8\xd6\xf3\x06\xf7\xd8\x01\x04\xff\xf3\x06\x06\xf7\x04\xd5\x04\xf7\xf3\x06\xf7\x92",
        // "_MASReceipt/receipt" / M(Xor4) / S(203) / L(19)
        "\x83\x91\x9d\x8f\x8e\xb9\xbf\xb9\xb5\xac\xa8\xf3\xae\xb9\xbf\xb9\xb5\xac\xa8\xdc",
        // "RTLD_MAIN_ONLY" / M(Xor4) / S(155) / L(14)
        "\xe2\xe4\xfc\xf4\xef\xfd\xf1\xf9\xfe\xef\xff\xfe\xfc\xe9\xb0\x3d",
        // "%02x:" / M(Xor4) / S(173) / L(5)
        "\xf5\xe0\xe2\xa8\xea\xd0\xfc\xf1\x73\xe2\xc6\x2a\xbd\x1b\x3d\x71",
        // "CC_SHA1_Final" / M(Xor4) / S(105) / L(13)
        "\xd3\xd3\xcf\xc3\xd8\xd1\xa1\xcf\xd6\xf9\xfe\xf1\xfc\x90\xa7\xb6",
        // "EVP_get_digestbyname" / M(Xor3) / S(67) / L(20)
        "\x1d\x0e\x08\x07\x3f\x3d\x2c\x07\x3c\x31\x3f\x3d\x2b\x2c\x3a\x21\x36\x39\x35\x3d\x58",
        // "CC_SHA1_Final" / M(Xor2) / S(50) / L(13)
        "\x61\x61\x7d\x71\x6a\x63\x13\x7d\x64\x4b\x4c\x43\x4e\x22\xc2\x6d",
        // "IOObjectRelease" / M(Xor4) / S(159) / L(15)
        "\xb9\xbf\xbf\x92\x9a\x95\x93\x84\xa2\x95\x9c\x95\x91\x83\x95\xf0",
        // "kCFBundleIdentifierKey" / M(Xor4) / S(19) / L(22)
        "\xde\xf6\xf3\xf7\xc0\xdb\xd1\xd9\xd0\xfc\xd1\xd0\xdb\xc1\xdc\xd3\xdc\xd0\xc7\xfe\xd0\xcc\xb5",
        // "ASN1_INTEGER_free" / M(Rot) / S(132) / L(17)
        "\xc5\xd7\xd2\xb5\xe3\xcd\xd2\xd8\xc9\xcb\xc9\xd6\xe3\xea\xf6\xe9\xe9\x84",
        // "EVP_get_digestbyname" / M(Xor4) / S(218) / L(20)
        "\xa7\xb4\xb2\xbd\x85\x87\x96\xbd\x86\x8b\x85\x87\x91\x96\x80\x9b\x8c\x83\x8f\x87\xe2",
        // "CFBundleGetValueForInfoDictionaryKey" / M(Xor4) / S(89) / L(36)
        "\x9e\x9b\x9f\xa8\xb3\xb9\xb1\xb8\x9a\xb8\xa9\x8b\xbc\xb1\xa8\xb8\x9b\xb2\xaf\x94\xb3\xbb\xb2\x99\xb4\xbe\xa9\xb4\xb2\xb3\xbc\xaf\xa4\x96\xb8\xa4\xdd",
        // "" / M(None) / S(0) / L(0)
        "\xd5\x04\xa5\x64\x21\x1d\x0c\xd4\x4d\x9a\xa5\x9a\x44\xca\xf2\x4f\x2c\x20\xa4\x00\x29\x9e\x28\xa5\xbc\xdd\xbc\x60\x2b\xda\x99\x2d",
        // "dlopen" / M(Xor2) / S(248) / L(6)
        "\x8c\x84\x87\x98\x8d\x86\xe8\x32\xdc\x83\xf7\x52\xa5\x11\x6c\xca",
        // "c2i_ASN1_INTEGER" / M(Xor1) / S(33) / L(16)
        "\x42\x13\x48\x7e\x60\x72\x6f\x10\x7e\x68\x6f\x75\x64\x66\x64\x73\x21",
        // "CC_SHA1" / M(Xor4) / S(179) / L(7)
        "\x73\x73\x6f\x63\x78\x71\x01\x30\xfa\xb7\x5b\x07\xaa\x26\x29\x72",
        // "CFArrayAppendValue" / M(Xor4) / S(76) / L(18)
        "\xe7\xe2\xe5\xd6\xd6\xc5\xdd\xe5\xd4\xd4\xc1\xca\xc0\xf2\xc5\xc8\xd1\xc1\xa4",
        // "61:1E:5B:66:2C:59:3A:08:FF:58:D1:4A:E2:24:52:D1:98:DF:6C:60" / M(Rot) / S(19) / L(59)
        "\x49\x44\x4d\x44\x58\x4d\x48\x55\x4d\x49\x49\x4d\x45\x56\x4d\x48\x4c\x4d\x46\x54\x4d\x43\x4b\x4d\x59\x59\x4d\x48\x4b\x4d\x57\x44\x4d\x47\x54\x4d\x58\x45\x4d\x45\x47\x4d\x48\x45\x4d\x57\x44\x4d\x4c\x4b\x4d\x57\x59\x4d\x49\x56\x4d\x49\x43\x13\x52\x4f\xdf\x65\xd5\xea\xc7\xd8",
        // "" / M(None) / S(0) / L(0)
        "\xc9\xa0\x5c\x13\xe9\x06\x00\x9e\x2a\xc7\x3c\xc0\xc5\x96\xd6\x65\xd4\xbf\x6b\x83\x3c\xc8\xfd\xc4\x91\x3c\x41\x35\x2c\x68\xd3\x6a",
        // "" / M(None) / S(0) / L(0)
        "\x3b\xf5\xe0\x1e\x99\xc3\xfc\xf1\x73\xe2\xc6\x2a\xbd\x1b\x3d\x71\x36\xf9\xfe\xea\xcb\xe2\x41\xeb\x39\x38\x74\x5b\x94\x37\x39\x3e",
        // "CFArrayGetCount" / M(Xor2) / S(211) / L(15)
        "\x80\x85\x82\xb1\xb1\xa2\xba\x84\xa6\xb7\x80\xac\xb6\xad\xb7\xc3",
        // "globfree" / M(Xor3) / S(74) / L(8)
        "\x3d\x36\x35\x38\x3c\x28\x3f\x3f\x5a\x09\xaf\x4f\x36\x20\xb7\xe4",
        // "" / M(None) / S(0) / L(0)
        "\xa8\xae\xfb\x89\x61\x9a\xb5\x90\x67\x24\x84\xa9\x48\xba\xa4\xfc\xee\xd2\x20\xb8\x3d\x8e\x94\x96\xe8\xd3\x70\x2f\x4e\x60\x86\x80",
        // "/usr/lib/libSystem.dylib" / M(Xor2) / S(96) / L(24)
        "\x6e\x34\x32\x33\x6e\x2d\x28\x23\x6e\x2d\x28\x23\x12\x38\x32\x35\x24\x2c\x6f\x25\x38\x2d\x28\x23\x41\xb6\x79\x40\x68\xd0\x43\x29\x48",
        // "kCFTypeArrayCallBacks" / M(Xor4) / S(190) / L(21)
        "\x3f\x17\x12\x00\x2d\x24\x31\x15\x26\x26\x35\x2d\x17\x35\x38\x38\x16\x35\x37\x3f\x27\x54",
        // "Apple Root CA" / M(Rot) / S(251) / L(13)
        "\x3c\x6b\x6b\x67\x60\x1b\x4d\x6a\x6a\x6f\x1b\x3e\x3c\xfb\x9e\x0f",
        // "kCFTypeDictionaryKeyCallBacks" / M(Xor4) / S(130) / L(29)
        "\x27\x0f\x0a\x18\x35\x3c\x29\x08\x25\x2f\x38\x25\x23\x22\x2d\x3e\x35\x07\x29\x35\x0f\x2d\x20\x20\x0e\x2d\x2f\x27\x3f\x4c\x0f\xd6\x45\x81\x65\xd4\xd7\xc2",
        // "/System/Library/Frameworks/Security.framework/Security" / M(Rot) / S(51) / L(54)
        "\x62\x86\xac\xa6\xa7\x98\xa0\x62\x7f\x9c\x95\xa5\x94\xa5\xac\x62\x79\xa5\x94\xa0\x98\xaa\xa2\xa5\x9e\xa6\x62\x86\x98\x96\xa8\xa5\x9c\xa7\xac\x61\x99\xa5\x94\xa0\x98\xaa\xa2\xa5\x9e\x62\x86\x98\x96\xa8\xa5\x9c\xa7\xac\x33",
        // "yyyy'-'MM'-'dd'T'HH':'mm':'ss'Z'" / M(Xor4) / S(162) / L(32)
        "\x9b\x9b\x9b\x9b\xc5\xcf\xc5\xaf\xaf\xc5\xcf\xc5\x86\x86\xc5\xb6\xc5\xaa\xaa\xc5\xd8\xc5\x8f\x8f\xc5\xd8\xc5\x91\x91\xc5\xb8\xc5\xe2",
        // "CFStringCreateWithCString" / M(Xor1) / S(133) / L(25)
        "\xc6\xc3\xd6\xf1\xf7\xec\xeb\xe2\xc6\xf7\xe0\xe4\xf1\xe0\xd2\xec\xf1\xed\xc6\xd6\xf1\xf7\xec\xeb\xe2\x85\xc4\x66\xad\x3c\x03\x4b\x3c\x34",
        // "EVP_DigestUpdate" / M(Xor3) / S(196) / L(16)
        "\x90\x83\x85\x8a\x91\xbc\xb2\xb0\xa6\xa1\x80\xa5\xb1\xb4\xa1\xb0\xd5",
        // "CC_SHA1_Update" / M(Rot) / S(88) / L(14)
        "\x9b\x9b\xb7\xab\xa0\x99\x89\xb7\xad\xc8\xbc\xb9\xcc\xbd\x58\x8e",
        // "" / M(None) / S(0) / L(0)
        "\x80\xee\x4f\x77\xa1\x32\xb8\x6c\xbf\x9c\x3e\xa1\xe3\xa2\x48\xbb\x0f\x87\x28\x51\xc3\xdd\x0f\x46\x39\xd6\xd8\x68\xbe\x70\x04\x44",
        // "ASN1_OBJECT_free" / M(Xor2) / S(123) / L(16)
        "\x2b\x39\x24\x5b\x35\x25\x28\x20\x2f\x29\x3e\x35\x0c\x18\x0f\x0f\x6a",
        // "CFDictionaryCreateMutable" / M(Xor2) / S(97) / L(25)
        "\x00\x05\x07\x2a\x20\x37\x2a\x2c\x2d\x22\x31\x3a\x00\x31\x26\x22\x37\x26\x0e\x36\x37\x22\x21\x2f\x26\x43\x4f\xe5\xc3\x2d\x34\xdc\xac\x99",
        // "" / M(None) / S(0) / L(0)
        "\x19\x13\x05\xf7\xe5\xa6\x77\x8d\x2c\x60\xb3\x61\xe0\xf4\xae\x78\x98\x7e\x18\xbc\x28\x1c\xa1\x8a\xc5\xf3\xd2\xfb\x84\xd4\xa2\x84",
        // "" / M(None) / S(0) / L(0)
        "\xfa\xd1\x7f\x61\x39\x13\x51\xbd\xc8\xb6\x26\x68\xc6\x6d\xbc\xc8\x61\x48\x87\xd0\xfc\xd6\xc0\x9a\x82\x96\xb0\x9f\x07\x82\xdd\x91",
        // "SHA1_Final" / M(Rot) / S(206) / L(10)
        "\x21\x16\x0f\xff\x2d\x14\x37\x3c\x2f\x3a\xce\x42\x97\x05\x15\x8c",
        // "kCFTypeDictionaryValueCallBacks" / M(Xor4) / S(85) / L(31)
        "\xcb\xe3\xe6\xf4\xd9\xd0\xc5\xe4\xc9\xc3\xd4\xc9\xcf\xce\xc1\xd2\xd9\xf6\xc1\xcc\xd5\xc5\xe3\xc1\xcc\xcc\xe2\xc1\xc3\xcb\xd3\xa0",
        // "" / M(None) / S(0) / L(0)
        "\x03\xa3\xfe\x42\x2b\x6f\x93\x4d\x6d\x74\xc6\x4d\x5c\xed\x03\xbb\x89\xe9\xe1\x0c\x03\xd0\xb2\xa5\x45\x07\xd3\x19\xd3\xa4\xbe\x5c",
        // "%02x" / M(Xor4) / S(165) / L(4)
        "\x75\x60\x62\x28\x50\xad\xc2\x31\x23\x94\x84\x41\xb3\xeb\x7f\x1f",
        // "2.0.4" / M(Rot) / S(218) / L(5)
        "\x0c\x08\x0a\x08\x0e\xda\x49\x45\x0a\x1d\xed\xb1\x92\xcb\x07\x0a",
        // "CFNumberCreate" / M(Xor1) / S(145) / L(14)
        "\xd2\xd7\xdf\xe4\xfc\xf3\xf4\xe3\xd2\xe3\xf4\xf0\xe5\xf4\x91\x2b",
        // "611e5b662c593a08ff58d14ae22452d198df6c60" / M(Rot) / S(16) / L(40)
        "\x46\x41\x41\x75\x45\x72\x46\x46\x42\x73\x45\x49\x43\x71\x40\x48\x76\x76\x45\x48\x74\x41\x44\x71\x75\x42\x42\x44\x45\x42\x74\x41\x49\x48\x74\x76\x46\x73\x46\x40\x10\xdf\x92\xcc\x67\xb6\x80\x75\x53",
        // "" / M(None) / S(0) / L(0)
        "\xa0\x49\x47\x4b\x9e\xcf\x5f\xec\xbd\xdd\xc8\x09\xe6\x44\xf0\x47\xe3\x93\x26\x99\xa0\x02\x21\x29\x71\xbd\x24\x1c\xd6\xfb\xbb\xbf",
        // "CFBundleUnloadExecutable" / M(Rot) / S(210) / L(24)
        "\x15\x18\x14\x47\x40\x36\x3e\x37\x27\x40\x3e\x41\x33\x36\x17\x4a\x37\x35\x47\x46\x33\x34\x3e\x37\xd2\xe3\x99\xc7\xb8\x70\x1a\x48\xdd",
        // "ASN1_OBJECT_free" / M(Rot) / S(171) / L(16)
        "\xec\xfe\xf9\xdc\x0a\xfa\xed\xf5\xf0\xee\xff\x0a\x11\x1d\x10\x10\xab",
        // "Apple Root CA" / M(Xor2) / S(55) / L(13)
        "\x66\x57\x57\x4b\x42\x07\x75\x48\x48\x53\x07\x64\x66\x27\xda\xbf",
        // "CFReadStreamOpen" / M(Rot) / S(10) / L(16)
        "\x4d\x50\x5c\x6f\x6b\x6e\x5d\x7e\x7c\x6f\x6b\x77\x59\x7a\x6f\x78\x0a",
        // "SHA1_Update" / M(Xor1) / S(189) / L(11)
        "\xee\xf5\xfc\x8c\xe2\xe8\xcd\xd9\xdc\xc9\xd8\xbd\xbe\xf7\xc5\x0f",
        // "" / M(None) / S(0) / L(0)
        "\xac\xf7\xb4\x41\x18\x58\x21\x5a\x4c\x0a\x63\x43\xee\xea\xd8\x22\xdf\x6c\xbd\x2e\x88\xa4\x62\x1b\xe1\x69\xd0\xb9\x4c\x6b\x40\xe9",
        // "" / M(None) / S(0) / L(0)
        "\xeb\xd6\x4b\xa7\x18\xa1\x63\xdd\x1c\xcf\xe9\xb9\x96\xd8\xcd\x19\xb4\x40\x1d\xcc\x0a\x77\xa3\xf7\xa8\xb6\x66\xf0\xe8\x8a\x6c\x26",
        // "61:1e:5b:66:2c:59:3a:08:ff:58:d1:4a:e2:24:52:d1:98:df:6c:60" / M(Xor1) / S(237) / L(59)
        "\xdb\xdc\xd7\xdc\x88\xd7\xd8\x8f\xd7\xdb\xdb\xd7\xdf\x8e\xd7\xd8\xd4\xd7\xde\x8c\xd7\xdd\xd5\xd7\x8b\x8b\xd7\xd8\xd5\xd7\x89\xdc\xd7\xd9\x8c\xd7\x88\xdf\xd7\xdf\xd9\xd7\xd8\xdf\xd7\x89\xdc\xd7\xd4\xd5\xd7\x89\x8b\xd7\xdb\x8e\xd7\xdb\xdd\xed\xeb\xc8\x98\x43\x4b\x5d\x0b\xd6",
        // "CFBundleIdentifier" / M(Xor2) / S(116) / L(18)
        "\x24\x21\x25\x12\x09\x03\x0b\x02\x2e\x03\x02\x09\x13\x0e\x01\x0e\x02\x15\x67",
        // "X509_digest" / M(Xor2) / S(154) / L(11)
        "\xd2\xbf\xba\xb3\xd5\xee\xe3\xed\xef\xf9\xfe\x8a\xc4\xc3\xdc\xc1",
        // "" / M(None) / S(0) / L(0)
        "\x2a\xec\xa0\xa8\x96\xca\xa5\x6b\x28\x21\x1d\x39\x28\xfa\x4d\x7c\x06\xa2\x67\x07\x8f\xe9\xd0\xaa\x60\xdb\x77\x5a\xca\x43\xe2\x9d",
        // "CFDictionarySetValue" / M(Xor2) / S(28) / L(20)
        "\x4a\x4f\x4d\x60\x6a\x7d\x60\x66\x67\x68\x7b\x70\x5a\x6c\x7d\x5f\x68\x65\x7c\x6c\x09",
        // "CFStringCompare" / M(Xor3) / S(82) / L(15)
        "\x21\x24\x31\x16\x10\x0b\x0c\x05\x21\x0d\x0f\x12\x03\x10\x07\x62",
        // "SHA1_Init" / M(Xor1) / S(120) / L(9)
        "\x2b\x30\x39\x49\x27\x31\x16\x11\x0c\x78\xc0\xb0\x81\xe0\xfa\xfa",
        // "kSecClass" / M(Xor2) / S(66) / L(9)
        "\x39\x01\x37\x31\x11\x3e\x33\x21\x21\x52\x37\x9b\x1d\x6f\x7a\xb3",
        // "SecItemCopyMatching" / M(Xor2) / S(200) / L(19)
        "\x8f\xb9\xbf\x95\xa8\xb9\xb1\x9f\xb3\xac\xa5\x91\xbd\xa8\xbf\xb4\xb5\xb2\xbb\xdc",
        // "CFAbsoluteTimeGetCurrent" / M(Xor2) / S(31) / L(24)
        "\x7d\x78\x7f\x5c\x4d\x51\x52\x4b\x4a\x5b\x6a\x57\x53\x5b\x79\x5b\x4a\x7d\x4b\x4c\x4c\x5b\x50\x4a\x3e\xc4\x04\xa2\xde\x34\xab\xbd\xa6",
        // "" / M(None) / S(0) / L(0)
        "\xf8\x9d\xc1\xa1\x91\x5c\x1c\x53\x8d\x13\xa4\xe7\xb9\xfc\x2d\x87\x37\x61\xa9\xa7\x97\x85\x64\x86\xcb\x86\x2f\x6b\xa5\x51\x04\x7f",
        // "" / M(None) / S(0) / L(0)
        "\xad\xe0\xa4\x80\xcd\x65\xfa\x4d\x5b\x1c\xda\xe9\x24\x8c\x5b\x87\xe2\xc6\xf0\x7e\x05\xf0\xed\xfb\xff\xb7\x13\x22\xb2\xcc\x26\x59",
        // "CFDictionaryGetValue" / M(Xor4) / S(240) / L(20)
        "\xf3\xf6\xf4\xd9\xd3\xc4\xd9\xdf\xde\xd1\xc2\xc9\xf7\xd5\xc4\xe6\xd1\xdc\xc5\xd5\xb0",
        // "CFDataAppendBytes" / M(Rot) / S(209) / L(17)
        "\x14\x17\x15\x32\x45\x32\x12\x41\x41\x36\x3f\x35\x13\x4a\x45\x36\x44\xd1",
        // "CFURLCreateWithFileSystemPathRelativeToBase" / M(Xor2) / S(141) / L(43)
        "\xfa\xff\xec\xeb\xf5\xfa\xcb\xdc\xd8\xcd\xdc\xee\xd0\xcd\xd1\xff\xd0\xd5\xdc\xea\xc0\xca\xcd\xdc\xd4\xe9\xd8\xcd\xd1\xeb\xdc\xd5\xd8\xcd\xd0\xcf\xdc\xed\xd6\xfb\xd8\xca\xdc\xb9\xf0\x83\x94\xd7\x6c\xca\x62\x69",
        // "X509_get_ext_by_OBJ" / M(Xor2) / S(191) / L(19)
        "\xf3\x9e\x9b\x92\xf4\xcc\xce\xdf\xf4\xce\xd3\xdf\xf4\xc9\xd2\xf4\xe4\xe9\xe1\xab",
        // "dlopen" / M(Rot) / S(1) / L(6)
        "\x65\x6d\x70\x71\x66\x6f\x01\x0d\x1e\xac\x90\x98\xb4\xe3\x5f\x0e",
        // "CFDataCreateMutable" / M(Xor2) / S(130) / L(19)
        "\xd5\xd0\xd2\xf7\xe2\xf7\xd5\xe4\xf3\xf7\xe2\xf3\xdb\xe3\xe2\xf7\xf4\xfa\xf3\x96",
        // "kCFTypeDictionaryValueCallBacks" / M(Xor3) / S(70) / L(31)
        "\x0d\x25\x20\x32\x1f\x16\x03\x22\x0f\x05\x12\x0f\x09\x08\x07\x14\x1f\x30\x07\x0a\x13\x03\x25\x07\x0a\x0a\x24\x07\x05\x0d\x15\x66",
        // "CFStringCreateWithBytes" / M(Xor3) / S(174) / L(23)
        "\x8d\x88\x9d\xba\xbc\xa7\xa0\xa9\x8d\xbc\xab\xaf\xba\xab\x99\xa7\xba\xa6\x8c\xb7\xba\xab\xbd\xce\x7c\x8f\xcc\x52\xea\x31\x67\x50",
        // "PKCS7_get0_signers" / M(Rot) / S(22) / L(18)
        "\x66\x61\x59\x69\x4d\x75\x7d\x7b\x8a\x46\x75\x89\x7f\x7d\x84\x7b\x88\x89\x16",
        // "" / M(None) / S(0) / L(0)
        "\xea\xf1\x16\x04\x0a\x19\x38\x03\xb8\x93\x0b\x1a\xe4\x4f\xc6\x63\xcb\x60\x44\x5a\x14\x91\x90\xb8\xa8\xc8\x5e\x67\xb9\x35\x74\x6a",
        // "receipt" / M(Xor4) / S(68) / L(7)
        "\x32\x25\x23\x25\x29\x30\x34\x40\xcb\x24\x20\x90\xd9\x80\x88\x05",
        // "sk_num" / M(Xor4) / S(190) / L(6)
        "\x93\x8b\xbf\x8e\x95\x8d\xe0\x12\x0d\x69\xf9\x69\x22\xd3\x70\xc0",
        // "%02x:" / M(Xor3) / S(35) / L(5)
        "\x16\x03\x01\x4b\x09\x33\x97\xe6\xef\x33\x2b\xc5\x86\x2e\xa3\x4b",
        // "ASN1_INTEGER_get" / M(Xor1) / S(222) / L(16)
        "\x9f\x8d\x90\xef\x81\x97\x90\x8a\x9b\x99\x9b\x8c\x81\xb9\xbb\xaa\xde",
        // "CFStringGetFileSystemRepresentation" / M(Xor2) / S(154) / L(35)
        "\xfd\xf8\xed\xca\xcc\xd7\xd0\xd9\xf9\xdb\xca\xf8\xd7\xd2\xdb\xed\xc7\xcd\xca\xdb\xd3\xec\xdb\xce\xcc\xdb\xcd\xdb\xd0\xca\xdf\xca\xd7\xd1\xd0\xbe",
        // "sha1" / M(Xor3) / S(163) / L(4)
        "\xc0\xdb\xd2\x82\xb3\x30\xde\x66\x87\x68\x52\x9c\xbd\x7f\x43\x8a",
        // "CFStringCreateWithCString" / M(Xor2) / S(91) / L(25)
        "\x3a\x3f\x2a\x0d\x0b\x10\x17\x1e\x3a\x0b\x1c\x18\x0d\x1c\x2e\x10\x0d\x11\x3a\x2a\x0d\x0b\x10\x17\x1e\x79\xa3\xdb\xb9\x35\x21\x74\x1a\x94",
        // "EVP_DigestFinal" / M(Rot) / S(243) / L(15)
        "\x38\x49\x43\x52\x37\x5c\x5a\x58\x66\x67\x39\x5c\x61\x54\x5f\xf3",
        // "CFDataCreate" / M(Rot) / S(242) / L(12)
        "\x35\x38\x36\x53\x66\x53\x35\x64\x57\x53\x66\x57\xf2\xcb\x84\x2f",
        // "ASN1_INTEGER_get" / M(Rot) / S(154) / L(16)
        "\xdb\xed\xe8\xcb\xf9\xe3\xe8\xee\xdf\xe1\xdf\xec\xf9\x01\xff\x0e\x9a",
        // "kCFTypeDictionaryValueCallBacks" / M(Xor4) / S(136) / L(31)
        "\x6b\x43\x46\x54\x79\x70\x65\x44\x69\x63\x74\x69\x6f\x6e\x61\x72\x79\x56\x61\x6c\x75\x65\x43\x61\x6c\x6c\x42\x61\x63\x6b\x73\x00",
        // "Contents/_MASReceipt/receipt" / M(Xor4) / S(119) / L(28)
        "\x70\x5c\x5d\x47\x56\x5d\x47\x40\x1c\x6c\x7e\x72\x60\x61\x56\x50\x56\x5a\x43\x47\x1c\x41\x56\x50\x56\x5a\x43\x47\x33\xe6\x30\x03\x6d\x79\xee\x80\x4c",
        // "" / M(None) / S(0) / L(0)
        "\x46\x6d\x1d\xe2\xb7\x6b\xa1\x33\xb3\x15\x2d\x24\x3e\xfb\x91\x52\x3e\x4c\xa9\xfd\x8d\x34\x82\x19\x73\x83\x9e\x0f\x77\x7b\x14\xe4",
        // "sk_num" / M(Xor3) / S(215) / L(6)
        "\x94\x8c\xb8\x89\x92\x8a\xe7\x62\x64\x31\x97\x5f\x4a\xf6\xde\xc9",
        // "" / M(None) / S(0) / L(0)
        "\x46\x54\x15\x9c\xb8\x79\x1c\x4b\x16\x07\x5f\xbe\xec\x76\x6c\x6c\x8b\x6e\x4d\xd9\x60\x6d\xf3\xd4\xcf\x01\xdd\x76\x2f\x51\x49\x0c",
        // "" / M(None) / S(0) / L(0)
        "\xbf\xc9\xcc\xa3\x2a\x66\x13\xfa\x27\x9a\x2d\x1c\x9f\x92\xda\xec\x98\x2f\x17\xa6\x2e\x37\x81\xf5\x30\x41\x32\x19\x3a\x73\xf5\x88",
        // "CFAbsoluteTimeGetCurrent" / M(Xor3) / S(44) / L(24)
        "\x0e\x0b\x0c\x2f\x3e\x22\x21\x38\x39\x28\x19\x24\x20\x28\x0a\x28\x39\x0e\x38\x3f\x3f\x28\x23\x39\x4d\xdf\xaf\xa3\x77\xa8\xc6\xa4\xe3",
        // "" / M(None) / S(0) / L(0)
        "\x7f\xc8\xdf\x95\xa1\x26\xce\xa2\x4d\xed\x74\x64\xc6\x33\x02\x21\x59\x83\x81\xc0\x44\xa5\xdb\x90\x2b\x40\x3e\x7d\xe3\xaf\x5f\x90",
        // "X509_STORE_add_cert" / M(Xor1) / S(212) / L(19)
        "\x8c\xe1\xe4\xed\x8b\x87\x80\x9b\x86\x91\x8b\xb5\xb0\xb0\x8b\xb7\xb1\xa6\xa0\xd4",
        // "CFURLCreateFromFileSystemRepresentation" / M(Xor2) / S(246) / L(39)
        "\x85\x80\x93\x94\x8a\x85\xb4\xa3\xa7\xb2\xa3\x80\xb4\xa9\xab\x80\xaf\xaa\xa3\x95\xbf\xb5\xb2\xa3\xab\x94\xa3\xb6\xb4\xa3\xb5\xa3\xa8\xb2\xa7\xb2\xaf\xa9\xa8\xc6\x1b\x55\x14\xed\xce\x89\xcd\x90",
        // "CFDateFormatterSetProperty" / M(Xor2) / S(244) / L(26)
        "\x94\x91\x93\xb6\xa3\xb2\x91\xb8\xa5\xba\xb6\xa3\xa3\xb2\xa5\x84\xb2\xa3\x87\xa5\xb8\xa7\xb2\xa5\xa3\xae\xd7\xe3\xd9\xdb\x74\x67\x0a\x88\x0b",
        // "" / M(None) / S(0) / L(0)
        "\x1e\x4b\x24\xed\x09\xbe\x4f\x28\x05\x36\xcc\x8c\xdd\x1d\xf9\xb3\xb1\x3e\xc0\xa8\x87\xd3\x96\xe8\x57\x74\x1e\x70\xfa\x17\x0c\xa6",
        // "CFDateFormatterSetProperty" / M(Rot) / S(167) / L(26)
        "\xea\xed\xeb\x08\x1b\x0c\xed\x16\x19\x14\x08\x1b\x1b\x0c\x19\xfa\x0c\x1b\xf7\x19\x16\x17\x0c\x19\x1b\x20\xa7\x3a\xb5\x50\xc4\x6a\x20\xc8\x99",
        // "exit" / M(Xor4) / S(82) / L(4)
        "\x45\x58\x49\x54\x20\x20\xcf\x82\x17\x07\xd7\xbd\x68\x40\x7f\x7b",
        // "" / M(None) / S(0) / L(0)
        "\x70\x3c\x79\x2f\x55\x0d\x35\x59\x3a\x19\xa4\x65\x77\xcd\x80\xa8\x2b\xab\xf3\x69\x2a\x1b\x02\x88\x93\x97\xf3\x08\x2d\xd0\xdc\xa6",
        // "sk_value" / M(Xor2) / S(103) / L(8)
        "\x04\x1c\x28\x01\x16\x1b\x02\x12\x77\xd8\x5f\xc0\x98\x6b\x9f\x36",
        // "IORegistryEntryGetParentEntry" / M(Xor1) / S(175) / L(29)
        "\xe6\xe0\xfd\xca\xc8\xc6\xdc\xdb\xdd\xd6\xea\xc1\xdb\xdd\xd6\xe8\xca\xdb\xff\xce\xdd\xca\xc1\xdb\xea\xc1\xdb\xdd\xd6\xaf\xe6\x6a\xca\xef\x72\x30\x69\xef",
        // "X509_STORE_add_cert" / M(Rot) / S(42) / L(19)
        "\x82\x5f\x5a\x63\x89\x7d\x7e\x79\x7c\x6f\x89\x8b\x8e\x8e\x89\x8d\x8f\x9c\x9e\x2a",
        // "SHA1_Init" / M(Rot) / S(244) / L(9)
        "\x47\x3c\x35\x25\x53\x3d\x62\x5d\x68\xf4\xad\x60\xc2\x50\x86\xd1",
        // "/System/Library/Frameworks/Security.framework/Security" / M(Xor2) / S(33) / L(54)
        "\x39\x45\x6f\x65\x62\x73\x7b\x39\x5a\x7f\x74\x64\x77\x64\x6f\x39\x50\x64\x77\x7b\x73\x61\x79\x64\x7d\x65\x39\x45\x73\x75\x63\x64\x7f\x62\x6f\x38\x70\x64\x77\x7b\x73\x61\x79\x64\x7d\x39\x45\x73\x75\x63\x64\x7f\x62\x6f\x16",
        // "" / M(None) / S(0) / L(0)
        "\xd8\x82\x66\x77\xfb\xbf\x38\xcb\x1c\x06\xfb\x67\x78\x91\x3c\x0a\xb8\x9b\xbc\x81\x3d\x62\x34\x52\x0a\xac\x99\x41\x2b\xa7\x5a\xdc",
        // "" / M(None) / S(0) / L(0)
        "\x51\x0b\xfc\x6c\x09\xa5\x19\xa5\x5c\x59\x83\x86\xcb\x24\x20\x90\xd9\x80\x88\x05\xdc\x86\x78\x86\x28\x69\x60\xd6\x94\xce\x7b\x74",
        // "Contents" / M(Xor1) / S(56) / L(8)
        "\x7b\x57\x56\x4c\x5d\x56\x4c\x4b\x38\x90\xe3\x43\xe9\x61\xf7\xd1",
        // "SHA1" / M(Xor1) / S(189) / L(4)
        "\xee\xf5\xfc\x8c\xbd\x5f\xdb\x9d\xec\xa6\x42\xae\x18\x77\x7e\xe2",
        // "" / M(None) / S(0) / L(0)
        "\x00\x49\x40\x1f\x9c\x55\xe5\x67\x92\x80\x93\xe6\xcf\x7d\x63\x7d\x61\xf1\xfc\x2c\xe9\xef\x32\xe0\x40\x07\xec\x66\x2b\x9b\xdf\x45",
        // "OBJ_txt2obj" / M(Rot) / S(40) / L(11)
        "\x77\x6a\x72\x87\x9c\xa0\x9c\x5a\x97\x8a\x92\x28\x33\x26\x1a\x5b",
        // "/System/Library/Frameworks/CoreFoundation.framework/CoreFoundation" / M(Xor3) / S(106) / L(66)
        "\x82\xfe\xd4\xde\xd9\xc8\xc0\x82\xe1\xc4\xcf\xdf\xcc\xdf\xd4\x82\xeb\xdf\xcc\xc0\xc8\xda\xc2\xdf\xc6\xde\x82\xee\xc2\xdf\xc8\xeb\xc2\xd8\xc3\xc9\xcc\xd9\xc4\xc2\xc3\x83\xcb\xdf\xcc\xc0\xc8\xda\xc2\xdf\xc6\x82\xee\xc2\xdf\xc8\xeb\xc2\xd8\xc3\xc9\xcc\xd9\xc4\xc2\xc3\xad",
        // "glob" / M(Xor3) / S(12) / L(4)
        "\x7b\x70\x73\x7e\x1c\xc5\xc6\xa3\x4c\x8d\x03\x18\xd7\x17\xdc\xf8",
        // "IOObjectRelease" / M(Xor4) / S(0) / L(15)
        "\x49\x4f\x4f\x62\x6a\x65\x63\x74\x52\x65\x6c\x65\x61\x73\x65\x00",
        // "CC_SHA1_Update" / M(Xor4) / S(243) / L(14)
        "\x73\x73\x6f\x63\x78\x71\x01\x6f\x65\x40\x54\x51\x44\x55\x30\x79",
        // "CFStringGetFileSystemRepresentation" / M(Xor2) / S(204) / L(35)
        "\xab\xae\xbb\x9c\x9a\x81\x86\x8f\xaf\x8d\x9c\xae\x81\x84\x8d\xbb\x91\x9b\x9c\x8d\x85\xba\x8d\x98\x9a\x8d\x9b\x8d\x86\x9c\x89\x9c\x81\x87\x86\xe8",
        // "" / M(None) / S(0) / L(0)
        "\xc3\x79\xfe\xc3\x72\x2a\x04\x42\x69\xb2\x83\xf0\xe7\xa5\xad\xb5\x8b\xfd\x5a\xe4\xa4\x81\xe0\xbd\x87\x32\x40\xbd\x5d\x6f\xf2\x09",
        // "IOIteratorNext" / M(Rot) / S(55) / L(14)
        "\x80\x86\x80\xab\x9c\xa9\x98\xab\xa6\xa9\x85\x9c\xaf\xab\x37\xd5",
        // "CFEqual" / M(Rot) / S(149) / L(7)
        "\xd8\xdb\xda\x06\x0a\xf6\x01\x95\x05\x4a\x76\x43\x6a\x9e\x65\x10",
        // "yyyy'-'MM'-'dd'T'HH':'mm':'ss'Z'" / M(Xor1) / S(99) / L(32)
        "\x1a\x1a\x1a\x1a\x44\x4e\x44\x2e\x2e\x44\x4e\x44\x07\x07\x44\x37\x44\x2b\x2b\x44\x59\x44\x0e\x0e\x44\x59\x44\x10\x10\x44\x39\x44\x63",
        // "IORegistryEntryGetParentEntry" / M(Xor4) / S(174) / L(29)
        "\x9d\x9b\x86\xb1\xb3\xbd\xa7\xa0\xa6\xad\x91\xba\xa0\xa6\xad\x93\xb1\xa0\x84\xb5\xa6\xb1\xba\xa0\x91\xba\xa0\xa6\xad\xd4\x5b\x4e\x15\xa6\xe9\xd7\x99\x7b",
        // "X509_get_ext_by_OBJ" / M(Rot) / S(69) / L(19)
        "\x9d\x7a\x75\x7e\xa4\xac\xaa\xb9\xa4\xaa\xbd\xb9\xa4\xa7\xbe\xa4\x94\x87\x8f\x45",
        // "EVP_DigestInit" / M(Xor1) / S(215) / L(14)
        "\x92\x81\x87\x88\x93\xbe\xb0\xb2\xa4\xa3\x9e\xb9\xbe\xa3\xd7\x53",
        // "IOIteratorNext" / M(Xor4) / S(36) / L(14)
        "\x09\x0f\x09\x34\x25\x32\x21\x34\x2f\x32\x0e\x25\x38\x34\x40\x7a",
        // "" / M(None) / S(0) / L(0)
        "\xda\x1e\x0d\x9a\x79\x2a\xb7\x98\x99\x0a\xa0\x6a\x74\x0d\x7b\xb6\x6a\xc2\x71\x91\x78\x82\xfc\xa3\x2e\x25\xa6\x89\x38\xff\x74\xdc",
        // "CFBundleShortVersionString" / M(Xor4) / S(63) / L(26)
        "\xde\xdb\xdf\xe8\xf3\xf9\xf1\xf8\xce\xf5\xf2\xef\xe9\xcb\xf8\xef\xee\xf4\xf2\xf3\xce\xe9\xef\xf4\xf3\xfa\x9d\x1c\x9f\x92\xda\xec\xa6\x17\x2f",
        // "SecItemCopyMatching" / M(Xor4) / S(139) / L(19)
        "\x8f\xb9\xbf\x95\xa8\xb9\xb1\x9f\xb3\xac\xa5\x91\xbd\xa8\xbf\xb4\xb5\xb2\xbb\xdc",
        // "" / M(None) / S(0) / L(0)
        "\xca\x34\x2f\x6d\x68\xfe\x7d\x50\xf9\x67\x47\xbc\x8f\x8c\xa3\xaa\xc2\x70\x79\x58\xbd\x72\x06\xbf\x0d\x79\x8c\x9e\x9b\x80\xdc\xea",
        // "receipt" / M(Xor4) / S(91) / L(7)
        "\xc2\xd5\xd3\xd5\xd9\xc0\xc4\xb0\x2b\xf6\x6c\x07\xba\x0f\x95\xbb",
        // "setDelegate:" / M(Rot) / S(100) / L(12)
        "\xd7\xc9\xd8\xa8\xc9\xd0\xc9\xcb\xc5\xd8\xc9\x9e\x64\x0b\x4a\x0e",
        // "CFReadStreamOpen" / M(Xor2) / S(153) / L(16)
        "\xcb\xce\xda\xed\xe9\xec\xdb\xfc\xfa\xed\xe9\xe5\xc7\xf8\xed\xe6\x88",
        // "_MASReceipt" / M(Rot) / S(229) / L(11)
        "\x44\x32\x26\x38\x37\x4a\x48\x4a\x4e\x55\x59\xe5\xf5\xc1\x44\xe5",
        // "CFDateFormatterCreate" / M(Xor3) / S(131) / L(21)
        "\xda\xdf\xdd\xf8\xed\xfc\xdf\xf6\xeb\xf4\xf8\xed\xed\xfc\xeb\xda\xeb\xfc\xf8\xed\xfc\x99",
        // "X509_free" / M(Xor4) / S(233) / L(9)
        "\xc8\xa5\xa0\xa9\xcf\xf6\xe2\xf5\xf5\x90\x4e\x6f\x5a\x12\xec\x17",
        // "2.0.4" / M(Rot) / S(10) / L(5)
        "\x3c\x38\x3a\x38\x3e\x0a\x5d\x6c\xc7\x78\x36\xca\x95\xb2\xf3\x68",
        // "CFDateFormatterCreate" / M(Xor4) / S(8) / L(21)
        "\xf3\xf6\xf4\xd1\xc4\xd5\xf6\xdf\xc2\xdd\xd1\xc4\xc4\xd5\xc2\xf3\xc2\xd5\xd1\xc4\xd5\xb0",
        // "PKCS7_verify" / M(Rot) / S(52) / L(12)
        "\x84\x7f\x77\x87\x6b\x93\xaa\x99\xa6\x9d\x9a\xad\x34\x57\xfc\x5c",
        // "SHA1" / M(Xor2) / S(253) / L(4)
        "\xbe\xa5\xac\xdc\xed\x71\x48\x9d\xb3\x19\xe2\x55\xf8\xdb\xff\x21",
        // "X509_NAME_get_text_by_NID" / M(Xor2) / S(46) / L(25)
        "\x54\x39\x3c\x35\x53\x42\x4d\x41\x49\x53\x6b\x69\x78\x53\x78\x69\x74\x78\x53\x6e\x75\x53\x42\x45\x48\x0c\x9c\xcc\xcd\x16\x74\x7f\x82\xcd",
        // "CFURLCreateWithFileSystemPathRelativeToBase" / M(Xor3) / S(242) / L(43)
        "\x65\x60\x73\x74\x6a\x65\x54\x43\x47\x52\x43\x71\x4f\x52\x4e\x60\x4f\x4a\x43\x75\x5f\x55\x52\x43\x4b\x76\x47\x52\x4e\x74\x43\x4a\x47\x52\x4f\x50\x43\x72\x49\x64\x47\x55\x43\x26\x2f\x0c\x65\x1d\x52\xdb\xa6\x83",
        // "CFArrayCreateMutable" / M(Xor1) / S(245) / L(20)
        "\xb6\xb3\xb4\x87\x87\x94\x8c\xb6\x87\x90\x94\x81\x90\xb8\x80\x81\x94\x97\x99\x90\xf5",
        // "CFNumberCreate" / M(Xor4) / S(22) / L(14)
        "\x23\x26\x2e\x15\x0d\x02\x05\x12\x23\x12\x05\x01\x14\x05\x60\xd2",
        // "1.2.840.113635.100.6.11.1" / M(Xor3) / S(207) / L(25)
        "\xc0\xdf\xc3\xdf\xc9\xc5\xc1\xdf\xc0\xc0\xc2\xc7\xc2\xc4\xdf\xc0\xc1\xc1\xdf\xc7\xdf\xc0\xc0\xdf\xc0\xf1\xe1\x8f\x71\x29\x9f\x23\x57\x46",
        // "" / M(None) / S(0) / L(0)
        "\x1f\x2d\x42\xc6\xca\xf1\xf8\xa7\xdd\x11\x59\x10\x98\x73\xa3\x2d\x1f\xca\xe1\x5c\x1f\xeb\xcd\xf4\x62\x5b\xa2\xe8\x64\xa4\x94\x8d",
        // "kCFDateFormatterTimeZone" / M(Xor3) / S(129) / L(24)
        "\xc9\xe1\xe4\xe6\xc3\xd6\xc7\xe4\xcd\xd0\xcf\xc3\xd6\xd6\xc7\xd0\xf6\xcb\xcf\xc7\xf8\xcd\xcc\xc7\xa2\x42\x5b\x5b\x78\x32\x34\x7e\xe7",
        // "kSecMatchSearchList" / M(Xor3) / S(135) / L(19)
        "\xf0\xc8\xfe\xf8\xd6\xfa\xef\xf8\xf3\xc8\xfe\xfa\xe9\xf8\xf3\xd7\xf2\xe8\xef\x9b",
        // "kSecMatchLimitAll" / M(Xor4) / S(125) / L(17)
        "\xa1\x99\xaf\xa9\x87\xab\xbe\xa9\xa2\x86\xa3\xa7\xa3\xbe\x8b\xa6\xa6\xca",
        // "" / M(None) / S(0) / L(0)
        "\x6d\xfe\xbd\xb1\xdc\x72\xa0\x15\x00\x41\x41\x4e\xb0\x06\x4a\x45\xd9\x91\x75\xe2\x7a\x7f\xb0\xcd\xa6\x0f\xa0\x8f\x2a\x4b\x00\x79",
        // "setDelegate:" / M(Xor3) / S(125) / L(12)
        "\xfe\xe8\xf9\xc9\xe8\xe1\xe8\xea\xec\xf9\xe8\xb7\x8d\x49\x40\x1f",
        // "X509_STORE_new" / M(Xor3) / S(34) / L(14)
        "\x6a\x07\x02\x0b\x6d\x61\x66\x7d\x60\x77\x6d\x5c\x57\x45\x32\x5d",
        // "" / M(None) / S(0) / L(0)
        "\xf8\x33\xb4\x04\x9b\xe3\xbd\x1c\xc4\x16\x01\x0a\x29\x8a\x8e\x8d\xa3\x8d\xc8\x07\x65\xf7\xe2\x25\xb0\x2d\x6c\xf9\xc3\xb6\xf5\x18",
        // "IOMACAddress" / M(Xor2) / S(156) / L(12)
        "\xc5\xc3\xc1\xcd\xcf\xcd\xe8\xe8\xfe\xe9\xff\xff\x8c\x5d\x54\x82",
        // "CFDictionaryGetValue" / M(Rot) / S(73) / L(20)
        "\x8c\x8f\x8d\xb2\xac\xbd\xb2\xb8\xb7\xaa\xbb\xc2\x90\xae\xbd\x9f\xaa\xb5\xbe\xae\x49",
        // "1.2.840.113635.100.6.11.1" / M(Xor2) / S(122) / L(25)
        "\x69\x76\x6a\x76\x60\x6c\x68\x76\x69\x69\x6b\x6e\x6b\x6d\x76\x69\x68\x68\x76\x6e\x76\x69\x69\x76\x69\x58\xfe\x42\x2b\x6f\x93\x4d\x4d\xc6",
        // "PKCS7_get0_signers" / M(Xor4) / S(42) / L(18)
        "\x4e\x55\x5d\x4d\x29\x41\x79\x7b\x6a\x2e\x41\x6d\x77\x79\x70\x7b\x6c\x6d\x1e",
        // "" / M(None) / S(0) / L(0)
        "\x66\x79\xe6\xd8\x68\x67\x86\x35\xf4\x21\x46\xc7\x13\x78\x2b\xc5\x5b\x76\xcf\xa7\x3f\x69\xbe\x1b\xa1\x17\x9f\x88\xec\x94\x56\x50",
        // "SecItemCopyMatching" / M(Rot) / S(0) / L(19)
        "\x53\x65\x63\x49\x74\x65\x6d\x43\x6f\x70\x79\x4d\x61\x74\x63\x68\x69\x6e\x67\x00",
        // "CFDateFormatterSetFormat" / M(Rot) / S(0) / L(24)
        "\x43\x46\x44\x61\x74\x65\x46\x6f\x72\x6d\x61\x74\x74\x65\x72\x53\x65\x74\x46\x6f\x72\x6d\x61\x74\x00\x89\xf2\x48\xa7\x92\x5a\xcf\xdc",
        // "" / M(None) / S(0) / L(0)
        "\x08\x89\x22\x25\xfc\x34\xe8\xd2\x39\x51\x92\x28\x27\x99\x65\x48\xf5\xf0\x0e\x83\xfc\x45\xdf\x5c\x55\x17\x54\xd0\x8c\x69\x19\x73",
        // "CFRelease" / M(Xor2) / S(47) / L(9)
        "\x7c\x79\x6d\x5a\x53\x5a\x5e\x4c\x5a\x3f\xc9\xc8\x2c\x8c\x8d\x7c",
        // "" / M(None) / S(0) / L(0)
        "\x8d\xca\xa2\x69\x56\x05\x2e\xc5\xfb\x72\x62\xb6\x47\x0e\x7a\x61\x70\x86\xac\xc7\x33\x0e\xd7\x6a\xb2\xed\xdb\x62\xf6\x63\x23\x21",
        // "CFArrayAppendValue" / M(Xor2) / S(54) / L(18)
        "\x66\x63\x64\x57\x57\x44\x5c\x64\x55\x55\x40\x4b\x41\x73\x44\x49\x50\x40\x25",
        // "CFBundleGetIdentifier" / M(Rot) / S(200) / L(21)
        "\x0b\x0e\x0a\x3d\x36\x2c\x34\x2d\x0f\x2d\x3c\x11\x2c\x2d\x36\x3c\x31\x2e\x31\x2d\x3a\xc8",
        // "" / M(None) / S(0) / L(0)
        "\x6c\xfd\xa6\x76\xb4\x55\x37\x79\xe8\xc9\xdc\xf5\x77\x3b\x5e\xa5\x25\xf0\xb7\x31\xcb\x63\x1a\x10\x67\xf6\xe1\xff\xf3\x5d\xcd\x46",
        // "dlsym" / M(Xor4) / S(162) / L(5)
        "\x44\x4c\x53\x59\x4d\x20\x88\x10\xd4\x15\x3f\xe2\x8e\x01\x13\x95",
        // "" / M(None) / S(0) / L(0)
        "\xe2\xc4\x04\xa2\xde\x34\xab\xbd\xdc\xe7\x64\xa6\x52\x84\xf6\x2e\x09\x49\xd4\x86\x2a\xbd\x6d\xa1\xbe\xf0\x23\x9f\x4a\x5a\x7a\xe9",
        // "/System/Library/Frameworks/AppKit.framework/AppKit" / M(Xor2) / S(45) / L(50)
        "\x31\x4d\x67\x6d\x6a\x7b\x73\x31\x52\x77\x7c\x6c\x7f\x6c\x67\x31\x58\x6c\x7f\x73\x7b\x69\x71\x6c\x75\x6d\x31\x5f\x6e\x6e\x55\x77\x6a\x30\x78\x6c\x7f\x73\x7b\x69\x71\x6c\x75\x31\x5f\x6e\x6e\x55\x77\x6a\x1e",
        // "init" / M(Xor2) / S(178) / L(4)
        "\xcb\xcc\xcb\xd6\xa2\x06\xfb\x67\x78\x91\x3c\x0a\xb8\x9b\xbc\x81",
        // "ASN1_get_object" / M(Xor4) / S(180) / L(15)
        "\x01\x13\x0e\x71\x1f\x27\x25\x34\x1f\x2f\x22\x2a\x25\x23\x34\x40",
        // "CFReadStreamRead" / M(Xor2) / S(35) / L(16)
        "\x71\x74\x60\x57\x53\x56\x61\x46\x40\x57\x53\x5f\x60\x57\x53\x56\x32",
        // "PKCS7_free" / M(Xor1) / S(153) / L(10)
        "\xc9\xd2\xda\xca\xae\xc6\xff\xeb\xfc\xfc\x99\x20\x69\x6f\xd4\xae",
        // "sel_registerName" / M(Rot) / S(83) / L(16)
        "\xc6\xb8\xbf\xb2\xc5\xb8\xba\xbc\xc6\xc7\xb8\xc5\xa1\xb4\xc0\xb8\x53",
        // "objc_msgSend" / M(Xor3) / S(245) / L(12)
        "\x6a\x67\x6f\x66\x5a\x68\x76\x62\x56\x60\x6b\x61\x05\x2e\x55\x0c",
        // "dlopen" / M(Xor3) / S(91) / L(6)
        "\x0f\x07\x04\x1b\x0e\x05\x6b\xfe\xe6\x4f\x77\xa0\x07\x9a\x58\xec",
        // "BIO_new" / M(Xor4) / S(46) / L(7)
        "\xa2\xa9\xaf\xbf\x8e\x85\x97\xe0\x69\x31\xbe\x0f\xf5\x95\x4e\x27",
        // "kCFDateFormatterTimeZone" / M(Rot) / S(98) / L(24)
        "\xcd\xa5\xa8\xa6\xc3\xd6\xc7\xa8\xd1\xd4\xcf\xc3\xd6\xd6\xc7\xd4\xb6\xcb\xcf\xc7\xbc\xd1\xd0\xc7\x62\xec\xb9\xe4\xc9\xfd\x0a\xce\xa6",
        // "kCFDateFormatterTimeZone" / M(Xor4) / S(54) / L(24)
        "\x9d\xb5\xb0\xb2\x97\x82\x93\xb0\x99\x84\x9b\x97\x82\x82\x93\x84\xa2\x9f\x9b\x93\xac\x99\x98\x93\xf6\x90\x67\x9b\x14\x14\x01\x67\xe9",
        // "start" / M(Xor2) / S(162) / L(5)
        "\xc1\xc6\xd3\xc0\xc6\xb2\x50\xc8\xb9\x1f\xda\xd4\x4b\x07\xef\x37",
        // "IOBSDNameMatching" / M(Xor4) / S(128) / L(17)
        "\x49\x4f\x42\x53\x44\x4e\x61\x6d\x65\x4d\x61\x74\x63\x68\x69\x6e\x67\x00",
        // "" / M(None) / S(0) / L(0)
        "\x74\x2e\x77\xee\xc4\xd9\x9d\x3c\x08\xd7\x6d\xfb\x57\xa5\xed\x89\x78\x89\x30\x2a\x66\x37\x4b\xb2\x95\x28\x6e\x24\x44\x3c\x84\x15",
        // "CFReadStreamRead" / M(Xor4) / S(158) / L(16)
        "\x3d\x38\x2c\x1b\x1f\x1a\x2d\x0a\x0c\x1b\x1f\x13\x2c\x1b\x1f\x1a\x7e",
        // "611E5B662C593A08FF58D14AE22452D198DF6C60" / M(Xor4) / S(222) / L(40)
        "\x48\x4f\x4f\x3b\x4b\x3c\x48\x48\x4c\x3d\x4b\x47\x4d\x3f\x4e\x46\x38\x38\x4b\x46\x3a\x4f\x4a\x3f\x3b\x4c\x4c\x4a\x4b\x4c\x3a\x4f\x47\x46\x3a\x38\x48\x3d\x48\x4e\x7e\x60\x44\x5a\x14\x91\x90\xb8\x67",
        // "OpenSSL_add_all_digests" / M(Xor2) / S(92) / L(23)
        "\x33\x0c\x19\x12\x2f\x2f\x30\x23\x1d\x18\x18\x23\x1d\x10\x10\x23\x18\x15\x1b\x19\x0f\x08\x0f\x7c\x03\xd1\x44\x0c\x1f\x12\xb3\xa6",
        // "" / M(None) / S(0) / L(0)
        "\xda\x01\x72\x9c\x36\xd0\x41\x98\x58\x04\x01\x2e\x82\x24\x12\xa6\xbb\xaa\x68\x27\xd5\x1c\x1a\x4c\x34\x64\xd0\xa5\x27\x4e\x12\x53",
        // "sel_registerName" / M(Rot) / S(211) / L(16)
        "\x46\x38\x3f\x32\x45\x38\x3a\x3c\x46\x47\x38\x45\x21\x34\x40\x38\xd3",
        // "CFArrayGetValueAtIndex" / M(Rot) / S(169) / L(22)
        "\xec\xef\xea\x1b\x1b\x0a\x22\xf0\x0e\x1d\xff\x0a\x15\x1e\x0e\xea\x1d\xf2\x17\x0d\x0e\x21\xa9",
        // "X509_free" / M(Xor3) / S(177) / L(9)
        "\x99\xf4\xf1\xf8\x9e\xa7\xb3\xa4\xa4\xc1\x18\x71\x6a\x4e\xc9\x90",
        // "" / M(None) / S(0) / L(0)
        "\xdc\xb0\x23\x6d\xff\xa3\xc2\x93\xf3\xa8\xc6\x5a\x50\x6c\x9a\xef\x66\x22\xff\x87\xdf\x5b\xc4\xee\x8c\x12\xda\xf1\xda\x4f\xe0\x04",
        // "CFBundleGetMainBundle" / M(Xor3) / S(209) / L(21)
        "\xa4\xa1\xa5\x92\x89\x83\x8b\x82\xa0\x82\x93\xaa\x86\x8e\x89\xa5\x92\x89\x83\x8b\x82\xe7",
        // "CFBundleGetValueForInfoDictionaryKey" / M(Rot) / S(113) / L(36)
        "\xb4\xb7\xb3\xe6\xdf\xd5\xdd\xd6\xb8\xd6\xe5\xc7\xd2\xdd\xe6\xd6\xb7\xe0\xe3\xba\xdf\xd7\xe0\xb5\xda\xd4\xe5\xda\xe0\xdf\xd2\xe3\xea\xbc\xd6\xea\x71",
        // "BIO_write" / M(Xor2) / S(71) / L(9)
        "\x15\x1e\x18\x08\x20\x25\x3e\x23\x32\x57\x2b\xc5\x5b\x76\xcf\xa7",
        // "Contents/_MASReceipt/receipt" / M(Rot) / S(142) / L(28)
        "\xd1\xfd\xfc\x02\xf3\xfc\x02\x01\xbd\xed\xdb\xcf\xe1\xe0\xf3\xf1\xf3\xf7\xfe\x02\xbd\x00\xf3\xf1\xf3\xf7\xfe\x02\x8e\x30\x13\x39\xe2\x6b\x7b\x72\x59",
        // "CFURLCreateFromFileSystemRepresentation" / M(Xor1) / S(41) / L(39)
        "\x6a\x6f\x7c\x7b\x65\x6a\x5b\x4c\x48\x5d\x4c\x6f\x5b\x46\x44\x6f\x40\x45\x4c\x7a\x50\x5a\x5d\x4c\x44\x7b\x4c\x59\x5b\x4c\x5a\x4c\x47\x5d\x48\x5d\x40\x46\x47\x29\x56\x95\x92\xed\x41\x15\x27\x29",
        // "CFDateFormatterCreateDateFromString" / M(Xor4) / S(109) / L(35)
        "\x17\x12\x10\x35\x20\x31\x12\x3b\x26\x39\x35\x20\x20\x31\x26\x17\x26\x31\x35\x20\x31\x10\x35\x20\x31\x12\x26\x3b\x39\x07\x20\x26\x3d\x3a\x33\x54",
        // "exit" / M(Rot) / S(128) / L(4)
        "\xe5\xf8\xe9\xf4\x80\xc2\xe2\x33\xa3\x2f\x59\x89\x02\x92\x1c\x2f",
        // "" / M(None) / S(0) / L(0)
        "\x6c\xbe\x3e\x9f\xbf\xd8\x03\x8b\xb2\xa8\x23\xc4\xa8\xef\x73\x3d\x63\x2d\x8d\x5b\xda\x44\x4f\x8f\x9e\x6a\xe6\x7e\x5a\x63\x36\xae",
        // "" / M(None) / S(0) / L(0)
        "\xd0\xff\xb8\x9e\xbe\x53\xce\x87\xea\xfe\x5b\x30\xf8\xdd\x27\x44\x66\x6c\x75\xac\xd9\xa2\xfc\x9d\x56\xf6\xae\x09\x46\x06\x21\x75",
        // "setjmp" / M(Xor4) / S(70) / L(6)
        "\x13\x05\x14\x0a\x0d\x10\x60\x1e\x91\x74\xc3\xfa\x0b\x29\x52\xfc",
        // "CFReadStreamCreateWithFile" / M(Xor1) / S(70) / L(26)
        "\x05\x00\x14\x23\x27\x22\x15\x32\x34\x23\x27\x2b\x05\x34\x23\x27\x32\x23\x11\x2f\x32\x2e\x00\x2f\x2a\x23\x46\xa5\xaf\xf4\xee\x66\x6f\x8c\x12",
        // "IORegistryEntryCreateCFProperty" / M(Xor4) / S(181) / L(31)
        "\xe9\xef\xf2\xc5\xc7\xc9\xd3\xd4\xd2\xd9\xe5\xce\xd4\xd2\xd9\xe3\xd2\xc5\xc1\xd4\xc5\xe3\xe6\xf0\xd2\xcf\xd0\xc5\xd2\xd4\xd9\xa0",
        // "CFReadStreamClose" / M(Xor3) / S(210) / L(17)
        "\xa7\xa2\xb6\x81\x85\x80\xb7\x90\x96\x81\x85\x89\xa7\x88\x8b\x97\x81\xe4",
        // "SecKeychainSearchCreateFromAttributes" / M(Xor4) / S(41) / L(37)
        "\x45\x73\x75\x5d\x73\x6f\x75\x7e\x77\x7f\x78\x45\x73\x77\x64\x75\x7e\x55\x64\x73\x77\x62\x73\x50\x64\x79\x7b\x57\x62\x62\x64\x7f\x74\x63\x62\x73\x65\x16",
        // "PKCS7_verify" / M(Rot) / S(168) / L(12)
        "\xf8\xf3\xeb\xfb\xdf\x07\x1e\x0d\x1a\x11\x0e\x21\xa8\x64\x5b\xf3",
        // "CFDateCreate" / M(Xor4) / S(123) / L(12)
        "\xf3\xf6\xf4\xd1\xc4\xd5\xf3\xc2\xd5\xd1\xc4\xd5\xb0\xec\x30\xd1",
        // "CC_SHA1_Init" / M(Rot) / S(18) / L(12)
        "\x55\x55\x71\x65\x5a\x53\x43\x71\x5b\x80\x7b\x86\x12\x0e\xee\xfd",
        // "CFStringCreateWithBytes" / M(Xor3) / S(189) / L(23)
        "\x9e\x9b\x8e\xa9\xaf\xb4\xb3\xba\x9e\xaf\xb8\xbc\xa9\xb8\x8a\xb4\xa9\xb5\x9f\xa4\xa9\xb8\xae\xdd\x05\x44\x6b\xd5\x9a\x2e\x90\xdd",
        // "CFBundleGetMainBundle" / M(Xor3) / S(201) / L(21)
        "\x9c\x99\x9d\xaa\xb1\xbb\xb3\xba\x98\xba\xab\x92\xbe\xb6\xb1\x9d\xaa\xb1\xbb\xb3\xba\xdf",
        // "" / M(None) / S(0) / L(0)
        "\xbf\xc5\xf8\x75\xcb\x3f\x28\xde\x33\x03\xe2\x24\xfe\xb6\xc9\x7e\x75\x03\xb5\xe3\x16\x98\xf5\x71\x62\x65\x05\x49\xa4\x2e\x13\xeb",
        // "CFNumberCreate" / M(Xor2) / S(155) / L(14)
        "\xc8\xcd\xc5\xfe\xe6\xe9\xee\xf9\xc8\xf9\xee\xea\xff\xee\x8b\x1d",
        // "" / M(None) / S(0) / L(0)
        "\x2c\x56\x96\xef\x68\x0e\x5b\xf3\x32\xce\x30\xfa\x24\x40\xfb\xb5\x9c\x4c\xba\xf0\xfb\xc7\xfe\xe2\x10\xa6\xd3\xbd\xeb\x16\x5f\x73",
        // "sk_free" / M(Xor2) / S(41) / L(7)
        "\x4a\x52\x66\x5f\x4b\x5c\x5c\x39\x90\x26\x50\xc1\x2f\xc1\xa6\x50",
        // "" / M(None) / S(0) / L(0)
        "\x8b\x88\xc6\xc7\x54\x99\x84\x6c\x8c\x27\x10\x00\xc7\x54\x81\xda\x08\x8b\x62\x0f\x13\x43\xab\x96\xee\xf2\xbc\xa4\x0c\x56\x6b\x8e",
        // "" / M(None) / S(0) / L(0)
        "\x5a\x43\xfd\x01\x43\x1c\x19\xb7\xf4\x4f\x7a\xf0\x3f\xa5\x74\x45\x63\x0a\xc8\x95\x0b\xc0\x61\xde\xfb\x1e\xfc\xb5\x52\x09\x3f\x76",
        // "sk_free" / M(Xor4) / S(218) / L(7)
        "\xd3\xcb\xff\xc6\xd2\xc5\xc5\xa0\xed\xc6\xcb\xce\x67\xf6\x2c\x11",
        // "strncmp" / M(Xor3) / S(150) / L(7)
        "\xd5\xd2\xd4\xc8\xc5\xcb\xd6\xa6\x19\xbc\x72\x88\x80\x99\xde\x9b",
        // "globfree" / M(Xor4) / S(40) / L(8)
        "\xe7\xec\xef\xe2\xe6\xf2\xe5\xe5\x80\xad\x82\x48\x0e\x7c\x26\xa0",
        // "globfree" / M(Xor4) / S(141) / L(8)
        "\xb7\xbc\xbf\xb2\xb6\xa2\xb5\xb5\xd0\xa2\xd0\x82\x9d\x7d\x35\xb6",
        // "PKCS7_free" / M(Xor3) / S(198) / L(10)
        "\x86\x9d\x95\x85\xe1\x89\xb0\xa4\xb3\xb3\xd6\x87\x32\x29\xb7\x4f",
        // "X509_STORE_new" / M(Xor3) / S(184) / L(14)
        "\x90\xfd\xf8\xf1\x97\x9b\x9c\x87\x9a\x8d\x97\xa6\xad\xbf\xc8\x12",
        // "%02X" / M(Xor1) / S(187) / L(4)
        "\x9e\x8b\x89\xe3\xbb\x9f\x89\xe5\xf7\x97\x82\xab\xb4\x8e\x57\x12",
        // "61:1E:5B:66:2C:59:3A:08:FF:58:D1:4A:E2:24:52:D1:98:DF:6C:60" / M(Xor2) / S(53) / L(59)
        "\x47\x40\x4b\x40\x34\x4b\x44\x33\x4b\x47\x47\x4b\x43\x32\x4b\x44\x48\x4b\x42\x30\x4b\x41\x49\x4b\x37\x37\x4b\x44\x49\x4b\x35\x40\x4b\x45\x30\x4b\x34\x43\x4b\x43\x45\x4b\x44\x43\x4b\x35\x40\x4b\x48\x49\x4b\x35\x37\x4b\x47\x32\x4b\x47\x41\x71\xe4\x6e\xa0\xa2\x11\x3b\xed\x46",
        // "IOMasterPort" / M(Xor4) / S(123) / L(12)
        "\xf9\xff\xfd\xd1\xc3\xc4\xd5\xc2\xe0\xdf\xc2\xc4\xb0\xae\x9c\xfc",
        // "kSecClassCertificate" / M(Xor1) / S(135) / L(20)
        "\xec\xd4\xe2\xe4\xc4\xeb\xe6\xf4\xf4\xc4\xe2\xf5\xf3\xee\xe1\xee\xe4\xe6\xf3\xe2\x87",
        // "CFDictionarySetValue" / M(Xor3) / S(38) / L(20)
        "\x78\x7d\x7f\x52\x58\x4f\x52\x54\x55\x5a\x49\x42\x68\x5e\x4f\x6d\x5a\x57\x4e\x5e\x3b",
        // "" / M(None) / S(0) / L(0)
        "\x15\x37\xb7\x36\x39\x93\x29\x75\x53\x45\x0b\xdb\x25\x24\xa8\x3d\xc3\x16\xab\x03\x2f\xdf\xe6\xe1\xcf\x9e\xa0\xe2\x81\x27\x64\x24",
        // "PKCS7_free" / M(Rot) / S(226) / L(10)
        "\x32\x2d\x25\x35\x19\x41\x48\x54\x47\x47\xe2\x27\xe2\x1a\xfa\x37",
        // "X509_STORE_add_cert" / M(Xor4) / S(12) / L(19)
        "\xa8\xc5\xc0\xc9\xaf\xa3\xa4\xbf\xa2\xb5\xaf\x91\x94\x94\xaf\x93\x95\x82\x84\xf0",
        // "kSecMatchLimitAll" / M(Xor4) / S(239) / L(17)
        "\xa5\x9d\xab\xad\x83\xaf\xba\xad\xa6\x82\xa7\xa3\xa7\xba\x8f\xa2\xa2\xce",
        // "IOServiceGetMatchingServices" / M(Xor1) / S(35) / L(28)
        "\x6a\x6c\x70\x46\x51\x55\x4a\x40\x46\x64\x46\x57\x6e\x42\x57\x40\x4b\x4a\x4d\x44\x70\x46\x51\x55\x4a\x40\x46\x50\x23\x04\xd7\x24\xb6\xba\x08\x7d\x55",
        // "" / M(None) / S(0) / L(0)
        "\xc6\x44\x08\x95\xb8\x83\x04\xca\x8b\x38\x1b\x76\x55\xec\x30\xd1\xf9\x2a\x4a\xa3\x93\x20\x02\x81\xfa\xfb\xb0\x55\xbf\xa4\x80\xd1",
        // "Contents/_MASReceipt/receipt" / M(Xor2) / S(30) / L(28)
        "\x78\x54\x55\x4f\x5e\x55\x4f\x48\x14\x64\x76\x7a\x68\x69\x5e\x58\x5e\x52\x4b\x4f\x14\x49\x5e\x58\x5e\x52\x4b\x4f\x3b\x19\xa4\x65\x77\xcd\x80\xa8\x69",
        // "SHA1" / M(Rot) / S(66) / L(4)
        "\x95\x8a\x83\x73\x42\xc9\x80\x10\x15\xb4\x1e\x3a\x0b\x09\x95\x89",
        // "SKReceiptRefreshRequest" / M(Xor4) / S(74) / L(23)
        "\x13\x0b\x12\x25\x23\x25\x29\x30\x34\x12\x25\x26\x32\x25\x33\x28\x12\x25\x31\x35\x25\x33\x34\x40\xe7\xa5\xad\xb5\x8b\xfd\x5a\xe4",
        // "CC_SHA1_Init" / M(Rot) / S(54) / L(12)
        "\x79\x79\x95\x89\x7e\x77\x67\x95\x7f\xa4\x9f\xaa\x36\x3a\xc3\xf3",
        // "IORegistryEntryGetParentEntry" / M(Xor4) / S(2) / L(29)
        "\x05\x03\x1e\x29\x2b\x25\x3f\x38\x3e\x35\x09\x22\x38\x3e\x35\x0b\x29\x38\x1c\x2d\x3e\x29\x22\x38\x09\x22\x38\x3e\x35\x4c\x53\xaf\x99\xde\xb5\x5a\x47\x29",
        // "CFReadStreamOpen" / M(Rot) / S(150) / L(16)
        "\xd9\xdc\xe8\xfb\xf7\xfa\xe9\x0a\x08\xfb\xf7\x03\xe5\x06\xfb\x04\x96",
        // "glob_b" / M(Xor2) / S(186) / L(6)
        "\xcd\xc6\xc5\xc8\xf5\xc8\xaa\x43\x5c\x83\x60\x8d\xfe\xbf\x29\x89",
        // "SecKeychainSearchCopyNext" / M(Xor3) / S(129) / L(25)
        "\xf0\xc6\xc0\xe8\xc6\xda\xc0\xcb\xc2\xca\xcd\xf0\xc6\xc2\xd1\xc0\xcb\xe0\xcc\xd3\xda\xed\xc6\xdb\xd7\xa3\xbd\x03\x22\xc1\xb4\x70\x35\xa3",
        // "/System/Library/Keychains/SystemRootCertificates.keychain" / M(Rot) / S(161) / L(57)
        "\xd0\xf4\x1a\x14\x15\x06\x0e\xd0\xed\x0a\x03\x13\x02\x13\x1a\xd0\xec\x06\x1a\x04\x09\x02\x0a\x0f\x14\xd0\xf4\x1a\x14\x15\x06\x0e\xf3\x10\x10\x15\xe4\x06\x13\x15\x0a\x07\x0a\x04\x02\x15\x06\x14\xcf\x0c\x06\x1a\x04\x09\x02\x0a\x0f\xa1\x13\x09\xd7\x4f\xd9\x2c\x95\x8d",
        // "start" / M(Xor4) / S(110) / L(5)
        "\x93\x94\x81\x92\x94\xe0\x40\xbd\x5d\x6f\xf2\x09\xda\x1e\x0d\x9a",
        // "/usr/lib/libobjc.dylib" / M(Xor4) / S(4) / L(22)
        "\x73\x29\x2f\x2e\x73\x30\x35\x3e\x73\x30\x35\x3e\x33\x3e\x36\x3f\x72\x38\x25\x30\x35\x3e\x5c",
        // "" / M(None) / S(0) / L(0)
        "\x13\x8a\x78\x01\x88\xf3\xa6\xce\x2f\xe9\x2b\xe6\x1d\xa0\x5d\x18\xb3\xe4\x77\xe2\xc6\x9b\x0a\x34\x4a\x41\xa8\x2c\xf7\x8f\x31\xc3",
        // "it.iltofa.Turms" / M(Xor4) / S(244) / L(15)
        "\x29\x34\x6e\x29\x2c\x34\x2f\x26\x21\x6e\x14\x35\x32\x2d\x33\x40",
        // "61:1E:5B:66:2C:59:3A:08:FF:58:D1:4A:E2:24:52:D1:98:DF:6C:60" / M(Xor1) / S(24) / L(59)
        "\x2e\x29\x22\x29\x5d\x22\x2d\x5a\x22\x2e\x2e\x22\x2a\x5b\x22\x2d\x21\x22\x2b\x59\x22\x28\x20\x22\x5e\x5e\x22\x2d\x20\x22\x5c\x29\x22\x2c\x59\x22\x5d\x2a\x22\x2a\x2c\x22\x2d\x2a\x22\x5c\x29\x22\x21\x20\x22\x5c\x5e\x22\x2e\x5b\x22\x2e\x28\x18\x28\xfa\x4d\x7c\x06\xa2\x67\x07",
        // "_MASReceipt" / M(Xor2) / S(103) / L(11)
        "\x28\x3a\x36\x24\x25\x12\x14\x12\x1e\x07\x03\x77\x15\x58\x2c\x0f",
        // "SHA1_Init" / M(Xor4) / S(128) / L(9)
        "\x53\x48\x41\x31\x5f\x49\x6e\x69\x74\x00\x80\x5f\x9c\xf1\x58\x77",
        // "%02X" / M(Xor3) / S(55) / L(4)
        "\x62\x77\x75\x1f\x47\xc8\xfd\xc4\x91\x3c\x41\x35\x2c\x68\xd3\x6a",
        // "CFStringCompare" / M(Xor1) / S(114) / L(15)
        "\x31\x34\x21\x06\x00\x1b\x1c\x15\x31\x1d\x1f\x02\x13\x00\x17\x72",
        // "CFDictionarySetValue" / M(Xor3) / S(37) / L(20)
        "\x79\x7c\x7e\x53\x59\x4e\x53\x55\x54\x5b\x48\x43\x69\x5f\x4e\x6c\x5b\x56\x4f\x5f\x3a",
        // "" / M(None) / S(0) / L(0)
        "\xe7\xee\xcc\x84\x11\x3b\x85\x1b\x02\x78\x76\x9f\x3e\x21\x06\x71\x58\xf3\xff\x1e\x80\x0b\x06\x5d\x16\xd7\x7e\x91\x70\xd1\x4d\xce",
        // "IOMACAddress" / M(Xor4) / S(235) / L(12)
        "\xf9\xff\xfd\xf1\xf3\xf1\xd4\xd4\xc2\xd5\xc3\xc3\xb0\x2b\x21\x2d",
        // "" / M(None) / S(0) / L(0)
        "\xe8\xb4\xfa\x34\xf5\x89\xf2\x48\xa7\x92\x5a\xcf\xd0\x98\xf5\xdc\xb5\x29\x06\x22\xb5\x6e\xd3\x2b\x4c\x55\x66\x6a\xff\xa4\xb2\xc5",
        // "kSecClass" / M(Xor1) / S(170) / L(9)
        "\xc1\xf9\xcf\xc9\xe9\xc6\xcb\xd9\xd9\xaa\x45\x13\x5a\x16\xa6\xe4",
        // "kCFTypeDictionaryKeyCallBacks" / M(Xor1) / S(80) / L(29)
        "\x3b\x13\x16\x04\x29\x20\x35\x14\x39\x33\x24\x39\x3f\x3e\x31\x22\x29\x1b\x35\x29\x13\x31\x3c\x3c\x12\x31\x33\x3b\x23\x50\xa2\x4d\x74\x8d\x2c\xd5\x1e\xb5",
        // "" / M(None) / S(0) / L(0)
        "\x7c\x73\x51\x5e\x0d\x60\xbe\x84\x98\xe5\xe2\xe3\xd9\xdb\x74\x67\x96\x0b\x88\x0a\xd1\x04\x52\x7f\x27\x4b\x11\x91\x69\xb8\x5b\x84",
        // "CFDateCreate" / M(Rot) / S(28) / L(12)
        "\x5f\x62\x60\x7d\x90\x81\x5f\x8e\x81\x7d\x90\x81\x1c\x38\xbe\xb2",
        // "SecKeychainSearchCopyNext" / M(Xor1) / S(179) / L(25)
        "\xe0\xd6\xd0\xf8\xd6\xca\xd0\xdb\xd2\xda\xdd\xe0\xd6\xd2\xc1\xd0\xdb\xf0\xdc\xc3\xca\xfd\xd6\xcb\xc7\xb3\xe4\xe8\x97\x3a\x55\xac\x20\x3f",
        // "" / M(None) / S(0) / L(0)
        "\xaa\x8d\x51\x1c\x44\x23\xba\xa8\x1c\x0c\xaf\x3e\x04\xed\x6c\xa0\xc8\xde\x9f\xf4\x22\x88\xfe\x79\x86\xe1\x71\x47\x93\xa1\x89\xe4",
        // "EVP_get_digestbyname" / M(Rot) / S(2) / L(20)
        "\x47\x58\x52\x61\x69\x67\x76\x61\x66\x6b\x69\x67\x75\x76\x64\x7b\x70\x63\x6f\x67\x02",
        // "" / M(None) / S(0) / L(0)
        "\x56\x06\x27\xe9\x7c\x99\xc5\x5c\x80\x74\x43\x4b\x6c\x93\xa3\x2a\xad\xaa\x80\xfe\xe7\x43\x5e\xf6\x07\x3e\x8f\xdc\x4c\x62\xdd\xd4",
        // "CFDataGetLength" / M(Rot) / S(16) / L(15)
        "\x53\x56\x54\x71\x84\x71\x57\x75\x84\x5c\x75\x7e\x77\x84\x78\x10",
        // "_MASReceipt/receipt" / M(Xor4) / S(115) / L(19)
        "\xa3\xb1\xbd\xaf\xae\x99\x9f\x99\x95\x8c\x88\xd3\x8e\x99\x9f\x99\x95\x8c\x88\xfc",
        // "_MASReceipt/receipt" / M(Rot) / S(103) / L(19)
        "\xc6\xb4\xa8\xba\xb9\xcc\xca\xcc\xd0\xd7\xdb\x96\xd9\xcc\xca\xcc\xd0\xd7\xdb\x67",
        // "IORegistryEntryCreateCFProperty" / M(Rot) / S(224) / L(31)
        "\x29\x2f\x32\x45\x47\x49\x53\x54\x52\x59\x25\x4e\x54\x52\x59\x23\x52\x45\x41\x54\x45\x23\x26\x30\x52\x4f\x50\x45\x52\x54\x59\xe0",
        // "" / M(None) / S(0) / L(0)
        "\x21\x6b\x7f\xb4\x61\x4d\xde\x90\xdf\x98\xbe\xcd\x21\x44\xdf\x48\x1d\x14\x4e\xc6\xcb\xf4\x3d\xae\x70\xeb\x32\x21\x9f\x1e\x5d\x0c",
        // "kSecReturnRef" / M(Rot) / S(143) / L(13)
        "\xfa\xe2\xf4\xf2\xe1\xf4\x03\x04\x01\xfd\xe1\xf4\xf5\x8f\x4e\x37",
        // "SKReceiptRefreshRequest" / M(Xor2) / S(51) / L(23)
        "\x40\x58\x41\x76\x70\x76\x7a\x63\x67\x41\x76\x75\x61\x76\x60\x7b\x41\x76\x62\x66\x76\x60\x67\x13\xb3\xa3\x4b\x86\xa9\x58\xc9\x99",
        // "strlen" / M(Rot) / S(188) / L(6)
        "\x2f\x30\x2e\x28\x21\x2a\xbc\x7d\xa8\xb4\x91\xbd\x34\x18\xe2\xce",
        // "kCFTypeArrayCallBacks" / M(Xor1) / S(247) / L(21)
        "\x9c\xb4\xb1\xa3\x8e\x87\x92\xb6\x85\x85\x96\x8e\xb4\x96\x9b\x9b\xb5\x96\x94\x9c\x84\xf7",
        // "" / M(None) / S(0) / L(0)
        "\xb8\x42\x1e\xe3\xff\x59\x29\x46\x05\x4a\x76\x43\x6a\x9e\x65\x10\x90\x13\x1f\xb2\xf3\x0f\x3f\xb3\x84\xd2\xf7\x4f\xcf\xe1\xd1\x1d",
        // "61:1e:5b:66:2c:59:3a:08:ff:58:d1:4a:e2:24:52:d1:98:df:6c:60" / M(Xor2) / S(110) / L(59)
        "\x1c\x1b\x10\x1b\x4f\x10\x1f\x48\x10\x1c\x1c\x10\x18\x49\x10\x1f\x13\x10\x19\x4b\x10\x1a\x12\x10\x4c\x4c\x10\x1f\x12\x10\x4e\x1b\x10\x1e\x4b\x10\x4f\x18\x10\x18\x1e\x10\x1f\x18\x10\x4e\x1b\x10\x13\x12\x10\x4e\x4c\x10\x1c\x49\x10\x1c\x1a\x2a\x4c\x0a\x63\x43\xee\xea\xd8\x22",
        // "BIO_s_mem" / M(Xor2) / S(177) / L(9)
        "\xe3\xe8\xee\xfe\xd2\xfe\xcc\xc4\xcc\xa1\xf5\x18\x66\x79\xe6\xd8",
        // "ASN1_INTEGER_free" / M(Rot) / S(129) / L(17)
        "\xc2\xd4\xcf\xb2\xe0\xca\xcf\xd5\xc6\xc8\xc6\xd3\xe0\xe7\xf3\xe6\xe6\x81",
        // "CFEqual" / M(Xor4) / S(173) / L(7)
        "\x93\x96\x95\xa1\xa5\xb1\xbc\xd0\xf3\xba\x55\x28\xbd\x12\xab\x0a",
        // "Contents/_MASReceipt" / M(Rot) / S(229) / L(20)
        "\x28\x54\x53\x59\x4a\x53\x59\x58\x14\x44\x32\x26\x38\x37\x4a\x48\x4a\x4e\x55\x59\xe5",
        // "SecKeychainOpen" / M(Rot) / S(138) / L(15)
        "\xdd\xef\xed\xd5\xef\x03\xed\xf2\xeb\xf3\xf8\xd9\xfa\xef\xf8\x8a",
        // "" / M(None) / S(0) / L(0)
        "\x0d\x5b\x0e\x08\x89\xaf\xc3\xfb\xc6\x83\xae\xf9\xe6\x15\x4a\xd2\x8f\x8d\xb0\x22\x92\xbe\x19\x11\x70\x46\x63\xcd\x82\x87\x28\xc2",
        // "IORegistryEntryCreateCFProperty" / M(Xor1) / S(32) / L(31)
        "\x69\x6f\x72\x45\x47\x49\x53\x54\x52\x59\x65\x4e\x54\x52\x59\x63\x52\x45\x41\x54\x45\x63\x66\x70\x52\x4f\x50\x45\x52\x54\x59\x20",
        // "EVP_DigestInit" / M(Xor4) / S(198) / L(14)
        "\x25\x36\x30\x3f\x24\x09\x07\x05\x13\x14\x29\x0e\x09\x14\x60\x39",
        // "/usr/lib/libobjc.dylib" / M(Xor1) / S(169) / L(22)
        "\x86\xdc\xda\xdb\x86\xc5\xc0\xcb\x86\xc5\xc0\xcb\xc6\xcb\xc3\xca\x87\xcd\xd0\xc5\xc0\xcb\xa9",
        // "CC_SHA1" / M(Rot) / S(239) / L(7)
        "\x32\x32\x4e\x42\x37\x30\x20\xef\x34\xe3\xdb\xa7\xd9\x76\xa7\x8a",
        // "CFRelease" / M(Xor2) / S(21) / L(9)
        "\x46\x43\x57\x60\x69\x60\x64\x76\x60\x05\x51\x20\xab\x02\x65\x26",
        // "CFArrayGetCount" / M(Xor1) / S(76) / L(15)
        "\x0f\x0a\x0d\x3e\x3e\x2d\x35\x0b\x29\x38\x0f\x23\x39\x22\x38\x4c",
        // "CFDictionaryAddValue" / M(Xor2) / S(23) / L(20)
        "\x41\x44\x46\x6b\x61\x76\x6b\x6d\x6c\x63\x70\x7b\x43\x66\x66\x54\x63\x6e\x77\x67\x02",
        // "BIO_new" / M(Xor2) / S(148) / L(7)
        "\xc6\xcd\xcb\xdb\xea\xe1\xf3\x84\x94\x1d\x09\x4c\x6b\xec\x12\x08",
        // "X509_STORE_free" / M(Xor2) / S(11) / L(15)
        "\x43\x2e\x2b\x22\x44\x48\x4f\x54\x49\x5e\x44\x7d\x69\x7e\x7e\x1b",
        // "" / M(None) / S(0) / L(0)
        "\xd1\x2f\x57\x5a\x3c\x04\x26\x00\x7a\xd7\x29\x7a\x68\xa9\x57\xa5\xaf\xf4\xee\x66\x13\x12\x8c\x6f\x79\xee\xe0\x44\x1b\x35\xd9\xfe",
        // "" / M(None) / S(0) / L(0)
        "\x44\xcb\xb5\x0c\x6e\x2d\x34\xc5\x70\x21\x3f\x9e\x5d\x98\xf3\x1c\x88\xa8\xa3\xb3\x7b\x1c\x67\x07\xa6\x2c\x2f\xe4\xb5\x54\x1f\x40",
        // "EVP_DigestFinal" / M(Xor4) / S(182) / L(15)
        "\x25\x36\x30\x3f\x24\x09\x07\x05\x13\x14\x26\x09\x0e\x01\x0c\x60",
        // "/usr/lib/libobjc.dylib" / M(Xor1) / S(11) / L(22)
        "\x24\x7e\x78\x79\x24\x67\x62\x69\x24\x67\x62\x69\x64\x69\x61\x68\x25\x6f\x72\x67\x62\x69\x0b",
        // "OBJ_txt2obj" / M(Xor1) / S(254) / L(11)
        "\xb1\xbc\xb4\xa1\x8a\x86\x8a\xcc\x91\x9c\x94\xfe\x0e\xff\xd1\x01",
        // "" / M(None) / S(0) / L(0)
        "\x5a\x2e\x55\x6c\x0f\xd5\x62\x9f\xa8\x32\xc9\xc8\x2c\x8c\x8d\x7c\x04\x76\x27\x75\x42\x23\x65\xed\x29\x19\x4d\x31\x6d\x35\x6b\xd9",
        // "CFDataCreateMutable" / M(Xor2) / S(197) / L(19)
        "\x92\x97\x95\xb0\xa5\xb0\x92\xa3\xb4\xb0\xa5\xb4\x9c\xa4\xa5\xb0\xb3\xbd\xb4\xd1",
        // "CC_SHA1_Final" / M(Xor3) / S(150) / L(13)
        "\xe5\xe5\xf9\xf5\xee\xe7\x97\xf9\xe0\xcf\xc8\xc7\xca\xa6\x2e\xc5",
        // "RTLD_MAIN_ONLY" / M(Xor2) / S(129) / L(14)
        "\xc3\xc5\xdd\xd5\xce\xdc\xd0\xd8\xdf\xce\xde\xdf\xdd\xc8\x91\x95",
        // "IOMACAddress" / M(Xor1) / S(118) / L(12)
        "\x3f\x39\x3b\x37\x35\x37\x12\x12\x04\x13\x05\x05\x76\x0b\xfc\x6c",
        // "Apple Root CA" / M(Rot) / S(198) / L(13)
        "\x07\x36\x36\x32\x2b\xe6\x18\x35\x35\x3a\xe6\x09\x07\xc6\xd6\xe2",
        // "kSecClass" / M(Xor3) / S(53) / L(9)
        "\x2e\x16\x20\x26\x06\x29\x24\x36\x36\x45\x03\xfb\x45\xcb\xc7\xdf",
        // "CFArrayGetCount" / M(Xor1) / S(158) / L(15)
        "\xdd\xd8\xdf\xec\xec\xff\xe7\xd9\xfb\xea\xdd\xf1\xeb\xf0\xea\x9e",
        // "/System/Library/Frameworks/IOKit.framework/IOKit" / M(Xor4) / S(229) / L(48)
        "\xfa\x86\xac\xa6\xa1\xb0\xb8\xfa\x99\xbc\xb7\xa7\xb4\xa7\xac\xfa\x93\xa7\xb4\xb8\xb0\xa2\xba\xa7\xbe\xa6\xfa\x9c\x9a\x9e\xbc\xa1\xfb\xb3\xa7\xb4\xb8\xb0\xa2\xba\xa7\xbe\xfa\x9c\x9a\x9e\xbc\xa1\xd5",
        // "" / M(None) / S(0) / L(0)
        "\xfc\x07\x69\xcb\x87\x36\xfc\xb7\xa1\x6b\x90\x8b\xb4\x8d\x79\x84\xc0\xc4\xea\x74\x3c\x99\xc7\x6d\x7c\x8f\xcc\x52\xea\x31\x67\x50",
        // "exit" / M(Rot) / S(47) / L(4)
        "\x94\xa7\x98\xa3\x2f\x9f\xf4\x9a\x41\xde\xec\x74\x9e\x0b\xdd\x19",
        // "%02x" / M(Xor1) / S(37) / L(4)
        "\x00\x15\x17\x5d\x25\x06\x00\x9e\x2a\xc7\x3c\xc0\xc5\x96\xd6\x65",
        // "" / M(None) / S(0) / L(0)
        "\xd4\x87\x93\x8d\x35\x90\x12\x52\x8f\xd9\xda\x6d\x2d\x1c\x71\x5a\x36\xf8\xeb\xa4\xe9\xd3\x2c\x9c\x5b\x8c\xc4\x66\xad\x3c\x03\x4b",
        // "CFURLCreateWithFileSystemPathRelativeToBase" / M(Xor2) / S(148) / L(43)
        "\xe3\xe6\xf5\xf2\xec\xe3\xd2\xc5\xc1\xd4\xc5\xf7\xc9\xd4\xc8\xe6\xc9\xcc\xc5\xf3\xd9\xd3\xd4\xc5\xcd\xf0\xc1\xd4\xc8\xf2\xc5\xcc\xc1\xd4\xc9\xd6\xc5\xf4\xcf\xe2\xc1\xd3\xc5\xa0\xbc\xda\x6d\xa2\x30\x9d\x58\x55",
        // "OBJ_txt2obj" / M(Xor2) / S(164) / L(11)
        "\xfb\xf6\xfe\xeb\xc0\xcc\xc0\x86\xdb\xd6\xde\xb4\x2c\x33\x42\x49",
        // "CFDataCreate" / M(Xor4) / S(100) / L(12)
        "\x03\x06\x04\x21\x34\x21\x03\x32\x25\x21\x34\x25\x40\x43\xab\x96",
        // "" / M(None) / S(0) / L(0)
        "\x8b\x1b\x34\x3c\x46\x45\x45\x42\xff\x48\x57\x91\x35\x2f\xa4\x56\x74\x96\x4a\x53\xbc\x3c\x98\x62\x02\xcb\x24\x29\xdf\x16\x70\xcf",
        // "" / M(None) / S(0) / L(0)
        "\xc9\x91\x31\xbc\x77\x26\x54\x7a\x03\x0a\xfd\x04\xf9\xec\xfd\x18\xe7\x5d\x58\xcb\x42\xaa\x7f\xeb\xb6\x10\x0a\x2e\x62\x87\xfb\x08",
        // "" / M(None) / S(0) / L(0)
        "\x4c\x84\x7b\xa8\x24\xa1\x3a\x6c\x1f\xd5\xf8\xac\x26\x61\xf3\x65\x8b\xfe\xec\xd2\x0b\x6b\xee\xff\x88\x84\x82\x28\x8f\x76\x71\xaf",
        // "" / M(None) / S(0) / L(0)
        "\xec\xd5\xdf\x1b\x05\xde\x89\xe7\xc4\x84\x3d\x87\xde\x30\x5d\x7a\x42\x0b\x86\x4d\xca\xa6\x92\x60\x28\x9c\x94\xd8\x37\x85\x2b\xd4",
        // "" / M(None) / S(0) / L(0)
        "\x36\xe5\x65\xcd\x6d\x85\xcd\x1b\xb9\x81\xc1\x2b\x5f\xb2\xf8\x12\x2a\x4e\xd8\xde\xcf\xe9\xc1\xcd\xf4\xba\x44\xbd\xae\xc8\xc6\x9f",
        // "kCFBundleIdentifierKey" / M(Xor4) / S(172) / L(22)
        "\x1f\x37\x32\x36\x01\x1a\x10\x18\x11\x3d\x10\x11\x1a\x00\x1d\x12\x1d\x11\x06\x3f\x11\x0d\x74",
        // "EVP_DigestUpdate" / M(Xor2) / S(128) / L(16)
        "\xd4\xc7\xc1\xce\xd5\xf8\xf6\xf4\xe2\xe5\xc4\xe1\xf5\xf0\xe5\xf4\x91",
        // "CFDateCompare" / M(Rot) / S(198) / L(13)
        "\x09\x0c\x0a\x27\x3a\x2b\x09\x35\x33\x36\x27\x38\x2b\xc6\x66\x3f",
        // "CFDateCompare" / M(Xor1) / S(199) / L(13)
        "\x84\x81\x83\xa6\xb3\xa2\x84\xa8\xaa\xb7\xa6\xb5\xa2\xc7\x64\x24",
        // "" / M(None) / S(0) / L(0)
        "\x17\x0e\xff\x35\xa2\x0f\xa1\x55\x1b\x55\x14\xed\xce\x89\xcd\x90\x6d\x45\x68\x19\x67\xea\x71\x50\x9e\x48\x0b\xc9\xd9\xf8\x73\x16",
        // "CFTimeZoneCreateWithTimeIntervalFromGMT" / M(Rot) / S(118) / L(39)
        "\xb9\xbc\xca\xdf\xe3\xdb\xd0\xe5\xe4\xdb\xb9\xe8\xdb\xd7\xea\xdb\xcd\xdf\xea\xde\xca\xdf\xe3\xdb\xbf\xe4\xea\xdb\xe8\xec\xd7\xe2\xbc\xe8\xe5\xe3\xbd\xc3\xca\x76\x8b\xfe\xec\xd2\x0b\x6b\xee\xff",
        // "" / M(None) / S(0) / L(0)
        "\x4d\x98\x3a\x72\x46\x05\x4b\x5e\x9a\xea\xe5\x5e\x2d\xe7\xe4\xfd\x75\xe0\x22\x71\x87\x6d\x1a\x5d\xd3\xf7\x27\xa5\x2f\x0c\x65\x1d",
        // "CFAbsoluteTimeGetCurrent" / M(Xor2) / S(204) / L(24)
        "\xae\xab\xac\x8f\x9e\x82\x81\x98\x99\x88\xb9\x84\x80\x88\xaa\x88\x99\xae\x98\x9f\x9f\x88\x83\x99\xed\xb5\x93\xf3\x85\xb8\x61\xc1\x31",
        // "CFStringCreateWithCString" / M(Xor1) / S(202) / L(25)
        "\x89\x8c\x99\xbe\xb8\xa3\xa4\xad\x89\xb8\xaf\xab\xbe\xaf\x9d\xa3\xbe\xa2\x89\x99\xbe\xb8\xa3\xa4\xad\xca\xfd\x84\xa8\x28\x58\x6e\x4d\xf8",
        // "." / M(Xor3) / S(169) / L(1)
        "\x97\xb9\x39\xd8\x41\x0b\x2a\xb7\x2a\x7f\x82\x08\x2b\xe7\x33\xdf",
        // "BIO_new" / M(Xor3) / S(107) / L(7)
        "\x39\x32\x34\x24\x15\x1e\x0c\x7b\x29\x8a\x8e\x8d\xa3\x8d\xc8\x07",
        // "kCFBundleIdentifierKey" / M(Rot) / S(55) / L(22)
        "\xa2\x7a\x7d\x79\xac\xa5\x9b\xa3\x9c\x80\x9b\x9c\xa5\xab\xa0\x9d\xa0\x9c\xa9\x82\x9c\xb0\x37",
        // "strncmp" / M(Xor2) / S(164) / L(7)
        "\xc7\xc0\xc6\xda\xd7\xd9\xc4\xb4\xa8\x53\x95\x3c\x49\xa5\xec\x3d",
        // "" / M(None) / S(0) / L(0)
        "\x52\xdb\xa6\x83\x6c\xa0\xb1\x5e\x4f\x11\x63\x8d\xc1\xf5\xbe\x3b\x59\xc8\x2d\xa1\x13\x71\x91\x0e\x74\xf5\x51\x83\xf8\x1c\x89\x34",
        // "CFBundleCopyBundleURL" / M(Xor4) / S(158) / L(21)
        "\xd7\xd2\xd6\xe1\xfa\xf0\xf8\xf1\xd7\xfb\xe4\xed\xd6\xe1\xfa\xf0\xf8\xf1\xc1\xc6\xd8\x94",
        // "SKReceiptRefreshRequest" / M(Xor3) / S(57) / L(23)
        "\x0a\x12\x0b\x3c\x3a\x3c\x30\x29\x2d\x0b\x3c\x3f\x2b\x3c\x2a\x31\x0b\x3c\x28\x2c\x3c\x2a\x2d\x59\x46\x0e\xd1\xc7\x48\x28\x1f\xc6",
        // "ASN1_get_object" / M(Xor4) / S(33) / L(15)
        "\x51\x43\x5e\x21\x4f\x77\x75\x64\x4f\x7f\x72\x7a\x75\x73\x64\x10",
        // "NSApplicationMain" / M(Xor1) / S(132) / L(17)
        "\xca\xd7\xc5\xf4\xf4\xe8\xed\xe7\xe5\xf0\xed\xeb\xea\xc9\xe5\xed\xea\x84",
        // "CFDataCreate" / M(Xor2) / S(241) / L(12)
        "\xa2\xa7\xa5\x80\x95\x80\xa2\x93\x84\x80\x95\x84\xe1\x1e\xf6\x2b",
        // "" / M(None) / S(0) / L(0)
        "\x0a\xf2\x95\x0e\xca\x15\x3d\x23\x56\x17\x76\x32\xdc\x83\xf7\x52\xa5\x11\x6c\xca\xb0\xc5\xd4\x5e\xcc\x63\x10\x13\x91\x01\xd3\x9b",
        // "IOObjectRelease" / M(Xor2) / S(159) / L(15)
        "\xc6\xc0\xc0\xed\xe5\xea\xec\xfb\xdd\xea\xe3\xea\xee\xfc\xea\x8f",
        // "" / M(None) / S(0) / L(0)
        "\x33\x74\x6b\x14\x99\x89\xe6\x94\xd9\xf5\x40\xb1\xfd\xd0\x52\xf9\x46\x10\x94\xea\xff\x93\xc1\x34\x8c\x02\x5f\x1f\xf3\xea\xf4\xc7",
        // "/usr/lib/libSystem.dylib" / M(Xor1) / S(252) / L(24)
        "\xd3\x89\x8f\x8e\xd3\x90\x95\x9e\xd3\x90\x95\x9e\xaf\x85\x8f\x88\x99\x91\xd2\x98\x85\x90\x95\x9e\xfc\xef\x9a\x3b\x48\xbc\xb5\x34\x59",
        // "objc_getClass" / M(Xor1) / S(107) / L(13)
        "\x04\x09\x01\x08\x34\x0c\x0e\x1f\x28\x07\x0a\x18\x18\x6b\x76\x4f",
        // "%02X:" / M(Xor3) / S(93) / L(5)
        "\x48\x5d\x5f\x35\x57\x6d\x41\xeb\x39\x38\x74\x5b\x94\x37\x39\x3e",
        // "" / M(None) / S(0) / L(0)
        "\x63\xc4\x20\x70\x67\x70\x41\x94\x43\xdb\x1a\xe3\xbb\x8c\x7c\xad\x4f\x34\x7b\xc4\x6e\x05\x19\x2d\xdc\x36\x65\x45\xe7\xae\x21\x6b",
        // "/System/Library/Frameworks/IOKit.framework/IOKit" / M(Rot) / S(178) / L(48)
        "\xe1\x05\x2b\x25\x26\x17\x1f\xe1\xfe\x1b\x14\x24\x13\x24\x2b\xe1\xf8\x24\x13\x1f\x17\x29\x21\x24\x1d\x25\xe1\xfb\x01\xfd\x1b\x26\xe0\x18\x24\x13\x1f\x17\x29\x21\x24\x1d\xe1\xfb\x01\xfd\x1b\x26\xb2",
        // "/System/Library/Keychains/SystemRootCertificates.keychain" / M(Xor4) / S(223) / L(57)
        "\x51\x2d\x07\x0d\x0a\x1b\x13\x51\x32\x17\x1c\x0c\x1f\x0c\x07\x51\x35\x1b\x07\x1d\x16\x1f\x17\x10\x0d\x51\x2d\x07\x0d\x0a\x1b\x13\x2c\x11\x11\x0a\x3d\x1b\x0c\x0a\x17\x18\x17\x1d\x1f\x0a\x1b\x0d\x50\x15\x1b\x07\x1d\x16\x1f\x17\x10\x7e\x1b\x23\x1d\xd8\x83\x56\x1f\xe9",
        // "Contents" / M(Xor1) / S(217) / L(8)
        "\x9a\xb6\xb7\xad\xbc\xb7\xad\xaa\xd9\x33\x02\x21\x59\x83\x81\xc0",
        // "%02x" / M(Xor3) / S(56) / L(4)
        "\x6d\x78\x7a\x30\x48\xba\x2d\x0b\xb8\x50\xdb\x65\xa9\x6f\x2d\x8b",
        // "SecCertificateCopyData" / M(Xor2) / S(187) / L(22)
        "\xff\xc9\xcf\xef\xc9\xde\xd8\xc5\xca\xc5\xcf\xcd\xd8\xc9\xef\xc3\xdc\xd5\xe8\xcd\xd8\xcd\xac",
        // "kCFTypeDictionaryKeyCallBacks" / M(Xor4) / S(177) / L(29)
        "\x2d\x05\x00\x12\x3f\x36\x23\x02\x2f\x25\x32\x2f\x29\x28\x27\x34\x3f\x0d\x23\x3f\x05\x27\x2a\x2a\x04\x27\x25\x2d\x35\x46\xe7\x7d\x74\xf4\xe3\x6c\x60\xe1",
        // "CFDateCreate" / M(Xor4) / S(185) / L(12)
        "\xd3\xd6\xd4\xf1\xe4\xf5\xd3\xe2\xf5\xf1\xe4\xf5\x90\x05\x23\x31",
        // "PKCS7_get0_signers" / M(Xor1) / S(128) / L(18)
        "\xd0\xcb\xc3\xd3\xb7\xdf\xe7\xe5\xf4\xb0\xdf\xf3\xe9\xe7\xee\xe5\xf2\xf3\x80",
        // "CFRelease" / M(Xor2) / S(215) / L(9)
        "\x84\x81\x95\xa2\xab\xa2\xa6\xb4\xa2\xc7\xa1\x0f\x98\xba\x50\xc6",
        // "CFReadStreamClose" / M(Xor1) / S(118) / L(17)
        "\x35\x30\x24\x13\x17\x12\x25\x02\x04\x13\x17\x1b\x35\x1a\x19\x05\x13\x76",
        // "EVP_MD_CTX_init" / M(Xor1) / S(155) / L(15)
        "\xde\xcd\xcb\xc4\xd6\xdf\xc4\xd8\xcf\xc3\xc4\xf2\xf5\xf2\xef\x9b",
        // "CFBundleShortVersionString" / M(Rot) / S(126) / L(26)
        "\xc1\xc4\xc0\xf3\xec\xe2\xea\xe3\xd1\xe6\xed\xf0\xf2\xd4\xe3\xf0\xf1\xe7\xed\xec\xd1\xf2\xf0\xe7\xec\xe5\x7e\x33\x87\xc3\xbe\x5d\xc0\x87\xa7",
        // "" / M(None) / S(0) / L(0)
        "\x13\xbf\x8d\x0a\x9b\xd6\xbd\x96\x70\x73\xd5\x7a\x4c\x86\x70\x6d\x6a\x20\x67\x36\x35\x1e\x71\xbc\x79\xf7\xfd\xfa\x97\x14\xcb\x15",
        // "sk_num" / M(Xor4) / S(225) / L(6)
        "\x63\x7b\x4f\x7e\x65\x7d\x10\x64\x27\x83\xba\x45\x38\xe4\x76\x6e",
        // "alloc" / M(Xor4) / S(87) / L(5)
        "\x11\x1c\x1c\x1f\x13\x70\x1d\xe2\xb7\x6b\xa1\x33\xb3\x15\x2d\x24",
        // "" / M(None) / S(0) / L(0)
        "\x63\x1f\x97\xd8\x85\xc2\xe2\x33\xa3\x2f\x59\x89\x02\x92\x1c\x2f\x41\xfa\x7f\xef\x24\xc5\xc6\xa3\x4c\x8d\x03\x18\xd7\x17\xdc\xf8",
        // "SHA1_Final" / M(Xor2) / S(70) / L(10)
        "\x05\x1e\x17\x67\x09\x10\x3f\x38\x37\x3a\x56\x65\x40\x9f\x5d\xe5",
        // "X509_STORE_free" / M(Xor4) / S(117) / L(15)
        "\x08\x65\x60\x69\x0f\x03\x04\x1f\x02\x15\x0f\x36\x22\x35\x35\x50",
        // "" / M(None) / S(0) / L(0)
        "\xbb\x0d\xea\x2f\x98\xfd\x7b\x7e\xf4\xb5\x44\xe9\x42\x71\x13\xb1\xf9\xea\x01\xc4\x29\xb8\x97\xb9\x46\xad\x82\x48\x0e\x7c\x26\xa0",
        // "kSecMatchLimit" / M(Rot) / S(176) / L(14)
        "\x1b\x03\x15\x13\xfd\x11\x24\x13\x18\xfc\x19\x1d\x19\x24\xb0\x09",
        // "CFBundleCopyBundleURL" / M(Xor4) / S(66) / L(21)
        "\xef\xea\xee\xd9\xc2\xc8\xc0\xc9\xef\xc3\xdc\xd5\xee\xd9\xc2\xc8\xc0\xc9\xf9\xfe\xe0\xac",
        // "alloc" / M(Xor1) / S(246) / L(5)
        "\x97\x9a\x9a\x99\x95\xf6\x03\xe6\x73\x9b\xd9\xbf\xf1\x5f\xbf\xfe",
        // "CFArrayCreateMutable" / M(Xor2) / S(235) / L(20)
        "\xbd\xb8\xbf\x8c\x8c\x9f\x87\xbd\x8c\x9b\x9f\x8a\x9b\xb3\x8b\x8a\x9f\x9c\x92\x9b\xfe",
        // "." / M(Xor4) / S(81) / L(1)
        "\x3e\x10\xbb\xca\xb4\xcc\xc1\x38\x91\xbd\x1f\x1b\xc3\x99\x25\x46",
        // "SHA1_Update" / M(Xor1) / S(148) / L(11)
        "\xc7\xdc\xd5\xa5\xcb\xc1\xe4\xf0\xf5\xe0\xf1\x94\x7a\x86\x33\xbc",
        // "" / M(None) / S(0) / L(0)
        "\x54\xc8\xdc\x9a\x6f\x9f\xb8\x4b\xbe\xf4\xbf\xd7\x58\xa8\xe3\x1c\x80\xd1\xb6\x94\xac\xff\x77\xd8\x49\xc0\x6d\xfe\x51\xa3\xb7\x79",
        // "X509_free" / M(Xor2) / S(175) / L(9)
        "\xe7\x8a\x8f\x86\xe0\xd9\xcd\xda\xda\xbf\xff\xdb\x8a\x99\x46\xee",
        // "" / M(None) / S(0) / L(0)
        "\x4e\x3f\x21\x7a\x4f\x30\x67\xb5\x2c\xda\x61\x06\x41\x2b\x3f\x77\x15\xae\x9c\xfc\x34\x03\x73\xd3\x71\x92\xec\x66\x39\xbc\xc1\x08",
        // "CFDateFormatterSetFormat" / M(Xor2) / S(164) / L(24)
        "\xc6\xc3\xc1\xe4\xf1\xe0\xc3\xea\xf7\xe8\xe4\xf1\xf1\xe0\xf7\xd6\xe0\xf1\xc3\xea\xf7\xe8\xe4\xf1\x85\x3f\x53\x87\x70\x18\x66\xcb\x3c",
        // "longjmp" / M(Xor2) / S(120) / L(7)
        "\x04\x07\x06\x0f\x02\x05\x18\x68\x50\x3e\x3e\x52\xae\x50\xa9\xf2",
        // "X509_STORE_free" / M(Xor4) / S(188) / L(15)
        "\x98\xf5\xf0\xf9\x9f\x93\x94\x8f\x92\x85\x9f\xa6\xb2\xa5\xa5\xc0",
        // "IOBSDNameMatching" / M(Xor2) / S(179) / L(17)
        "\xe8\xee\xe3\xf2\xe5\xef\xc0\xcc\xc4\xec\xc0\xd5\xc2\xc9\xc8\xcf\xc6\xa1",
        // "" / M(None) / S(0) / L(0)
        "\x7d\x40\x07\xff\x9f\x12\xf0\xf6\x8e\xba\xc3\xf5\xee\x25\x68\x7f\xc9\x51\x53\xff\x63\x6f\x2c\xd5\x94\xc5\xa6\xb9\x72\x3c\x73\x46",
        // "X509_digest" / M(Xor1) / S(3) / L(11)
        "\x5b\x36\x33\x3a\x5c\x67\x6a\x64\x66\x70\x77\x03\x5e\x5a\x5b\xe5",
        // "" / M(None) / S(0) / L(0)
        "\x59\xe7\x50\x6c\x01\x6d\x07\xa8\x42\xc8\x92\x0f\xb1\xc1\x32\x4b\xe2\x1a\xfb\xd1\x75\xce\xe8\xc4\xd0\xb2\x16\x11\xd7\x69\xd7\x0c",
        // "%02X:" / M(Xor1) / S(205) / L(5)
        "\xe8\xfd\xff\x95\xf7\xcd\x6f\xfc\x32\x96\xdc\x8f\x83\x0c\x64\xfd",
        // "Contents/_MASReceipt" / M(Rot) / S(160) / L(20)
        "\xe3\x0f\x0e\x14\x05\x0e\x14\x13\xcf\xff\xed\xe1\xf3\xf2\x05\x03\x05\x09\x10\x14\xa0",
        // "Contents/_MASReceipt" / M(Xor1) / S(143) / L(20)
        "\xcc\xe0\xe1\xfb\xea\xe1\xfb\xfc\xa0\xd0\xc2\xce\xdc\xdd\xea\xec\xea\xe6\xff\xfb\x8f",
        // "CFBundleUnloadExecutable" / M(Xor1) / S(254) / L(24)
        "\xbd\xb8\xbc\x8b\x90\x9a\x92\x9b\xab\x90\x92\x91\x9f\x9a\xbb\x86\x9b\x9d\x8b\x8a\x9f\x9c\x92\x9b\xfe\x21\x30\xd2\x35\xc4\x9e\x7a\xdc",
        // "kSecMatchSubjectContains" / M(Xor4) / S(178) / L(24)
        "\x99\xa1\x97\x91\xbf\x93\x86\x91\x9a\xa1\x87\x90\x98\x97\x91\x86\xb1\x9d\x9c\x86\x93\x9b\x9c\x81\xf2\x80\x10\xff\x04\x71\x17\xab\x82",
        // "CC_SHA1_Init" / M(Rot) / S(67) / L(12)
        "\x86\x86\xa2\x96\x8b\x84\x74\xa2\x8c\xb1\xac\xb7\x43\x0e\xd7\x6a",
        // "CFArrayCreateMutable" / M(Xor3) / S(34) / L(20)
        "\x74\x71\x76\x45\x45\x56\x4e\x74\x45\x52\x56\x43\x52\x7a\x42\x43\x56\x55\x5b\x52\x37",
        // "" / M(None) / S(0) / L(0)
        "\xf4\xba\x5b\x4e\x15\xa6\xe9\xd7\xf9\x16\x7b\x99\xa3\xa4\x09\x9c\xaa\x57\xf0\xfc\x4b\x77\x5d\xbf\xb0\xac\x52\xb7\x3f\x37\x9d\xa2",
        // "ASN1_INTEGER_free" / M(Rot) / S(84) / L(17)
        "\x95\xa7\xa2\x85\xb3\x9d\xa2\xa8\x99\x9b\x99\xa6\xb3\xba\xc6\xb9\xb9\x54",
        // "" / M(None) / S(0) / L(0)
        "\xcb\xfd\x7c\x5c\x58\xb8\xc1\xde\xc1\x72\xb7\xf9\x34\x80\x9d\x8f\x26\xad\xd1\x45\xff\xd0\x89\x75\xa9\x2a\x25\x5c\x15\x6f\x35\x51",
        // "dlsym" / M(Rot) / S(154) / L(5)
        "\xfe\x06\x0d\x13\x07\x9a\x10\x13\x91\x01\xd3\x9b\x33\x74\x6b\x14",
        // "" / M(None) / S(0) / L(0)
        "\x00\x5d\x61\xf7\x89\x3e\x49\x64\xf7\x27\xbe\xb5\x2f\x1f\xb4\xfc\x21\xfb\x89\xd7\x9e\x57\x56\x05\x7a\x61\xee\x44\xb6\xcd\x8b\x88",
        // "longjmp" / M(Xor2) / S(182) / L(7)
        "\xca\xc9\xc8\xc1\xcc\xcb\xd6\xa6\x0d\xa6\x01\xf3\x41\x49\xbf\x7b",
        // "longjmp" / M(Rot) / S(218) / L(7)
        "\x46\x49\x48\x41\x44\x47\x4a\xda\x1d\x80\xfb\x34\x57\x04\x09\x83",
        // "setjmp" / M(Xor3) / S(132) / L(6)
        "\xe7\xf1\xe0\xfe\xf9\xe4\x94\xe6\x8d\x49\xa0\x12\x81\x11\x0b\xa4",
        // "" / M(None) / S(0) / L(0)
        "\x33\xb1\xf1\x05\x70\x90\x67\x9b\x14\x14\x01\x67\xf7\x4b\x40\xe9\x01\xa4\x03\x04\x7d\x04\xe5\xf6\x61\x74\x23\x03\x54\x50\x8f\x03",
        // "CFBundleIdentifier" / M(Xor4) / S(0) / L(18)
        "\x43\x46\x42\x75\x6e\x64\x6c\x65\x49\x64\x65\x6e\x74\x69\x66\x69\x65\x72\x00",
        // "CFDataGetBytePtr" / M(Xor3) / S(42) / L(16)
        "\x78\x7d\x7f\x5a\x4f\x5a\x7c\x5e\x4f\x79\x42\x4f\x5e\x6b\x4f\x49\x3b",
        // "" / M(None) / S(0) / L(0)
        "\x14\x15\xf1\x5e\x84\x58\xc6\x7d\x07\x30\x4a\xd6\x00\x98\x54\x04\x13\xbd\x4f\x94\x2d\xa3\x45\xfc\x65\x63\x7b\x20\xe9\x33\xe6\xdd",
        // "receipt" / M(Rot) / S(66) / L(7)
        "\xb4\xa7\xa5\xa7\xab\xb2\xb6\x42\xad\xd2\x5e\xa0\x1e\x35\xba\xa0",
        // "SecKeychainOpen" / M(Xor2) / S(110) / L(15)
        "\x2d\x1b\x1d\x35\x1b\x07\x1d\x16\x1f\x17\x10\x31\x0e\x1b\x10\x7e",
        // "X509_digest" / M(Rot) / S(247) / L(11)
        "\x4f\x2c\x27\x30\x56\x5b\x60\x5e\x5c\x6a\x6b\xf7\x0c\x81\xa3\x03",
        // "" / M(None) / S(0) / L(0)
        "\xa7\x1a\x67\x0a\x24\xd0\xe7\x7d\x74\xf4\xe3\x6c\xf7\x9d\xe1\x60\x98\xf3\x06\xec\x2e\x93\x53\xb4\x81\x65\xac\x91\x52\x57\x11\x83",
        // "CFReadStreamCreateWithFile" / M(Xor1) / S(4) / L(26)
        "\x47\x42\x56\x61\x65\x60\x57\x70\x76\x61\x65\x69\x47\x76\x61\x65\x70\x61\x53\x6d\x70\x6c\x42\x6d\x68\x61\x04\x2e\x54\x71\x8e\x91\x6e\x11\x64",
        // "strncmp" / M(Rot) / S(53) / L(7)
        "\xa8\xa9\xa7\xa3\x98\xa2\xa5\x35\x30\x48\xab\x18\x89\xe9\x1b\xab",
        // "" / M(None) / S(0) / L(0)
        "\xf6\x9a\xd5\x80\xa2\xfa\x79\x63\x2e\xfa\x68\x4e\xef\xae\x23\x70\xd0\x35\x10\x2a\xa1\x32\xab\x6d\x6b\x19\x03\xfb\x45\xcb\xc7\xdf",
        // "CFDataCreateMutable" / M(Xor3) / S(54) / L(19)
        "\x09\x0c\x0e\x2b\x3e\x2b\x09\x38\x2f\x2b\x3e\x2f\x07\x3f\x3e\x2b\x28\x26\x2f\x4a",
        // "sha1" / M(Rot) / S(206) / L(4)
        "\x41\x36\x2f\xff\xce\x80\x93\xe6\xcf\x7d\x63\x7d\x61\xf1\xfc\x2c",
        // "X509_NAME_get_text_by_NID" / M(Rot) / S(136) / L(25)
        "\xe0\xbd\xb8\xc1\xe7\xd6\xc9\xd5\xcd\xe7\xef\xed\xfc\xe7\xfc\xed\x00\xfc\xe7\xea\x01\xe7\xd6\xd1\xcc\x88\x1b\x26\xe6\xe7\xea\xbf\x5f\xa2",
        // "" / M(None) / S(0) / L(0)
        "\xdf\xb3\x8e\x08\x37\x94\x58\x53\xf8\xa7\x8e\x35\xb4\x34\xb3\x49\xea\x2e\xaf\xb7\x65\x50\x82\xa2\xd5\xcb\x18\xa3\x4c\xcb\xc2\xda",
        // "glob_b" / M(Xor2) / S(89) / L(6)
        "\x2e\x25\x26\x2b\x16\x2b\x49\x7e\xf4\xb5\x44\xe9\x42\x71\x13\xb1",
        // "objc_msgSend" / M(Xor3) / S(101) / L(12)
        "\x1a\x17\x1f\x16\x2a\x18\x06\x12\x26\x10\x1b\x11\x75\x27\xa9\xf6",
        // "" / M(None) / S(0) / L(0)
        "\x9f\x2f\x88\x76\xe1\x7c\xd2\x06\xd8\x0e\x7b\x80\x4c\x3e\x22\x89\xee\x4f\x43\x0c\x38\x7d\x21\xfe\x64\x86\x81\x42\xe6\x97\x98\xe9",
        // "kSecMatchLimit" / M(Rot) / S(162) / L(14)
        "\x0d\xf5\x07\x05\xef\x03\x16\x05\x0a\xee\x0b\x0f\x0b\x16\xa2\x06",
        // "" / M(None) / S(0) / L(0)
        "\x2d\xc5\x28\xf2\x13\xd7\x64\xd3\x25\xf9\x03\x44\xe9\x5a\x25\xd3\x73\x5c\xa7\x37\x40\x51\x84\x47\xd7\x13\xf8\xd4\xb4\x28\x27\x88",
        // "SHA1_Update" / M(Rot) / S(139) / L(11)
        "\xde\xd3\xcc\xbc\xea\xe0\xfb\xef\xec\xff\xf0\x8b\xfe\xe5\x41\x8a",
        // "" / M(None) / S(0) / L(0)
        "\x47\x2e\x47\x48\x25\x17\xe2\x16\x9b\x80\x10\xff\x04\x71\x17\xab\xc8\x24\x10\x82\x2f\x87\x02\x92\x02\x58\x03\xa4\xcd\x63\x2f\x59",
        // "glob" / M(Rot) / S(190) / L(4)
        "\x25\x2a\x2d\x20\xbe\xdd\xbe\x1d\x0e\x0b\xb5\x0f\xc1\x3c\xa0\x7f",
        // "" / M(None) / S(0) / L(0)
        "\x6c\x98\x91\x61\x47\x8b\xdd\x5d\x6c\x15\x30\x6d\x1d\x80\xfb\x34\x57\x04\x09\x83\x1b\xf7\x0a\x17\xa8\x3d\xad\x6f\x46\x9d\x3b\xf0",
        // "" / M(None) / S(0) / L(0)
        "\xb4\x7d\x02\x69\x2b\xa7\x2a\x03\x73\xe6\xeb\x90\x05\x92\x56\x3c\xae\x9a\xa1\x34\xb2\x97\x0c\x29\xc7\xcc\x5c\x37\xe8\xb1\xad\x96",
        // "BIO_free" / M(Xor1) / S(58) / L(8)
        "\x78\x73\x75\x65\x5c\x48\x5f\x5f\x3a\xcf\x65\xce\x1c\x2b\x84\x5a",
        // "setDelegate:" / M(Xor3) / S(132) / L(12)
        "\xe7\xf1\xe0\xd0\xf1\xf8\xf1\xf3\xf5\xe0\xf1\xae\x94\xcb\x94\x29",
        // "glob_b" / M(Xor3) / S(159) / L(6)
        "\xc8\xc3\xc0\xcd\xf0\xcd\xaf\x02\xd0\xbd\x58\xa2\x63\xb9\xb0\x64",
        // "kSecMatchSubjectContains" / M(Xor4) / S(176) / L(24)
        "\xdb\xe3\xd5\xd3\xfd\xd1\xc4\xd3\xd8\xe3\xc5\xd2\xda\xd5\xd3\xc4\xf3\xdf\xde\xc4\xd1\xd9\xde\xc3\xb0\x4a\xab\x14\x4b\xe9\x0e\xce\xc0",
        // "CFURLCreateCopyAppendingPathComponent" / M(Xor2) / S(95) / L(37)
        "\x3a\x3f\x2c\x2b\x35\x3a\x0b\x1c\x18\x0d\x1c\x3a\x16\x09\x00\x38\x09\x09\x1c\x17\x1d\x10\x17\x1e\x29\x18\x0d\x11\x3a\x16\x14\x09\x16\x17\x1c\x17\x0d\x79",
        // "CFArrayGetValueAtIndex" / M(Xor3) / S(99) / L(22)
        "\x39\x3c\x3b\x08\x08\x1b\x03\x3d\x1f\x0e\x2c\x1b\x16\x0f\x1f\x3b\x0e\x33\x14\x1e\x1f\x02\x7a",
        // "d2i_PKCS7_bio" / M(Xor3) / S(120) / L(13)
        "\xec\xba\xe1\xd7\xd8\xc3\xcb\xdb\xbf\xd7\xea\xe1\xe7\x88\x7b\x40",
        // "c2i_ASN1_INTEGER" / M(Xor1) / S(125) / L(16)
        "\x1e\x4f\x14\x22\x3c\x2e\x33\x4c\x22\x34\x33\x29\x38\x3a\x38\x2f\x7d",
        // "CFBundleShortVersionString" / M(Xor1) / S(226) / L(26)
        "\xa1\xa4\xa0\x97\x8c\x86\x8e\x87\xb1\x8a\x8d\x90\x96\xb4\x87\x90\x91\x8b\x8d\x8c\xb1\x96\x90\x8b\x8c\x85\xe2\x8f\x43\x95\x0d\x63\xc8\x92\xf7",
        // "" / M(None) / S(0) / L(0)
        "\x36\x1a\xa9\xd5\x42\x2a\x66\x66\x97\x23\x0e\x61\x3f\x6b\x18\x53\xb8\x3c\x5f\xf6\x20\xdd\xc2\xa3\xe4\x6e\xc5\x1c\xf2\x27\xa2\x2e",
        // "init" / M(Xor2) / S(6) / L(4)
        "\x7f\x78\x7f\x62\x16\x6d\x25\xfa\x5c\x6d\x9c\x3c\xa8\x10\x81\x81",
        // "" / M(None) / S(0) / L(0)
        "\x45\xc1\xd6\xfb\xb1\xd8\x59\x0d\x0e\xff\xd1\x01\xc3\xfb\x82\x0c\x7d\x59\xa4\xe1\x44\xce\x79\x97\x4a\xce\xdc\x56\xef\x1e\xc8\xbe",
        // "CFURLCreateFromFileSystemRepresentation" / M(Xor4) / S(65) / L(39)
        "\x73\x76\x65\x62\x7c\x73\x42\x55\x51\x44\x55\x76\x42\x5f\x5d\x76\x59\x5c\x55\x63\x49\x43\x44\x55\x5d\x62\x55\x40\x42\x55\x43\x55\x5e\x44\x51\x44\x59\x5f\x5e\x30\x1e\x8c\x99\xd6\xa9\x4b\x45\x40",
        // "init" / M(Xor3) / S(101) / L(4)
        "\x1c\x1b\x1c\x01\x75\xff\x9f\x53\x96\xe8\x14\x16\x94\x15\xb8\xec",
        // "kSecMatchLimit" / M(Xor3) / S(243) / L(14)
        "\x68\x50\x66\x60\x4e\x62\x77\x60\x6b\x4f\x6a\x6e\x6a\x77\x03\x9c",
        // "SHA1_Final" / M(Xor1) / S(85) / L(10)
        "\x06\x1d\x14\x64\x0a\x13\x3c\x3b\x34\x39\x55\xeb\xe9\xf0\x77\xd0",
        // "" / M(None) / S(0) / L(0)
        "\x61\x6c\x64\x76\x5d\xd7\xce\xc6\xaa\x2e\x55\x0c\xe0\x89\xfa\xc1\x3a\xc3\x3b\x75\x6e\x80\xdb\x02\x0d\x9d\xc1\x40\x69\xae\x40\x9d",
        // "BIO_free" / M(Rot) / S(194) / L(8)
        "\x04\x0b\x11\x21\x28\x34\x27\x27\xc2\x4b\x00\x79\xf8\x33\xb4\x04",
        // "CFArrayGetValueAtIndex" / M(Xor2) / S(132) / L(22)
        "\xd0\xd5\xd2\xe1\xe1\xf2\xea\xd4\xf6\xe7\xc5\xf2\xff\xe6\xf6\xd2\xe7\xda\xfd\xf7\xf6\xeb\x93",
        // "strlen" / M(Xor2) / S(8) / L(6)
        "\x6b\x6c\x6a\x74\x7d\x76\x18\xe3\x2e\xcf\x41\xaa\x81\x92\xcf\xf6",
        // "sk_free" / M(Xor3) / S(102) / L(7)
        "\x05\x1d\x29\x10\x04\x13\x13\x76\xc8\x8e\xad\x22\xe1\xbb\xf1\x99",
        // "" / M(None) / S(0) / L(0)
        "\xc0\xdf\x5c\xc4\x4c\xc1\xee\x5f\x78\xb2\xed\x8e\x2f\xd0\x73\x4b\xe7\xa0\x72\xfc\xa1\x79\x7a\x20\x69\x6f\xd4\xae\x53\x6d\x5c\x4b",
        // "setjmp" / M(Xor1) / S(147) / L(6)
        "\xe0\xf6\xe7\xf9\xfe\xe3\x93\xef\x28\x64\x42\x1b\x56\x8c\xc1\x6a",
        // "CFURLCreateCopyAppendingPathComponent" / M(Xor1) / S(128) / L(37)
        "\xc3\xc6\xd5\xd2\xcc\xc3\xf2\xe5\xe1\xf4\xe5\xc3\xef\xf0\xf9\xc1\xf0\xf0\xe5\xee\xe4\xe9\xee\xe7\xd0\xe1\xf4\xe8\xc3\xef\xed\xf0\xef\xee\xe5\xee\xf4\x80",
        // "d2i_X509_bio" / M(Rot) / S(19) / L(12)
        "\x77\x45\x7c\x72\x6b\x48\x43\x4c\x72\x75\x7c\x82\x13\xf2\x95\x0e",
        // "c2i_ASN1_INTEGER" / M(Xor4) / S(209) / L(16)
        "\x82\xd3\x88\xbe\xa0\xb2\xaf\xd0\xbe\xa8\xaf\xb5\xa4\xa6\xa4\xb3\xe1",
        // "dlsym" / M(Rot) / S(183) / L(5)
        "\x1b\x23\x2a\x30\x24\xb7\x99\x7d\x1b\x95\xd5\x7c\xd6\xe9\x2c\x2f",
        // "" / M(None) / S(0) / L(0)
        "\x1a\xe6\x53\x69\xb6\x12\xdf\x8c\xe8\xe4\x9e\xbf\xcb\xb0\x7b\x35\x19\x72\xd0\x96\x97\x66\x6c\x83\x0c\x59\x36\x06\x87\x64\x5b\xf3",
        // "" / M(None) / S(0) / L(0)
        "\x74\xf8\xa4\xc9\xa5\x86\x35\xd7\xea\xbd\x3f\x46\xe3\xdc\x7c\x7d\x85\xad\x81\x4e\x08\xf0\xc0\x80\x8c\x8f\x73\x71\xc3\xeb\x04\xcb",
        // "" / M(None) / S(0) / L(0)
        "\x73\xfa\x0d\xeb\x56\x28\xfc\x61\x2f\x1b\x14\x7b\xb7\x55\x4c\x80\x35\xec\x5a\xe8\x7a\x40\x63\x90\x3d\x1c\x24\x50\x64\x35\xa5\x2e",
        // "RTLD_MAIN_ONLY" / M(Xor3) / S(238) / L(14)
        "\xac\xaa\xb2\xba\xa1\xb3\xbf\xb7\xb0\xa1\xb1\xb0\xb2\xa7\xfe\xe7",
        // "en0" / M(Xor2) / S(28) / L(3)
        "\x69\x62\x3c\x0c\x93\x97\xf3\x08\x2d\xd0\xdc\xa6\xd8\x82\x66\x77",
        // "" / M(None) / S(0) / L(0)
        "\xa5\xa8\x2d\xd6\x5b\x02\xab\x70\xbb\xd3\xd6\x2d\xae\x94\x8c\xa5\x9c\x26\x60\x08\x76\x89\xe4\xe8\x97\x3a\x55\xac\x47\x4d\x3f\x20",
        // "CFBundleVersion" / M(Xor3) / S(25) / L(15)
        "\x6a\x6f\x6b\x5c\x47\x4d\x45\x4c\x7f\x4c\x5b\x5a\x40\x46\x47\x29",
        // "OpenSSL_add_all_digests" / M(Rot) / S(112) / L(23)
        "\xbf\xe0\xd5\xde\xc3\xc3\xbc\xcf\xd1\xd4\xd4\xcf\xd1\xdc\xdc\xcf\xd4\xd9\xd7\xd5\xe3\xe4\xe3\x70\xba\x47\x39\x75\x51\xb4\x46\x60",
        // "CFDateCompare" / M(Rot) / S(199) / L(13)
        "\x0a\x0d\x0b\x28\x3b\x2c\x0a\x36\x34\x37\x28\x39\x2c\xc7\xf7\x4f",
        // "BIO_s_mem" / M(Xor4) / S(129) / L(9)
        "\x52\x59\x5f\x4f\x63\x4f\x7d\x75\x7d\x10\x37\xe1\x54\x3f\xb9\x5f",
        // "X509_STORE_new" / M(Xor2) / S(105) / L(14)
        "\x21\x4c\x49\x40\x26\x2a\x2d\x36\x2b\x3c\x26\x17\x1c\x0e\x79\xea",
        // "%02X:" / M(Xor2) / S(82) / L(5)
        "\x67\x72\x70\x1a\x78\x42\x1b\x30\xf2\xee\x8c\x91\x4a\xfb\x8c\x65",
        // "" / M(None) / S(0) / L(0)
        "\xf0\xf9\x58\x8c\xdf\x9a\xc7\x29\x3c\x2a\x97\xc5\x42\x0b\x69\xc9\xd7\xa5\x5a\xa8\x60\x4e\x14\x7c\x3d\xed\x16\xdf\x8e\xc4\x98\x77",
        // "" / M(None) / S(0) / L(0)
        "\x82\x8e\x46\xd7\xcf\x61\x82\xa7\x7b\x93\x93\x22\xf3\x26\x16\x42\x0c\xf3\x56\x84\xef\x15\x2b\xcc\xaf\x6e\xb5\x6c\xe9\xa7\x71\x83",
        // "CFDataAppendBytes" / M(Xor2) / S(43) / L(17)
        "\x7a\x7f\x7d\x58\x4d\x58\x78\x49\x49\x5c\x57\x5d\x7b\x40\x4d\x5c\x4a\x39",
        // "d2i_X509_bio" / M(Xor2) / S(57) / L(12)
        "\x4d\x1b\x40\x76\x71\x1c\x19\x10\x76\x4b\x40\x46\x29\x63\x34\xa8",
        // "OpenSSL_add_all_digests" / M(Xor3) / S(52) / L(23)
        "\x1b\x24\x31\x3a\x07\x07\x18\x0b\x35\x30\x30\x0b\x35\x38\x38\x0b\x30\x3d\x33\x31\x27\x20\x27\x54\x4c\xc1\xee\x5f\x78\xb2\xed\x8e",
        // "yyyy'-'MM'-'dd'T'HH':'mm':'ss'Z'" / M(Rot) / S(253) / L(32)
        "\x76\x76\x76\x76\x24\x2a\x24\x4a\x4a\x24\x2a\x24\x61\x61\x24\x51\x24\x45\x45\x24\x37\x24\x6a\x6a\x24\x37\x24\x70\x70\x24\x57\x24\xfd",
        // "611E5B662C593A08FF58D14AE22452D198DF6C60" / M(Rot) / S(36) / L(40)
        "\x5a\x55\x55\x69\x59\x66\x5a\x5a\x56\x67\x59\x5d\x57\x65\x54\x5c\x6a\x6a\x59\x5c\x68\x55\x58\x65\x69\x56\x56\x58\x59\x56\x68\x55\x5d\x5c\x68\x6a\x5a\x67\x5a\x54\x24\x45\xa8\x27\x8b\xbc\x92\xe6\x00",
        // "" / M(None) / S(0) / L(0)
        "\x5d\x74\xeb\xef\x28\x64\x42\x1b\x56\x8c\xc1\x6a\xaa\x80\x26\xb1\xae\x5f\xdb\x9d\xec\xa6\x42\xae\x18\x77\x7e\xe2\xa6\x20\xb1\x40",
        // "/System/Library/Frameworks/CoreFoundation.framework/CoreFoundation" / M(Xor2) / S(84) / L(66)
        "\x38\x44\x6e\x64\x63\x72\x7a\x38\x5b\x7e\x75\x65\x76\x65\x6e\x38\x51\x65\x76\x7a\x72\x60\x78\x65\x7c\x64\x38\x54\x78\x65\x72\x51\x78\x62\x79\x73\x76\x63\x7e\x78\x79\x39\x71\x65\x76\x7a\x72\x60\x78\x65\x7c\x38\x54\x78\x65\x72\x51\x78\x62\x79\x73\x76\x63\x7e\x78\x79\x17",
        // "" / M(None) / S(0) / L(0)
        "\xec\x57\xa5\x9b\x4e\xdb\x67\x65\x40\x9f\x5d\xe5\x01\xe5\x7c\x1d\x87\x6e\x26\xf9\x6e\x97\xc0\xb0\x81\xe0\xfa\xfa\xa6\x38\x92\x91",
        // "/System/Library/Frameworks/Security.framework/Security" / M(Rot) / S(177) / L(54)
        "\xe0\x04\x2a\x24\x25\x16\x1e\xe0\xfd\x1a\x13\x23\x12\x23\x2a\xe0\xf7\x23\x12\x1e\x16\x28\x20\x23\x1c\x24\xe0\x04\x16\x14\x26\x23\x1a\x25\x2a\xdf\x17\x23\x12\x1e\x16\x28\x20\x23\x1c\xe0\x04\x16\x14\x26\x23\x1a\x25\x2a\xb1",
        // "NSApplicationMain" / M(Xor3) / S(240) / L(17)
        "\x4c\x51\x43\x72\x72\x6e\x6b\x61\x63\x76\x6b\x6d\x6c\x4f\x63\x6b\x6c\x02",
        // "" / M(None) / S(0) / L(0)
        "\xe4\x87\x4b\x45\x04\xf9\xa8\x89\xfe\xe5\x41\x8a\xc8\x8e\x75\x1e\xa7\x72\x2b\x0f\xc8\x8e\xad\x22\xe1\xbb\xf1\x99\xeb\x7e\x20\x24",
        // "IOIteratorNext" / M(Xor1) / S(210) / L(14)
        "\x9b\x9d\x9b\xa6\xb7\xa0\xb3\xa6\xbd\xa0\x9c\xb7\xaa\xa6\xd2\x35",
        // "PKCS7_verify" / M(Xor1) / S(249) / L(12)
        "\xa9\xb2\xba\xaa\xce\xa6\x8f\x9c\x8b\x90\x9f\x80\xf9\xd5\x47\x74",
        // "CFEqual" / M(Xor3) / S(179) / L(7)
        "\x80\x85\x86\xb2\xb6\xa2\xaf\xc3\x14\x9c\xc9\xa5\x8e\x35\x65\x3c",
        // "kSecMatchSearchList" / M(Xor1) / S(140) / L(19)
        "\xe7\xdf\xe9\xef\xc1\xed\xf8\xef\xe4\xdf\xe9\xed\xfe\xef\xe4\xc0\xe5\xff\xf8\x8c",
        // "CFBundleVersion" / M(Rot) / S(70) / L(15)
        "\x89\x8c\x88\xbb\xb4\xaa\xb2\xab\x9c\xab\xb8\xb9\xaf\xb5\xb4\x46",
        // "" / M(None) / S(0) / L(0)
        "\x28\xbc\x2e\x12\x0d\x69\xf9\x69\x22\xd3\x70\xc0\x69\xc4\xfe\x5d\x03\x59\xdd\x64\x40\xf7\xb9\x9f\x32\xfd\x94\x33\xed\x96\x22\xb4",
        // "start" / M(Xor1) / S(140) / L(5)
        "\xff\xf8\xed\xfe\xf8\x8c\x33\xa3\xca\x9e\x9a\x26\x92\xf3\xb8\xf3",
        // "611E5B662C593A08FF58D14AE22452D198DF6C60" / M(Xor4) / S(46) / L(40)
        "\xf8\xff\xff\x8b\xfb\x8c\xf8\xf8\xfc\x8d\xfb\xf7\xfd\x8f\xfe\xf6\x88\x88\xfb\xf6\x8a\xff\xfa\x8f\x8b\xfc\xfc\xfa\xfb\xfc\x8a\xff\xf7\xf6\x8a\x88\xf8\x8d\xf8\xfe\xce\x17\x45\x8e\x48\xaa\xb7\xaf\x8d",
        // "sel_registerName" / M(Xor2) / S(135) / L(16)
        "\xe5\xf3\xfa\xc9\xe4\xf3\xf1\xff\xe5\xe2\xf3\xe4\xd8\xf7\xfb\xf3\x96",
        // "/System/Library/Frameworks/AppKit.framework/AppKit" / M(Xor2) / S(100) / L(50)
        "\x78\x04\x2e\x24\x23\x32\x3a\x78\x1b\x3e\x35\x25\x36\x25\x2e\x78\x11\x25\x36\x3a\x32\x20\x38\x25\x3c\x24\x78\x16\x27\x27\x1c\x3e\x23\x79\x31\x25\x36\x3a\x32\x20\x38\x25\x3c\x78\x16\x27\x27\x1c\x3e\x23\x57",
        // "CFArrayAppendValue" / M(Xor3) / S(77) / L(18)
        "\x23\x26\x21\x12\x12\x01\x19\x21\x10\x10\x05\x0e\x04\x36\x01\x0c\x15\x05\x60",
        // "CFStringCreateWithBytes" / M(Rot) / S(137) / L(23)
        "\xcc\xcf\xdc\xfd\xfb\xf2\xf7\xf0\xcc\xfb\xee\xea\xfd\xee\xe0\xf2\xfd\xf1\xcb\x02\xfd\xee\xfc\x89\x45\xec\x51\x1d\xbb\xc4\x73\x77",
        // "/System/Library/Frameworks/AppKit.framework/AppKit" / M(Xor1) / S(215) / L(50)
        "\xf8\x84\xae\xa4\xa3\xb2\xba\xf8\x9b\xbe\xb5\xa5\xb6\xa5\xae\xf8\x91\xa5\xb6\xba\xb2\xa0\xb8\xa5\xbc\xa4\xf8\x96\xa7\xa7\x9c\xbe\xa3\xf9\xb1\xa5\xb6\xba\xb2\xa0\xb8\xa5\xbc\xf8\x96\xa7\xa7\x9c\xbe\xa3\xd7",
        // "CFDataGetLength" / M(Xor3) / S(216) / L(15)
        "\xab\xae\xac\x89\x9c\x89\xaf\x8d\x9c\xa4\x8d\x86\x8f\x9c\x80\xe8",
        // "d2i_PKCS7_bio" / M(Xor3) / S(50) / L(13)
        "\x26\x70\x2b\x1d\x12\x09\x01\x11\x75\x1d\x20\x2b\x2d\x42\x2d\xa1",
        // "" / M(None) / S(0) / L(0)
        "\xbd\x7e\x83\xe3\x2e\xcf\x41\xaa\x81\x92\xcf\xf6\x44\x54\x5c\xfd\xe9\x4f\xe9\x82\x19\xbc\x72\x88\x80\x99\xde\x9b\x87\xaa\xf2\x4f",
        // "" / M(None) / S(0) / L(0)
        "\xb6\x49\x0a\xb4\xab\xd4\xe7\x93\x0c\x81\xa3\x03\x8e\x5b\xa1\x96\x2a\x58\x33\x97\x80\x39\xff\xdb\x8a\x99\x46\xee\xb6\xda\x73\x80",
        // "/System/Library/Frameworks/CoreFoundation.framework/CoreFoundation" / M(Xor1) / S(184) / L(66)
        "\x97\xeb\xc1\xcb\xcc\xdd\xd5\x97\xf4\xd1\xda\xca\xd9\xca\xc1\x97\xfe\xca\xd9\xd5\xdd\xcf\xd7\xca\xd3\xcb\x97\xfb\xd7\xca\xdd\xfe\xd7\xcd\xd6\xdc\xd9\xcc\xd1\xd7\xd6\x96\xde\xca\xd9\xd5\xdd\xcf\xd7\xca\xd3\x97\xfb\xd7\xca\xdd\xfe\xd7\xcd\xd6\xdc\xd9\xcc\xd1\xd7\xd6\xb8",
        // "" / M(None) / S(0) / L(0)
        "\x48\x7f\x5f\xef\xd1\x19\xe3\x4a\xc6\x44\xba\xb2\xc5\x90\x92\xca\xb3\x2c\x68\xa5\xf8\x3d\xf0\x32\x70\xad\x68\xfd\xad\xc7\x7c\x01",
        // "kSecMatchLimitAll" / M(Xor4) / S(87) / L(17)
        "\x75\x4d\x7b\x7d\x53\x7f\x6a\x7d\x76\x52\x77\x73\x77\x6a\x5f\x72\x72\x1e",
        // "objc_msgSend" / M(Xor1) / S(58) / L(12)
        "\x55\x58\x50\x59\x65\x57\x49\x5d\x69\x5f\x54\x5e\x3a\x00\x81\x07",
        // "ASN1_INTEGER_get" / M(Xor1) / S(187) / L(16)
        "\xfa\xe8\xf5\x8a\xe4\xf2\xf5\xef\xfe\xfc\xfe\xe9\xe4\xdc\xde\xcf\xbb",
        // "kSecReturnRef" / M(Xor2) / S(125) / L(13)
        "\x06\x3e\x08\x0e\x3f\x08\x19\x18\x1f\x03\x3f\x08\x0b\x6d\x91\x61",
        // "CFBundleGetIdentifier" / M(Xor2) / S(67) / L(21)
        "\x16\x13\x17\x20\x3b\x31\x39\x30\x12\x30\x21\x1c\x31\x30\x3b\x21\x3c\x33\x3c\x30\x27\x55",
        // "" / M(None) / S(0) / L(0)
        "\x46\x2f\xb7\xe5\xbe\x4d\x25\xc4\xb1\x79\x9c\xcc\xcd\x16\x74\x7f\x6f\x72\xcd\x82\x4c\xed\xc3\x0c\x14\x33\xa8\xc4\x3b\x74\xd8\x38",
        // "BIO_write" / M(Xor2) / S(150) / L(9)
        "\xc4\xcf\xc9\xd9\xf1\xf4\xef\xf2\xe3\x86\xd2\x7d\x6d\xf2\x35\x2f",
        // "IOBSDNameMatching" / M(Xor2) / S(231) / L(17)
        "\xbc\xba\xb7\xa6\xb1\xbb\x94\x98\x90\xb8\x94\x81\x96\x9d\x9c\x9b\x92\xf5",
        // "Contents" / M(Rot) / S(190) / L(8)
        "\x01\x2d\x2c\x32\x23\x2c\x32\x31\xbe\xe5\x58\x0f\x9a\xf0\x18\x67",
        // "sk_value" / M(Xor3) / S(135) / L(8)
        "\xe4\xfc\xc8\xe1\xf6\xfb\xe2\xf2\x97\xb4\x0c\xeb\xaa\xcc\x35\x7b",
        // "IOMasterPort" / M(Xor3) / S(150) / L(12)
        "\xef\xe9\xeb\xc7\xd5\xd2\xc3\xd4\xf6\xc9\xd4\xd2\xa6\x7d\x0b\xe9",
        // "" / M(None) / S(0) / L(0)
        "\x32\xf4\xd0\x31\xac\x95\x55\x2c\xec\x8a\x10\x8c\xa0\xfb\xd1\x70\x96\x0c\x7c\x13\xe9\x2a\xe8\x6d\xc4\x36\x9a\x7f\x03\x34\x05\x31",
        // "CFBundleIdentifier" / M(Xor3) / S(200) / L(18)
        "\x98\x9d\x99\xae\xb5\xbf\xb7\xbe\x92\xbf\xbe\xb5\xaf\xb2\xbd\xb2\xbe\xa9\xdb",
        // "" / M(None) / S(0) / L(0)
        "\x14\xe0\xd8\xa2\x09\xba\xbf\x12\xbe\x2e\xa7\xb2\xde\x0b\xd0\xa0\xf9\xf3\xc5\x76\xac\x9c\x16\x76\x87\xde\xdc\x22\x76\x43\x49\x45",
        // "NSApplicationMain" / M(Rot) / S(177) / L(17)
        "\xff\x04\xf2\x21\x21\x1d\x1a\x14\x12\x25\x1a\x20\x1f\xfe\x12\x1a\x1f\xb1",
        // "/System/Library/Keychains/SystemRootCertificates.keychain" / M(Xor4) / S(147) / L(57)
        "\xc9\xb5\x9f\x95\x92\x83\x8b\xc9\xaa\x8f\x84\x94\x87\x94\x9f\xc9\xad\x83\x9f\x85\x8e\x87\x8f\x88\x95\xc9\xb5\x9f\x95\x92\x83\x8b\xb4\x89\x89\x92\xa5\x83\x94\x92\x8f\x80\x8f\x85\x87\x92\x83\x95\xc8\x8d\x83\x9f\x85\x8e\x87\x8f\x88\xe6\xd8\x68\xbe\x70\x04\x44\xf7\x05",
        // "" / M(None) / S(0) / L(0)
        "\x0a\x1d\xed\xb1\x92\xcb\x07\x0a\xa8\x76\x39\xd8\x41\x0b\x2a\xb7\x2a\x7f\x82\x08\x2b\xe7\x33\xdf\x75\x9b\xe5\x51\x50\xba\x2d\x0b",
        // "strlen" / M(Xor1) / S(221) / L(6)
        "\xae\xa9\xaf\xb1\xb8\xb3\xdd\x9b\xcb\x58\xcc\x4e\xe8\x2a\xdc\xc4",
        // "CFDateFormatterCreateDateFromString" / M(Xor1) / S(160) / L(35)
        "\xe3\xe6\xe4\xc1\xd4\xc5\xe6\xcf\xd2\xcd\xc1\xd4\xd4\xc5\xd2\xe3\xd2\xc5\xc1\xd4\xc5\xe4\xc1\xd4\xc5\xe6\xd2\xcf\xcd\xf3\xd4\xd2\xc9\xce\xc7\xa0",
        // "" / M(None) / S(0) / L(0)
        "\xb8\x50\xdb\x65\xa9\x6f\x2d\x8b\x3b\xbd\x2d\xb0\x52\xb0\x92\x8b\xf7\x5c\x47\xe3\x46\x02\xc2\xcb\x5e\x15\x8b\x27\xd9\xf2\x97\xe6",
        // "X509_get_ext_by_OBJ" / M(Rot) / S(147) / L(19)
        "\xeb\xc8\xc3\xcc\xf2\xfa\xf8\x07\xf2\xf8\x0b\x07\xf2\xf5\x0c\xf2\xe2\xd5\xdd\x93",
        // "" / M(None) / S(0) / L(0)
        "\xef\x33\x2b\xc5\x86\x2e\xa3\x4b\xc5\xc1\x70\x09\xab\xc6\x1b\x30\xf2\xee\x8c\x91\x4a\xfb\x8c\x65\x2b\x65\x6b\x5a\x94\x6d\xe6\x89",
        // "CFTimeZoneCreateWithTimeIntervalFromGMT" / M(Xor4) / S(78) / L(39)
        "\xe3\xe6\xf4\xc9\xcd\xc5\xfa\xcf\xce\xc5\xe3\xd2\xc5\xc1\xd4\xc5\xf7\xc9\xd4\xc8\xf4\xc9\xcd\xc5\xe9\xce\xd4\xc5\xd2\xd6\xc1\xcc\xe6\xd2\xcf\xcd\xe7\xed\xf4\xa0\x84\x67\x42\x39\x55\xc3\x59\x54",
        // "CFBundleGetValueForInfoDictionaryKey" / M(Xor1) / S(81) / L(36)
        "\x12\x17\x13\x24\x3f\x35\x3d\x34\x16\x34\x25\x07\x30\x3d\x24\x34\x17\x3e\x23\x18\x3f\x37\x3e\x15\x38\x32\x25\x38\x3e\x3f\x30\x23\x28\x1a\x34\x28\x51",
        // "CFDateFormatterCreateDateFromString" / M(Xor3) / S(148) / L(35)
        "\xfb\xfe\xfc\xd9\xcc\xdd\xfe\xd7\xca\xd5\xd9\xcc\xcc\xdd\xca\xfb\xca\xdd\xd9\xcc\xdd\xfc\xd9\xcc\xdd\xfe\xca\xd7\xd5\xeb\xcc\xca\xd1\xd6\xdf\xb8",
        // "" / M(None) / S(0) / L(0)
        "\x8a\x04\x26\xb9\x9f\xcf\x21\xbd\x4d\x80\x7b\xd3\xa1\xce\x9c\x2f\xee\x2b\xa7\x32\xd4\xda\x05\x24\xa0\x73\x03\x64\xc8\x69\x5f\xb6",
        // "kSecClassCertificate" / M(Xor3) / S(222) / L(20)
        "\x98\xa0\x96\x90\xb0\x9f\x92\x80\x80\xb0\x96\x81\x87\x9a\x95\x9a\x90\x92\x87\x96\xf3",
        // "sha1" / M(Xor4) / S(225) / L(4)
        "\x63\x78\x71\x21\x10\x8d\x02\xfb\xcc\xd3\x2a\x05\xc2\xbe\x16\x77",
        // "CFDateFormatterSetFormat" / M(Xor3) / S(60) / L(24)
        "\x1e\x1b\x19\x3c\x29\x38\x1b\x32\x2f\x30\x3c\x29\x29\x38\x2f\x0e\x38\x29\x1b\x32\x2f\x30\x3c\x29\x5d\x4e\x06\x40\xf7\xba\x40\x39\x14",
        // "." / M(Rot) / S(26) / L(1)
        "\x48\x1a\xa4\x00\x29\x9e\x28\xa5\xbc\xdd\xbc\x60\x2b\xda\x99\x2d",
        // "BIO_s_mem" / M(Xor2) / S(179) / L(9)
        "\xe1\xea\xec\xfc\xd0\xfc\xce\xc6\xce\xa3\xca\x82\x18\xa2\xdf\x85",
        // "" / M(None) / S(0) / L(0)
        "\xcf\x32\x63\x9c\x93\xfc\xc8\x63\x81\x21\x39\x74\x70\xad\xa5\x8a\x59\xe6\x13\x09\xd7\x4f\xd9\x2c\x8d\x45\x8d\x95\x3d\x1b\x40\x41",
        // "SecKeychainOpen" / M(Xor3) / S(25) / L(15)
        "\x7a\x4c\x4a\x62\x4c\x50\x4a\x41\x48\x40\x47\x66\x59\x4c\x47\x29",
        // "" / M(None) / S(0) / L(0)
        "\x39\x5c\xd5\x59\x87\x00\xf3\xf5\x15\x58\x2c\x0f\xc1\x78\xa0\x2d\x0e\x10\x24\x2d\x0b\x99\x40\x0b\xf7\xca\xbf\x51\x8e\xbf\xd2\xc1",
        // "glob" / M(Xor3) / S(23) / L(4)
        "\x40\x4b\x48\x45\x27\xfc\xe1\x2b\x7d\x9d\xc7\x65\x2c\x11\x95\x26",
        // "%02X" / M(Xor2) / S(199) / L(4)
        "\xf2\xe7\xe5\x8f\xd7\xb0\x92\x8b\xf7\x5c\x47\xe3\x46\x02\xc2\xcb",
        // "CFReadStreamRead" / M(Xor4) / S(33) / L(16)
        "\x72\x77\x63\x54\x50\x55\x62\x45\x43\x54\x50\x5c\x63\x54\x50\x55\x31",
        // "CFReadStreamClose" / M(Xor1) / S(162) / L(17)
        "\xe1\xe4\xf0\xc7\xc3\xc6\xf1\xd6\xd0\xc7\xc3\xcf\xe1\xce\xcd\xd1\xc7\xa2",
        // "CFReadStreamCreateWithFile" / M(Rot) / S(252) / L(26)
        "\x3f\x42\x4e\x61\x5d\x60\x4f\x70\x6e\x61\x5d\x69\x3f\x6e\x61\x5d\x70\x61\x53\x65\x70\x64\x42\x65\x68\x61\xfc\x33\xc3\xa7\xa3\xe5\x06\x91\xbd",
    };
    
    // Table for storing pointers
    static void *RV_Pointers[608] = {
        ((void *) NULL),
        ((void *) NULL),
        ((void *) EVP_DigestInit),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) ASN1_OBJECT_free),
        ((void *) X509_NAME_get_text_by_NID),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) d2i_X509_bio),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) EVP_DigestFinal),
        ((void *) sk_value),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) EVP_DigestUpdate),
        ((void *) NULL),
        ((void *) EVP_MD_CTX_init),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) EVP_MD_CTX_init),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) BIO_free),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) d2i_PKCS7_bio),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) ASN1_get_object),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) BIO_write),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) RTLD_MAIN_ONLY),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) EVP_get_digestbyname),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) ASN1_INTEGER_free),
        ((void *) EVP_get_digestbyname),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) dlopen),
        ((void *) c2i_ASN1_INTEGER),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) globfree),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) CFStringCreateWithCString),
        ((void *) EVP_DigestUpdate),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) ASN1_OBJECT_free),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) SHA1_Final),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) ASN1_OBJECT_free),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) SHA1_Update),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) X509_digest),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) SHA1_Init),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) X509_get_ext_by_OBJ),
        ((void *) dlopen),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) CFStringCreateWithBytes),
        ((void *) PKCS7_get0_signers),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) sk_num),
        ((void *) NULL),
        ((void *) ASN1_INTEGER_get),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) CFStringCreateWithCString),
        ((void *) EVP_DigestFinal),
        ((void *) NULL),
        ((void *) ASN1_INTEGER_get),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) sk_num),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) X509_STORE_add_cert),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) sk_value),
        ((void *) NULL),
        ((void *) X509_STORE_add_cert),
        ((void *) SHA1_Init),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) SHA1),
        ((void *) NULL),
        ((void *) OBJ_txt2obj),
        ((void *) NULL),
        ((void *) glob),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) X509_get_ext_by_OBJ),
        ((void *) EVP_DigestInit),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) X509_free),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) PKCS7_verify),
        ((void *) SHA1),
        ((void *) X509_NAME_get_text_by_NID),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) X509_STORE_new),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) PKCS7_get0_signers),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) dlsym),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) ASN1_get_object),
        ((void *) NULL),
        ((void *) PKCS7_free),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) dlopen),
        ((void *) BIO_new),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) OpenSSL_add_all_digests),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) X509_free),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) BIO_write),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) PKCS7_verify),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) CFStringCreateWithBytes),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) sk_free),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) sk_free),
        ((void *) strncmp),
        ((void *) globfree),
        ((void *) globfree),
        ((void *) PKCS7_free),
        ((void *) X509_STORE_new),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) PKCS7_free),
        ((void *) X509_STORE_add_cert),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) SHA1),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) glob_b),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) SHA1_Init),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) EVP_get_digestbyname),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) strlen),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) BIO_s_mem),
        ((void *) ASN1_INTEGER_free),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) EVP_DigestInit),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) BIO_new),
        ((void *) X509_STORE_free),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) EVP_DigestFinal),
        ((void *) NULL),
        ((void *) OBJ_txt2obj),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) RTLD_MAIN_ONLY),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) OBJ_txt2obj),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) EVP_DigestUpdate),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) CFStringCreateWithCString),
        ((void *) NULL),
        ((void *) BIO_new),
        ((void *) NULL),
        ((void *) strncmp),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) ASN1_get_object),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) PKCS7_get0_signers),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) EVP_MD_CTX_init),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) sk_num),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) SHA1_Final),
        ((void *) X509_STORE_free),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) SHA1_Update),
        ((void *) NULL),
        ((void *) X509_free),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) X509_STORE_free),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) X509_digest),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) ASN1_INTEGER_free),
        ((void *) NULL),
        ((void *) dlsym),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) X509_digest),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) strncmp),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) X509_NAME_get_text_by_NID),
        ((void *) NULL),
        ((void *) glob_b),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) SHA1_Update),
        ((void *) NULL),
        ((void *) glob),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) BIO_free),
        ((void *) NULL),
        ((void *) glob_b),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) d2i_PKCS7_bio),
        ((void *) c2i_ASN1_INTEGER),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) SHA1_Final),
        ((void *) NULL),
        ((void *) BIO_free),
        ((void *) NULL),
        ((void *) strlen),
        ((void *) sk_free),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) d2i_X509_bio),
        ((void *) c2i_ASN1_INTEGER),
        ((void *) dlsym),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) RTLD_MAIN_ONLY),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) OpenSSL_add_all_digests),
        ((void *) NULL),
        ((void *) BIO_s_mem),
        ((void *) X509_STORE_new),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) d2i_X509_bio),
        ((void *) OpenSSL_add_all_digests),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) PKCS7_verify),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) CFStringCreateWithBytes),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) d2i_PKCS7_bio),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) ASN1_INTEGER_get),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) BIO_write),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) sk_value),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) strlen),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) X509_get_ext_by_OBJ),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) BIO_s_mem),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) glob),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
    };
    
    // Push a new diagnostic context
#pragma clang diagnostic push
    // When getting primary MAC address, an effectless alignment requirement increase is reported
#pragma clang diagnostic ignored "-Wcast-align"
    // In RELEASE mode, static variable are inlined but their declaration are not removed
#pragma clang diagnostic ignored "-Wunused"
    // In DEBUG mode, static variable are not inlined
#pragma clang diagnostic ignored "-Wused-but-marked-unused"
    
    // Global variables
    static int RV_GARRBHPFHLCT __unused;
    static int RV_REWMHCKNSQCB __unused;
    static int RV_OFAURLMWXRIU __unused;
    static int RV_JMRKAJKBMHEI __unused;
    static int RV_WMNKCSOYDTBO __unused;
    static int RV_SXDOUIPSMRUU __unused;
    static int RV_CWDVPKSFHKME __unused;
    static int RV_VZXVJIULPFEV __unused;
    
    
#define RV_ASN1_get_object_021000FD ((__RV_ASN1_get_object) RV_LookupFunction015(RV_ObfuscationFunction00A, 528, 238, 16, RV_ObfuscationFunction00C, 253, 180, 16))
#define RV_ASN1_INTEGER_free_0058005F ((__RV_ASN1_INTEGER_free) RV_LookupFunction015(RV_ObfuscationFunction00C, 88, 155, 16, RV_ObfuscationFunction004, 95, 132, 18))
#define RV_ASN1_INTEGER_get_021000A9 ((__RV_ASN1_INTEGER_get) RV_LookupFunction015(RV_ObfuscationFunction00A, 528, 238, 16, RV_ObfuscationFunction003, 169, 154, 17))
#define RV_ASN1_OBJECT_free_02100084 ((__RV_ASN1_OBJECT_free) RV_LookupFunction015(RV_ObfuscationFunction00A, 528, 238, 16, RV_ObfuscationFunction004, 132, 171, 17))
#define RV_BIO_free_0058002F ((__RV_BIO_free) RV_LookupFunction015(RV_ObfuscationFunction00C, 88, 155, 16, RV_ObfuscationFunction008, 47, 189, 16))
#define RV_BIO_free_017B01F2 ((__RV_BIO_free) RV_LookupFunction015(RV_ObfuscationFunction008, 379, 129, 16, RV_ObfuscationFunction005, 498, 58, 16))
#define RV_BIO_new_00580197 ((__RV_BIO_new) RV_LookupFunction015(RV_ObfuscationFunction00C, 88, 155, 16, RV_ObfuscationFunction009, 407, 107, 16))
#define RV_BIO_new_02100171 ((__RV_BIO_new) RV_LookupFunction015(RV_ObfuscationFunction00A, 528, 238, 16, RV_ObfuscationFunction007, 369, 148, 16))
#define RV_BIO_s_mem_017B0216 ((__RV_BIO_s_mem) RV_LookupFunction015(RV_ObfuscationFunction008, 379, 129, 16, RV_ObfuscationFunction00B, 534, 129, 16))
#define RV_BIO_s_mem_02100216 ((__RV_BIO_s_mem) RV_LookupFunction015(RV_ObfuscationFunction00A, 528, 238, 16, RV_ObfuscationFunction00B, 534, 129, 16))
#define RV_BIO_write_017B0053 ((__RV_BIO_write) RV_LookupFunction015(RV_ObfuscationFunction008, 379, 129, 16, RV_ObfuscationFunction00C, 83, 110, 16))
#define RV_c2i_ASN1_INTEGER_005801F9 ((__RV_c2i_ASN1_INTEGER) RV_LookupFunction015(RV_ObfuscationFunction00C, 88, 155, 16, RV_ObfuscationFunction006, 505, 125, 17))
#define RV_CC_SHA1_Init_01A301CF ((__RV_CC_SHA1_Init) RV_LookupFunction015(RV_ObfuscationFunction006, 419, 252, 33, RV_ObfuscationFunction003, 463, 67, 16))
#define RV_CFArrayCreateMutable_022101BD ((__RV_CFArrayCreateMutable) RV_LookupFunction015(RV_ObfuscationFunction008, 545, 84, 67, RV_ObfuscationFunction007, 445, 235, 21))
#define RV_CFArrayGetCount_0237006A ((__RV_CFArrayGetCount) RV_LookupFunction015(RV_ObfuscationFunction005, 567, 184, 67, RV_ObfuscationFunction008, 106, 211, 16))
#define RV_CFArrayGetCount_0237016F ((__RV_CFArrayGetCount) RV_LookupFunction015(RV_ObfuscationFunction005, 567, 184, 67, RV_ObfuscationFunction005, 367, 76, 16))
#define RV_CFBundleGetMainBundle_02370019 ((__RV_CFBundleGetMainBundle) RV_LookupFunction015(RV_ObfuscationFunction005, 567, 184, 67, RV_ObfuscationFunction00A, 25, 176, 22))
#define RV_CFBundleUnloadExecutable_02370083 ((__RV_CFBundleUnloadExecutable) RV_LookupFunction015(RV_ObfuscationFunction005, 567, 184, 67, RV_ObfuscationFunction003, 131, 210, 33))
#define RV_CFDataCreateMutable_00C4009B ((__RV_CFDataCreateMutable) RV_LookupFunction015(RV_ObfuscationFunction009, 196, 106, 67, RV_ObfuscationFunction008, 155, 130, 20))
#define RV_CFDataCreateMutable_00C401E4 ((__RV_CFDataCreateMutable) RV_LookupFunction015(RV_ObfuscationFunction009, 196, 106, 67, RV_ObfuscationFunction009, 484, 54, 20))
#define RV_CFDataCreateMutable_02210179 ((__RV_CFDataCreateMutable) RV_LookupFunction015(RV_ObfuscationFunction008, 545, 84, 67, RV_ObfuscationFunction007, 377, 197, 20))
#define RV_CFDataGetLength_02370159 ((__RV_CFDataGetLength) RV_LookupFunction015(RV_ObfuscationFunction005, 567, 184, 67, RV_ObfuscationFunction003, 345, 16, 16))
#define RV_CFDateFormatterSetProperty_023700B6 ((__RV_CFDateFormatterSetProperty) RV_LookupFunction015(RV_ObfuscationFunction005, 567, 184, 67, RV_ObfuscationFunction004, 182, 167, 35))
#define RV_CFDictionaryAddValue_02370170 ((__RV_CFDictionaryAddValue) RV_LookupFunction015(RV_ObfuscationFunction005, 567, 184, 67, RV_ObfuscationFunction008, 368, 23, 21))
#define RV_CFDictionaryCreateMutable_0237001C ((__RV_CFDictionaryCreateMutable) RV_LookupFunction015(RV_ObfuscationFunction005, 567, 184, 67, RV_ObfuscationFunction00C, 28, 7, 34))
#define RV_CFDictionaryGetValue_02210048 ((__RV_CFDictionaryGetValue) RV_LookupFunction015(RV_ObfuscationFunction008, 545, 84, 67, RV_ObfuscationFunction008, 72, 1, 21))
#define RV_CFDictionaryGetValue_02370096 ((__RV_CFDictionaryGetValue) RV_LookupFunction015(RV_ObfuscationFunction005, 567, 184, 67, RV_ObfuscationFunction00C, 150, 240, 21))
#define RV_CFDictionarySetValue_00C4014D ((__RV_CFDictionarySetValue) RV_LookupFunction015(RV_ObfuscationFunction009, 196, 106, 67, RV_ObfuscationFunction00A, 333, 37, 21))
#define RV_CFEqual_02370228 ((__RV_CFEqual) RV_LookupFunction015(RV_ObfuscationFunction005, 567, 184, 67, RV_ObfuscationFunction009, 552, 179, 16))
#define RV_CFNumberCreate_00C40080 ((__RV_CFNumberCreate) RV_LookupFunction015(RV_ObfuscationFunction009, 196, 106, 67, RV_ObfuscationFunction005, 128, 145, 16))
#define RV_CFNumberCreate_02370080 ((__RV_CFNumberCreate) RV_LookupFunction015(RV_ObfuscationFunction005, 567, 184, 67, RV_ObfuscationFunction005, 128, 145, 16))
#define RV_CFRelease_00C400F4 ((__RV_CFRelease) RV_LookupFunction015(RV_ObfuscationFunction009, 196, 106, 67, RV_ObfuscationFunction008, 244, 47, 16))
#define RV_CFRelease_00C4016E ((__RV_CFRelease) RV_LookupFunction015(RV_ObfuscationFunction009, 196, 106, 67, RV_ObfuscationFunction007, 366, 21, 16))
#define RV_CFRelease_00C401AF ((__RV_CFRelease) RV_LookupFunction015(RV_ObfuscationFunction009, 196, 106, 67, RV_ObfuscationFunction007, 431, 215, 16))
#define RV_CFRelease_022100F4 ((__RV_CFRelease) RV_LookupFunction015(RV_ObfuscationFunction008, 545, 84, 67, RV_ObfuscationFunction008, 244, 47, 16))
#define RV_CFRelease_0221016E ((__RV_CFRelease) RV_LookupFunction015(RV_ObfuscationFunction008, 545, 84, 67, RV_ObfuscationFunction007, 366, 21, 16))
#define RV_CFRelease_022101AF ((__RV_CFRelease) RV_LookupFunction015(RV_ObfuscationFunction008, 545, 84, 67, RV_ObfuscationFunction007, 431, 215, 16))
#define RV_CFRelease_023700F4 ((__RV_CFRelease) RV_LookupFunction015(RV_ObfuscationFunction005, 567, 184, 67, RV_ObfuscationFunction008, 244, 47, 16))
#define RV_CFRelease_0237016E ((__RV_CFRelease) RV_LookupFunction015(RV_ObfuscationFunction005, 567, 184, 67, RV_ObfuscationFunction007, 366, 21, 16))
#define RV_CFRelease_023701AF ((__RV_CFRelease) RV_LookupFunction015(RV_ObfuscationFunction005, 567, 184, 67, RV_ObfuscationFunction007, 431, 215, 16))
#define RV_CFURLCreateFromFileSystemRepresentation_022100B3 ((__RV_CFURLCreateFromFileSystemRepresentation) RV_LookupFunction015(RV_ObfuscationFunction008, 545, 84, 67, RV_ObfuscationFunction008, 179, 246, 48))
#define RV_CFURLCreateFromFileSystemRepresentation_023701FE ((__RV_CFURLCreateFromFileSystemRepresentation) RV_LookupFunction015(RV_ObfuscationFunction005, 567, 184, 67, RV_ObfuscationFunction00B, 510, 65, 48))
#define RV_CFURLCreateWithFileSystemPathRelativeToBase_00C40098 ((__RV_CFURLCreateWithFileSystemPathRelativeToBase) RV_LookupFunction015(RV_ObfuscationFunction009, 196, 106, 67, RV_ObfuscationFunction007, 152, 141, 52))
#define RV_CFURLCreateWithFileSystemPathRelativeToBase_02210185 ((__RV_CFURLCreateWithFileSystemPathRelativeToBase) RV_LookupFunction015(RV_ObfuscationFunction008, 545, 84, 67, RV_ObfuscationFunction008, 389, 148, 52))
#define RV_d2i_PKCS7_bio_0058003F ((__RV_d2i_PKCS7_bio) RV_LookupFunction015(RV_ObfuscationFunction00C, 88, 155, 16, RV_ObfuscationFunction00A, 63, 4, 16))
#define RV_d2i_PKCS7_bio_017B0234 ((__RV_d2i_PKCS7_bio) RV_LookupFunction015(RV_ObfuscationFunction008, 379, 129, 16, RV_ObfuscationFunction00A, 564, 50, 16))
#define RV_d2i_X509_bio_017B001D ((__RV_d2i_X509_bio) RV_LookupFunction015(RV_ObfuscationFunction008, 379, 129, 16, RV_ObfuscationFunction004, 29, 3, 16))
#define RV_EVP_DigestFinal_00580175 ((__RV_EVP_DigestFinal) RV_LookupFunction015(RV_ObfuscationFunction00C, 88, 155, 16, RV_ObfuscationFunction00B, 373, 182, 16))
#define RV_EVP_DigestInit_017B016B ((__RV_EVP_DigestInit) RV_LookupFunction015(RV_ObfuscationFunction008, 379, 129, 16, RV_ObfuscationFunction00B, 363, 198, 16))
#define RV_EVP_DigestUpdate_02100025 ((__RV_EVP_DigestUpdate) RV_LookupFunction015(RV_ObfuscationFunction00A, 528, 238, 16, RV_ObfuscationFunction004, 37, 158, 17))
#define RV_EVP_get_digestbyname_017B0060 ((__RV_EVP_get_digestbyname) RV_LookupFunction015(RV_ObfuscationFunction008, 379, 129, 16, RV_ObfuscationFunction00B, 96, 218, 21))
#define RV_EVP_MD_CTX_init_021001B1 ((__RV_EVP_MD_CTX_init) RV_LookupFunction015(RV_ObfuscationFunction00A, 528, 238, 16, RV_ObfuscationFunction005, 433, 155, 16))
#define RV_exit_001B00B7 ((__RV_exit) RV_LookupFunction015(RV_ObfuscationFunction009, 27, 42, 33, RV_ObfuscationFunction00B, 183, 82, 16))
#define RV_exit_001B0117 ((__RV_exit) RV_LookupFunction015(RV_ObfuscationFunction009, 27, 42, 33, RV_ObfuscationFunction003, 279, 128, 16))
#define RV_exit_001B0182 ((__RV_exit) RV_LookupFunction015(RV_ObfuscationFunction009, 27, 42, 33, RV_ObfuscationFunction003, 386, 47, 16))
#define RV_exit_006D0117 ((__RV_exit) RV_LookupFunction015(RV_ObfuscationFunction007, 109, 96, 33, RV_ObfuscationFunction003, 279, 128, 16))
#define RV_exit_006D0182 ((__RV_exit) RV_LookupFunction015(RV_ObfuscationFunction007, 109, 96, 33, RV_ObfuscationFunction003, 386, 47, 16))
#define RV_exit_01A300B7 ((__RV_exit) RV_LookupFunction015(RV_ObfuscationFunction006, 419, 252, 33, RV_ObfuscationFunction00B, 183, 82, 16))
#define RV_exit_01A30117 ((__RV_exit) RV_LookupFunction015(RV_ObfuscationFunction006, 419, 252, 33, RV_ObfuscationFunction003, 279, 128, 16))
#define RV_exit_01A30182 ((__RV_exit) RV_LookupFunction015(RV_ObfuscationFunction006, 419, 252, 33, RV_ObfuscationFunction003, 386, 47, 16))
#define RV_GARRBHPFHLCT_00C40061 ((__RV_CFBundleGetValueForInfoDictionaryKey) RV_LookupFunction015(RV_ObfuscationFunction009, 196, 106, 67, RV_ObfuscationFunction00C, RV_GARRBHPFHLCT, 89, 37))
#define RV_GARRBHPFHLCT_00C40066 ((__RV_CFArrayAppendValue) RV_LookupFunction015(RV_ObfuscationFunction009, 196, 106, 67, RV_ObfuscationFunction00C, RV_GARRBHPFHLCT, 76, 19))
#define RV_GARRBHPFHLCT_00C40109 ((__RV_CFReadStreamRead) RV_LookupFunction015(RV_ObfuscationFunction009, 196, 106, 67, RV_ObfuscationFunction00B, RV_GARRBHPFHLCT, 158, 17))
#define RV_GARRBHPFHLCT_01A3005C ((__RV_CC_SHA1_Final) RV_LookupFunction015(RV_ObfuscationFunction006, 419, 252, 33, RV_ObfuscationFunction007, RV_GARRBHPFHLCT, 50, 16))
#define RV_GARRBHPFHLCT_01A70132 ((__RV_IOMasterPort) RV_LookupFunction015(RV_ObfuscationFunction003, 423, 178, 49, RV_ObfuscationFunction00C, RV_GARRBHPFHLCT, 123, 16))
#define RV_GARRBHPFHLCT_02210192 ((__RV_CFTimeZoneCreateWithTimeIntervalFromGMT) RV_LookupFunction015(RV_ObfuscationFunction008, 545, 84, 67, RV_ObfuscationFunction003, RV_GARRBHPFHLCT, 118, 48))
#define RV_GARRBHPFHLCT_02320224 ((__RV_NSApplicationMain) RV_LookupFunction015(RV_ObfuscationFunction006, 562, 215, 51, RV_ObfuscationFunction00A, RV_GARRBHPFHLCT, 240, 18))
#define RV_GARRBHPFHLCT_02370026 ((__RV_CFDataGetBytePtr) RV_LookupFunction015(RV_ObfuscationFunction005, 567, 184, 67, RV_ObfuscationFunction004, RV_GARRBHPFHLCT, 142, 17))
#define RV_REWMHCKNSQCB_003E015C ((__RV_IORegistryEntryCreateCFProperty) RV_LookupFunction015(RV_ObfuscationFunction00C, 62, 243, 49, RV_ObfuscationFunction003, RV_REWMHCKNSQCB, 224, 32))
#define RV_REWMHCKNSQCB_00C4024B ((__RV_CFDateFormatterCreateDateFromString) RV_LookupFunction015(RV_ObfuscationFunction009, 196, 106, 67, RV_ObfuscationFunction006, RV_REWMHCKNSQCB, 160, 36))
#define RV_REWMHCKNSQCB_022101BB ((__RV_CFBundleCopyBundleURL) RV_LookupFunction015(RV_ObfuscationFunction008, 545, 84, 67, RV_ObfuscationFunction00C, RV_REWMHCKNSQCB, 66, 22))
#define RV_REWMHCKNSQCB_02210204 ((__RV_CFArrayGetValueAtIndex) RV_LookupFunction015(RV_ObfuscationFunction008, 545, 84, 67, RV_ObfuscationFunction007, RV_REWMHCKNSQCB, 132, 23))
#define RV_REWMHCKNSQCB_023700ED ((__RV_CFDictionaryGetValue) RV_LookupFunction015(RV_ObfuscationFunction005, 567, 184, 67, RV_ObfuscationFunction004, RV_REWMHCKNSQCB, 73, 21))
#define RV_REWMHCKNSQCB_02370179 ((__RV_CFDataCreateMutable) RV_LookupFunction015(RV_ObfuscationFunction005, 567, 184, 67, RV_ObfuscationFunction007, RV_REWMHCKNSQCB, 197, 20))
#define RV_REWMHCKNSQCB_02370215 ((__RV_CFDateCompare) RV_LookupFunction015(RV_ObfuscationFunction005, 567, 184, 67, RV_ObfuscationFunction004, RV_REWMHCKNSQCB, 199, 16))
#define RV_OFAURLMWXRIU_0071011E ((__RV_SecKeychainSearchCreateFromAttributes) RV_LookupFunction015(RV_ObfuscationFunction004, 113, 51, 55, RV_ObfuscationFunction00C, RV_OFAURLMWXRIU, 41, 38))
#define RV_OFAURLMWXRIU_00C40154 ((__RV_CFDateCreate) RV_LookupFunction015(RV_ObfuscationFunction009, 196, 106, 67, RV_ObfuscationFunction003, RV_OFAURLMWXRIU, 28, 16))
#define RV_OFAURLMWXRIU_02210080 ((__RV_CFNumberCreate) RV_LookupFunction015(RV_ObfuscationFunction008, 545, 84, 67, RV_ObfuscationFunction005, RV_OFAURLMWXRIU, 145, 16))
#define RV_OFAURLMWXRIU_022101B0 ((__RV_CFReadStreamClose) RV_LookupFunction015(RV_ObfuscationFunction008, 545, 84, 67, RV_ObfuscationFunction006, RV_OFAURLMWXRIU, 118, 18))
#define RV_OFAURLMWXRIU_0237002D ((__RV_CFDataGetBytePtr) RV_LookupFunction015(RV_ObfuscationFunction005, 567, 184, 67, RV_ObfuscationFunction00C, RV_OFAURLMWXRIU, 115, 17))
#define RV_OFAURLMWXRIU_02370097 ((__RV_CFDataAppendBytes) RV_LookupFunction015(RV_ObfuscationFunction005, 567, 184, 67, RV_ObfuscationFunction003, RV_OFAURLMWXRIU, 209, 18))
#define RV_OFAURLMWXRIU_02370250 ((__RV_CFBundleGetValueForInfoDictionaryKey) RV_LookupFunction015(RV_ObfuscationFunction005, 567, 184, 67, RV_ObfuscationFunction005, RV_OFAURLMWXRIU, 81, 37))
#define RV_JMRKAJKBMHEI_003E00BA ((__RV_IORegistryEntryGetParentEntry) RV_LookupFunction015(RV_ObfuscationFunction00C, 62, 243, 49, RV_ObfuscationFunction005, RV_JMRKAJKBMHEI, 175, 38))
#define RV_JMRKAJKBMHEI_00C40125 ((__RV_CFNumberCreate) RV_LookupFunction015(RV_ObfuscationFunction009, 196, 106, 67, RV_ObfuscationFunction007, RV_JMRKAJKBMHEI, 155, 16))
#define RV_JMRKAJKBMHEI_00C4014C ((__RV_CFStringCompare) RV_LookupFunction015(RV_ObfuscationFunction009, 196, 106, 67, RV_ObfuscationFunction005, RV_JMRKAJKBMHEI, 114, 16))
#define RV_JMRKAJKBMHEI_02210066 ((__RV_CFArrayAppendValue) RV_LookupFunction015(RV_ObfuscationFunction008, 545, 84, 67, RV_ObfuscationFunction00C, RV_JMRKAJKBMHEI, 76, 19))
#define RV_JMRKAJKBMHEI_02210187 ((__RV_CFDataCreate) RV_LookupFunction015(RV_ObfuscationFunction008, 545, 84, 67, RV_ObfuscationFunction00B, RV_JMRKAJKBMHEI, 100, 16))
#define RV_JMRKAJKBMHEI_02210209 ((__RV_CFURLCreateCopyAppendingPathComponent) RV_LookupFunction015(RV_ObfuscationFunction008, 545, 84, 67, RV_ObfuscationFunction006, RV_JMRKAJKBMHEI, 128, 38))
#define RV_JMRKAJKBMHEI_02230142 ((__RV_SecKeychainSearchCopyNext) RV_LookupFunction015(RV_ObfuscationFunction003, 547, 177, 55, RV_ObfuscationFunction00A, RV_JMRKAJKBMHEI, 129, 34))
#define RV_WMNKCSOYDTBO_003E0028 ((__RV_IOServiceGetMatchingServices) RV_LookupFunction015(RV_ObfuscationFunction00C, 62, 243, 49, RV_ObfuscationFunction00A, RV_WMNKCSOYDTBO, 98, 37))
#define RV_WMNKCSOYDTBO_00BD01DE ((__RV_SecKeychainOpen) RV_LookupFunction015(RV_ObfuscationFunction008, 189, 33, 55, RV_ObfuscationFunction008, RV_WMNKCSOYDTBO, 110, 16))
#define RV_WMNKCSOYDTBO_00C40048 ((__RV_CFDictionaryGetValue) RV_LookupFunction015(RV_ObfuscationFunction009, 196, 106, 67, RV_ObfuscationFunction008, RV_WMNKCSOYDTBO, 1, 21))
#define RV_WMNKCSOYDTBO_01A3002B ((__RV_CC_SHA1_Update) RV_LookupFunction015(RV_ObfuscationFunction006, 419, 252, 33, RV_ObfuscationFunction003, RV_WMNKCSOYDTBO, 15, 16))
#define RV_WMNKCSOYDTBO_02210255 ((__RV_CFDateFormatterSetFormat) RV_LookupFunction015(RV_ObfuscationFunction008, 545, 84, 67, RV_ObfuscationFunction009, RV_WMNKCSOYDTBO, 60, 33))
#define RV_WMNKCSOYDTBO_023700B0 ((__RV_CFAbsoluteTimeGetCurrent) RV_LookupFunction015(RV_ObfuscationFunction005, 567, 184, 67, RV_ObfuscationFunction009, RV_WMNKCSOYDTBO, 44, 33))
#define RV_WMNKCSOYDTBO_0237025F ((__RV_CFReadStreamCreateWithFile) RV_LookupFunction015(RV_ObfuscationFunction005, 567, 184, 67, RV_ObfuscationFunction003, RV_WMNKCSOYDTBO, 252, 35))
#define RV_SXDOUIPSMRUU_00C40035 ((__RV_CFStringCompare) RV_LookupFunction015(RV_ObfuscationFunction009, 196, 106, 67, RV_ObfuscationFunction00B, RV_SXDOUIPSMRUU, 119, 16))
#define RV_SXDOUIPSMRUU_00C40078 ((__RV_CFDictionaryCreateMutable) RV_LookupFunction015(RV_ObfuscationFunction009, 196, 106, 67, RV_ObfuscationFunction008, RV_SXDOUIPSMRUU, 97, 34))
#define RV_SXDOUIPSMRUU_00C40097 ((__RV_CFDataAppendBytes) RV_LookupFunction015(RV_ObfuscationFunction009, 196, 106, 67, RV_ObfuscationFunction003, RV_SXDOUIPSMRUU, 209, 18))
#define RV_SXDOUIPSMRUU_01A70240 ((__RV_IOBSDNameMatching) RV_LookupFunction015(RV_ObfuscationFunction003, 423, 178, 49, RV_ObfuscationFunction007, RV_SXDOUIPSMRUU, 231, 18))
#define RV_SXDOUIPSMRUU_02210048 ((__RV_CFDictionaryGetValue) RV_LookupFunction015(RV_ObfuscationFunction008, 545, 84, 67, RV_ObfuscationFunction008, RV_SXDOUIPSMRUU, 1, 21))
#define RV_SXDOUIPSMRUU_02210187 ((__RV_CFDataCreate) RV_LookupFunction015(RV_ObfuscationFunction008, 545, 84, 67, RV_ObfuscationFunction00B, RV_SXDOUIPSMRUU, 100, 16))
#define RV_SXDOUIPSMRUU_0237008F ((__RV_CFStringCompare) RV_LookupFunction015(RV_ObfuscationFunction005, 567, 184, 67, RV_ObfuscationFunction009, RV_SXDOUIPSMRUU, 82, 16))
#define RV_SXDOUIPSMRUU_02370233 ((__RV_CFDataGetLength) RV_LookupFunction015(RV_ObfuscationFunction005, 567, 184, 67, RV_ObfuscationFunction00A, RV_SXDOUIPSMRUU, 216, 16))
#define RV_CWDVPKSFHKME_001B0065 ((__RV_CC_SHA1) RV_LookupFunction015(RV_ObfuscationFunction009, 27, 42, 33, RV_ObfuscationFunction00C, RV_CWDVPKSFHKME, 179, 16))
#define RV_CWDVPKSFHKME_01800226 ((__RV_IOIteratorNext) RV_LookupFunction015(RV_ObfuscationFunction00B, 384, 229, 49, RV_ObfuscationFunction005, RV_CWDVPKSFHKME, 210, 16))
#define RV_CWDVPKSFHKME_02370017 ((__RV_CFBundleGetIdentifier) RV_LookupFunction015(RV_ObfuscationFunction005, 567, 184, 67, RV_ObfuscationFunction007, RV_CWDVPKSFHKME, 33, 22))
#define RV_CWDVPKSFHKME_0237002D ((__RV_CFDataGetBytePtr) RV_LookupFunction015(RV_ObfuscationFunction005, 567, 184, 67, RV_ObfuscationFunction00C, RV_CWDVPKSFHKME, 115, 17))
#define RV_CWDVPKSFHKME_02370035 ((__RV_CFStringCompare) RV_LookupFunction015(RV_ObfuscationFunction005, 567, 184, 67, RV_ObfuscationFunction00B, RV_CWDVPKSFHKME, 119, 16))
#define RV_CWDVPKSFHKME_02370086 ((__RV_CFReadStreamOpen) RV_LookupFunction015(RV_ObfuscationFunction005, 567, 184, 67, RV_ObfuscationFunction004, RV_CWDVPKSFHKME, 10, 17))
#define RV_CWDVPKSFHKME_02370170 ((__RV_CFDictionaryAddValue) RV_LookupFunction015(RV_ObfuscationFunction005, 567, 184, 67, RV_ObfuscationFunction008, RV_CWDVPKSFHKME, 23, 21))
#define RV_CWDVPKSFHKME_02370233 ((__RV_CFDataGetLength) RV_LookupFunction015(RV_ObfuscationFunction005, 567, 184, 67, RV_ObfuscationFunction00A, RV_CWDVPKSFHKME, 216, 16))
#define RV_VZXVJIULPFEV_00C40037 ((__RV_CFStringGetFileSystemRepresentation) RV_LookupFunction015(RV_ObfuscationFunction009, 196, 106, 67, RV_ObfuscationFunction003, RV_VZXVJIULPFEV, 181, 36))
#define RV_VZXVJIULPFEV_02210056 ((__RV_CFDateFormatterCreate) RV_LookupFunction015(RV_ObfuscationFunction008, 545, 84, 67, RV_ObfuscationFunction003, RV_VZXVJIULPFEV, 146, 22))
#define RV_VZXVJIULPFEV_02210080 ((__RV_CFNumberCreate) RV_LookupFunction015(RV_ObfuscationFunction008, 545, 84, 67, RV_ObfuscationFunction005, RV_VZXVJIULPFEV, 145, 16))
#define RV_VZXVJIULPFEV_023701D0 ((__RV_CFArrayCreateMutable) RV_LookupFunction015(RV_ObfuscationFunction005, 567, 184, 67, RV_ObfuscationFunction00A, RV_VZXVJIULPFEV, 34, 21))
#define RV_VZXVJIULPFEV_0237021B ((__RV_CFDataAppendBytes) RV_LookupFunction015(RV_ObfuscationFunction005, 567, 184, 67, RV_ObfuscationFunction008, RV_VZXVJIULPFEV, 43, 18))
#define RV_IOObjectRelease_01A701A1 ((__RV_IOObjectRelease) RV_LookupFunction015(RV_ObfuscationFunction003, 423, 178, 49, RV_ObfuscationFunction007, 417, 159, 16))
#define RV_kCFBundleIdentifierKey_0221005E ((__RV_kCFBundleIdentifierKey) RV_LookupFunction015(RV_ObfuscationFunction008, 545, 84, 67, RV_ObfuscationFunction00C, 94, 19, 23))
#define RV_kCFDateFormatterTimeZone_00C400E5 ((__RV_kCFDateFormatterTimeZone) RV_LookupFunction015(RV_ObfuscationFunction009, 196, 106, 67, RV_ObfuscationFunction00A, 229, 129, 33))
#define RV_kCFTypeArrayCallBacks_02210161 ((__RV_kCFTypeArrayCallBacks) RV_LookupFunction015(RV_ObfuscationFunction008, 545, 84, 67, RV_ObfuscationFunction006, 353, 247, 22))
#define RV_kCFTypeArrayCallBacks_0237006E ((__RV_kCFTypeArrayCallBacks) RV_LookupFunction015(RV_ObfuscationFunction005, 567, 184, 67, RV_ObfuscationFunction00B, 110, 190, 22))
#define RV_kCFTypeArrayCallBacks_02370161 ((__RV_kCFTypeArrayCallBacks) RV_LookupFunction015(RV_ObfuscationFunction005, 567, 184, 67, RV_ObfuscationFunction006, 353, 247, 22))
#define RV_kCFTypeDictionaryKeyCallBacks_02370070 ((__RV_kCFTypeDictionaryKeyCallBacks) RV_LookupFunction015(RV_ObfuscationFunction005, 567, 184, 67, RV_ObfuscationFunction00B, 112, 130, 38))
#define RV_kCFTypeDictionaryKeyCallBacks_02370152 ((__RV_kCFTypeDictionaryKeyCallBacks) RV_LookupFunction015(RV_ObfuscationFunction005, 567, 184, 67, RV_ObfuscationFunction006, 338, 80, 38))
#define RV_kCFTypeDictionaryValueCallBacks_0221007C ((__RV_kCFTypeDictionaryValueCallBacks) RV_LookupFunction015(RV_ObfuscationFunction008, 545, 84, 67, RV_ObfuscationFunction00C, 124, 85, 32))
#define RV_kCFTypeDictionaryValueCallBacks_023700AA ((__RV_kCFTypeDictionaryValueCallBacks) RV_LookupFunction015(RV_ObfuscationFunction005, 567, 184, 67, RV_ObfuscationFunction00B, 170, 136, 32))
#define RV_kSecClass_00BD0091 ((__RV_kSecClass) RV_LookupFunction015(RV_ObfuscationFunction008, 189, 33, 55, RV_ObfuscationFunction008, 145, 66, 16))
#define RV_kSecClass_0223017E ((__RV_kSecClass) RV_LookupFunction015(RV_ObfuscationFunction003, 547, 177, 55, RV_ObfuscationFunction009, 382, 53, 16))
#define RV_kSecClassCertificate_00BD0001 ((__RV_kSecClassCertificate) RV_LookupFunction015(RV_ObfuscationFunction008, 189, 33, 55, RV_ObfuscationFunction003, 1, 143, 21))
#define RV_kSecClassCertificate_00BD0253 ((__RV_kSecClassCertificate) RV_LookupFunction015(RV_ObfuscationFunction008, 189, 33, 55, RV_ObfuscationFunction00A, 595, 222, 21))
#define RV_kSecMatchLimit_007101BA ((__RV_kSecMatchLimit) RV_LookupFunction015(RV_ObfuscationFunction004, 113, 51, 55, RV_ObfuscationFunction004, 442, 176, 16))
#define RV_kSecMatchLimit_022301EB ((__RV_kSecMatchLimit) RV_LookupFunction015(RV_ObfuscationFunction003, 547, 177, 55, RV_ObfuscationFunction003, 491, 162, 16))
#define RV_kSecMatchLimitAll_00BD0138 ((__RV_kSecMatchLimitAll) RV_LookupFunction015(RV_ObfuscationFunction008, 189, 33, 55, RV_ObfuscationFunction00B, 312, 239, 18))
#define RV_kSecMatchLimitAll_02230138 ((__RV_kSecMatchLimitAll) RV_LookupFunction015(RV_ObfuscationFunction003, 547, 177, 55, RV_ObfuscationFunction00B, 312, 239, 18))
#define RV_kSecMatchSearchList_00BD00E6 ((__RV_kSecMatchSearchList) RV_LookupFunction015(RV_ObfuscationFunction008, 189, 33, 55, RV_ObfuscationFunction00A, 230, 135, 20))
#define RV_kSecMatchSearchList_00BD0229 ((__RV_kSecMatchSearchList) RV_LookupFunction015(RV_ObfuscationFunction008, 189, 33, 55, RV_ObfuscationFunction005, 553, 140, 20))
#define RV_kSecMatchSubjectContains_00BD01F5 ((__RV_kSecMatchSubjectContains) RV_LookupFunction015(RV_ObfuscationFunction008, 189, 33, 55, RV_ObfuscationFunction00C, 501, 176, 33))
#define RV_kSecMatchSubjectContains_022301CE ((__RV_kSecMatchSubjectContains) RV_LookupFunction015(RV_ObfuscationFunction003, 547, 177, 55, RV_ObfuscationFunction00C, 462, 178, 33))
#define RV_kSecReturnRef_02230052 ((__RV_kSecReturnRef) RV_LookupFunction015(RV_ObfuscationFunction003, 547, 177, 55, RV_ObfuscationFunction008, 82, 56, 16))
#define RV_kSecReturnRef_0223015E ((__RV_kSecReturnRef) RV_LookupFunction015(RV_ObfuscationFunction003, 547, 177, 55, RV_ObfuscationFunction004, 350, 143, 16))
#define RV_longjmp_001B01C4 ((__RV_longjmp) RV_LookupFunction015(RV_ObfuscationFunction009, 27, 42, 33, RV_ObfuscationFunction007, 452, 120, 16))
#define RV_longjmp_001B01D7 ((__RV_longjmp) RV_LookupFunction015(RV_ObfuscationFunction009, 27, 42, 33, RV_ObfuscationFunction003, 471, 218, 16))
#define RV_longjmp_006D01C4 ((__RV_longjmp) RV_LookupFunction015(RV_ObfuscationFunction007, 109, 96, 33, RV_ObfuscationFunction007, 452, 120, 16))
#define RV_longjmp_006D01D6 ((__RV_longjmp) RV_LookupFunction015(RV_ObfuscationFunction007, 109, 96, 33, RV_ObfuscationFunction008, 470, 182, 16))
#define RV_longjmp_006D01D7 ((__RV_longjmp) RV_LookupFunction015(RV_ObfuscationFunction007, 109, 96, 33, RV_ObfuscationFunction003, 471, 218, 16))
#define RV_longjmp_01A301C4 ((__RV_longjmp) RV_LookupFunction015(RV_ObfuscationFunction006, 419, 252, 33, RV_ObfuscationFunction007, 452, 120, 16))
#define RV_longjmp_01A301D6 ((__RV_longjmp) RV_LookupFunction015(RV_ObfuscationFunction006, 419, 252, 33, RV_ObfuscationFunction008, 470, 182, 16))
#define RV_longjmp_01A301D7 ((__RV_longjmp) RV_LookupFunction015(RV_ObfuscationFunction006, 419, 252, 33, RV_ObfuscationFunction003, 471, 218, 16))
#define RV_OBJ_txt2obj_017B00C3 ((__RV_OBJ_txt2obj) RV_LookupFunction015(RV_ObfuscationFunction008, 379, 129, 16, RV_ObfuscationFunction003, 195, 40, 16))
#define RV_objc_getClass_01450004 ((__RV_objc_getClass) RV_LookupFunction015(RV_ObfuscationFunction00B, 325, 4, 23, RV_ObfuscationFunction003, 4, 23, 16))
#define RV_objc_getClass_01450033 ((__RV_objc_getClass) RV_LookupFunction015(RV_ObfuscationFunction00B, 325, 4, 23, RV_ObfuscationFunction006, 51, 194, 16))
#define RV_objc_getClass_014501A4 ((__RV_objc_getClass) RV_LookupFunction015(RV_ObfuscationFunction00B, 325, 4, 23, RV_ObfuscationFunction005, 420, 107, 16))
#define RV_objc_getClass_016C0004 ((__RV_objc_getClass) RV_LookupFunction015(RV_ObfuscationFunction005, 364, 169, 23, RV_ObfuscationFunction003, 4, 23, 16))
#define RV_objc_getClass_016C0033 ((__RV_objc_getClass) RV_LookupFunction015(RV_ObfuscationFunction005, 364, 169, 23, RV_ObfuscationFunction006, 51, 194, 16))
#define RV_objc_getClass_016C01A4 ((__RV_objc_getClass) RV_LookupFunction015(RV_ObfuscationFunction005, 364, 169, 23, RV_ObfuscationFunction005, 420, 107, 16))
#define RV_objc_getClass_01760004 ((__RV_objc_getClass) RV_LookupFunction015(RV_ObfuscationFunction005, 374, 11, 23, RV_ObfuscationFunction003, 4, 23, 16))
#define RV_objc_getClass_017601A4 ((__RV_objc_getClass) RV_LookupFunction015(RV_ObfuscationFunction005, 374, 11, 23, RV_ObfuscationFunction005, 420, 107, 16))
#define RV_objc_msgSend_01450101 ((__RV_objc_msgSend) RV_LookupFunction015(RV_ObfuscationFunction00B, 325, 4, 23, RV_ObfuscationFunction009, 257, 245, 16))
#define RV_objc_msgSend_014501E9 ((__RV_objc_msgSend) RV_LookupFunction015(RV_ObfuscationFunction00B, 325, 4, 23, RV_ObfuscationFunction009, 489, 101, 16))
#define RV_objc_msgSend_0145023A ((__RV_objc_msgSend) RV_LookupFunction015(RV_ObfuscationFunction00B, 325, 4, 23, RV_ObfuscationFunction006, 570, 58, 16))
#define RV_objc_msgSend_016C0101 ((__RV_objc_msgSend) RV_LookupFunction015(RV_ObfuscationFunction005, 364, 169, 23, RV_ObfuscationFunction009, 257, 245, 16))
#define RV_objc_msgSend_016C01E9 ((__RV_objc_msgSend) RV_LookupFunction015(RV_ObfuscationFunction005, 364, 169, 23, RV_ObfuscationFunction009, 489, 101, 16))
#define RV_objc_msgSend_016C023A ((__RV_objc_msgSend) RV_LookupFunction015(RV_ObfuscationFunction005, 364, 169, 23, RV_ObfuscationFunction006, 570, 58, 16))
#define RV_objc_msgSend_017601E9 ((__RV_objc_msgSend) RV_LookupFunction015(RV_ObfuscationFunction005, 374, 11, 23, RV_ObfuscationFunction009, 489, 101, 16))
#define RV_OpenSSL_add_all_digests_0058021D ((__RV_OpenSSL_add_all_digests) RV_LookupFunction015(RV_ObfuscationFunction00C, 88, 155, 16, RV_ObfuscationFunction00A, 541, 52, 32))
#define RV_PKCS7_free_0058012E ((__RV_PKCS7_free) RV_LookupFunction015(RV_ObfuscationFunction00C, 88, 155, 16, RV_ObfuscationFunction00A, 302, 198, 16))
#define RV_PKCS7_get0_signers_021001AE ((__RV_PKCS7_get0_signers) RV_LookupFunction015(RV_ObfuscationFunction00A, 528, 238, 16, RV_ObfuscationFunction006, 430, 128, 19))
#define RV_PKCS7_verify_021000DD ((__RV_PKCS7_verify) RV_LookupFunction015(RV_ObfuscationFunction00A, 528, 238, 16, RV_ObfuscationFunction004, 221, 52, 16))
#define RV_SecCertificateCopyData_00710012 ((__RV_SecCertificateCopyData) RV_LookupFunction015(RV_ObfuscationFunction004, 113, 51, 55, RV_ObfuscationFunction008, 18, 30, 23))
#define RV_SecCertificateCopyData_007101AB ((__RV_SecCertificateCopyData) RV_LookupFunction015(RV_ObfuscationFunction004, 113, 51, 55, RV_ObfuscationFunction008, 427, 187, 23))
#define RV_SecItemCopyMatching_007100F1 ((__RV_SecItemCopyMatching) RV_LookupFunction015(RV_ObfuscationFunction004, 113, 51, 55, RV_ObfuscationFunction004, 241, 0, 20))
#define RV_SecItemCopyMatching_022300D3 ((__RV_SecItemCopyMatching) RV_LookupFunction015(RV_ObfuscationFunction003, 547, 177, 55, RV_ObfuscationFunction00B, 211, 139, 20))
#define RV_sel_registerName_01450100 ((__RV_sel_registerName) RV_LookupFunction015(RV_ObfuscationFunction00B, 325, 4, 23, RV_ObfuscationFunction003, 256, 83, 17))
#define RV_sel_registerName_0145022E ((__RV_sel_registerName) RV_LookupFunction015(RV_ObfuscationFunction00B, 325, 4, 23, RV_ObfuscationFunction007, 558, 135, 17))
#define RV_sel_registerName_016C0100 ((__RV_sel_registerName) RV_LookupFunction015(RV_ObfuscationFunction005, 364, 169, 23, RV_ObfuscationFunction003, 256, 83, 17))
#define RV_sel_registerName_016C022E ((__RV_sel_registerName) RV_LookupFunction015(RV_ObfuscationFunction005, 364, 169, 23, RV_ObfuscationFunction007, 558, 135, 17))
#define RV_sel_registerName_01760100 ((__RV_sel_registerName) RV_LookupFunction015(RV_ObfuscationFunction005, 374, 11, 23, RV_ObfuscationFunction003, 256, 83, 17))
#define RV_sel_registerName_0176010D ((__RV_sel_registerName) RV_LookupFunction015(RV_ObfuscationFunction005, 374, 11, 23, RV_ObfuscationFunction004, 269, 211, 17))
#define RV_sel_registerName_0176022E ((__RV_sel_registerName) RV_LookupFunction015(RV_ObfuscationFunction005, 374, 11, 23, RV_ObfuscationFunction007, 558, 135, 17))
#define RV_setjmp_001B0208 ((__RV_setjmp) RV_LookupFunction015(RV_ObfuscationFunction009, 27, 42, 33, RV_ObfuscationFunction005, 520, 147, 16))
#define RV_SHA1_021000C1 ((__RV_SHA1) RV_LookupFunction015(RV_ObfuscationFunction00A, 528, 238, 16, RV_ObfuscationFunction005, 193, 189, 16))
#define RV_SHA1_Final_021001B7 ((__RV_SHA1_Final) RV_LookupFunction015(RV_ObfuscationFunction00A, 528, 238, 16, RV_ObfuscationFunction008, 439, 70, 16))
#define RV_SHA1_Init_021000BC ((__RV_SHA1_Init) RV_LookupFunction015(RV_ObfuscationFunction00A, 528, 238, 16, RV_ObfuscationFunction004, 188, 244, 16))
#define RV_SHA1_Update_005801BF ((__RV_SHA1_Update) RV_LookupFunction015(RV_ObfuscationFunction00C, 88, 155, 16, RV_ObfuscationFunction006, 447, 148, 16))
#define RV_sk_free_00580206 ((__RV_sk_free) RV_LookupFunction015(RV_ObfuscationFunction00C, 88, 155, 16, RV_ObfuscationFunction009, 518, 102, 16))
#define RV_sk_num_005801B4 ((__RV_sk_num) RV_LookupFunction015(RV_ObfuscationFunction00C, 88, 155, 16, RV_ObfuscationFunction00C, 436, 225, 16))
#define RV_sk_value_017B0022 ((__RV_sk_value) RV_LookupFunction015(RV_ObfuscationFunction008, 379, 129, 16, RV_ObfuscationFunction004, 34, 29, 16))
#define RV_X509_digest_0210008C ((__RV_X509_digest) RV_LookupFunction015(RV_ObfuscationFunction00A, 528, 238, 16, RV_ObfuscationFunction008, 140, 154, 16))
#define RV_X509_free_017B010F ((__RV_X509_free) RV_LookupFunction015(RV_ObfuscationFunction008, 379, 129, 16, RV_ObfuscationFunction00A, 271, 177, 16))
#define RV_X509_get_ext_by_OBJ_017B0099 ((__RV_X509_get_ext_by_OBJ) RV_LookupFunction015(RV_ObfuscationFunction008, 379, 129, 16, RV_ObfuscationFunction007, 153, 191, 20))
#define RV_X509_NAME_get_text_by_NID_017B0014 ((__RV_X509_NAME_get_text_by_NID) RV_LookupFunction015(RV_ObfuscationFunction008, 379, 129, 16, RV_ObfuscationFunction00A, 20, 93, 34))
#define RV_X509_STORE_add_cert_005800BB ((__RV_X509_STORE_add_cert) RV_LookupFunction015(RV_ObfuscationFunction00C, 88, 155, 16, RV_ObfuscationFunction004, 187, 42, 20))
#define RV_X509_STORE_free_021001C5 ((__RV_X509_STORE_free) RV_LookupFunction015(RV_ObfuscationFunction00A, 528, 238, 16, RV_ObfuscationFunction00B, 453, 188, 16))
#define RV_X509_STORE_new_005800EA ((__RV_X509_STORE_new) RV_LookupFunction015(RV_ObfuscationFunction00C, 88, 155, 16, RV_ObfuscationFunction00A, 234, 34, 16))
    
    
    // CodeBlock ObfuscationFunction / M(Rot)
    inline static void RV_ObfuscationFunction003(const char *RV_p1, char *RV_p2, int RV_p3, int RV_p4) {
        int RV_i1 = 0;
        while(RV_i1 < RV_p4) { RV_p2[RV_i1] = (char) (RV_p1[RV_i1] - RV_p3); RV_i1++; }
    }
    
    __RETURN_RETAINED inline static CFStringRef RV_ObfuscationFunction003CF(const char *RV_p1, int RV_p3, int RV_p4) {
        char RV_tmp1[608];
        char *RV_tmp2 = RV_tmp1;
        RV_ObfuscationFunction003(RV_p1, RV_tmp1, RV_p3, RV_p4);
        while(*RV_tmp2) { RV_tmp2++; }
        CFStringRef RV_str1 = ((__RV_CFStringCreateWithBytes) RV_Pointers[157])(NULL, (const UInt8 *) RV_tmp1, (CFIndex) (RV_tmp2 - RV_tmp1), kCFStringEncodingUTF8, false);
        return RV_str1;
    }
    
    
    // CodeBlock ObfuscationFunction / M(Rot)
    inline static void RV_ObfuscationFunction004(const char *RV_p1, char *RV_p2, int RV_p3, int RV_p4) {
        int RV_i1 = 0;
        while(RV_i1 < RV_p4) { RV_p2[RV_i1] = (char) (RV_p1[RV_i1] - RV_p3); RV_i1++; }
    }
    
    __RETURN_RETAINED inline static CFStringRef RV_ObfuscationFunction004CF(const char *RV_p1, int RV_p3, int RV_p4) {
        char RV_tmp1[608];
        RV_ObfuscationFunction004(RV_p1, RV_tmp1, RV_p3, RV_p4);
        CFStringRef RV_str1 = ((__RV_CFStringCreateWithCString) RV_Pointers[166])(NULL, RV_tmp1, kCFStringEncodingUTF8);
        return RV_str1;
    }
    
    
    // CodeBlock ObfuscationFunction / M(Xor1)
    inline static void RV_ObfuscationFunction005(const char *RV_p1, char *RV_p2, int RV_p3, int RV_p4) {
        int RV_i1 = 0;
        while(RV_i1 < RV_p4) { RV_p2[RV_i1] = RV_p1[RV_i1] ^ (char) RV_p3; RV_i1++; }
    }
    
    __RETURN_RETAINED inline static CFStringRef RV_ObfuscationFunction005CF(const char *RV_p1, int RV_p3, int RV_p4) {
        char RV_tmp1[608];
        char *RV_tmp2 = RV_tmp1;
        RV_ObfuscationFunction005(RV_p1, RV_tmp1, RV_p3, RV_p4);
        while(*RV_tmp2) { RV_tmp2++; }
        CFStringRef RV_str1 = ((__RV_CFStringCreateWithBytes) RV_Pointers[157])(NULL, (const UInt8 *) RV_tmp1, (CFIndex) (RV_tmp2 - RV_tmp1), kCFStringEncodingUTF8, false);
        return RV_str1;
    }
    
    
    // CodeBlock ObfuscationFunction / M(Xor1)
    inline static void RV_ObfuscationFunction006(const char *RV_p1, char *RV_p2, int RV_p3, int RV_p4) {
        int RV_i1 = 0;
        while(RV_i1 < RV_p4) { RV_p2[RV_i1] = RV_p1[RV_i1] ^ (char) RV_p3; RV_i1++; }
    }
    
    __RETURN_RETAINED inline static CFStringRef RV_ObfuscationFunction006CF(const char *RV_p1, int RV_p3, int RV_p4) {
        char RV_tmp1[608];
        RV_ObfuscationFunction006(RV_p1, RV_tmp1, RV_p3, RV_p4);
        CFStringRef RV_str1 = ((__RV_CFStringCreateWithCString) RV_Pointers[115])(NULL, RV_tmp1, kCFStringEncodingUTF8);
        return RV_str1;
    }
    
    
    // CodeBlock ObfuscationFunction / M(Xor2)
    inline static void RV_ObfuscationFunction007(const char *RV_p1, char *RV_p2, int RV_p3, int RV_p4) {
        int RV_i1 = 0;
        while(RV_i1 < RV_p4) { RV_p2[RV_i1] = (char) (RV_p1[RV_i1] ^ RV_p3 ^ RV_p4); RV_i1++; }
    }
    
    __RETURN_RETAINED inline static CFStringRef RV_ObfuscationFunction007CF(const char *RV_p1, int RV_p3, int RV_p4) {
        char RV_tmp1[608];
        char *RV_tmp2 = RV_tmp1;
        RV_ObfuscationFunction007(RV_p1, RV_tmp1, RV_p3, RV_p4);
        while(*RV_tmp2) { RV_tmp2++; }
        CFStringRef RV_str1 = ((__RV_CFStringCreateWithBytes) RV_Pointers[290])(NULL, (const UInt8 *) RV_tmp1, (CFIndex) (RV_tmp2 - RV_tmp1), kCFStringEncodingUTF8, false);
        return RV_str1;
    }
    
    
    // CodeBlock ObfuscationFunction / M(Xor2)
    inline static void RV_ObfuscationFunction008(const char *RV_p1, char *RV_p2, int RV_p3, int RV_p4) {
        int RV_i1 = 0;
        while(RV_i1 < RV_p4) { RV_p2[RV_i1] = (char) (RV_p1[RV_i1] ^ RV_p3 ^ RV_p4); RV_i1++; }
    }
    
    __RETURN_RETAINED inline static CFStringRef RV_ObfuscationFunction008CF(const char *RV_p1, int RV_p3, int RV_p4) {
        char RV_tmp1[608];
        RV_ObfuscationFunction008(RV_p1, RV_tmp1, RV_p3, RV_p4);
        CFStringRef RV_str1 = ((__RV_CFStringCreateWithCString) RV_Pointers[166])(NULL, RV_tmp1, kCFStringEncodingUTF8);
        return RV_str1;
    }
    
    
    // CodeBlock ObfuscationFunction / M(Xor3)
    inline static void RV_ObfuscationFunction009(const char *RV_p1, char *RV_p2, int RV_p3, int RV_p4) {
        int RV_i1 = 0;
        while(RV_i1 < RV_p4) { RV_p2[RV_i1] = (char) (RV_p1[RV_i1] ^ (RV_p3 + RV_p4)); RV_i1++; }
    }
    
    __RETURN_RETAINED inline static CFStringRef RV_ObfuscationFunction009CF(const char *RV_p1, int RV_p3, int RV_p4) {
        char RV_tmp1[608];
        char *RV_tmp2 = RV_tmp1;
        RV_ObfuscationFunction009(RV_p1, RV_tmp1, RV_p3, RV_p4);
        while(*RV_tmp2) { RV_tmp2++; }
        CFStringRef RV_str1 = ((__RV_CFStringCreateWithBytes) RV_Pointers[157])(NULL, (const UInt8 *) RV_tmp1, (CFIndex) (RV_tmp2 - RV_tmp1), kCFStringEncodingUTF8, false);
        return RV_str1;
    }
    
    
    // CodeBlock ObfuscationFunction / M(Xor3)
    inline static void RV_ObfuscationFunction00A(const char *RV_p1, char *RV_p2, int RV_p3, int RV_p4) {
        int RV_i1 = 0;
        while(RV_i1 < RV_p4) { RV_p2[RV_i1] = (char) (RV_p1[RV_i1] ^ (RV_p3 + RV_p4)); RV_i1++; }
    }
    
    __RETURN_RETAINED inline static CFStringRef RV_ObfuscationFunction00ACF(const char *RV_p1, int RV_p3, int RV_p4) {
        char RV_tmp1[608];
        RV_ObfuscationFunction00A(RV_p1, RV_tmp1, RV_p3, RV_p4);
        CFStringRef RV_str1 = ((__RV_CFStringCreateWithCString) RV_Pointers[115])(NULL, RV_tmp1, kCFStringEncodingUTF8);
        return RV_str1;
    }
    
    
    // CodeBlock ObfuscationFunction / M(Xor4)
    inline static void RV_ObfuscationFunction00B(const char *RV_p1, char *RV_p2, int RV_p3, int RV_p4) {
        int RV_i1 = 0;
        while(RV_i1 < RV_p4) { RV_p2[RV_i1] = (char) (RV_p1[RV_i1] ^ (RV_p3 * RV_p4)); RV_i1++; }
    }
    
    __RETURN_RETAINED inline static CFStringRef RV_ObfuscationFunction00BCF(const char *RV_p1, int RV_p3, int RV_p4) {
        char RV_tmp1[608];
        char *RV_tmp2 = RV_tmp1;
        RV_ObfuscationFunction00B(RV_p1, RV_tmp1, RV_p3, RV_p4);
        while(*RV_tmp2) { RV_tmp2++; }
        CFStringRef RV_str1 = ((__RV_CFStringCreateWithBytes) RV_Pointers[561])(NULL, (const UInt8 *) RV_tmp1, (CFIndex) (RV_tmp2 - RV_tmp1), kCFStringEncodingUTF8, false);
        return RV_str1;
    }
    
    
    // CodeBlock ObfuscationFunction / M(Xor4)
    inline static void RV_ObfuscationFunction00C(const char *RV_p1, char *RV_p2, int RV_p3, int RV_p4) {
        int RV_i1 = 0;
        while(RV_i1 < RV_p4) { RV_p2[RV_i1] = (char) (RV_p1[RV_i1] ^ (RV_p3 * RV_p4)); RV_i1++; }
    }
    
    __RETURN_RETAINED inline static CFStringRef RV_ObfuscationFunction00CCF(const char *RV_p1, int RV_p3, int RV_p4) {
        char RV_tmp1[608];
        RV_ObfuscationFunction00C(RV_p1, RV_tmp1, RV_p3, RV_p4);
        CFStringRef RV_str1 = ((__RV_CFStringCreateWithCString) RV_Pointers[405])(NULL, RV_tmp1, kCFStringEncodingUTF8);
        return RV_str1;
    }
    
    
    // CodeBlock LookupFunction
    inline static void *RV_LookupFunction015(RV_decrypt RV_func1, int RV_index1, int RV_val1, int RV_len1, RV_decrypt RV_func2, int RV_index2, int RV_val2, int RV_len2) {
        char RV_tmp1[608], RV_tmp2[608];
        // Load the library if needed
        if (RV_Pointers[RV_index1] == NULL) {
            RV_func1(RV_Strings[RV_index1], RV_tmp1, RV_val1, RV_len1);
            RV_Pointers[RV_index1] = ((__RV_dlopen) RV_Pointers[258])(RV_tmp1, RTLD_NOW | RTLD_FIRST);
        }
        // Load the function if needed
        if (RV_Pointers[RV_index2] == NULL) {
            RV_func2(RV_Strings[RV_index2], RV_tmp2, RV_val2, RV_len2);
            RV_Pointers[RV_index2] = ((__RV_dlsym) RV_Pointers[249])(RV_Pointers[RV_index1], RV_tmp2);
        }
        return RV_Pointers[RV_index2];
    }
    
    
    
    
    // CodeBlock GetMainBundle
#ifdef DEBUG
    inline static void RV_GetMainBundle016(RV_CheckingContext *RV_ctx) {
        __RV_RECEIPT_LOG("RV - Retrieving main bundle");
        // Retrieve the main bundle
        RV_ctx->main_bundle = RV_CFBundleGetMainBundle_02370019();
        if (!RV_ctx->main_bundle) {
            // Dead code
            RV_CFRelease_0237016E(RV_ctx->main_bundle);
            RV_CFBundleUnloadExecutable_02370083((CFBundleRef) RV_ctx->main_bundle);
        }
        // Global variables computation
        // Set to 265
        RV_GARRBHPFHLCT = 265;
        // Set to 443
        RV_REWMHCKNSQCB = 443;
        // Set to 432
        RV_OFAURLMWXRIU = 432;
        // Set to 521
        RV_JMRKAJKBMHEI = 521;
        // Set to 607
        RV_WMNKCSOYDTBO = 607;
        // Set to 151
        RV_SXDOUIPSMRUU = 151;
        // Set to 134
        RV_CWDVPKSFHKME = 134;
        // Set to 55
        RV_VZXVJIULPFEV = 55;
    }
#else
#define RV_GetMainBundle016(RV_ctx) { \
__RV_RECEIPT_LOG("RV - Retrieving main bundle"); \
RV_ctx->main_bundle = RV_CFBundleGetMainBundle_02370019(); \
if (!RV_ctx->main_bundle) { \
RV_CFRelease_0237016E(RV_ctx->main_bundle); \
RV_CFBundleUnloadExecutable_02370083((CFBundleRef) RV_ctx->main_bundle); \
} \
RV_GARRBHPFHLCT = 265; \
RV_REWMHCKNSQCB = 443; \
RV_OFAURLMWXRIU = 432; \
RV_JMRKAJKBMHEI = 521; \
RV_WMNKCSOYDTBO = 607; \
RV_SXDOUIPSMRUU = 151; \
RV_CWDVPKSFHKME = 134; \
RV_VZXVJIULPFEV = 55; \
}
#endif
    
    
    // CodeBlock LoadReceipt
#ifndef RECEIGEN_EXTERNAL_RECEIPT
#ifdef DEBUG
    inline static void RV_LoadReceipt01F(RV_CheckingContext *RV_ctx) {
        CFStringRef RV_str1;
        CFURLRef RV_url1, RV_url2;
        CFReadStreamRef RV_stream;
        CFMutableDataRef RV_data;
        CFIndex RV_count;
        uint8_t RV_buffer[608];
        volatile int RV_code = 107; RV_code -= 50; RV_code *= 3; RV_code += 2;
        __RV_RECEIPT_LOG("RV - Loading receipt");
        // Compute the path to the receipt
        RV_url1 = RV_REWMHCKNSQCB_022101BB((CFBundleRef) RV_ctx->main_bundle);
        RV_str1 = RV_ObfuscationFunction00BCF((RV_Strings[171]), 119, 37);
        RV_url2 = RV_JMRKAJKBMHEI_02210209(NULL, RV_url1, RV_str1, false);
        RV_CFRelease_00C400F4(RV_str1);
        RV_CFRelease_00C400F4(RV_url1);
        // Create a stream from the receipt file
        RV_stream = RV_WMNKCSOYDTBO_0237025F(kCFAllocatorDefault, RV_url2);
        if (RV_stream == NULL || !RV_CWDVPKSFHKME_02370086(RV_stream)) {
            __RV_RECEIPT_LOG("RV - Error while opening receipt");
            __RV_RECEIPT_LOG("RV - Exiting with code 173...");
            RV_exit_01A300B7(RV_code);
            // Dead code
            RV_CFRelease_00C400F4(RV_url1);
            RV_CFRelease_00C400F4(RV_str1);
            RV_CFRelease_00C400F4(RV_url1);
            goto RV_LoadReceipt01F_RV_bail;
        }
        // Create the data object that will contains receipt data
        RV_data = RV_CFDataCreateMutable_00C4009B(kCFAllocatorDefault, 0);
        // Read the receipt by chunks
        do {
            RV_count = RV_GARRBHPFHLCT_00C40109(RV_stream, &RV_buffer[0], 608);
            if (RV_count > 0) {
                RV_SXDOUIPSMRUU_00C40097(RV_data, RV_buffer, RV_count);
            }
        } while (RV_count > 0);
        // Close the stream
        RV_OFAURLMWXRIU_022101B0(RV_stream);
        if (RV_ctx->receipt_data) RV_CFRelease_00C400F4(RV_ctx->receipt_data);
        RV_ctx->receipt_data = RV_data;
        // Global variables computation
        // From 265 to 306
        RV_GARRBHPFHLCT -= 163; RV_GARRBHPFHLCT *= 3;
        // From 443 to 348
        RV_REWMHCKNSQCB += 253; RV_REWMHCKNSQCB /= 2;
        // From 521 to 186
        RV_JMRKAJKBMHEI += 223; RV_JMRKAJKBMHEI /= 4;
        // From 607 to 40
        RV_WMNKCSOYDTBO += 73; RV_WMNKCSOYDTBO /= 17;
        // From 151 to 576
        RV_SXDOUIPSMRUU -= 36; RV_SXDOUIPSMRUU *= 5; RV_SXDOUIPSMRUU += 1;
        // From 134 to 550
        RV_CWDVPKSFHKME -= 43; RV_CWDVPKSFHKME *= 6; RV_CWDVPKSFHKME += 4;
    RV_LoadReceipt01F_RV_bail:
        if (RV_stream) RV_CFRelease_00C400F4(RV_stream);
        RV_CFRelease_00C400F4(RV_url2);
    }
#else
#define RV_LoadReceipt01F(RV_ctx) { \
CFStringRef RV_str1; \
CFURLRef RV_url1, RV_url2; \
CFReadStreamRef RV_stream; \
CFMutableDataRef RV_data; \
CFIndex RV_count; \
uint8_t RV_buffer[608]; \
volatile int RV_code = 107; RV_code -= 50; RV_code *= 3; RV_code += 2;  \
__RV_RECEIPT_LOG("RV - Loading receipt"); \
RV_url1 = RV_REWMHCKNSQCB_022101BB((CFBundleRef) RV_ctx->main_bundle); \
RV_str1 = RV_ObfuscationFunction00BCF((RV_Strings[171]), 119, 37); \
RV_url2 = RV_JMRKAJKBMHEI_02210209(NULL, RV_url1, RV_str1, false); \
RV_CFRelease_00C400F4(RV_str1); \
RV_CFRelease_00C400F4(RV_url1); \
RV_stream = RV_WMNKCSOYDTBO_0237025F(kCFAllocatorDefault, RV_url2); \
if (RV_stream == NULL || !RV_CWDVPKSFHKME_02370086(RV_stream)) { \
__RV_RECEIPT_LOG("RV - Error while opening receipt"); \
__RV_RECEIPT_LOG("RV - Exiting with code 173..."); \
RV_exit_01A300B7(RV_code); \
RV_CFRelease_00C400F4(RV_url1); \
RV_CFRelease_00C400F4(RV_str1); \
RV_CFRelease_00C400F4(RV_url1); \
goto RV_LoadReceipt01F_RV_bail; \
} \
RV_data = RV_CFDataCreateMutable_00C4009B(kCFAllocatorDefault, 0); \
do { \
RV_count = RV_GARRBHPFHLCT_00C40109(RV_stream, &RV_buffer[0], 608); \
if (RV_count > 0) { \
RV_SXDOUIPSMRUU_00C40097(RV_data, RV_buffer, RV_count); \
} \
} while (RV_count > 0); \
RV_OFAURLMWXRIU_022101B0(RV_stream); \
if (RV_ctx->receipt_data) RV_CFRelease_00C400F4(RV_ctx->receipt_data); \
RV_ctx->receipt_data = RV_data; \
RV_GARRBHPFHLCT -= 163; RV_GARRBHPFHLCT *= 3;  \
RV_REWMHCKNSQCB += 253; RV_REWMHCKNSQCB /= 2;  \
RV_JMRKAJKBMHEI += 223; RV_JMRKAJKBMHEI /= 4;  \
RV_WMNKCSOYDTBO += 73; RV_WMNKCSOYDTBO /= 17;  \
RV_SXDOUIPSMRUU -= 36; RV_SXDOUIPSMRUU *= 5; RV_SXDOUIPSMRUU += 1;  \
RV_CWDVPKSFHKME -= 43; RV_CWDVPKSFHKME *= 6; RV_CWDVPKSFHKME += 4;  \
RV_LoadReceipt01F_RV_bail: \
if (RV_stream) RV_CFRelease_00C400F4(RV_stream);     \
RV_CFRelease_00C400F4(RV_url2); \
}
#endif
#endif
    
#ifdef RECEIGEN_EXTERNAL_RECEIPT
#ifdef DEBUG
    inline static void RV_LoadReceipt01F(RV_CheckingContext *RV_ctx) {
        CFStringRef RV_str1;
        CFURLRef RV_url1 = NULL;
        CFReadStreamRef RV_stream = NULL;
        CFMutableDataRef RV_data;
        CFIndex RV_count;
        uint8_t RV_buffer[608];
        char RV_path[PATH_MAX];
        int RV_status;
        glob_t RV_glob_buffer;
        char *RV_expanded_path;
        volatile int RV_code = 17; RV_code -= 3; RV_code *= 12; RV_code += 5;
        RV_str1 = RV_ObfuscationFunction009CF((RV_Strings[406]), 169, 16);
        __RV_RECEIPT_LOG("RV - Loading external receipt at '%s'", CFStringGetCStringPtr(RV_str1, CFStringGetSystemEncoding()));
        // Compute the path to the receipt
        if (!RV_VZXVJIULPFEV_00C40037(RV_str1, RV_path, PATH_MAX)) {
            __RV_RECEIPT_LOG("RV - Cannot convert receipt path");
            __RV_RECEIPT_LOG("RV - Exiting with code 173...");
            RV_exit_001B0117(RV_code);
            // Dead code
            RV_CFRelease_00C4016E(RV_str1);
            RV_CFRelease_00C4016E(RV_url1);
            RV_CFRelease_00C4016E(RV_str1);
            goto RV_LoadReceipt01F_RV_bail;
        }
        RV_status = ((__RV_glob_b) RV_Pointers[488])(RV_path, GLOB_TILDE | GLOB_ERR, NULL, &RV_glob_buffer);
        if (RV_status != 0 || RV_glob_buffer.gl_pathc != 1) {
            ((__RV_globfree) RV_Pointers[107])(&RV_glob_buffer);
            __RV_RECEIPT_LOG("RV - Error while globbing receipt path");
            __RV_RECEIPT_LOG("RV - Exiting with code 173...");
            RV_exit_001B0117(RV_code);
            // Dead code
            RV_CFRelease_00C4016E(RV_url1);
            RV_CFRelease_00C4016E(RV_str1);
            RV_CFRelease_00C4016E(RV_url1);
            goto RV_LoadReceipt01F_RV_bail;
        }
        // Get the globbed path
        RV_expanded_path = RV_glob_buffer.gl_pathv[0];
        __RV_RECEIPT_LOG("RV - Receipt path resolved to '%s'", RV_expanded_path);
        RV_url1 = RV_CFURLCreateFromFileSystemRepresentation_023701FE(kCFAllocatorDefault, (const UInt8 *) RV_expanded_path, (CFIndex) ((__RV_strlen) RV_Pointers[352])(RV_expanded_path), false);
        ((__RV_globfree) RV_Pointers[107])(&RV_glob_buffer);
        // Create a stream from the receipt file
        RV_stream = RV_WMNKCSOYDTBO_0237025F(kCFAllocatorDefault, RV_url1);
        if (RV_stream == NULL || !RV_CWDVPKSFHKME_02370086(RV_stream)) {
            __RV_RECEIPT_LOG("RV - Error while opening receipt");
            __RV_RECEIPT_LOG("RV - Exiting with code 173...");
            RV_exit_001B0117(RV_code);
            // Dead code
            RV_CFRelease_00C4016E(RV_url1);
            RV_CFRelease_00C4016E(RV_str1);
            RV_CFRelease_00C4016E(RV_url1);
            goto RV_LoadReceipt01F_RV_bail;
        }
        // Create the data object that will contains receipt data
        RV_data = RV_CFDataCreateMutable_00C401E4(kCFAllocatorDefault, 0);
        // Read the receipt by chunks
        do {
            RV_count = RV_GARRBHPFHLCT_00C40109(RV_stream, &RV_buffer[0], 608);
            if (RV_count > 0) {
                RV_SXDOUIPSMRUU_00C40097(RV_data, RV_buffer, RV_count);
            }
        } while (RV_count > 0);
        // Close the stream
        RV_OFAURLMWXRIU_022101B0(RV_stream);
        if (RV_ctx->receipt_data) RV_CFRelease_00C4016E(RV_ctx->receipt_data);
        RV_ctx->receipt_data = RV_data;
        // Global variables computation
        // From 265 to 306
        RV_GARRBHPFHLCT -= 163; RV_GARRBHPFHLCT *= 3;
        // From 443 to 348
        RV_REWMHCKNSQCB += 253; RV_REWMHCKNSQCB /= 2;
        // From 521 to 186
        RV_JMRKAJKBMHEI += 223; RV_JMRKAJKBMHEI /= 4;
        // From 607 to 40
        RV_WMNKCSOYDTBO += 73; RV_WMNKCSOYDTBO /= 17;
        // From 151 to 576
        RV_SXDOUIPSMRUU -= 36; RV_SXDOUIPSMRUU *= 5; RV_SXDOUIPSMRUU += 1;
        // From 134 to 550
        RV_CWDVPKSFHKME -= 43; RV_CWDVPKSFHKME *= 6; RV_CWDVPKSFHKME += 4;
    RV_LoadReceipt01F_RV_bail:
        if (RV_stream) RV_CFRelease_00C4016E(RV_stream);
        RV_CFRelease_00C4016E(RV_str1);
        if (RV_url1) RV_CFRelease_00C4016E(RV_url1);
    }
#else
#define RV_LoadReceipt01F(RV_ctx) { \
CFStringRef RV_str1; \
CFURLRef RV_url1 = NULL; \
CFReadStreamRef RV_stream = NULL; \
CFMutableDataRef RV_data; \
CFIndex RV_count; \
uint8_t RV_buffer[608]; \
char RV_path[PATH_MAX]; \
int RV_status; \
glob_t RV_glob_buffer; \
char *RV_expanded_path; \
volatile int RV_code = 17; RV_code -= 3; RV_code *= 12; RV_code += 5;  \
RV_str1 = RV_ObfuscationFunction009CF((RV_Strings[406]), 169, 16); \
__RV_RECEIPT_LOG("RV - Loading external receipt at '%s'", CFStringGetCStringPtr(RV_str1, CFStringGetSystemEncoding())); \
if (!RV_VZXVJIULPFEV_00C40037(RV_str1, RV_path, PATH_MAX)) { \
__RV_RECEIPT_LOG("RV - Cannot convert receipt path"); \
__RV_RECEIPT_LOG("RV - Exiting with code 173..."); \
RV_exit_001B0117(RV_code); \
RV_CFRelease_00C4016E(RV_str1); \
RV_CFRelease_00C4016E(RV_url1); \
RV_CFRelease_00C4016E(RV_str1); \
goto RV_LoadReceipt01F_RV_bail; \
} \
RV_status = ((__RV_glob_b) RV_Pointers[488])(RV_path, GLOB_TILDE | GLOB_ERR, NULL, &RV_glob_buffer); \
if (RV_status != 0 || RV_glob_buffer.gl_pathc != 1) { \
((__RV_globfree) RV_Pointers[107])(&RV_glob_buffer); \
__RV_RECEIPT_LOG("RV - Error while globbing receipt path"); \
__RV_RECEIPT_LOG("RV - Exiting with code 173..."); \
RV_exit_001B0117(RV_code); \
RV_CFRelease_00C4016E(RV_url1); \
RV_CFRelease_00C4016E(RV_str1); \
RV_CFRelease_00C4016E(RV_url1); \
goto RV_LoadReceipt01F_RV_bail; \
} \
RV_expanded_path = RV_glob_buffer.gl_pathv[0]; \
__RV_RECEIPT_LOG("RV - Receipt path resolved to '%s'", RV_expanded_path); \
RV_url1 = RV_CFURLCreateFromFileSystemRepresentation_023701FE(kCFAllocatorDefault, (const UInt8 *) RV_expanded_path, (CFIndex) ((__RV_strlen) RV_Pointers[352])(RV_expanded_path), false); \
((__RV_globfree) RV_Pointers[107])(&RV_glob_buffer); \
RV_stream = RV_WMNKCSOYDTBO_0237025F(kCFAllocatorDefault, RV_url1); \
if (RV_stream == NULL || !RV_CWDVPKSFHKME_02370086(RV_stream)) { \
__RV_RECEIPT_LOG("RV - Error while opening receipt"); \
__RV_RECEIPT_LOG("RV - Exiting with code 173..."); \
RV_exit_001B0117(RV_code); \
RV_CFRelease_00C4016E(RV_url1); \
RV_CFRelease_00C4016E(RV_str1); \
RV_CFRelease_00C4016E(RV_url1); \
goto RV_LoadReceipt01F_RV_bail; \
} \
RV_data = RV_CFDataCreateMutable_00C401E4(kCFAllocatorDefault, 0); \
do { \
RV_count = RV_GARRBHPFHLCT_00C40109(RV_stream, &RV_buffer[0], 608); \
if (RV_count > 0) { \
RV_SXDOUIPSMRUU_00C40097(RV_data, RV_buffer, RV_count); \
} \
} while (RV_count > 0); \
RV_OFAURLMWXRIU_022101B0(RV_stream); \
if (RV_ctx->receipt_data) RV_CFRelease_00C4016E(RV_ctx->receipt_data); \
RV_ctx->receipt_data = RV_data; \
RV_GARRBHPFHLCT -= 163; RV_GARRBHPFHLCT *= 3;  \
RV_REWMHCKNSQCB += 253; RV_REWMHCKNSQCB /= 2;  \
RV_JMRKAJKBMHEI += 223; RV_JMRKAJKBMHEI /= 4;  \
RV_WMNKCSOYDTBO += 73; RV_WMNKCSOYDTBO /= 17;  \
RV_SXDOUIPSMRUU -= 36; RV_SXDOUIPSMRUU *= 5; RV_SXDOUIPSMRUU += 1;  \
RV_CWDVPKSFHKME -= 43; RV_CWDVPKSFHKME *= 6; RV_CWDVPKSFHKME += 4;  \
RV_LoadReceipt01F_RV_bail: \
if (RV_stream) RV_CFRelease_00C4016E(RV_stream);     \
RV_CFRelease_00C4016E(RV_str1); \
if (RV_url1) RV_CFRelease_00C4016E(RV_url1); \
}
#endif
#endif
    
    
    // CodeBlock GetGUID
#ifdef DEBUG
    inline static void RV_GetGUID04C(RV_CheckingContext *RV_ctx) {
        kern_return_t RV_kernResult;
        mach_port_t RV_master_port;
        CFMutableDictionaryRef RV_matching_dict = NULL;
        io_iterator_t RV_iterator;
        io_object_t RV_service, RV_parent_service;
        char *RV_str1;
        CFStringRef RV_str2;
        RV_str2 = RV_ObfuscationFunction00CCF((RV_Strings[335]), 235, 16);
        __RV_RECEIPT_LOG("RV - Getting MAC address");
        // Open a MACH port
        RV_kernResult = RV_GARRBHPFHLCT_01A70132(MACH_PORT_NULL, &RV_master_port);
        if (RV_kernResult != KERN_SUCCESS) {
            // Dead code
            RV_CFRelease_022100F4(RV_str2);
            RV_CFRelease_022100F4(RV_matching_dict);
            RV_CFRelease_022100F4(RV_str2);
            goto RV_GetGUID04C_RV_bail;
        }
        // Create a search for primary interface
        char RV_str1_[608];
        RV_ObfuscationFunction006((RV_Strings[21]), RV_str1_, 242, 16);
        RV_str1 = RV_str1_;
        RV_matching_dict = RV_SXDOUIPSMRUU_01A70240(RV_master_port, 0, RV_str1);
        if (!RV_matching_dict) {
            // Dead code
            RV_CFRelease_022100F4(RV_str2);
            RV_CFRelease_022100F4(RV_matching_dict);
            RV_CFRelease_022100F4(RV_str2);
            goto RV_GetGUID04C_RV_bail;
        }
        // Perform the search
        RV_kernResult = RV_WMNKCSOYDTBO_003E0028(RV_master_port, RV_matching_dict, &RV_iterator);
        if (RV_kernResult != KERN_SUCCESS) {
            // Dead code
            RV_CFRelease_022100F4(RV_str2);
            RV_CFRelease_022100F4(RV_matching_dict);
            RV_CFRelease_022100F4(RV_str2);
            goto RV_GetGUID04C_RV_bail;
        }
        // Iterate over the result
        while((RV_service = RV_CWDVPKSFHKME_01800226(RV_iterator)) != 0) {
            RV_kernResult = RV_JMRKAJKBMHEI_003E00BA(RV_service, kIOServicePlane, &RV_parent_service);
            if (RV_kernResult == KERN_SUCCESS) {
                if (RV_ctx->guid_data) RV_CFRelease_022100F4(RV_ctx->guid_data);
                RV_ctx->guid_data = (CFDataRef) RV_REWMHCKNSQCB_003E015C(RV_parent_service, RV_str2, NULL, 0);
                RV_IOObjectRelease_01A701A1(RV_parent_service);
            }
            RV_IOObjectRelease_01A701A1(RV_iterator);
            RV_IOObjectRelease_01A701A1(RV_service);
        }
        // Global variables computation
        // Set to 102
        RV_GARRBHPFHLCT = 102;
        // From 348 to 516
        RV_REWMHCKNSQCB -= 176; RV_REWMHCKNSQCB *= 3;
        // From 432 to 286
        RV_OFAURLMWXRIU += 426; RV_OFAURLMWXRIU /= 3;
        // From 186 to 322
        RV_JMRKAJKBMHEI -= 79; RV_JMRKAJKBMHEI *= 3; RV_JMRKAJKBMHEI += 1;
        // From 40 to 478
        RV_WMNKCSOYDTBO -= 4; RV_WMNKCSOYDTBO *= 13; RV_WMNKCSOYDTBO += 10;
        // From 576 to 120
        RV_SXDOUIPSMRUU += 144; RV_SXDOUIPSMRUU /= 6;
        // From 550 to 368
        RV_CWDVPKSFHKME += 186; RV_CWDVPKSFHKME /= 2;
        // From 55 to 464
        RV_VZXVJIULPFEV -= 9; RV_VZXVJIULPFEV *= 10; RV_VZXVJIULPFEV += 4;
    RV_GetGUID04C_RV_bail:
        RV_CFRelease_022100F4(RV_str2);
    }
#else
#define RV_GetGUID04C(RV_ctx) { \
kern_return_t RV_kernResult; \
mach_port_t RV_master_port; \
CFMutableDictionaryRef RV_matching_dict = NULL; \
io_iterator_t RV_iterator; \
io_object_t RV_service, RV_parent_service; \
char *RV_str1; \
CFStringRef RV_str2; \
RV_str2 = RV_ObfuscationFunction00CCF((RV_Strings[335]), 235, 16);  \
__RV_RECEIPT_LOG("RV - Getting MAC address"); \
RV_kernResult = RV_GARRBHPFHLCT_01A70132(MACH_PORT_NULL, &RV_master_port); \
if (RV_kernResult != KERN_SUCCESS) { \
RV_CFRelease_022100F4(RV_str2); \
RV_CFRelease_022100F4(RV_matching_dict); \
RV_CFRelease_022100F4(RV_str2); \
goto RV_GetGUID04C_RV_bail; \
} \
char RV_str1_[608]; \
RV_ObfuscationFunction006((RV_Strings[21]), RV_str1_, 242, 16); \
RV_str1 = RV_str1_; \
RV_matching_dict = RV_SXDOUIPSMRUU_01A70240(RV_master_port, 0, RV_str1); \
if (!RV_matching_dict) { \
RV_CFRelease_022100F4(RV_str2); \
RV_CFRelease_022100F4(RV_matching_dict); \
RV_CFRelease_022100F4(RV_str2); \
goto RV_GetGUID04C_RV_bail; \
} \
RV_kernResult = RV_WMNKCSOYDTBO_003E0028(RV_master_port, RV_matching_dict, &RV_iterator); \
if (RV_kernResult != KERN_SUCCESS) { \
RV_CFRelease_022100F4(RV_str2); \
RV_CFRelease_022100F4(RV_matching_dict); \
RV_CFRelease_022100F4(RV_str2); \
goto RV_GetGUID04C_RV_bail; \
} \
while((RV_service = RV_CWDVPKSFHKME_01800226(RV_iterator)) != 0) { \
RV_kernResult = RV_JMRKAJKBMHEI_003E00BA(RV_service, kIOServicePlane, &RV_parent_service); \
if (RV_kernResult == KERN_SUCCESS) { \
if (RV_ctx->guid_data) RV_CFRelease_022100F4(RV_ctx->guid_data); \
RV_ctx->guid_data = (CFDataRef) RV_REWMHCKNSQCB_003E015C(RV_parent_service, RV_str2, NULL, 0); \
RV_IOObjectRelease_01A701A1(RV_parent_service); \
} \
RV_IOObjectRelease_01A701A1(RV_iterator); \
RV_IOObjectRelease_01A701A1(RV_service); \
} \
RV_GARRBHPFHLCT = 102; \
RV_REWMHCKNSQCB -= 176; RV_REWMHCKNSQCB *= 3;  \
RV_OFAURLMWXRIU += 426; RV_OFAURLMWXRIU /= 3;  \
RV_JMRKAJKBMHEI -= 79; RV_JMRKAJKBMHEI *= 3; RV_JMRKAJKBMHEI += 1;  \
RV_WMNKCSOYDTBO -= 4; RV_WMNKCSOYDTBO *= 13; RV_WMNKCSOYDTBO += 10;  \
RV_SXDOUIPSMRUU += 144; RV_SXDOUIPSMRUU /= 6;  \
RV_CWDVPKSFHKME += 186; RV_CWDVPKSFHKME /= 2;  \
RV_VZXVJIULPFEV -= 9; RV_VZXVJIULPFEV *= 10; RV_VZXVJIULPFEV += 4;  \
RV_GetGUID04C_RV_bail: \
RV_CFRelease_022100F4(RV_str2); \
}
#endif
    
    
    // CodeBlock GetRootCA
#if MAC_OS_X_VERSION_MIN_REQUIRED > MAC_OS_X_VERSION_10_6
#ifdef DEBUG
    inline static void RV_GetRootCA051(RV_CheckingContext *RV_ctx) {
        OSStatus RV_status;
        SecKeychainRef RV_keychain = NULL;
        CFTypeRef RV_searchList = NULL;
        CFDictionaryRef RV_searchDict = NULL;
        char *RV_str1;
        CFTypeRef RV_str2 = NULL;
        CFIndex RV_idx;
        CFTypeRef RV_results = NULL;
        SecCertificateRef RV_certificate = NULL;
        volatile CFIndex RV_count1 = 1; RV_count1 /= 1;
        volatile CFIndex RV_count2 = 4; RV_count2 -= 3; RV_count2 *= 3; RV_count2 += 2;
        const void *RV_searchKeys[5];
        const void *RV_searchValues[5];
        volatile int RV_code = 3; RV_code -= 1; RV_code *= 59; RV_code += 55;
        __RV_RECEIPT_LOG("RV - Loading Apple Root CA");
        char RV_str1_[608];
        RV_ObfuscationFunction00C((RV_Strings[424]), RV_str1_, 223, 66);
        RV_str1 = RV_str1_;
        RV_status = RV_WMNKCSOYDTBO_00BD01DE(RV_str1, &RV_keychain);
        if (RV_status != errSecSuccess) {
            __RV_RECEIPT_LOG("RV - Exiting with code 173...");
            RV_exit_01A30182(RV_code);
            // Dead code
            // TODO
            goto RV_GetRootCA051_RV_bail;
        }
        // Create a search list within the system Keychain
        RV_searchList = RV_VZXVJIULPFEV_023701D0(kCFAllocatorDefault, RV_count1, RV_kCFTypeArrayCallBacks_02210161);
        RV_GARRBHPFHLCT_00C40066((CFMutableArrayRef) RV_searchList, RV_keychain);
        // Create the criteria dictionary to find the Apple Root CA certificate
        RV_str2 = RV_ObfuscationFunction008CF((RV_Strings[133]), 55, 16);
        RV_searchKeys[0] = *RV_kSecClass_00BD0091;
        RV_searchValues[0] = *RV_kSecClassCertificate_00BD0001;
        RV_searchKeys[1] = *RV_kSecMatchSearchList_00BD0229;
        RV_searchValues[1] = RV_searchList;
        RV_searchKeys[2] = *RV_kSecMatchSubjectContains_00BD01F5;
        RV_searchValues[2] = RV_str2;
        RV_searchKeys[3] = *RV_kSecMatchLimit_007101BA;
        RV_searchValues[3] = *RV_kSecMatchLimitAll_02230138;
        RV_searchKeys[4] = *RV_kSecReturnRef_02230052;
        RV_searchValues[4] = kCFBooleanTrue;
        RV_searchDict = CFDictionaryCreate(kCFAllocatorDefault, RV_searchKeys, RV_searchValues, RV_count2, NULL, NULL);
        // Perform the actual search
        RV_status = RV_SecItemCopyMatching_022300D3(RV_searchDict, &RV_results);
        if (RV_status != errSecSuccess) {
            __RV_RECEIPT_LOG("RV - Exiting with code 173...");
            RV_exit_01A30182(RV_code);
            // Dead code
            // TODO
            goto RV_GetRootCA051_RV_bail;
        }
        // Iterate over the results and copy the certificate data
        for(RV_idx = 0; RV_idx < RV_CFArrayGetCount_0237016F((CFArrayRef) RV_results); RV_idx++) {
            RV_certificate = (SecCertificateRef) RV_REWMHCKNSQCB_02210204((CFArrayRef) RV_results, RV_idx);
            if (RV_ctx->ca_data) RV_CFRelease_022100F4(RV_ctx->ca_data);
            RV_ctx->ca_data = RV_SecCertificateCopyData_00710012(RV_certificate);
        }
        // Global variables computation
        // From 286 to 592
        RV_OFAURLMWXRIU -= 138; RV_OFAURLMWXRIU *= 4;
        // From 120 to 143
        RV_SXDOUIPSMRUU -= 73; RV_SXDOUIPSMRUU *= 3; RV_SXDOUIPSMRUU += 2;
        // From 368 to 23
        RV_CWDVPKSFHKME += 46; RV_CWDVPKSFHKME /= 18;
    RV_GetRootCA051_RV_bail:
        if (RV_str2) RV_CFRelease_022100F4(RV_str2);
        if (RV_results) RV_CFRelease_022100F4(RV_results);
        if (RV_searchDict) RV_CFRelease_022100F4(RV_searchDict);
        if (RV_searchList) RV_CFRelease_022100F4(RV_searchList);
        if (RV_keychain) RV_CFRelease_022100F4(RV_keychain);
    }
#else
#define RV_GetRootCA051(RV_ctx) { \
OSStatus RV_status; \
SecKeychainRef RV_keychain = NULL; \
CFTypeRef RV_searchList = NULL; \
CFDictionaryRef RV_searchDict = NULL; \
char *RV_str1; \
CFTypeRef RV_str2 = NULL; \
CFIndex RV_idx; \
CFTypeRef RV_results = NULL; \
SecCertificateRef RV_certificate = NULL; \
volatile CFIndex RV_count1 = 1; RV_count1 /= 1;  \
volatile CFIndex RV_count2 = 4; RV_count2 -= 3; RV_count2 *= 3; RV_count2 += 2;  \
const void *RV_searchKeys[5]; \
const void *RV_searchValues[5]; \
volatile int RV_code = 3; RV_code -= 1; RV_code *= 59; RV_code += 55;  \
__RV_RECEIPT_LOG("RV - Loading Apple Root CA"); \
char RV_str1_[608]; \
RV_ObfuscationFunction00C((RV_Strings[424]), RV_str1_, 223, 66); \
RV_str1 = RV_str1_; \
RV_status = RV_WMNKCSOYDTBO_00BD01DE(RV_str1, &RV_keychain); \
if (RV_status != errSecSuccess) { \
__RV_RECEIPT_LOG("RV - Exiting with code 173..."); \
RV_exit_01A30182(RV_code); \
goto RV_GetRootCA051_RV_bail; \
} \
RV_searchList = RV_VZXVJIULPFEV_023701D0(kCFAllocatorDefault, RV_count1, RV_kCFTypeArrayCallBacks_02210161); \
RV_GARRBHPFHLCT_00C40066((CFMutableArrayRef) RV_searchList, RV_keychain); \
RV_str2 = RV_ObfuscationFunction008CF((RV_Strings[133]), 55, 16); \
RV_searchKeys[0] = *RV_kSecClass_00BD0091; \
RV_searchValues[0] = *RV_kSecClassCertificate_00BD0001; \
RV_searchKeys[1] = *RV_kSecMatchSearchList_00BD0229; \
RV_searchValues[1] = RV_searchList; \
RV_searchKeys[2] = *RV_kSecMatchSubjectContains_00BD01F5; \
RV_searchValues[2] = RV_str2; \
RV_searchKeys[3] = *RV_kSecMatchLimit_007101BA; \
RV_searchValues[3] = *RV_kSecMatchLimitAll_02230138; \
RV_searchKeys[4] = *RV_kSecReturnRef_02230052; \
RV_searchValues[4] = kCFBooleanTrue; \
RV_searchDict = CFDictionaryCreate(kCFAllocatorDefault, RV_searchKeys, RV_searchValues, RV_count2, NULL, NULL); \
RV_status = RV_SecItemCopyMatching_022300D3(RV_searchDict, &RV_results); \
if (RV_status != errSecSuccess) { \
__RV_RECEIPT_LOG("RV - Exiting with code 173..."); \
RV_exit_01A30182(RV_code); \
goto RV_GetRootCA051_RV_bail; \
} \
for(RV_idx = 0; RV_idx < RV_CFArrayGetCount_0237016F((CFArrayRef) RV_results); RV_idx++) { \
RV_certificate = (SecCertificateRef) RV_REWMHCKNSQCB_02210204((CFArrayRef) RV_results, RV_idx); \
if (RV_ctx->ca_data) RV_CFRelease_022100F4(RV_ctx->ca_data); \
RV_ctx->ca_data = RV_SecCertificateCopyData_00710012(RV_certificate); \
} \
RV_OFAURLMWXRIU -= 138; RV_OFAURLMWXRIU *= 4;  \
RV_SXDOUIPSMRUU -= 73; RV_SXDOUIPSMRUU *= 3; RV_SXDOUIPSMRUU += 2;  \
RV_CWDVPKSFHKME += 46; RV_CWDVPKSFHKME /= 18;  \
RV_GetRootCA051_RV_bail: \
if (RV_str2) RV_CFRelease_022100F4(RV_str2); \
if (RV_results) RV_CFRelease_022100F4(RV_results); \
if (RV_searchDict) RV_CFRelease_022100F4(RV_searchDict); \
if (RV_searchList) RV_CFRelease_022100F4(RV_searchList); \
if (RV_keychain) RV_CFRelease_022100F4(RV_keychain); \
}
#endif
#endif
    
#if MAC_OS_X_VERSION_MIN_REQUIRED == MAC_OS_X_VERSION_10_6
#ifdef DEBUG
    inline static void RV_GetRootCA051(RV_CheckingContext *RV_ctx) {
        OSStatus RV_status;
        SecKeychainRef RV_keychain = NULL;
        CFTypeRef RV_searchList = NULL;
        char *RV_str1, *RV_str2;
        SecKeychainAttributeList RV_attributeList;
        SecKeychainAttribute RV_attribute;
        SecKeychainSearchRef RV_searchRef = NULL;
        SecKeychainItemRef RV_itemRef = nil;
        volatile CFIndex RV_count1 = 1; RV_count1 /= 1;
        volatile CFIndex RV_count2 = 3; RV_count2 -= 2; RV_count2 *= 3; RV_count2 += 2;
        volatile CFIndex RV_count3 = 6; RV_count3 -= 3; RV_count3 *= 4; RV_count3 += 1;
        volatile int RV_code = 46; RV_code -= 12; RV_code *= 5; RV_code += 3;
        __RV_RECEIPT_LOG("RV - Loading Apple Root CA");
        char RV_str1_[608];
        RV_ObfuscationFunction003((RV_Strings[323]), RV_str1_, 161, 66);
        RV_str1 = RV_str1_;
        RV_status = RV_WMNKCSOYDTBO_00BD01DE(RV_str1, &RV_keychain);
        if (RV_status != errSecSuccess) {
            __RV_RECEIPT_LOG("RV - Exiting with code 173...");
            RV_exit_001B0182(RV_code);
            // Dead code
            goto RV_GetRootCA051_RV_bail;
        }
        // Create a search list within the system Keychain
        RV_searchList = RV_VZXVJIULPFEV_023701D0(kCFAllocatorDefault, RV_count1, RV_kCFTypeArrayCallBacks_02370161);
        RV_GARRBHPFHLCT_00C40066((CFMutableArrayRef) RV_searchList, RV_keychain);
        // Create the criteria dictionary to find the Apple Root CA certificate
        char RV_str2_[608];
        RV_ObfuscationFunction003((RV_Strings[381]), RV_str2_, 198, 16);
        RV_str2 = RV_str2_;
        RV_attributeList.count = 1;
        RV_attributeList.attr  = &RV_attribute;
        RV_attribute.tag = kSecLabelItemAttr;
        RV_attribute.data = RV_str2;
        RV_attribute.length = (UInt32) RV_count3;
        RV_status = RV_OFAURLMWXRIU_0071011E(RV_searchList, kSecCertificateItemClass, &RV_attributeList, &RV_searchRef);
        if (RV_status != errSecSuccess) {
            __RV_RECEIPT_LOG("RV - Exiting with code 173...");
            RV_exit_001B0182(RV_code);
            // Dead code
            goto RV_GetRootCA051_RV_bail;
        }
        // Iterate over the results and copy the certificate data
        while(RV_JMRKAJKBMHEI_02230142(RV_searchRef, &RV_itemRef) == noErr) {
            if (RV_ctx->ca_data) RV_CFRelease_00C401AF(RV_ctx->ca_data);
            RV_ctx->ca_data = RV_SecCertificateCopyData_007101AB((SecCertificateRef) RV_itemRef);
        }
        // Global variables computation
        // From 286 to 592
        RV_OFAURLMWXRIU -= 138; RV_OFAURLMWXRIU *= 4;
        // From 120 to 143
        RV_SXDOUIPSMRUU -= 73; RV_SXDOUIPSMRUU *= 3; RV_SXDOUIPSMRUU += 2;
        // From 368 to 23
        RV_CWDVPKSFHKME += 46; RV_CWDVPKSFHKME /= 18;
    RV_GetRootCA051_RV_bail:
        if (RV_itemRef) RV_CFRelease_00C401AF(RV_itemRef);
        if (RV_searchRef) RV_CFRelease_00C401AF(RV_searchRef);
        if (RV_searchList) RV_CFRelease_00C401AF(RV_searchList);
        if (RV_keychain) RV_CFRelease_00C401AF(RV_keychain);
    }
#else
#define RV_GetRootCA051(RV_ctx) { \
OSStatus RV_status; \
SecKeychainRef RV_keychain = NULL; \
CFTypeRef RV_searchList = NULL; \
char *RV_str1, *RV_str2; \
SecKeychainAttributeList RV_attributeList; \
SecKeychainAttribute RV_attribute; \
SecKeychainSearchRef RV_searchRef = NULL; \
SecKeychainItemRef RV_itemRef = nil; \
volatile CFIndex RV_count1 = 1; RV_count1 /= 1;  \
volatile CFIndex RV_count2 = 3; RV_count2 -= 2; RV_count2 *= 3; RV_count2 += 2;  \
volatile CFIndex RV_count3 = 6; RV_count3 -= 3; RV_count3 *= 4; RV_count3 += 1;  \
volatile int RV_code = 46; RV_code -= 12; RV_code *= 5; RV_code += 3;  \
__RV_RECEIPT_LOG("RV - Loading Apple Root CA"); \
char RV_str1_[608]; \
RV_ObfuscationFunction003((RV_Strings[323]), RV_str1_, 161, 66); \
RV_str1 = RV_str1_; \
RV_status = RV_WMNKCSOYDTBO_00BD01DE(RV_str1, &RV_keychain); \
if (RV_status != errSecSuccess) { \
__RV_RECEIPT_LOG("RV - Exiting with code 173..."); \
RV_exit_001B0182(RV_code); \
goto RV_GetRootCA051_RV_bail; \
} \
RV_searchList = RV_VZXVJIULPFEV_023701D0(kCFAllocatorDefault, RV_count1, RV_kCFTypeArrayCallBacks_02370161); \
RV_GARRBHPFHLCT_00C40066((CFMutableArrayRef) RV_searchList, RV_keychain); \
char RV_str2_[608]; \
RV_ObfuscationFunction003((RV_Strings[381]), RV_str2_, 198, 16); \
RV_str2 = RV_str2_; \
RV_attributeList.count = 1; \
RV_attributeList.attr  = &RV_attribute; \
RV_attribute.tag = kSecLabelItemAttr; \
RV_attribute.data = RV_str2; \
RV_attribute.length = (UInt32) RV_count3; \
RV_status = RV_OFAURLMWXRIU_0071011E(RV_searchList, kSecCertificateItemClass, &RV_attributeList, &RV_searchRef); \
if (RV_status != errSecSuccess) { \
__RV_RECEIPT_LOG("RV - Exiting with code 173..."); \
RV_exit_001B0182(RV_code); \
goto RV_GetRootCA051_RV_bail; \
} \
while(RV_JMRKAJKBMHEI_02230142(RV_searchRef, &RV_itemRef) == noErr) { \
if (RV_ctx->ca_data) RV_CFRelease_00C401AF(RV_ctx->ca_data); \
RV_ctx->ca_data = RV_SecCertificateCopyData_007101AB((SecCertificateRef) RV_itemRef); \
} \
RV_OFAURLMWXRIU -= 138; RV_OFAURLMWXRIU *= 4;  \
RV_SXDOUIPSMRUU -= 73; RV_SXDOUIPSMRUU *= 3; RV_SXDOUIPSMRUU += 2;  \
RV_CWDVPKSFHKME += 46; RV_CWDVPKSFHKME /= 18;  \
RV_GetRootCA051_RV_bail: \
if (RV_itemRef) RV_CFRelease_00C401AF(RV_itemRef); \
if (RV_searchRef) RV_CFRelease_00C401AF(RV_searchRef); \
if (RV_searchList) RV_CFRelease_00C401AF(RV_searchList); \
if (RV_keychain) RV_CFRelease_00C401AF(RV_keychain); \
}
#endif
#endif
    
    
    // CodeBlock CheckBundleIdentifier
#ifdef DEBUG
    inline static void RV_CheckBundleIdentifier05C(RV_CheckingContext *RV_ctx) {
        CFStringRef RV_str1 = RV_ObfuscationFunction00CCF((RV_Strings[61]), 10, 16);
        __RV_RECEIPT_LOG("RV - Checking bundle identifier");
        CFStringRef RV_str2 = (CFStringRef) RV_OFAURLMWXRIU_02370250((CFBundleRef) RV_ctx->main_bundle, *RV_kCFBundleIdentifierKey_0221005E);
        if (RV_SXDOUIPSMRUU_0237008F(RV_str1, RV_str2, 0) != kCFCompareEqualTo) {
            __RV_RECEIPT_LOG("RV - Bundle identifier mismatch (expecting '%s' but actual value is '%s')", CFStringGetCStringPtr(RV_str1, CFStringGetSystemEncoding()), CFStringGetCStringPtr(RV_str2, CFStringGetSystemEncoding()));
            volatile int RV_code = 128; RV_code -= 71; RV_code *= 3; RV_code += 2;
            __RV_RECEIPT_LOG("RV - Exiting with code 173...");
            RV_exit_006D0117(RV_code);
            // Dead code
            RV_CFRelease_023700F4(RV_str1);
            RV_CFRelease_023700F4(RV_str2);
            RV_CFRelease_023700F4(RV_str1);
        }
        // Global variables computation
        // From 102 to 97
        RV_GARRBHPFHLCT += 92; RV_GARRBHPFHLCT /= 2;
        // Set to 53
        RV_CWDVPKSFHKME = 53;
        RV_CFRelease_023700F4(RV_str1);
    }
#else
#define RV_CheckBundleIdentifier05C(RV_ctx) { \
CFStringRef RV_str1 = RV_ObfuscationFunction00CCF((RV_Strings[61]), 10, 16); \
__RV_RECEIPT_LOG("RV - Checking bundle identifier"); \
CFStringRef RV_str2 = (CFStringRef) RV_OFAURLMWXRIU_02370250((CFBundleRef) RV_ctx->main_bundle, *RV_kCFBundleIdentifierKey_0221005E); \
if (RV_SXDOUIPSMRUU_0237008F(RV_str1, RV_str2, 0) != kCFCompareEqualTo) { \
__RV_RECEIPT_LOG("RV - Bundle identifier mismatch (expecting '%s' but actual value is '%s')", CFStringGetCStringPtr(RV_str1, CFStringGetSystemEncoding()), CFStringGetCStringPtr(RV_str2, CFStringGetSystemEncoding())); \
volatile int RV_code = 128; RV_code -= 71; RV_code *= 3; RV_code += 2;  \
__RV_RECEIPT_LOG("RV - Exiting with code 173..."); \
RV_exit_006D0117(RV_code); \
RV_CFRelease_023700F4(RV_str1); \
RV_CFRelease_023700F4(RV_str2); \
RV_CFRelease_023700F4(RV_str1); \
} \
RV_GARRBHPFHLCT += 92; RV_GARRBHPFHLCT /= 2;  \
RV_CWDVPKSFHKME = 53; \
RV_CFRelease_023700F4(RV_str1); \
}
#endif
    
    
    // CodeBlock CheckBundleVersion
#ifdef DEBUG
    inline static void RV_CheckBundleVersion061(RV_CheckingContext *RV_ctx) {
        __RV_RECEIPT_LOG("RV - Checking bundle version");
        volatile int RV_code = 129; RV_code -= 72; RV_code *= 3; RV_code += 2;
        CFStringRef RV_str1 = RV_ObfuscationFunction009CF((RV_Strings[49]), 177, 16);
        CFStringRef RV_str2 = RV_ObfuscationFunction00BCF((RV_Strings[210]), 63, 35);
        CFStringRef RV_str3 = (CFStringRef) RV_GARRBHPFHLCT_00C40061((CFBundleRef) RV_ctx->main_bundle, RV_str2);
        if (RV_CWDVPKSFHKME_02370035(RV_str1, RV_str3, 0) != kCFCompareEqualTo) {
            __RV_RECEIPT_LOG("RV - Bundle version mismatch (expecting '%s' but actual value is '%s')", CFStringGetCStringPtr(RV_str1, CFStringGetSystemEncoding()), CFStringGetCStringPtr(RV_str3, CFStringGetSystemEncoding()));
            __RV_RECEIPT_LOG("RV - Exiting with code 173...");
            RV_exit_001B0117(RV_code);
            // Dead code
            RV_CFRelease_023701AF(RV_str2);
            RV_CFRelease_023701AF(RV_str1);
            RV_CFRelease_023701AF(RV_str2);
        }
        // Global variables computation
        // From 97 to 402
        RV_GARRBHPFHLCT -= 30; RV_GARRBHPFHLCT *= 6;
        // Set to 587
        RV_REWMHCKNSQCB = 587;
        // From 592 to 151
        RV_OFAURLMWXRIU += 163; RV_OFAURLMWXRIU /= 5;
        // From 322 to 102
        RV_JMRKAJKBMHEI += 188; RV_JMRKAJKBMHEI /= 5;
        // From 478 to 597
        RV_WMNKCSOYDTBO -= 279; RV_WMNKCSOYDTBO *= 3;
        // From 143 to 391
        RV_SXDOUIPSMRUU -= 46; RV_SXDOUIPSMRUU *= 4; RV_SXDOUIPSMRUU += 3;
        // From 53 to 45
        RV_CWDVPKSFHKME += 37; RV_CWDVPKSFHKME /= 2;
        // Set to 86
        RV_VZXVJIULPFEV = 86;
        RV_CFRelease_023701AF(RV_str2);
        RV_CFRelease_023701AF(RV_str1);
    }
#else
#define RV_CheckBundleVersion061(RV_ctx) { \
__RV_RECEIPT_LOG("RV - Checking bundle version"); \
volatile int RV_code = 129; RV_code -= 72; RV_code *= 3; RV_code += 2;  \
CFStringRef RV_str1 = RV_ObfuscationFunction009CF((RV_Strings[49]), 177, 16); \
CFStringRef RV_str2 = RV_ObfuscationFunction00BCF((RV_Strings[210]), 63, 35); \
CFStringRef RV_str3 = (CFStringRef) RV_GARRBHPFHLCT_00C40061((CFBundleRef) RV_ctx->main_bundle, RV_str2); \
if (RV_CWDVPKSFHKME_02370035(RV_str1, RV_str3, 0) != kCFCompareEqualTo) { \
__RV_RECEIPT_LOG("RV - Bundle version mismatch (expecting '%s' but actual value is '%s')", CFStringGetCStringPtr(RV_str1, CFStringGetSystemEncoding()), CFStringGetCStringPtr(RV_str3, CFStringGetSystemEncoding())); \
__RV_RECEIPT_LOG("RV - Exiting with code 173..."); \
RV_exit_001B0117(RV_code); \
RV_CFRelease_023701AF(RV_str2); \
RV_CFRelease_023701AF(RV_str1); \
RV_CFRelease_023701AF(RV_str2); \
} \
RV_GARRBHPFHLCT -= 30; RV_GARRBHPFHLCT *= 6;  \
RV_REWMHCKNSQCB = 587; \
RV_OFAURLMWXRIU += 163; RV_OFAURLMWXRIU /= 5;  \
RV_JMRKAJKBMHEI += 188; RV_JMRKAJKBMHEI /= 5;  \
RV_WMNKCSOYDTBO -= 279; RV_WMNKCSOYDTBO *= 3;  \
RV_SXDOUIPSMRUU -= 46; RV_SXDOUIPSMRUU *= 4; RV_SXDOUIPSMRUU += 3;  \
RV_CWDVPKSFHKME += 37; RV_CWDVPKSFHKME /= 2;  \
RV_VZXVJIULPFEV = 86; \
RV_CFRelease_023701AF(RV_str2); \
RV_CFRelease_023701AF(RV_str1); \
}
#endif
    
    
    // CodeBlock GetReceiptInformation
#ifdef DEBUG
    inline static void RV_GetReceiptInformation063(RV_CheckingContext *RV_ctx) {
        RV_ParsingContext RV_receipt_context;
        RV_ParsingContext *RV_current_context;
        CFNumberRef RV_key;
        RV_ReceiptAttributeType RV_key1, RV_key2;
        CFTypeRef RV_value1, RV_value2;
        int RV_type;
        int RV_xclass;
        long RV_length;
        CFDateFormatterRef RV_formatter = NULL;
        CFTimeZoneRef RV_tz = NULL;
        BIO *RV_bio_p7;
        PKCS7 *RV_pkcs7;
        ASN1_OCTET_STRING *RV_contentRV_content;
        ASN1_INTEGER *RV_value;
        const unsigned char *RV_seq_end;
        long RV_attr_type;
        long RV_attr_version;
        int RV_str_type;
        long RV_str_length;
        const unsigned char *RV_str_ptr;
        volatile int RV_code = 146; RV_code -= 89; RV_code *= 3; RV_code += 2;
        RV_ParsingContext RV_inapp_context;
        long RV_number;
        int RV_num_type;
        long RV_num_length;
        const unsigned char *RV_num_ptr;
        __RV_RECEIPT_LOG("RV - Parsing receipt");
        // Put the receipt data into a memory buffer
        RV_bio_p7 = RV_BIO_new_00580197(RV_BIO_s_mem_02100216());
        RV_BIO_write_017B0053(RV_bio_p7, (void *) RV_CWDVPKSFHKME_0237002D((CFDataRef) RV_ctx->receipt_data), (int) RV_CFDataGetLength_02370159((CFDataRef) RV_ctx->receipt_data));
        RV_pkcs7 = RV_d2i_PKCS7_bio_017B0234(RV_bio_p7, NULL);
        if (!RV_pkcs7) {
            __RV_RECEIPT_LOG("RV - Exiting with code 173...");
            RV_exit_01A30182(RV_code);
            // Dead code
            RV_ctx->receipt_data = NULL;
            goto RV_GetReceiptInformation063_RV_bail;
        }
        if (!PKCS7_type_is_signed(RV_pkcs7)) {
            __RV_RECEIPT_LOG("RV - Exiting with code 173...");
            RV_exit_01A30182(RV_code);
            // Dead code
            RV_ctx->receipt_data = NULL;
            goto RV_GetReceiptInformation063_RV_bail;
        }
        if (!PKCS7_type_is_data(RV_pkcs7->d.sign->contents)) {
            __RV_RECEIPT_LOG("RV - Exiting with code 173...");
            RV_exit_01A30182(RV_code);
            // Dead code
            RV_ctx->receipt_data = NULL;
            goto RV_GetReceiptInformation063_RV_bail;
        }
        // Create a formatter to parse ISO-3339 dates
        RV_formatter = RV_VZXVJIULPFEV_02210056(NULL, NULL, kCFDateFormatterNoStyle, kCFDateFormatterNoStyle);
        RV_value1 = RV_ObfuscationFunction00BCF((RV_Strings[114]), 162, 33);
        RV_WMNKCSOYDTBO_02210255(RV_formatter, (CFStringRef) RV_value1);
        RV_CFRelease_00C4016E(RV_value1);
        RV_tz = RV_GARRBHPFHLCT_02210192(NULL, 0.0);
        RV_CFDateFormatterSetProperty_023700B6(RV_formatter, *RV_kCFDateFormatterTimeZone_00C400E5, RV_tz);
        RV_CFRelease_00C4016E(RV_tz);
        // Initial context
        RV_contentRV_content = RV_pkcs7->d.sign->contents->d.data;
        RV_receipt_context.ptr = RV_contentRV_content->data;
        RV_receipt_context.end = RV_receipt_context.ptr + RV_contentRV_content->length;
        RV_receipt_context.parent = NULL;
        RV_receipt_context.dictionary = NULL;
        RV_current_context = &RV_receipt_context;
        while(RV_current_context->ptr < RV_current_context->end) {
            if (!RV_current_context->dictionary) {
                // Create the target dictionary
                RV_current_context->dictionary = RV_CFDictionaryCreateMutable_0237001C(kCFAllocatorDefault, (CFIndex) 608, RV_kCFTypeDictionaryKeyCallBacks_02370152, RV_kCFTypeDictionaryValueCallBacks_023700AA);
                // Decode payload from ASN.1
                RV_ASN1_get_object_021000FD(&RV_current_context->ptr, &RV_length, &RV_type, &RV_xclass, RV_current_context->end - RV_current_context->ptr);
                if (RV_type != V_ASN1_SET) {
                    __RV_RECEIPT_LOG("RV - Exiting with code 173...");
                    RV_exit_01A30182(RV_code);
                    goto RV_GetReceiptInformation063_RV_bail;
                }
            }
            // Iterate over attributes
            while(RV_current_context->ptr < RV_current_context->end) {
                // Parse attribute sequence
                RV_ASN1_get_object_021000FD(&RV_current_context->ptr, &RV_length, &RV_type, &RV_xclass, RV_current_context->end - RV_current_context->ptr);
                if (RV_type != V_ASN1_SEQUENCE) {
                    __RV_RECEIPT_LOG("RV - Exiting with code 173...");
                    RV_exit_01A30182(RV_code);
                    goto RV_GetReceiptInformation063_RV_bail;
                }
                RV_seq_end = RV_current_context->ptr + RV_length;
                RV_attr_type = 0;
                RV_attr_version = 0;
                // Parse the attribute type
                RV_ASN1_get_object_021000FD(&RV_current_context->ptr, &RV_length, &RV_type, &RV_xclass, RV_current_context->end - RV_current_context->ptr);
                if (RV_type != V_ASN1_INTEGER) {
                    __RV_RECEIPT_LOG("RV - Exiting with code 173...");
                    RV_exit_01A30182(RV_code);
                    goto RV_GetReceiptInformation063_RV_bail;
                }
                RV_value = RV_c2i_ASN1_INTEGER_005801F9(NULL, &RV_current_context->ptr, RV_length);
                RV_attr_type = RV_ASN1_INTEGER_get_021000A9(RV_value);
                RV_ASN1_INTEGER_free_0058005F(RV_value);
                // Parse the attribute version
                RV_ASN1_get_object_021000FD(&RV_current_context->ptr, &RV_length, &RV_type, &RV_xclass, RV_current_context->end - RV_current_context->ptr);
                if (RV_type != V_ASN1_INTEGER) {
                    __RV_RECEIPT_LOG("RV - Exiting with code 173...");
                    RV_exit_01A30182(RV_code);
                    goto RV_GetReceiptInformation063_RV_bail;
                }
                RV_value = RV_c2i_ASN1_INTEGER_005801F9(NULL, &RV_current_context->ptr, RV_length);
                RV_attr_version = RV_ASN1_INTEGER_get_021000A9(RV_value);
                RV_ASN1_INTEGER_free_0058005F(RV_value);
                // Check the attribute value
                RV_ASN1_get_object_021000FD(&RV_current_context->ptr, &RV_length, &RV_type, &RV_xclass, RV_current_context->end - RV_current_context->ptr);
                if (RV_type != V_ASN1_OCTET_STRING) {
                    __RV_RECEIPT_LOG("RV - Exiting with code 173...");
                    RV_exit_01A30182(RV_code);
                    goto RV_GetReceiptInformation063_RV_bail;
                }
                RV_key1 = (RV_ReceiptAttributeType) (RV_StoreNone + (RV_attr_type << 1));
                RV_key2 = (RV_ReceiptAttributeType) (RV_StoreNone + (RV_attr_type << 1) + 1);
                RV_value1 = NULL;
                RV_value2 = NULL;
                __RV_RECEIPT_LOG("RV - Parsing receipt - Found attribute %s%ld", RV_current_context->parent ? "--- " : "- ", RV_attr_type);
                switch (RV_attr_type) {
                        // Attributes encoded as ASN.1 UTF8STRING
                    case RV_ReceiptAttributeTypeBundleId:
                    case RV_ReceiptAttributeTypeBundleVersion:
                    case RV_ReceiptAttributeTypeOriginalApplicationVersion:
                    case RV_InAppAttributeTypeProductIdentifer:
                    case RV_InAppAttributeTypeTransactionIdentifer:
                    case RV_InAppAttributeTypeOriginalTransactionIdentifer:
                    {
                        RV_str_type = 0;
                        RV_str_length = 0;
                        RV_str_ptr = RV_current_context->ptr;
                        RV_ASN1_get_object_021000FD(&RV_str_ptr, &RV_str_length, &RV_str_type, &RV_xclass, RV_seq_end - RV_str_ptr);
                        if (RV_str_type != V_ASN1_UTF8STRING) {
                            __RV_RECEIPT_LOG("RV - Exiting with code 173...");
                            RV_exit_01A30182(RV_code);
                            goto RV_GetReceiptInformation063_RV_bail;
                        }
                        RV_value1 = ((__RV_CFStringCreateWithBytes) RV_Pointers[561])(NULL, (const UInt8 *) RV_str_ptr, (CFIndex) RV_str_length, kCFStringEncodingUTF8, false);
                        RV_value2 = RV_SXDOUIPSMRUU_02210187(NULL, (const UInt8 *) RV_current_context->ptr, (CFIndex) RV_length);
                        __RV_RECEIPT_LOG("RV - Parsing receipt -       attribute %s%ld => %s", RV_current_context->parent ? "--- " : "- ", RV_attr_type, CFStringGetCStringPtr((CFStringRef) RV_value1, CFStringGetSystemEncoding()));
                        break;
                    }
                        // Attributes encoded as ASN.1 IA5STRING
                    case RV_ReceiptAttributeTypeExpirationDate:
                    case RV_InAppAttributeTypeCancellationDate:
                    case RV_InAppAttributeTypeOriginalPurchaseDate:
                    case RV_InAppAttributeTypePurchaseDate:
                    case RV_InAppAttributeTypeSubscriptionExpirationDate:
                    {
                        RV_str_type = 0;
                        RV_str_length = 0;
                        RV_str_ptr = RV_current_context->ptr;
                        RV_ASN1_get_object_021000FD(&RV_str_ptr, &RV_str_length, &RV_str_type, &RV_xclass, RV_seq_end - RV_str_ptr);
                        if (RV_str_type != V_ASN1_IA5STRING) {
                            __RV_RECEIPT_LOG("RV - Exiting with code 173...");
                            RV_exit_01A30182(RV_code);
                            goto RV_GetReceiptInformation063_RV_bail;
                        }
                        RV_value2 = ((__RV_CFStringCreateWithBytes) RV_Pointers[561])(NULL, (const UInt8 *) RV_str_ptr, (CFIndex) RV_str_length, kCFStringEncodingASCII, false);
                        RV_value1 = RV_REWMHCKNSQCB_00C4024B(NULL, RV_formatter, (CFStringRef) RV_value2, NULL);
                        __RV_RECEIPT_LOG("RV - Parsing receipt -       attribute %s%ld => %s", RV_current_context->parent ? "--- " : "- ", RV_attr_type, CFStringGetCStringPtr((CFStringRef) RV_value2, CFStringGetSystemEncoding()));
                        break;
                    }
                        // Attributes encoded as ASN.1 INTEGER
                    case RV_InAppAttributeTypeQuantity:
                    case RV_InAppAttributeTypeWebOrderLineItemId:
                    {
                        RV_num_type = 0;
                        RV_num_length = 0;
                        RV_num_ptr = RV_current_context->ptr;
                        RV_ASN1_get_object_021000FD(&RV_num_ptr, &RV_num_length, &RV_num_type, &RV_xclass, RV_seq_end - RV_num_ptr);
                        if (RV_num_type != V_ASN1_INTEGER) {
                            __RV_RECEIPT_LOG("RV - Exiting with code 173...");
                            RV_exit_01A30182(RV_code);
                            goto RV_GetReceiptInformation063_RV_bail;
                        }
                        RV_value = RV_c2i_ASN1_INTEGER_005801F9(NULL, &RV_num_ptr, RV_num_length);
                        RV_number = RV_ASN1_INTEGER_get_021000A9(RV_value);
                        RV_ASN1_INTEGER_free_0058005F(RV_value);
                        RV_value1 = RV_CFNumberCreate_00C40080(NULL, kCFNumberLongType, &RV_number);
                        __RV_RECEIPT_LOG("RV - Parsing receipt -       attribute %s%ld => %ld", RV_current_context->parent ? "--- " : "- ", RV_attr_type, RV_number);
                        break;
                    }
                        // Attributes encoded as ASN.1 OCTETSTRING
                    case RV_ReceiptAttributeTypeOpaqueValue:
                    case RV_ReceiptAttributeTypeHash:
                    {
                        RV_value1 = RV_SXDOUIPSMRUU_02210187(NULL, (const UInt8 *) RV_current_context->ptr, (CFIndex) RV_length);
                        __RV_RECEIPT_LOG("RV - Parsing receipt -       attribute %s%ld => [%lu bytes]", RV_current_context->parent ? "--- " : "- ", RV_attr_type, RV_CFDataGetLength_02370159((CFDataRef) RV_value1));
                        break;
                    }
                        // Attributes encoded as ASN.1 SET
                    case RV_ReceiptAttributeTypeInAppPurchase:
                    {
                        // Push a child context to parse InApp purchase
                        RV_inapp_context.ptr = RV_current_context->ptr;
                        RV_inapp_context.end = RV_inapp_context.ptr + RV_length;
                        RV_inapp_context.dictionary = NULL;
                        RV_inapp_context.parent = RV_current_context;
                        RV_current_context = &RV_inapp_context;
                        goto RV_GetReceiptInformation063_RV_key;
                    }
                    default:
                        break;
                }
                if (RV_value1) {
                    RV_key = RV_CFNumberCreate_00C40080(NULL, kCFNumberIntType, &RV_key1);
                    RV_CFDictionaryAddValue_02370170((CFMutableDictionaryRef) RV_current_context->dictionary, RV_key, RV_value1);
                    RV_CFRelease_00C4016E(RV_key);
                    RV_CFRelease_00C4016E(RV_value1);
                }
                if (RV_value2) {
                    RV_key = RV_CFNumberCreate_00C40080(NULL, kCFNumberIntType, &RV_key2);
                    RV_CFDictionaryAddValue_02370170((CFMutableDictionaryRef) RV_current_context->dictionary, RV_key, RV_value2);
                    RV_CFRelease_00C4016E(RV_key);
                    RV_CFRelease_00C4016E(RV_value2);
                }
                // Move past the attribute
                RV_current_context->ptr += RV_length;
            }
        RV_GetReceiptInformation063_RV_key:
            // If the current context is a new one, continue parsing
            if (!RV_current_context->dictionary) {
                continue;
            }
            // If the current context has a parent, pop it.
            if (RV_current_context->parent) {
                __RV_RECEIPT_LOG("RV - Parsing receipt - Add an InApp purchase");
                RV_key1 = RV_StoreReceiptAttributeTypeInAppPurchase;
                RV_key = RV_CFNumberCreate_00C40080(NULL, kCFNumberIntType, &RV_key1);
                RV_value1 = RV_CFDictionaryGetValue_02370096((CFDictionaryRef) RV_current_context->parent->dictionary, RV_key);
                if (!RV_value1) {
                    RV_value1 = RV_CFArrayCreateMutable_022101BD(kCFAllocatorDefault, 0, RV_kCFTypeArrayCallBacks_0237006E);
                    RV_CFDictionarySetValue_00C4014D((CFMutableDictionaryRef) RV_current_context->parent->dictionary, RV_key, RV_value1);
                    RV_CFRelease_00C4016E(RV_value1);
                }
                RV_JMRKAJKBMHEI_02210066((CFMutableArrayRef) RV_value1, RV_current_context->dictionary);
                RV_CFRelease_00C4016E(RV_current_context->dictionary);
                RV_CFRelease_00C4016E(RV_key);
                // Switch to parent context
                RV_current_context = RV_current_context->parent;
                // Move past the child context
                RV_current_context->ptr = RV_inapp_context.end;
            }
        }
        if (RV_ctx->receipt_dict) RV_CFRelease_00C4016E(RV_ctx->receipt_dict);
        RV_ctx->receipt_dict = RV_receipt_context.dictionary;
        // Global variables computation
        // From 402 to 38
        RV_GARRBHPFHLCT += 54; RV_GARRBHPFHLCT /= 12;
        // From 45 to 563
        RV_CWDVPKSFHKME -= 5; RV_CWDVPKSFHKME *= 14; RV_CWDVPKSFHKME += 3;
    RV_GetReceiptInformation063_RV_bail:
        if (RV_pkcs7) RV_PKCS7_free_0058012E(RV_pkcs7);
        if (RV_bio_p7) RV_BIO_free_017B01F2(RV_bio_p7);
        if (RV_formatter) RV_CFRelease_00C4016E(RV_formatter);
    }
#else
#define RV_GetReceiptInformation063(RV_ctx) { \
RV_ParsingContext RV_receipt_context; \
RV_ParsingContext *RV_current_context; \
CFNumberRef RV_key; \
RV_ReceiptAttributeType RV_key1, RV_key2; \
CFTypeRef RV_value1, RV_value2; \
int RV_type; \
int RV_xclass; \
long RV_length; \
CFDateFormatterRef RV_formatter = NULL; \
CFTimeZoneRef RV_tz = NULL; \
BIO *RV_bio_p7; \
PKCS7 *RV_pkcs7; \
ASN1_OCTET_STRING *RV_contentRV_content; \
ASN1_INTEGER *RV_value; \
const unsigned char *RV_seq_end; \
long RV_attr_type; \
long RV_attr_version; \
int RV_str_type; \
long RV_str_length; \
const unsigned char *RV_str_ptr; \
volatile int RV_code = 146; RV_code -= 89; RV_code *= 3; RV_code += 2;  \
RV_ParsingContext RV_inapp_context; \
long RV_number; \
int RV_num_type; \
long RV_num_length; \
const unsigned char *RV_num_ptr; \
__RV_RECEIPT_LOG("RV - Parsing receipt"); \
RV_bio_p7 = RV_BIO_new_00580197(RV_BIO_s_mem_02100216()); \
RV_BIO_write_017B0053(RV_bio_p7, (void *) RV_CWDVPKSFHKME_0237002D((CFDataRef) RV_ctx->receipt_data), (int) RV_CFDataGetLength_02370159((CFDataRef) RV_ctx->receipt_data)); \
RV_pkcs7 = RV_d2i_PKCS7_bio_017B0234(RV_bio_p7, NULL); \
if (!RV_pkcs7) { \
__RV_RECEIPT_LOG("RV - Exiting with code 173..."); \
RV_exit_01A30182(RV_code); \
RV_ctx->receipt_data = NULL; \
goto RV_GetReceiptInformation063_RV_bail; \
} \
if (!PKCS7_type_is_signed(RV_pkcs7)) { \
__RV_RECEIPT_LOG("RV - Exiting with code 173..."); \
RV_exit_01A30182(RV_code); \
RV_ctx->receipt_data = NULL; \
goto RV_GetReceiptInformation063_RV_bail; \
} \
if (!PKCS7_type_is_data(RV_pkcs7->d.sign->contents)) { \
__RV_RECEIPT_LOG("RV - Exiting with code 173..."); \
RV_exit_01A30182(RV_code); \
RV_ctx->receipt_data = NULL; \
goto RV_GetReceiptInformation063_RV_bail; \
} \
RV_formatter = RV_VZXVJIULPFEV_02210056(NULL, NULL, kCFDateFormatterNoStyle, kCFDateFormatterNoStyle); \
RV_value1 = RV_ObfuscationFunction00BCF((RV_Strings[114]), 162, 33); \
RV_WMNKCSOYDTBO_02210255(RV_formatter, (CFStringRef) RV_value1); \
RV_CFRelease_00C4016E(RV_value1); \
RV_tz = RV_GARRBHPFHLCT_02210192(NULL, 0.0); \
RV_CFDateFormatterSetProperty_023700B6(RV_formatter, *RV_kCFDateFormatterTimeZone_00C400E5, RV_tz); \
RV_CFRelease_00C4016E(RV_tz); \
RV_contentRV_content = RV_pkcs7->d.sign->contents->d.data; \
RV_receipt_context.ptr = RV_contentRV_content->data; \
RV_receipt_context.end = RV_receipt_context.ptr + RV_contentRV_content->length; \
RV_receipt_context.parent = NULL; \
RV_receipt_context.dictionary = NULL; \
RV_current_context = &RV_receipt_context; \
while(RV_current_context->ptr < RV_current_context->end) { \
if (!RV_current_context->dictionary) { \
RV_current_context->dictionary = RV_CFDictionaryCreateMutable_0237001C(kCFAllocatorDefault, (CFIndex) 608, RV_kCFTypeDictionaryKeyCallBacks_02370152, RV_kCFTypeDictionaryValueCallBacks_023700AA); \
RV_ASN1_get_object_021000FD(&RV_current_context->ptr, &RV_length, &RV_type, &RV_xclass, RV_current_context->end - RV_current_context->ptr); \
if (RV_type != V_ASN1_SET) { \
__RV_RECEIPT_LOG("RV - Exiting with code 173..."); \
RV_exit_01A30182(RV_code); \
goto RV_GetReceiptInformation063_RV_bail; \
} \
} \
while(RV_current_context->ptr < RV_current_context->end) { \
RV_ASN1_get_object_021000FD(&RV_current_context->ptr, &RV_length, &RV_type, &RV_xclass, RV_current_context->end - RV_current_context->ptr); \
if (RV_type != V_ASN1_SEQUENCE) { \
__RV_RECEIPT_LOG("RV - Exiting with code 173..."); \
RV_exit_01A30182(RV_code); \
goto RV_GetReceiptInformation063_RV_bail; \
} \
RV_seq_end = RV_current_context->ptr + RV_length; \
RV_attr_type = 0; \
RV_attr_version = 0; \
RV_ASN1_get_object_021000FD(&RV_current_context->ptr, &RV_length, &RV_type, &RV_xclass, RV_current_context->end - RV_current_context->ptr); \
if (RV_type != V_ASN1_INTEGER) { \
__RV_RECEIPT_LOG("RV - Exiting with code 173..."); \
RV_exit_01A30182(RV_code); \
goto RV_GetReceiptInformation063_RV_bail; \
} \
RV_value = RV_c2i_ASN1_INTEGER_005801F9(NULL, &RV_current_context->ptr, RV_length); \
RV_attr_type = RV_ASN1_INTEGER_get_021000A9(RV_value); \
RV_ASN1_INTEGER_free_0058005F(RV_value); \
RV_ASN1_get_object_021000FD(&RV_current_context->ptr, &RV_length, &RV_type, &RV_xclass, RV_current_context->end - RV_current_context->ptr); \
if (RV_type != V_ASN1_INTEGER) { \
__RV_RECEIPT_LOG("RV - Exiting with code 173..."); \
RV_exit_01A30182(RV_code); \
goto RV_GetReceiptInformation063_RV_bail; \
} \
RV_value = RV_c2i_ASN1_INTEGER_005801F9(NULL, &RV_current_context->ptr, RV_length); \
RV_attr_version = RV_ASN1_INTEGER_get_021000A9(RV_value); \
RV_ASN1_INTEGER_free_0058005F(RV_value); \
RV_ASN1_get_object_021000FD(&RV_current_context->ptr, &RV_length, &RV_type, &RV_xclass, RV_current_context->end - RV_current_context->ptr); \
if (RV_type != V_ASN1_OCTET_STRING) { \
__RV_RECEIPT_LOG("RV - Exiting with code 173..."); \
RV_exit_01A30182(RV_code); \
goto RV_GetReceiptInformation063_RV_bail; \
} \
RV_key1 = (RV_ReceiptAttributeType) (RV_StoreNone + (RV_attr_type << 1)); \
RV_key2 = (RV_ReceiptAttributeType) (RV_StoreNone + (RV_attr_type << 1) + 1); \
RV_value1 = NULL; \
RV_value2 = NULL; \
__RV_RECEIPT_LOG("RV - Parsing receipt - Found attribute %s%ld", RV_current_context->parent ? "--- " : "- ", RV_attr_type); \
switch (RV_attr_type) { \
case RV_ReceiptAttributeTypeBundleId: \
case RV_ReceiptAttributeTypeBundleVersion: \
case RV_ReceiptAttributeTypeOriginalApplicationVersion: \
case RV_InAppAttributeTypeProductIdentifer: \
case RV_InAppAttributeTypeTransactionIdentifer: \
case RV_InAppAttributeTypeOriginalTransactionIdentifer: \
{ \
RV_str_type = 0; \
RV_str_length = 0; \
RV_str_ptr = RV_current_context->ptr; \
RV_ASN1_get_object_021000FD(&RV_str_ptr, &RV_str_length, &RV_str_type, &RV_xclass, RV_seq_end - RV_str_ptr); \
if (RV_str_type != V_ASN1_UTF8STRING) { \
__RV_RECEIPT_LOG("RV - Exiting with code 173..."); \
RV_exit_01A30182(RV_code); \
goto RV_GetReceiptInformation063_RV_bail; \
} \
RV_value1 = ((__RV_CFStringCreateWithBytes) RV_Pointers[561])(NULL, (const UInt8 *) RV_str_ptr, (CFIndex) RV_str_length, kCFStringEncodingUTF8, false); \
RV_value2 = RV_SXDOUIPSMRUU_02210187(NULL, (const UInt8 *) RV_current_context->ptr, (CFIndex) RV_length); \
__RV_RECEIPT_LOG("RV - Parsing receipt -       attribute %s%ld => %s", RV_current_context->parent ? "--- " : "- ", RV_attr_type, CFStringGetCStringPtr((CFStringRef) RV_value1, CFStringGetSystemEncoding())); \
break; \
} \
case RV_ReceiptAttributeTypeExpirationDate: \
case RV_InAppAttributeTypeCancellationDate: \
case RV_InAppAttributeTypeOriginalPurchaseDate: \
case RV_InAppAttributeTypePurchaseDate: \
case RV_InAppAttributeTypeSubscriptionExpirationDate: \
{ \
RV_str_type = 0; \
RV_str_length = 0; \
RV_str_ptr = RV_current_context->ptr; \
RV_ASN1_get_object_021000FD(&RV_str_ptr, &RV_str_length, &RV_str_type, &RV_xclass, RV_seq_end - RV_str_ptr); \
if (RV_str_type != V_ASN1_IA5STRING) { \
__RV_RECEIPT_LOG("RV - Exiting with code 173..."); \
RV_exit_01A30182(RV_code); \
goto RV_GetReceiptInformation063_RV_bail; \
} \
RV_value2 = ((__RV_CFStringCreateWithBytes) RV_Pointers[561])(NULL, (const UInt8 *) RV_str_ptr, (CFIndex) RV_str_length, kCFStringEncodingASCII, false); \
RV_value1 = RV_REWMHCKNSQCB_00C4024B(NULL, RV_formatter, (CFStringRef) RV_value2, NULL); \
__RV_RECEIPT_LOG("RV - Parsing receipt -       attribute %s%ld => %s", RV_current_context->parent ? "--- " : "- ", RV_attr_type, CFStringGetCStringPtr((CFStringRef) RV_value2, CFStringGetSystemEncoding())); \
break; \
} \
case RV_InAppAttributeTypeQuantity: \
case RV_InAppAttributeTypeWebOrderLineItemId: \
{ \
RV_num_type = 0; \
RV_num_length = 0; \
RV_num_ptr = RV_current_context->ptr; \
RV_ASN1_get_object_021000FD(&RV_num_ptr, &RV_num_length, &RV_num_type, &RV_xclass, RV_seq_end - RV_num_ptr); \
if (RV_num_type != V_ASN1_INTEGER) { \
__RV_RECEIPT_LOG("RV - Exiting with code 173..."); \
RV_exit_01A30182(RV_code); \
goto RV_GetReceiptInformation063_RV_bail; \
} \
RV_value = RV_c2i_ASN1_INTEGER_005801F9(NULL, &RV_num_ptr, RV_num_length); \
RV_number = RV_ASN1_INTEGER_get_021000A9(RV_value); \
RV_ASN1_INTEGER_free_0058005F(RV_value); \
RV_value1 = RV_CFNumberCreate_00C40080(NULL, kCFNumberLongType, &RV_number); \
__RV_RECEIPT_LOG("RV - Parsing receipt -       attribute %s%ld => %ld", RV_current_context->parent ? "--- " : "- ", RV_attr_type, RV_number); \
break; \
} \
case RV_ReceiptAttributeTypeOpaqueValue: \
case RV_ReceiptAttributeTypeHash: \
{ \
RV_value1 = RV_SXDOUIPSMRUU_02210187(NULL, (const UInt8 *) RV_current_context->ptr, (CFIndex) RV_length); \
__RV_RECEIPT_LOG("RV - Parsing receipt -       attribute %s%ld => [%lu bytes]", RV_current_context->parent ? "--- " : "- ", RV_attr_type, RV_CFDataGetLength_02370159((CFDataRef) RV_value1)); \
break; \
} \
case RV_ReceiptAttributeTypeInAppPurchase: \
{ \
RV_inapp_context.ptr = RV_current_context->ptr; \
RV_inapp_context.end = RV_inapp_context.ptr + RV_length; \
RV_inapp_context.dictionary = NULL; \
RV_inapp_context.parent = RV_current_context; \
RV_current_context = &RV_inapp_context; \
goto RV_GetReceiptInformation063_RV_key; \
} \
default: \
break; \
} \
if (RV_value1) { \
RV_key = RV_CFNumberCreate_00C40080(NULL, kCFNumberIntType, &RV_key1); \
RV_CFDictionaryAddValue_02370170((CFMutableDictionaryRef) RV_current_context->dictionary, RV_key, RV_value1); \
RV_CFRelease_00C4016E(RV_key); \
RV_CFRelease_00C4016E(RV_value1); \
} \
if (RV_value2) { \
RV_key = RV_CFNumberCreate_00C40080(NULL, kCFNumberIntType, &RV_key2); \
RV_CFDictionaryAddValue_02370170((CFMutableDictionaryRef) RV_current_context->dictionary, RV_key, RV_value2); \
RV_CFRelease_00C4016E(RV_key); \
RV_CFRelease_00C4016E(RV_value2); \
} \
RV_current_context->ptr += RV_length; \
} \
RV_GetReceiptInformation063_RV_key: \
if (!RV_current_context->dictionary) { \
continue; \
} \
if (RV_current_context->parent) { \
__RV_RECEIPT_LOG("RV - Parsing receipt - Add an InApp purchase"); \
RV_key1 = RV_StoreReceiptAttributeTypeInAppPurchase; \
RV_key = RV_CFNumberCreate_00C40080(NULL, kCFNumberIntType, &RV_key1); \
RV_value1 = RV_CFDictionaryGetValue_02370096((CFDictionaryRef) RV_current_context->parent->dictionary, RV_key); \
if (!RV_value1) { \
RV_value1 = RV_CFArrayCreateMutable_022101BD(kCFAllocatorDefault, 0, RV_kCFTypeArrayCallBacks_0237006E); \
RV_CFDictionarySetValue_00C4014D((CFMutableDictionaryRef) RV_current_context->parent->dictionary, RV_key, RV_value1); \
RV_CFRelease_00C4016E(RV_value1); \
} \
RV_JMRKAJKBMHEI_02210066((CFMutableArrayRef) RV_value1, RV_current_context->dictionary); \
RV_CFRelease_00C4016E(RV_current_context->dictionary); \
RV_CFRelease_00C4016E(RV_key); \
RV_current_context = RV_current_context->parent; \
RV_current_context->ptr = RV_inapp_context.end; \
} \
} \
if (RV_ctx->receipt_dict) RV_CFRelease_00C4016E(RV_ctx->receipt_dict); \
RV_ctx->receipt_dict = RV_receipt_context.dictionary; \
RV_GARRBHPFHLCT += 54; RV_GARRBHPFHLCT /= 12;  \
RV_CWDVPKSFHKME -= 5; RV_CWDVPKSFHKME *= 14; RV_CWDVPKSFHKME += 3;  \
RV_GetReceiptInformation063_RV_bail: \
if (RV_pkcs7) RV_PKCS7_free_0058012E(RV_pkcs7); \
if (RV_bio_p7) RV_BIO_free_017B01F2(RV_bio_p7); \
if (RV_formatter) RV_CFRelease_00C4016E(RV_formatter); \
}
#endif
    
    
    // CodeBlock CheckReceiptSignature
#ifdef DEBUG
    inline static void RV_CheckReceiptSignature076(RV_CheckingContext *RV_ctx) {
        BIO *RV_bio_p7 = NULL;
        PKCS7 *RV_pkcs7 = NULL;
        STACK_OF(X509) *RV_certificates = NULL;
        X509 *RV_certificate = NULL;
        int RV_count, RV_index1;
        unsigned int RV_index2;
        ASN1_OBJECT *RV_oid = NULL;
        char *RV_str1;
        char *RV_str3;
        char *RV_str4;
        char *RV_str5;
        int RV_verify, RV_status;
        BIO *RV_bio_apple = NULL;
        X509 *RV_apple = NULL;
        X509_STORE *RV_store = NULL;
        volatile int RV_code = 60; RV_code -= 17; RV_code *= 4; RV_code += 1;
        __RV_RECEIPT_LOG("RV - Checking receipt signature");
        // Put the receipt data into a memory buffer
        RV_bio_p7 = RV_BIO_new_02100171(RV_BIO_s_mem_017B0216());
        RV_BIO_write_017B0053(RV_bio_p7, (void *) RV_GARRBHPFHLCT_02370026((CFDataRef) RV_ctx->receipt_data), (int) RV_CWDVPKSFHKME_02370233((CFDataRef) RV_ctx->receipt_data));
        RV_pkcs7 = RV_d2i_PKCS7_bio_0058003F(RV_bio_p7, NULL);
        if (!RV_pkcs7) {
            __RV_RECEIPT_LOG("RV - Exiting with code 173...");
            RV_exit_001B00B7(RV_code);
            RV_ctx->receipt_dict = NULL;
            goto RV_CheckReceiptSignature076_RV_bail;
        }
        if (!PKCS7_type_is_signed(RV_pkcs7)) {
            __RV_RECEIPT_LOG("RV - Exiting with code 173...");
            RV_exit_001B00B7(RV_code);
            RV_ctx->receipt_dict = NULL;
            goto RV_CheckReceiptSignature076_RV_bail;
        }
        if (!PKCS7_type_is_data(RV_pkcs7->d.sign->contents)) {
            __RV_RECEIPT_LOG("RV - Exiting with code 173...");
            RV_exit_001B00B7(RV_code);
            RV_ctx->receipt_dict = NULL;
            goto RV_CheckReceiptSignature076_RV_bail;
        }
        RV_OpenSSL_add_all_digests_0058021D();
        // If the Apple Root CA certificate has been loaded, then check the receipt against it.
        if (RV_ctx->ca_data) {
            RV_bio_apple = RV_BIO_new_02100171(RV_BIO_s_mem_017B0216());
            RV_BIO_write_017B0053(RV_bio_apple, (void *) RV_GARRBHPFHLCT_02370026((CFDataRef) RV_ctx->ca_data), (int) RV_CWDVPKSFHKME_02370233((CFDataRef) RV_ctx->ca_data));
            RV_apple = RV_d2i_X509_bio_017B001D(RV_bio_apple, NULL);
            if (!RV_apple) {
                __RV_RECEIPT_LOG("RV - Exiting with code 173...");
                RV_exit_001B00B7(RV_code);
                goto RV_CheckReceiptSignature076_RV_bail;
            }
            RV_store = RV_X509_STORE_new_005800EA();
            RV_X509_STORE_add_cert_005800BB(RV_store, RV_apple);
            // Check that the PKCS7_verify function is not tampered with
            RV_verify = RV_PKCS7_verify_021000DD(NULL, NULL, NULL, NULL, NULL, 0) * 924;
            if (RV_verify == 924) {
                __RV_RECEIPT_LOG("RV - Exiting with code 173...");
                RV_exit_001B00B7(RV_code);
                goto RV_CheckReceiptSignature076_RV_bail;
            }
            // Check that the PKCS7 content is signed by the Apple Root CA certificate
            RV_verify = RV_PKCS7_verify_021000DD(RV_pkcs7, NULL, RV_store, NULL, NULL, 0) * 924;
            if (RV_verify != 924) {
                __RV_RECEIPT_LOG("RV - Exiting with code 173...");
                RV_exit_001B00B7(RV_code);
                goto RV_CheckReceiptSignature076_RV_bail;
            }
        }
        // Extract the certificates from the receipt.
        // One of them must be the Apple Root CA certificate with the correct fingerprint.
        RV_verify = 0;
        RV_certificates = RV_pkcs7->d.sign->cert;
        RV_count = RV_sk_num_005801B4((const _STACK *) RV_certificates);
        for(RV_index1 = 0; RV_index1 < RV_count; RV_index1++) {
            RV_certificate = (X509 *) RV_sk_value_017B0022((const _STACK *) RV_certificates, RV_index1);
            char RV_common_name[608];
            // Check that the X509_NAME_get_text_by_NID function is not tampered with
            RV_status = RV_X509_NAME_get_text_by_NID_017B0014(NULL, NID_commonName, RV_common_name, 420);
            if (RV_status > 0) {
                __RV_RECEIPT_LOG("RV - Exiting with code 173...");
                RV_exit_001B00B7(RV_code);
                goto RV_CheckReceiptSignature076_RV_bail;
            }
            // Retrieve the common name
            RV_status = RV_X509_NAME_get_text_by_NID_017B0014(RV_certificate->cert_info->subject, NID_commonName, RV_common_name, 608);
            if (RV_status <= 0) {
                __RV_RECEIPT_LOG("RV - Exiting with code 173...");
                RV_exit_001B00B7(RV_code);
                goto RV_CheckReceiptSignature076_RV_bail;
            }
            volatile unsigned int RV_digest_length = 17; RV_digest_length -= 11; RV_digest_length *= 3; RV_digest_length += 2;
            const EVP_MD *RV_digester = EVP_sha1();
            unsigned char RV_digest[EVP_MAX_MD_SIZE];
            unsigned int RV_len = 0;
            // Check that the X509_digest function is not tampered with
            RV_status = RV_X509_digest_0210008C(NULL, NULL, RV_digest, &RV_len) * 924;
            if (RV_status == 924 || RV_len > 0) {
                __RV_RECEIPT_LOG("RV - Exiting with code 173...");
                RV_exit_001B00B7(RV_code);
                goto RV_CheckReceiptSignature076_RV_bail;
            }
            RV_status = RV_X509_digest_0210008C(RV_certificate, RV_digester, RV_digest, &RV_len) * 924;
            if (RV_status != 924 || RV_len != RV_digest_length) {
                __RV_RECEIPT_LOG("RV - Exiting with code 173...");
                RV_exit_001B00B7(RV_code);
                goto RV_CheckReceiptSignature076_RV_bail;
            }
            char RV_fingerprint[608];
            volatile unsigned int RV_increment = 2; RV_increment -= 1; RV_increment *= 3;
            for(RV_index2 = 0; RV_index2 < RV_digest_length; RV_index2++) {
                snprintf(&RV_fingerprint[RV_index2 * RV_increment], RV_increment + 1, "%02x:", RV_digest[RV_index2]);
            }
            char RV_str3_[608];
            RV_ObfuscationFunction007((RV_Strings[355]), RV_str3_, 110, 68);
            RV_str3 = RV_str3_;
            // Check the common name and the fingerprint
            char RV_str1_[608];
            RV_ObfuscationFunction003((RV_Strings[381]), RV_str1_, 198, 16);
            RV_str1 = RV_str1_;
            volatile size_t RV_num = 6; RV_num -= 3; RV_num *= 4; RV_num += 1;
            if (((__RV_strncmp) RV_Pointers[482])(RV_common_name, RV_str1, RV_num) == 0 && ((__RV_strncmp) RV_Pointers[482])(RV_fingerprint, RV_str3, RV_digest_length * RV_increment - 1) == 0) {
                RV_verify = 924;
                break;
            }
        }
        // Check that the last selected certificate is right one.
        if (RV_certificate == NULL || RV_verify != 924) {
            __RV_RECEIPT_LOG("RV - Exiting with code 173...");
            RV_exit_001B00B7(RV_code);
            goto RV_CheckReceiptSignature076_RV_bail;
        }
        // Check that the X509_get_ext_by_OBJ function is not tampered with
        char RV_str4_[608];
        RV_ObfuscationFunction009((RV_Strings[6]), RV_str4_, 14, 34);
        RV_str4 = RV_str4_;
        RV_oid = RV_OBJ_txt2obj_017B00C3(RV_str4, 0);
        RV_verify = RV_X509_get_ext_by_OBJ_017B0099(RV_certificate, RV_oid, 0);
        RV_ASN1_OBJECT_free_02100084(RV_oid);
        if (RV_verify >= 0) {
            __RV_RECEIPT_LOG("RV - Exiting with code 173...");
            RV_exit_001B00B7(RV_code);
            goto RV_CheckReceiptSignature076_RV_bail;
        }
        // Extract the signer certificate from the receipt
        // The certificate must have the extension OID "1.2.840.113635.100.6.11.1"
        char RV_str5_[608];
        RV_ObfuscationFunction009((RV_Strings[6]), RV_str5_, 14, 34);
        RV_str5 = RV_str5_;
        RV_certificates = RV_PKCS7_get0_signers_021001AE(RV_pkcs7, NULL, 0);
        RV_count = RV_sk_num_005801B4((const _STACK *) RV_certificates);
        for(RV_index1 = 0; RV_index1 < RV_count; RV_index1++) {
            RV_certificate = (X509 *) RV_sk_value_017B0022((const _STACK *) RV_certificates, RV_index1);
            RV_oid = RV_OBJ_txt2obj_017B00C3(RV_str5, 0);
            RV_verify = RV_X509_get_ext_by_OBJ_017B0099(RV_certificate, RV_oid, 0);
            RV_ASN1_OBJECT_free_02100084(RV_oid);
            if (RV_verify == -1) {
                sk_X509_free (RV_certificates);
                RV_certificates = NULL;
                continue;
            } else {
                break;
            }
        }
        if (RV_certificate == NULL || RV_verify < 0) {
            __RV_RECEIPT_LOG("RV - Exiting with code 173...");
            RV_exit_001B00B7(RV_code);
            goto RV_CheckReceiptSignature076_RV_bail;
        }
        // Global variables computation
        // Set to 128
        RV_OFAURLMWXRIU = 128;
        // From 102 to 332
        RV_JMRKAJKBMHEI -= 36; RV_JMRKAJKBMHEI *= 5; RV_JMRKAJKBMHEI += 2;
        // Set to 72
        RV_WMNKCSOYDTBO = 72;
    RV_CheckReceiptSignature076_RV_bail:
        if (RV_bio_p7) RV_BIO_free_0058002F(RV_bio_p7);
        if (RV_pkcs7) RV_PKCS7_free_0058012E(RV_pkcs7);
        if (RV_certificates) sk_X509_free (RV_certificates);
        if (RV_apple) RV_X509_free_017B010F(RV_apple);
        if (RV_bio_apple) RV_BIO_free_0058002F(RV_bio_apple);
        if (RV_store) RV_X509_STORE_free_021001C5(RV_store);
    }
#else
#define RV_CheckReceiptSignature076(RV_ctx) { \
BIO *RV_bio_p7 = NULL; \
PKCS7 *RV_pkcs7 = NULL; \
STACK_OF(X509) *RV_certificates = NULL; \
X509 *RV_certificate = NULL; \
int RV_count, RV_index1; \
unsigned int RV_index2; \
ASN1_OBJECT *RV_oid = NULL; \
char *RV_str1; \
char *RV_str3; \
char *RV_str4; \
char *RV_str5; \
int RV_verify, RV_status; \
BIO *RV_bio_apple = NULL; \
X509 *RV_apple = NULL; \
X509_STORE *RV_store = NULL; \
volatile int RV_code = 60; RV_code -= 17; RV_code *= 4; RV_code += 1;  \
__RV_RECEIPT_LOG("RV - Checking receipt signature"); \
RV_bio_p7 = RV_BIO_new_02100171(RV_BIO_s_mem_017B0216()); \
RV_BIO_write_017B0053(RV_bio_p7, (void *) RV_GARRBHPFHLCT_02370026((CFDataRef) RV_ctx->receipt_data), (int) RV_CWDVPKSFHKME_02370233((CFDataRef) RV_ctx->receipt_data)); \
RV_pkcs7 = RV_d2i_PKCS7_bio_0058003F(RV_bio_p7, NULL); \
if (!RV_pkcs7) { \
__RV_RECEIPT_LOG("RV - Exiting with code 173..."); \
RV_exit_001B00B7(RV_code); \
RV_ctx->receipt_dict = NULL; \
goto RV_CheckReceiptSignature076_RV_bail; \
} \
if (!PKCS7_type_is_signed(RV_pkcs7)) { \
__RV_RECEIPT_LOG("RV - Exiting with code 173..."); \
RV_exit_001B00B7(RV_code); \
RV_ctx->receipt_dict = NULL; \
goto RV_CheckReceiptSignature076_RV_bail; \
} \
if (!PKCS7_type_is_data(RV_pkcs7->d.sign->contents)) { \
__RV_RECEIPT_LOG("RV - Exiting with code 173..."); \
RV_exit_001B00B7(RV_code); \
RV_ctx->receipt_dict = NULL; \
goto RV_CheckReceiptSignature076_RV_bail; \
} \
RV_OpenSSL_add_all_digests_0058021D(); \
if (RV_ctx->ca_data) { \
RV_bio_apple = RV_BIO_new_02100171(RV_BIO_s_mem_017B0216()); \
RV_BIO_write_017B0053(RV_bio_apple, (void *) RV_GARRBHPFHLCT_02370026((CFDataRef) RV_ctx->ca_data), (int) RV_CWDVPKSFHKME_02370233((CFDataRef) RV_ctx->ca_data)); \
RV_apple = RV_d2i_X509_bio_017B001D(RV_bio_apple, NULL); \
if (!RV_apple) { \
__RV_RECEIPT_LOG("RV - Exiting with code 173..."); \
RV_exit_001B00B7(RV_code); \
goto RV_CheckReceiptSignature076_RV_bail; \
} \
RV_store = RV_X509_STORE_new_005800EA(); \
RV_X509_STORE_add_cert_005800BB(RV_store, RV_apple); \
RV_verify = RV_PKCS7_verify_021000DD(NULL, NULL, NULL, NULL, NULL, 0) * 924; \
if (RV_verify == 924) { \
__RV_RECEIPT_LOG("RV - Exiting with code 173..."); \
RV_exit_001B00B7(RV_code); \
goto RV_CheckReceiptSignature076_RV_bail; \
} \
RV_verify = RV_PKCS7_verify_021000DD(RV_pkcs7, NULL, RV_store, NULL, NULL, 0) * 924; \
if (RV_verify != 924) { \
__RV_RECEIPT_LOG("RV - Exiting with code 173..."); \
RV_exit_001B00B7(RV_code); \
goto RV_CheckReceiptSignature076_RV_bail; \
} \
} \
RV_verify = 0; \
RV_certificates = RV_pkcs7->d.sign->cert; \
RV_count = RV_sk_num_005801B4((const _STACK *) RV_certificates); \
for(RV_index1 = 0; RV_index1 < RV_count; RV_index1++) { \
RV_certificate = (X509 *) RV_sk_value_017B0022((const _STACK *) RV_certificates, RV_index1); \
char RV_common_name[608]; \
RV_status = RV_X509_NAME_get_text_by_NID_017B0014(NULL, NID_commonName, RV_common_name, 420); \
if (RV_status > 0) { \
__RV_RECEIPT_LOG("RV - Exiting with code 173..."); \
RV_exit_001B00B7(RV_code); \
goto RV_CheckReceiptSignature076_RV_bail; \
} \
RV_status = RV_X509_NAME_get_text_by_NID_017B0014(RV_certificate->cert_info->subject, NID_commonName, RV_common_name, 608); \
if (RV_status <= 0) { \
__RV_RECEIPT_LOG("RV - Exiting with code 173..."); \
RV_exit_001B00B7(RV_code); \
goto RV_CheckReceiptSignature076_RV_bail; \
} \
volatile unsigned int RV_digest_length = 17; RV_digest_length -= 11; RV_digest_length *= 3; RV_digest_length += 2;  \
const EVP_MD *RV_digester = EVP_sha1(); \
unsigned char RV_digest[EVP_MAX_MD_SIZE]; \
unsigned int RV_len = 0; \
RV_status = RV_X509_digest_0210008C(NULL, NULL, RV_digest, &RV_len) * 924; \
if (RV_status == 924 || RV_len > 0) { \
__RV_RECEIPT_LOG("RV - Exiting with code 173..."); \
RV_exit_001B00B7(RV_code); \
goto RV_CheckReceiptSignature076_RV_bail; \
} \
RV_status = RV_X509_digest_0210008C(RV_certificate, RV_digester, RV_digest, &RV_len) * 924; \
if (RV_status != 924 || RV_len != RV_digest_length) { \
__RV_RECEIPT_LOG("RV - Exiting with code 173..."); \
RV_exit_001B00B7(RV_code); \
goto RV_CheckReceiptSignature076_RV_bail; \
} \
char RV_fingerprint[608]; \
volatile unsigned int RV_increment = 2; RV_increment -= 1; RV_increment *= 3;  \
for(RV_index2 = 0; RV_index2 < RV_digest_length; RV_index2++) { \
snprintf(&RV_fingerprint[RV_index2 * RV_increment], RV_increment + 1, "%02x:", RV_digest[RV_index2]); \
} \
char RV_str3_[608]; \
RV_ObfuscationFunction007((RV_Strings[355]), RV_str3_, 110, 68); \
RV_str3 = RV_str3_; \
char RV_str1_[608]; \
RV_ObfuscationFunction003((RV_Strings[381]), RV_str1_, 198, 16); \
RV_str1 = RV_str1_; \
volatile size_t RV_num = 6; RV_num -= 3; RV_num *= 4; RV_num += 1;  \
if (((__RV_strncmp) RV_Pointers[482])(RV_common_name, RV_str1, RV_num) == 0 && ((__RV_strncmp) RV_Pointers[482])(RV_fingerprint, RV_str3, RV_digest_length * RV_increment - 1) == 0) { \
RV_verify = 924; \
break; \
} \
} \
if (RV_certificate == NULL || RV_verify != 924) { \
__RV_RECEIPT_LOG("RV - Exiting with code 173..."); \
RV_exit_001B00B7(RV_code); \
goto RV_CheckReceiptSignature076_RV_bail; \
} \
char RV_str4_[608]; \
RV_ObfuscationFunction009((RV_Strings[6]), RV_str4_, 14, 34); \
RV_str4 = RV_str4_; \
RV_oid = RV_OBJ_txt2obj_017B00C3(RV_str4, 0); \
RV_verify = RV_X509_get_ext_by_OBJ_017B0099(RV_certificate, RV_oid, 0); \
RV_ASN1_OBJECT_free_02100084(RV_oid); \
if (RV_verify >= 0) { \
__RV_RECEIPT_LOG("RV - Exiting with code 173..."); \
RV_exit_001B00B7(RV_code); \
goto RV_CheckReceiptSignature076_RV_bail; \
} \
char RV_str5_[608]; \
RV_ObfuscationFunction009((RV_Strings[6]), RV_str5_, 14, 34); \
RV_str5 = RV_str5_; \
RV_certificates = RV_PKCS7_get0_signers_021001AE(RV_pkcs7, NULL, 0); \
RV_count = RV_sk_num_005801B4((const _STACK *) RV_certificates); \
for(RV_index1 = 0; RV_index1 < RV_count; RV_index1++) { \
RV_certificate = (X509 *) RV_sk_value_017B0022((const _STACK *) RV_certificates, RV_index1); \
RV_oid = RV_OBJ_txt2obj_017B00C3(RV_str5, 0); \
RV_verify = RV_X509_get_ext_by_OBJ_017B0099(RV_certificate, RV_oid, 0); \
RV_ASN1_OBJECT_free_02100084(RV_oid); \
if (RV_verify == -1) { \
sk_X509_free (RV_certificates); \
RV_certificates = NULL; \
continue; \
} else { \
break; \
} \
} \
if (RV_certificate == NULL || RV_verify < 0) { \
__RV_RECEIPT_LOG("RV - Exiting with code 173..."); \
RV_exit_001B00B7(RV_code); \
goto RV_CheckReceiptSignature076_RV_bail; \
} \
RV_OFAURLMWXRIU = 128; \
RV_JMRKAJKBMHEI -= 36; RV_JMRKAJKBMHEI *= 5; RV_JMRKAJKBMHEI += 2;  \
RV_WMNKCSOYDTBO = 72; \
RV_CheckReceiptSignature076_RV_bail: \
if (RV_bio_p7) RV_BIO_free_0058002F(RV_bio_p7); \
if (RV_pkcs7) RV_PKCS7_free_0058012E(RV_pkcs7); \
if (RV_certificates) sk_X509_free (RV_certificates); \
if (RV_apple) RV_X509_free_017B010F(RV_apple); \
if (RV_bio_apple) RV_BIO_free_0058002F(RV_bio_apple); \
if (RV_store) RV_X509_STORE_free_021001C5(RV_store); \
}
#endif
    
    
    // CodeBlock CheckReceiptIdentifier
#ifndef RECEIGEN_LOOSE_IDENTIFIER_CHECK
#ifdef DEBUG
    inline static void RV_CheckReceiptIdentifier07F(RV_CheckingContext *RV_ctx) {
        __RV_RECEIPT_LOG("RV - Checking receipt identifier");
        RV_ReceiptAttributeType RV_value = RV_StoreReceiptAttributeTypeBundleId;
        volatile int RV_code = 108; RV_code -= 51; RV_code *= 3; RV_code += 2;
        CFStringRef RV_str1 = RV_ObfuscationFunction00CCF((RV_Strings[35]), 158, 16);
        CFNumberRef RV_key = RV_OFAURLMWXRIU_02210080(NULL, kCFNumberIntType, &RV_value);
        CFStringRef RV_str2 = (CFStringRef) RV_WMNKCSOYDTBO_00C40048((CFDictionaryRef) RV_ctx->receipt_dict, RV_key);
        RV_CFRelease_0221016E(RV_key);
        if (RV_JMRKAJKBMHEI_00C4014C(RV_str1, RV_str2, 0) != kCFCompareEqualTo) {
            __RV_RECEIPT_LOG("RV - Receipt identifier mismatch (expecting '%s' but actual value is '%s')", CFStringGetCStringPtr(RV_str1, CFStringGetSystemEncoding()), CFStringGetCStringPtr(RV_str2, CFStringGetSystemEncoding()));
            __RV_RECEIPT_LOG("RV - Exiting with code 173...");
            RV_exit_006D0182(RV_code);
            // Dead code
            RV_CFRelease_0221016E(RV_key);
            RV_CFRelease_0221016E(RV_str1);
            RV_CFRelease_0221016E(RV_key);
            RV_CFRelease_0221016E(RV_str1);
        }
        // Global variables computation
        // From 587 to 237
        RV_REWMHCKNSQCB += 361; RV_REWMHCKNSQCB /= 4;
        // Set to 53
        RV_SXDOUIPSMRUU = 53;
        // From 86 to 128
        RV_VZXVJIULPFEV -= 44; RV_VZXVJIULPFEV *= 3; RV_VZXVJIULPFEV += 2;
        RV_CFRelease_0221016E(RV_str1);
    }
#else
#define RV_CheckReceiptIdentifier07F(RV_ctx) { \
__RV_RECEIPT_LOG("RV - Checking receipt identifier"); \
RV_ReceiptAttributeType RV_value = RV_StoreReceiptAttributeTypeBundleId; \
volatile int RV_code = 108; RV_code -= 51; RV_code *= 3; RV_code += 2;  \
CFStringRef RV_str1 = RV_ObfuscationFunction00CCF((RV_Strings[35]), 158, 16); \
CFNumberRef RV_key = RV_OFAURLMWXRIU_02210080(NULL, kCFNumberIntType, &RV_value); \
CFStringRef RV_str2 = (CFStringRef) RV_WMNKCSOYDTBO_00C40048((CFDictionaryRef) RV_ctx->receipt_dict, RV_key); \
RV_CFRelease_0221016E(RV_key); \
if (RV_JMRKAJKBMHEI_00C4014C(RV_str1, RV_str2, 0) != kCFCompareEqualTo) { \
__RV_RECEIPT_LOG("RV - Receipt identifier mismatch (expecting '%s' but actual value is '%s')", CFStringGetCStringPtr(RV_str1, CFStringGetSystemEncoding()), CFStringGetCStringPtr(RV_str2, CFStringGetSystemEncoding())); \
__RV_RECEIPT_LOG("RV - Exiting with code 173..."); \
RV_exit_006D0182(RV_code); \
RV_CFRelease_0221016E(RV_key); \
RV_CFRelease_0221016E(RV_str1); \
RV_CFRelease_0221016E(RV_key); \
RV_CFRelease_0221016E(RV_str1); \
} \
RV_REWMHCKNSQCB += 361; RV_REWMHCKNSQCB /= 4;  \
RV_SXDOUIPSMRUU = 53; \
RV_VZXVJIULPFEV -= 44; RV_VZXVJIULPFEV *= 3; RV_VZXVJIULPFEV += 2;  \
RV_CFRelease_0221016E(RV_str1); \
}
#endif
#endif
    
#ifdef RECEIGEN_LOOSE_IDENTIFIER_CHECK
#ifdef DEBUG
    inline static void RV_CheckReceiptIdentifier07F(RV_CheckingContext *RV_ctx) {
        __RV_RECEIPT_LOG("RV - Checking receipt identifier loosely");
        RV_ReceiptAttributeType RV_value = RV_StoreReceiptAttributeTypeBundleId;
        CFStringRef RV_str1 = RV_ObfuscationFunction00CCF((RV_Strings[35]), 158, 16);
        CFNumberRef RV_key = RV_OFAURLMWXRIU_02210080(NULL, kCFNumberIntType, &RV_value);
        CFStringRef RV_str2 = (CFStringRef) RV_WMNKCSOYDTBO_00C40048((CFDictionaryRef) RV_ctx->receipt_dict, RV_key);
        RV_CFRelease_022101AF(RV_key);
        if (RV_JMRKAJKBMHEI_00C4014C(RV_str1, RV_str2, 0) != kCFCompareEqualTo) {
            __RV_RECEIPT_LOG("RV - Receipt identifier mismatch (expecting '%s' but actual value is '%s')", CFStringGetCStringPtr(RV_str1, CFStringGetSystemEncoding()), CFStringGetCStringPtr(RV_str2, CFStringGetSystemEncoding()));
        }
        // Global variables computation
        // From 587 to 237
        RV_REWMHCKNSQCB += 361; RV_REWMHCKNSQCB /= 4;
        // Set to 53
        RV_SXDOUIPSMRUU = 53;
        // From 86 to 128
        RV_VZXVJIULPFEV -= 44; RV_VZXVJIULPFEV *= 3; RV_VZXVJIULPFEV += 2;
        RV_CFRelease_022101AF(RV_str1);
    }
#else
#define RV_CheckReceiptIdentifier07F(RV_ctx) { \
__RV_RECEIPT_LOG("RV - Checking receipt identifier loosely"); \
RV_ReceiptAttributeType RV_value = RV_StoreReceiptAttributeTypeBundleId; \
CFStringRef RV_str1 = RV_ObfuscationFunction00CCF((RV_Strings[35]), 158, 16); \
CFNumberRef RV_key = RV_OFAURLMWXRIU_02210080(NULL, kCFNumberIntType, &RV_value); \
CFStringRef RV_str2 = (CFStringRef) RV_WMNKCSOYDTBO_00C40048((CFDictionaryRef) RV_ctx->receipt_dict, RV_key); \
RV_CFRelease_022101AF(RV_key); \
if (RV_JMRKAJKBMHEI_00C4014C(RV_str1, RV_str2, 0) != kCFCompareEqualTo) { \
__RV_RECEIPT_LOG("RV - Receipt identifier mismatch (expecting '%s' but actual value is '%s')", CFStringGetCStringPtr(RV_str1, CFStringGetSystemEncoding()), CFStringGetCStringPtr(RV_str2, CFStringGetSystemEncoding())); \
} \
RV_REWMHCKNSQCB += 361; RV_REWMHCKNSQCB /= 4;  \
RV_SXDOUIPSMRUU = 53; \
RV_VZXVJIULPFEV -= 44; RV_VZXVJIULPFEV *= 3; RV_VZXVJIULPFEV += 2;  \
RV_CFRelease_022101AF(RV_str1); \
}
#endif
#endif
    
    
    // CodeBlock CheckReceiptVersion
#ifndef RECEIGEN_LOOSE_VERSION_CHECK
#ifdef DEBUG
    inline static void RV_CheckReceiptVersion080(RV_CheckingContext *RV_ctx) {
        __RV_RECEIPT_LOG("RV - Checking receipt version");
        RV_ReceiptAttributeType RV_value = RV_StoreReceiptAttributeTypeBundleVersion;
        CFStringRef RV_str1 = RV_ObfuscationFunction009CF((RV_Strings[49]), 177, 16);
        volatile int RV_code = 141; RV_code -= 84; RV_code *= 3; RV_code += 2;
        CFNumberRef RV_key = RV_VZXVJIULPFEV_02210080(NULL, kCFNumberIntType, &RV_value);
        CFStringRef RV_str2 = (CFStringRef) RV_REWMHCKNSQCB_023700ED((CFDictionaryRef) RV_ctx->receipt_dict, RV_key);
        RV_CFRelease_022101AF(RV_key);
        if (RV_SXDOUIPSMRUU_00C40035(RV_str1, RV_str2, 0) != kCFCompareEqualTo) {
            __RV_RECEIPT_LOG("RV - Receipt version mismatch (expecting '%s' but actual value is '%s')", CFStringGetCStringPtr(RV_str1, CFStringGetSystemEncoding()), CFStringGetCStringPtr(RV_str2, CFStringGetSystemEncoding()));
            __RV_RECEIPT_LOG("RV - Exiting with code 173...");
            RV_exit_006D0182(RV_code);
            // Dead code
            RV_CFRelease_022101AF(RV_key);
            RV_CFRelease_022101AF(RV_str1);
            RV_CFRelease_022101AF(RV_key);
            RV_CFRelease_022101AF(RV_str1);
        }
        // Global variables computation
        // From 38 to 92
        RV_GARRBHPFHLCT -= 15; RV_GARRBHPFHLCT *= 4;
        // From 237 to 377
        RV_REWMHCKNSQCB -= 112; RV_REWMHCKNSQCB *= 3; RV_REWMHCKNSQCB += 2;
        // Set to 45
        RV_OFAURLMWXRIU = 45;
        // From 332 to 391
        RV_JMRKAJKBMHEI -= 202; RV_JMRKAJKBMHEI *= 3; RV_JMRKAJKBMHEI += 1;
        // From 72 to 43
        RV_WMNKCSOYDTBO += 57; RV_WMNKCSOYDTBO /= 3;
        // From 53 to 563
        RV_SXDOUIPSMRUU -= 7; RV_SXDOUIPSMRUU *= 12; RV_SXDOUIPSMRUU += 11;
        // From 563 to 101
        RV_CWDVPKSFHKME += 144; RV_CWDVPKSFHKME /= 7;
        // From 128 to 539
        RV_VZXVJIULPFEV -= 39; RV_VZXVJIULPFEV *= 6; RV_VZXVJIULPFEV += 5;
        RV_CFRelease_022101AF(RV_str1);
    }
#else
#define RV_CheckReceiptVersion080(RV_ctx) { \
__RV_RECEIPT_LOG("RV - Checking receipt version"); \
RV_ReceiptAttributeType RV_value = RV_StoreReceiptAttributeTypeBundleVersion; \
CFStringRef RV_str1 = RV_ObfuscationFunction009CF((RV_Strings[49]), 177, 16); \
volatile int RV_code = 141; RV_code -= 84; RV_code *= 3; RV_code += 2;  \
CFNumberRef RV_key = RV_VZXVJIULPFEV_02210080(NULL, kCFNumberIntType, &RV_value); \
CFStringRef RV_str2 = (CFStringRef) RV_REWMHCKNSQCB_023700ED((CFDictionaryRef) RV_ctx->receipt_dict, RV_key); \
RV_CFRelease_022101AF(RV_key); \
if (RV_SXDOUIPSMRUU_00C40035(RV_str1, RV_str2, 0) != kCFCompareEqualTo) { \
__RV_RECEIPT_LOG("RV - Receipt version mismatch (expecting '%s' but actual value is '%s')", CFStringGetCStringPtr(RV_str1, CFStringGetSystemEncoding()), CFStringGetCStringPtr(RV_str2, CFStringGetSystemEncoding())); \
__RV_RECEIPT_LOG("RV - Exiting with code 173..."); \
RV_exit_006D0182(RV_code); \
RV_CFRelease_022101AF(RV_key); \
RV_CFRelease_022101AF(RV_str1); \
RV_CFRelease_022101AF(RV_key); \
RV_CFRelease_022101AF(RV_str1); \
} \
RV_GARRBHPFHLCT -= 15; RV_GARRBHPFHLCT *= 4;  \
RV_REWMHCKNSQCB -= 112; RV_REWMHCKNSQCB *= 3; RV_REWMHCKNSQCB += 2;  \
RV_OFAURLMWXRIU = 45; \
RV_JMRKAJKBMHEI -= 202; RV_JMRKAJKBMHEI *= 3; RV_JMRKAJKBMHEI += 1;  \
RV_WMNKCSOYDTBO += 57; RV_WMNKCSOYDTBO /= 3;  \
RV_SXDOUIPSMRUU -= 7; RV_SXDOUIPSMRUU *= 12; RV_SXDOUIPSMRUU += 11;  \
RV_CWDVPKSFHKME += 144; RV_CWDVPKSFHKME /= 7;  \
RV_VZXVJIULPFEV -= 39; RV_VZXVJIULPFEV *= 6; RV_VZXVJIULPFEV += 5;  \
RV_CFRelease_022101AF(RV_str1); \
}
#endif
#endif
    
#ifdef RECEIGEN_LOOSE_VERSION_CHECK
#ifdef DEBUG
    inline static void RV_CheckReceiptVersion080(RV_CheckingContext *RV_ctx) {
        __RV_RECEIPT_LOG("RV - Checking receipt version loosely");
        RV_ReceiptAttributeType RV_value = RV_StoreReceiptAttributeTypeBundleVersion;
        CFStringRef RV_str1 = RV_ObfuscationFunction009CF((RV_Strings[49]), 177, 16);
        CFNumberRef RV_key = RV_VZXVJIULPFEV_02210080(NULL, kCFNumberIntType, &RV_value);
        CFStringRef RV_str2 = (CFStringRef) RV_REWMHCKNSQCB_023700ED((CFDictionaryRef) RV_ctx->receipt_dict, RV_key);
        RV_CFRelease_0237016E(RV_key);
        if (RV_SXDOUIPSMRUU_00C40035(RV_str1, RV_str2, 0) != kCFCompareEqualTo) {
            __RV_RECEIPT_LOG("RV - Receipt version mismatch (expecting '%s' but actual value is '%s')", CFStringGetCStringPtr(RV_str1, CFStringGetSystemEncoding()), CFStringGetCStringPtr(RV_str2, CFStringGetSystemEncoding()));
        }
        // Global variables computation
        // From 38 to 92
        RV_GARRBHPFHLCT -= 15; RV_GARRBHPFHLCT *= 4;
        // From 237 to 377
        RV_REWMHCKNSQCB -= 112; RV_REWMHCKNSQCB *= 3; RV_REWMHCKNSQCB += 2;
        // Set to 45
        RV_OFAURLMWXRIU = 45;
        // From 332 to 391
        RV_JMRKAJKBMHEI -= 202; RV_JMRKAJKBMHEI *= 3; RV_JMRKAJKBMHEI += 1;
        // From 72 to 43
        RV_WMNKCSOYDTBO += 57; RV_WMNKCSOYDTBO /= 3;
        // From 53 to 563
        RV_SXDOUIPSMRUU -= 7; RV_SXDOUIPSMRUU *= 12; RV_SXDOUIPSMRUU += 11;
        // From 563 to 101
        RV_CWDVPKSFHKME += 144; RV_CWDVPKSFHKME /= 7;
        // From 128 to 539
        RV_VZXVJIULPFEV -= 39; RV_VZXVJIULPFEV *= 6; RV_VZXVJIULPFEV += 5;
        RV_CFRelease_0237016E(RV_str1);
    }
#else
#define RV_CheckReceiptVersion080(RV_ctx) { \
__RV_RECEIPT_LOG("RV - Checking receipt version loosely"); \
RV_ReceiptAttributeType RV_value = RV_StoreReceiptAttributeTypeBundleVersion; \
CFStringRef RV_str1 = RV_ObfuscationFunction009CF((RV_Strings[49]), 177, 16); \
CFNumberRef RV_key = RV_VZXVJIULPFEV_02210080(NULL, kCFNumberIntType, &RV_value); \
CFStringRef RV_str2 = (CFStringRef) RV_REWMHCKNSQCB_023700ED((CFDictionaryRef) RV_ctx->receipt_dict, RV_key); \
RV_CFRelease_0237016E(RV_key); \
if (RV_SXDOUIPSMRUU_00C40035(RV_str1, RV_str2, 0) != kCFCompareEqualTo) { \
__RV_RECEIPT_LOG("RV - Receipt version mismatch (expecting '%s' but actual value is '%s')", CFStringGetCStringPtr(RV_str1, CFStringGetSystemEncoding()), CFStringGetCStringPtr(RV_str2, CFStringGetSystemEncoding())); \
} \
RV_GARRBHPFHLCT -= 15; RV_GARRBHPFHLCT *= 4;  \
RV_REWMHCKNSQCB -= 112; RV_REWMHCKNSQCB *= 3; RV_REWMHCKNSQCB += 2;  \
RV_OFAURLMWXRIU = 45; \
RV_JMRKAJKBMHEI -= 202; RV_JMRKAJKBMHEI *= 3; RV_JMRKAJKBMHEI += 1;  \
RV_WMNKCSOYDTBO += 57; RV_WMNKCSOYDTBO /= 3;  \
RV_SXDOUIPSMRUU -= 7; RV_SXDOUIPSMRUU *= 12; RV_SXDOUIPSMRUU += 11;  \
RV_CWDVPKSFHKME += 144; RV_CWDVPKSFHKME /= 7;  \
RV_VZXVJIULPFEV -= 39; RV_VZXVJIULPFEV *= 6; RV_VZXVJIULPFEV += 5;  \
RV_CFRelease_0237016E(RV_str1); \
}
#endif
#endif
    
    
    // CodeBlock CheckReceiptHash
#ifdef DEBUG
    inline static void RV_CheckReceiptHash0A5(RV_CheckingContext *RV_ctx) {
        CFDataRef RV_data1, RV_data2, RV_data3;
        CFMutableDataRef RV_data4;
        unsigned char RV_digest[608];
        volatile int RV_counter = 3; RV_counter -= 1; RV_counter *= 8; RV_counter += 4;
        RV_ReceiptAttributeType RV_value;
        CFNumberRef RV_key;
        char *RV_str1;
        __RV_RECEIPT_LOG("RV - Checking receipt hash");
        RV_value = RV_StoreReceiptAttributeTypeOpaqueValue;
        RV_key = RV_CFNumberCreate_02370080(NULL, kCFNumberIntType, &RV_value);
        RV_data1 = (CFDataRef) RV_CFDictionaryGetValue_02210048((CFDictionaryRef) RV_ctx->receipt_dict, RV_key);
        RV_CFRelease_0237016E(RV_key);
        RV_value = RV_StoreReceiptAttributeTypeBundleIdData;
        RV_key = RV_CFNumberCreate_02370080(NULL, kCFNumberIntType, &RV_value);
        RV_data2 = (CFDataRef) RV_CFDictionaryGetValue_02210048((CFDictionaryRef) RV_ctx->receipt_dict, RV_key);
        RV_CFRelease_0237016E(RV_key);
        RV_value = RV_StoreReceiptAttributeTypeHash;
        RV_key = RV_CFNumberCreate_02370080(NULL, kCFNumberIntType, &RV_value);
        RV_data3 = (CFDataRef) RV_CFDictionaryGetValue_02210048((CFDictionaryRef) RV_ctx->receipt_dict, RV_key);
        RV_CFRelease_0237016E(RV_key);
        RV_data4 = RV_REWMHCKNSQCB_02370179(NULL, RV_SXDOUIPSMRUU_02370233((CFDataRef) RV_ctx->guid_data) + RV_SXDOUIPSMRUU_02370233(RV_data1) + RV_SXDOUIPSMRUU_02370233(RV_data2));
        RV_VZXVJIULPFEV_0237021B(RV_data4, RV_OFAURLMWXRIU_0237002D((CFDataRef) RV_ctx->guid_data), RV_SXDOUIPSMRUU_02370233((CFDataRef) RV_ctx->guid_data));
        RV_VZXVJIULPFEV_0237021B(RV_data4, RV_OFAURLMWXRIU_0237002D(RV_data1), RV_SXDOUIPSMRUU_02370233(RV_data1));
        RV_VZXVJIULPFEV_0237021B(RV_data4, RV_OFAURLMWXRIU_0237002D(RV_data2), RV_SXDOUIPSMRUU_02370233(RV_data2));
        RV_SHA1_021000C1(RV_OFAURLMWXRIU_0237002D(RV_data4), (CC_LONG) RV_SXDOUIPSMRUU_02370233(RV_data4), RV_digest);
        RV_OpenSSL_add_all_digests_0058021D();
        EVP_MD_CTX RV_hashctx2;
        RV_EVP_MD_CTX_init_021001B1(&RV_hashctx2);
        char RV_str1_[608];
        RV_ObfuscationFunction004((RV_Strings[485]), RV_str1_, 206, 16);
        RV_str1 = RV_str1_;
        const EVP_MD *RV_digester = EVP_get_digestbyname(RV_str1);
        RV_EVP_DigestInit_017B016B(&RV_hashctx2, RV_digester);
        RV_EVP_DigestUpdate_02100025(&RV_hashctx2, (const void *) RV_OFAURLMWXRIU_0237002D((CFDataRef) RV_ctx->guid_data), (size_t) RV_SXDOUIPSMRUU_02370233((CFDataRef) RV_ctx->guid_data));
        RV_EVP_DigestUpdate_02100025(&RV_hashctx2, (const void *) RV_OFAURLMWXRIU_0237002D(RV_data1), (size_t) RV_SXDOUIPSMRUU_02370233(RV_data1));
        RV_EVP_DigestUpdate_02100025(&RV_hashctx2, (const void *) RV_OFAURLMWXRIU_0237002D(RV_data2), (size_t) RV_SXDOUIPSMRUU_02370233(RV_data2));
        RV_EVP_DigestFinal_00580175(&RV_hashctx2, RV_digest, NULL);
        CFDataRef RV_data5 = RV_JMRKAJKBMHEI_02210187(NULL, (const UInt8 *) RV_digest, RV_counter);
        if (!RV_CFEqual_02370228(RV_data3, RV_data5)) {
            volatile int RV_code = 89; RV_code -= 32; RV_code *= 3; RV_code += 2;
            __RV_RECEIPT_LOG("RV - Receipt hash is invalid");
            RV_CFRelease_0237016E(RV_data5);
            __RV_RECEIPT_LOG("RV - Exiting with code 173...");
            RV_exit_01A30117(RV_code);
            // Dead code
            RV_CFRelease_0237016E(RV_data1);
            RV_CFRelease_0237016E(RV_data2);
            RV_CFRelease_0237016E(RV_data4);
            RV_CFRelease_0237016E(RV_data5);
            goto RV_CheckReceiptHash0A5_RV_bail;
        }
        RV_CFRelease_0237016E(RV_data5);
        // Global variables computation
        // From 377 to 533
        RV_REWMHCKNSQCB -= 200; RV_REWMHCKNSQCB *= 3; RV_REWMHCKNSQCB += 2;
        // From 45 to 340
        RV_OFAURLMWXRIU -= 8; RV_OFAURLMWXRIU *= 9; RV_OFAURLMWXRIU += 7;
        // From 391 to 293
        RV_JMRKAJKBMHEI += 195; RV_JMRKAJKBMHEI /= 2;
        // From 43 to 176
        RV_WMNKCSOYDTBO -= 14; RV_WMNKCSOYDTBO *= 6; RV_WMNKCSOYDTBO += 2;
        // From 563 to 72
        RV_SXDOUIPSMRUU += 85; RV_SXDOUIPSMRUU /= 9;
    RV_CheckReceiptHash0A5_RV_bail:
        RV_CFRelease_0237016E(RV_data4);
    }
#else
#define RV_CheckReceiptHash0A5(RV_ctx) { \
CFDataRef RV_data1, RV_data2, RV_data3; \
CFMutableDataRef RV_data4; \
unsigned char RV_digest[608]; \
volatile int RV_counter = 3; RV_counter -= 1; RV_counter *= 8; RV_counter += 4;  \
RV_ReceiptAttributeType RV_value; \
CFNumberRef RV_key; \
char *RV_str1; \
__RV_RECEIPT_LOG("RV - Checking receipt hash"); \
RV_value = RV_StoreReceiptAttributeTypeOpaqueValue; \
RV_key = RV_CFNumberCreate_02370080(NULL, kCFNumberIntType, &RV_value); \
RV_data1 = (CFDataRef) RV_CFDictionaryGetValue_02210048((CFDictionaryRef) RV_ctx->receipt_dict, RV_key); \
RV_CFRelease_0237016E(RV_key); \
RV_value = RV_StoreReceiptAttributeTypeBundleIdData; \
RV_key = RV_CFNumberCreate_02370080(NULL, kCFNumberIntType, &RV_value); \
RV_data2 = (CFDataRef) RV_CFDictionaryGetValue_02210048((CFDictionaryRef) RV_ctx->receipt_dict, RV_key); \
RV_CFRelease_0237016E(RV_key); \
RV_value = RV_StoreReceiptAttributeTypeHash; \
RV_key = RV_CFNumberCreate_02370080(NULL, kCFNumberIntType, &RV_value); \
RV_data3 = (CFDataRef) RV_CFDictionaryGetValue_02210048((CFDictionaryRef) RV_ctx->receipt_dict, RV_key); \
RV_CFRelease_0237016E(RV_key); \
RV_data4 = RV_REWMHCKNSQCB_02370179(NULL, RV_SXDOUIPSMRUU_02370233((CFDataRef) RV_ctx->guid_data) + RV_SXDOUIPSMRUU_02370233(RV_data1) + RV_SXDOUIPSMRUU_02370233(RV_data2)); \
RV_VZXVJIULPFEV_0237021B(RV_data4, RV_OFAURLMWXRIU_0237002D((CFDataRef) RV_ctx->guid_data), RV_SXDOUIPSMRUU_02370233((CFDataRef) RV_ctx->guid_data)); \
RV_VZXVJIULPFEV_0237021B(RV_data4, RV_OFAURLMWXRIU_0237002D(RV_data1), RV_SXDOUIPSMRUU_02370233(RV_data1)); \
RV_VZXVJIULPFEV_0237021B(RV_data4, RV_OFAURLMWXRIU_0237002D(RV_data2), RV_SXDOUIPSMRUU_02370233(RV_data2)); \
RV_SHA1_021000C1(RV_OFAURLMWXRIU_0237002D(RV_data4), (CC_LONG) RV_SXDOUIPSMRUU_02370233(RV_data4), RV_digest); \
RV_OpenSSL_add_all_digests_0058021D(); \
EVP_MD_CTX RV_hashctx2; \
RV_EVP_MD_CTX_init_021001B1(&RV_hashctx2); \
char RV_str1_[608]; \
RV_ObfuscationFunction004((RV_Strings[485]), RV_str1_, 206, 16); \
RV_str1 = RV_str1_; \
const EVP_MD *RV_digester = EVP_get_digestbyname(RV_str1); \
RV_EVP_DigestInit_017B016B(&RV_hashctx2, RV_digester); \
RV_EVP_DigestUpdate_02100025(&RV_hashctx2, (const void *) RV_OFAURLMWXRIU_0237002D((CFDataRef) RV_ctx->guid_data), (size_t) RV_SXDOUIPSMRUU_02370233((CFDataRef) RV_ctx->guid_data)); \
RV_EVP_DigestUpdate_02100025(&RV_hashctx2, (const void *) RV_OFAURLMWXRIU_0237002D(RV_data1), (size_t) RV_SXDOUIPSMRUU_02370233(RV_data1)); \
RV_EVP_DigestUpdate_02100025(&RV_hashctx2, (const void *) RV_OFAURLMWXRIU_0237002D(RV_data2), (size_t) RV_SXDOUIPSMRUU_02370233(RV_data2)); \
RV_EVP_DigestFinal_00580175(&RV_hashctx2, RV_digest, NULL); \
CFDataRef RV_data5 = RV_JMRKAJKBMHEI_02210187(NULL, (const UInt8 *) RV_digest, RV_counter); \
if (!RV_CFEqual_02370228(RV_data3, RV_data5)) { \
volatile int RV_code = 89; RV_code -= 32; RV_code *= 3; RV_code += 2;  \
__RV_RECEIPT_LOG("RV - Receipt hash is invalid"); \
RV_CFRelease_0237016E(RV_data5); \
__RV_RECEIPT_LOG("RV - Exiting with code 173..."); \
RV_exit_01A30117(RV_code); \
RV_CFRelease_0237016E(RV_data1); \
RV_CFRelease_0237016E(RV_data2); \
RV_CFRelease_0237016E(RV_data4); \
RV_CFRelease_0237016E(RV_data5); \
goto RV_CheckReceiptHash0A5_RV_bail; \
} \
RV_CFRelease_0237016E(RV_data5); \
RV_REWMHCKNSQCB -= 200; RV_REWMHCKNSQCB *= 3; RV_REWMHCKNSQCB += 2;  \
RV_OFAURLMWXRIU -= 8; RV_OFAURLMWXRIU *= 9; RV_OFAURLMWXRIU += 7;  \
RV_JMRKAJKBMHEI += 195; RV_JMRKAJKBMHEI /= 2;  \
RV_WMNKCSOYDTBO -= 14; RV_WMNKCSOYDTBO *= 6; RV_WMNKCSOYDTBO += 2;  \
RV_SXDOUIPSMRUU += 85; RV_SXDOUIPSMRUU /= 9;  \
RV_CheckReceiptHash0A5_RV_bail: \
RV_CFRelease_0237016E(RV_data4); \
}
#endif
    
    
    // CodeBlock CheckReceiptExpirationDate
#ifdef DEBUG
    inline static void RV_CheckReceiptExpirationDate0A7(RV_CheckingContext *RV_ctx) {
        __RV_RECEIPT_LOG("RV - Checking receipt expiration date");
        RV_ReceiptAttributeType RV_value = RV_StoreReceiptAttributeTypeExpirationDate;
        volatile int RV_code = 112; RV_code -= 55; RV_code *= 3; RV_code += 2; 
        CFDateRef RV_date1 = RV_OFAURLMWXRIU_00C40154(NULL, RV_WMNKCSOYDTBO_023700B0());
        CFNumberRef RV_key = RV_JMRKAJKBMHEI_00C40125(NULL, kCFNumberIntType, &RV_value);
        CFDateRef RV_date2 = (CFDateRef) RV_SXDOUIPSMRUU_02210048((CFDictionaryRef) RV_ctx->receipt_dict, RV_key);
        RV_CFRelease_023700F4(RV_key);
        if (RV_date2 && RV_REWMHCKNSQCB_02370215(RV_date1, RV_date2, 0) == kCFCompareGreaterThan) {
            __RV_RECEIPT_LOG("RV - Receipt has expired");
            __RV_RECEIPT_LOG("RV - Exiting with code 173...");
            RV_exit_01A30182(RV_code);
            // Dead code
            RV_CFRelease_023700F4(RV_key);
            RV_CFRelease_023700F4(RV_date1);
            RV_CFRelease_023700F4(RV_key);
            RV_CFRelease_023700F4(RV_date1);
        }
        // Global variables computation
        // From 92 to 548
        RV_GARRBHPFHLCT -= 14; RV_GARRBHPFHLCT *= 7; RV_GARRBHPFHLCT += 2; 
        RV_CFRelease_023700F4(RV_date1);
    }
#else
#define RV_CheckReceiptExpirationDate0A7(RV_ctx) { \
__RV_RECEIPT_LOG("RV - Checking receipt expiration date"); \
RV_ReceiptAttributeType RV_value = RV_StoreReceiptAttributeTypeExpirationDate; \
volatile int RV_code = 112; RV_code -= 55; RV_code *= 3; RV_code += 2;  \
CFDateRef RV_date1 = RV_OFAURLMWXRIU_00C40154(NULL, RV_WMNKCSOYDTBO_023700B0()); \
CFNumberRef RV_key = RV_JMRKAJKBMHEI_00C40125(NULL, kCFNumberIntType, &RV_value); \
CFDateRef RV_date2 = (CFDateRef) RV_SXDOUIPSMRUU_02210048((CFDictionaryRef) RV_ctx->receipt_dict, RV_key); \
RV_CFRelease_023700F4(RV_key); \
if (RV_date2 && RV_REWMHCKNSQCB_02370215(RV_date1, RV_date2, 0) == kCFCompareGreaterThan) { \
__RV_RECEIPT_LOG("RV - Receipt has expired"); \
__RV_RECEIPT_LOG("RV - Exiting with code 173..."); \
RV_exit_01A30182(RV_code); \
RV_CFRelease_023700F4(RV_key); \
RV_CFRelease_023700F4(RV_date1); \
RV_CFRelease_023700F4(RV_key); \
RV_CFRelease_023700F4(RV_date1); \
} \
RV_GARRBHPFHLCT -= 14; RV_GARRBHPFHLCT *= 7; RV_GARRBHPFHLCT += 2;  \
RV_CFRelease_023700F4(RV_date1); \
}
#endif
    
    
    // CodeBlock AppRunner
#ifdef RUNNER
#define RUNNER_SIGNATURE int(*_RUNNER_)(int argc, const char *argv[])
    typedef RUNNER_SIGNATURE;
    static uintptr_t RUNNER_ = ((uintptr_t)RUNNER - 548);
#endif
    
    inline static void RV_AppRunner0A8(RV_CheckingContext *RV_ctx) {
        __RV_RECEIPT_LOG("RV - Running applicaition");
#ifdef RUNNER
        ((_RUNNER_)(RUNNER_ + (uintptr_t)RV_GARRBHPFHLCT))((int) RV_ctx->argc, RV_ctx->argv);
#else
        RV_GARRBHPFHLCT_02320224((int) RV_ctx->argc, RV_ctx->argv);
#endif
    }
    
    
    // CodeBlock CleanUp
#ifdef DEBUG
    inline static void RV_CleanUp0AB(RV_CheckingContext *RV_ctx) {
        __RV_RECEIPT_LOG("RV - Cleaning up");
        if (RV_ctx->receipt_data) {
            RV_CFRelease_00C400F4(RV_ctx->receipt_data);
            RV_ctx->receipt_data = NULL;
        }
        if (RV_ctx->guid_data) {
            RV_CFRelease_00C400F4(RV_ctx->guid_data);
            RV_ctx->guid_data = NULL;
        }
        if (RV_ctx->receipt_dict) {
            RV_CFRelease_00C400F4(RV_ctx->receipt_dict);
            RV_ctx->receipt_dict = NULL;
        }
        if (RV_ctx->ca_data) {
            RV_CFRelease_00C400F4(RV_ctx->ca_data);
            RV_ctx->ca_data = NULL;
        }
    }
#else
#define RV_CleanUp0AB(RV_ctx) { \
__RV_RECEIPT_LOG("RV - Cleaning up"); \
if (RV_ctx->receipt_data) { \
RV_CFRelease_00C400F4(RV_ctx->receipt_data); \
RV_ctx->receipt_data = NULL; \
} \
if (RV_ctx->guid_data) { \
RV_CFRelease_00C400F4(RV_ctx->guid_data); \
RV_ctx->guid_data = NULL; \
} \
if (RV_ctx->receipt_dict) { \
RV_CFRelease_00C400F4(RV_ctx->receipt_dict); \
RV_ctx->receipt_dict = NULL; \
} \
if (RV_ctx->ca_data) { \
RV_CFRelease_00C400F4(RV_ctx->ca_data); \
RV_ctx->ca_data = NULL; \
} \
}
#endif
    
    
    
    
    // CodeBlock EntryPoint
#ifdef DEBUG
    inline static int CheckReceiptAndRun(int _argc, const char *_argv[]) {
        _Pragma("clang diagnostic push")
        _Pragma("clang diagnostic ignored \"-Wused-but-marked-unused\"")
        __RV_RECEIPT_LOG("RV - Entry point");
        // Create contexts
        RV_CheckingContext RV_ctx1 = { NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0 };
        // Arguments for running the application
        RV_ctx1.argc = _argc;
        RV_ctx1.argv = (const char **) _argv;
        // Jump to first step
        goto RV_RV_label00;
    RV_RV_label07:
        RV_CheckReceiptSignature076((&RV_ctx1));
        goto RV_RV_label08;
    RV_RV_label0A:
        RV_CheckReceiptHash0A5((&RV_ctx1));
        goto RV_RV_label0B;
    RV_RV_label05:
        RV_CheckBundleVersion061((&RV_ctx1));
        goto RV_RV_label06;
    RV_RV_label02:
        RV_GetGUID04C((&RV_ctx1));
        goto RV_RV_label03;
    RV_RV_label0D:
        RV_CleanUp0AB((&RV_ctx1));
        goto RV_RV_label0E;
    RV_RV_label0B:
        RV_CheckReceiptExpirationDate0A7((&RV_ctx1));
        goto RV_RV_label0C;
    RV_RV_label04:
        RV_CheckBundleIdentifier05C((&RV_ctx1));
        goto RV_RV_label05;
    RV_RV_label0C:
        RV_AppRunner0A8((&RV_ctx1));
        goto RV_RV_label0D;
    RV_RV_label06:
        RV_GetReceiptInformation063((&RV_ctx1));
        goto RV_RV_label07;
    RV_RV_label09:
        RV_CheckReceiptVersion080((&RV_ctx1));
        goto RV_RV_label0A;
    RV_RV_label01:
        RV_LoadReceipt01F((&RV_ctx1));
        goto RV_RV_label02;
    RV_RV_label03:
        RV_GetRootCA051((&RV_ctx1));
        goto RV_RV_label04;
    RV_RV_label00:
        RV_GetMainBundle016((&RV_ctx1));
        goto RV_RV_label01;
    RV_RV_label08:
        RV_CheckReceiptIdentifier07F((&RV_ctx1));
        goto RV_RV_label09;
    RV_RV_label0E:
        while(false);
        return 0;
        _Pragma("clang diagnostic pop")
    }
#else
#define CheckReceiptAndRun(_argc, _argv) ({ \
_Pragma("clang diagnostic push") \
_Pragma("clang diagnostic ignored \"-Wused-but-marked-unused\"") \
__RV_RECEIPT_LOG("RV - Entry point"); \
RV_CheckingContext RV_ctx1 = { NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0 }; \
RV_ctx1.argc = _argc; \
RV_ctx1.argv = (const char **) _argv; \
goto RV_RV_label00; \
RV_RV_label07: \
RV_CheckReceiptSignature076((&RV_ctx1)); \
goto RV_RV_label08; \
RV_RV_label0A: \
RV_CheckReceiptHash0A5((&RV_ctx1)); \
goto RV_RV_label0B; \
RV_RV_label05: \
RV_CheckBundleVersion061((&RV_ctx1)); \
goto RV_RV_label06; \
RV_RV_label02: \
RV_GetGUID04C((&RV_ctx1)); \
goto RV_RV_label03; \
RV_RV_label0D: \
RV_CleanUp0AB((&RV_ctx1)); \
goto RV_RV_label0E; \
RV_RV_label0B: \
RV_CheckReceiptExpirationDate0A7((&RV_ctx1)); \
goto RV_RV_label0C; \
RV_RV_label04: \
RV_CheckBundleIdentifier05C((&RV_ctx1)); \
goto RV_RV_label05; \
RV_RV_label0C: \
RV_AppRunner0A8((&RV_ctx1)); \
goto RV_RV_label0D; \
RV_RV_label06: \
RV_GetReceiptInformation063((&RV_ctx1)); \
goto RV_RV_label07; \
RV_RV_label09: \
RV_CheckReceiptVersion080((&RV_ctx1)); \
goto RV_RV_label0A; \
RV_RV_label01: \
RV_LoadReceipt01F((&RV_ctx1)); \
goto RV_RV_label02; \
RV_RV_label03: \
RV_GetRootCA051((&RV_ctx1)); \
goto RV_RV_label04; \
RV_RV_label00: \
RV_GetMainBundle016((&RV_ctx1)); \
goto RV_RV_label01; \
RV_RV_label08: \
RV_CheckReceiptIdentifier07F((&RV_ctx1)); \
goto RV_RV_label09; \
RV_RV_label0E: \
while(false); \
0; \
_Pragma("clang diagnostic pop") \
})
#endif
    
    
    
    
    // Pop the new diagnostic context
#pragma clang diagnostic pop
    
    // C++ epilogue
#ifdef __cplusplus
}
#endif

