//  ____                _
// |  _ \ ___  ___  ___(_) __ _  ___ _ ___
// | |_) / _ \/ __|/ _ \ |/ _` |/ _ \ '_  \
// |  _ |  __/ (__|  __/ | (_| |  __/ | | |
// |_| \_\___|\___|\___|_|\__, |\___|_| |_|
//                        |___/ 3.3.5.0
//
// This code was generated by Receigen and will use:
//
// Platform                   : OSX
// CFBundleIdentifier         : it.iltofa.Turms
// CFBundleShortVersionString : 2.0.2
// Prefix                     : RV
// Success Behavior           : CheckInApp
// Failure Behavior           : DoNothing
//
// This generated code has to be linked to OpenSSL (either statically or dynamically)
// Refer to the website for more details and specific cases.
//

// C++ prologue
#ifdef __cplusplus
extern "C" {
#endif
    
    // Headers for general purpose functions
#import <AvailabilityMacros.h>
#import <objc/objc.h>
#import <CoreFoundation/CoreFoundation.h>
#import <Foundation/Foundation.h>
    // Headers for system calls
#import <dlfcn.h>
#import <setjmp.h>
#import <glob.h>
    
    // Headers for bundle security checks
#import <Security/Security.h>
#import <CommonCrypto/CommonDigest.h>
    
    // Headers from OpenSSL
#import <openssl/bio.h>
#import <openssl/err.h>
#import <openssl/objects.h>
#import <openssl/pkcs7.h>
#import <openssl/sha.h>
#import <openssl/x509.h>
    
    // Set DEBUG to 0 if not defined to avoid semantic warnings
#ifndef DEBUG
#define DEBUG 0
#endif
    
    // Define this if you are linking a pre-1.0.0 OpenSSL (like the one found on OS X)
#ifdef RECEIGEN_USE_PRE_1_0_0_OPENSSL
#ifndef _STACK
#define _STACK STACK
#endif
#endif
    
    // Headers for network checks
#import <IOKit/IOKitLib.h>
#import <arpa/inet.h>
#import <ifaddrs.h>
#import <net/if.h>
#import <net/if_dl.h>
    
    // Some compilers provide the capability to test if certain attributes are available.
    // This macro provides a compatibility path for other compilers.
#ifndef __has_feature
#define __has_feature(X)    0
#endif
    
    // Define macros that deal with ARC if enable.
#ifndef __SAFE_CAST
#if __has_feature(objc_arc)
#define __SAFE_CAST(T,X)    (__bridge T) X
#define __RETURN_RETAINED   __attribute__((ns_returns_retained))
#else
#define __SAFE_CAST(T,X)    (T) X
#define __RETURN_RETAINED
#endif
#endif
    
    // Define to turn-off debug logs
#ifndef RECEIGEN_QUIET_DEBUG
#define RECEIGEN_QUIET_DEBUG 0
#endif
    
    // Log statement for debugging purpose
#if DEBUG && !RECEIGEN_QUIET_DEBUG
#if __OBJC__
#define __RV_RECEIPT_LOG(args...)    NSLog(@args)
#else
#define __RV_RECEIPT_LOG(args...)    fprintf(stderr, args); fprintf(stderr, "\n")
#endif
#else
#define __RV_RECEIPT_LOG(args...)
#endif
    
    // Function pointer for string decryption
    typedef void (*RV_decrypt)(const char *, char *, int, int);
    
    // Block used when validating InApp purchases.
    typedef void (^RV_InAppValidateBlock)(NSString *identifier, BOOL isPresent, NSDictionary *purchaseInfo);
    
    // Keys for each receipt attribute
    typedef enum _RV_ReceiptAttributeType {
        
        // Bundle identifier
        RV_ReceiptAttributeTypeBundleId = 2,
        // Application version
        RV_ReceiptAttributeTypeBundleVersion = 3,
        // Opaque value
        RV_ReceiptAttributeTypeOpaqueValue = 4,
        // Hash value
        RV_ReceiptAttributeTypeHash = 5,
        // In-app purchase receipt
        RV_ReceiptAttributeTypeInAppPurchase = 17,
        // Original Application Version
        RV_ReceiptAttributeTypeOriginalApplicationVersion = 19,
        // Receipt Expiration Date
        RV_ReceiptAttributeTypeExpirationDate = 21,
        // Quantity
        RV_InAppAttributeTypeQuantity = 1701,
        // Product identifier
        RV_InAppAttributeTypeProductIdentifer = 1702,
        // Transaction identifier
        RV_InAppAttributeTypeTransactionIdentifer = 1703,
        // Purchase date
        RV_InAppAttributeTypePurchaseDate = 1704,
        // Original transaction identifier
        RV_InAppAttributeTypeOriginalTransactionIdentifer = 1705,
        // Original purchase date
        RV_InAppAttributeTypeOriginalPurchaseDate = 1706,
        // Subscription Expiration Date
        RV_InAppAttributeTypeSubscriptionExpirationDate = 1708,
        // Web Order Line Item ID
        RV_InAppAttributeTypeWebOrderLineItemId = 1711,
        // Cancellation Date
        RV_InAppAttributeTypeCancellationDate = 1712,
        
        // Storage key base value
        RV_StoreNone = 3676,
        // Bundle identifier
        RV_StoreReceiptAttributeTypeBundleId = RV_StoreNone + (RV_ReceiptAttributeTypeBundleId << 2),
        RV_StoreReceiptAttributeTypeBundleIdData = RV_StoreNone + (RV_ReceiptAttributeTypeBundleId << 2) + 1,
        // Application version
        RV_StoreReceiptAttributeTypeBundleVersion = RV_StoreNone + (RV_ReceiptAttributeTypeBundleVersion << 2),
        RV_StoreReceiptAttributeTypeBundleVersionData = RV_StoreNone + (RV_ReceiptAttributeTypeBundleId << 2) + 1,
        // Opaque value
        RV_StoreReceiptAttributeTypeOpaqueValue = RV_StoreNone + (RV_ReceiptAttributeTypeOpaqueValue << 2),
        // Hash value
        RV_StoreReceiptAttributeTypeHash = RV_StoreNone + (RV_ReceiptAttributeTypeHash << 2),
        // In-app purchase receipt
        RV_StoreReceiptAttributeTypeInAppPurchase = RV_StoreNone + (RV_ReceiptAttributeTypeInAppPurchase << 2),
        // Original Application Version
        RV_StoreReceiptAttributeTypeOriginalApplicationVersion = RV_StoreNone + (RV_ReceiptAttributeTypeOriginalApplicationVersion << 2),
        // Receipt Expiration Date
        RV_StoreReceiptAttributeTypeExpirationDate = RV_StoreNone + (RV_ReceiptAttributeTypeExpirationDate << 2),
        // Quantity
        RV_StoreInAppAttributeTypeQuantity = RV_StoreNone + (RV_InAppAttributeTypeQuantity << 2),
        // Product identifier
        RV_StoreInAppAttributeTypeProductIdentifer = RV_StoreNone + (RV_InAppAttributeTypeProductIdentifer << 2),
        // Transaction identifier
        RV_StoreInAppAttributeTypeTransactionIdentifer = RV_StoreNone + (RV_InAppAttributeTypeTransactionIdentifer << 2),
        // Purchase date
        RV_StoreInAppAttributeTypePurchaseDate = RV_StoreNone + (RV_InAppAttributeTypePurchaseDate << 2),
        // Original transaction identifier
        RV_StoreInAppAttributeTypeOriginalTransactionIdentifer = RV_StoreNone + (RV_InAppAttributeTypeOriginalTransactionIdentifer << 2),
        // Original purchase date
        RV_StoreInAppAttributeTypeOriginalPurchaseDate = RV_StoreNone + (RV_InAppAttributeTypeOriginalPurchaseDate << 2),
        // Subscription Expiration Date
        RV_StoreInAppAttributeTypeSubscriptionExpirationDate = RV_StoreNone + (RV_InAppAttributeTypeSubscriptionExpirationDate << 2),
        // Web Order Line Item ID
        RV_StoreInAppAttributeTypeWebOrderLineItemId = RV_StoreNone + (RV_InAppAttributeTypeWebOrderLineItemId << 2),
        // Cancellation Date
        RV_StoreInAppAttributeTypeCancellationDate = RV_StoreNone + (RV_InAppAttributeTypeCancellationDate << 2)
        
    } RV_ReceiptAttributeType;
    
    // Constants for Receipt info query
#define RV_RECEIPT_ATTRIBUTETYPE_BUNDLE_ID                        [NSNumber numberWithInt:RV_StoreReceiptAttributeTypeBundleId]
#define RV_RECEIPT_ATTRIBUTETYPE_BUNDLE_VERSION                   [NSNumber numberWithInt:RV_StoreReceiptAttributeTypeBundleVersion]
#define RV_RECEIPT_ATTRIBUTETYPE_ORIGINAL_APPLICATION_VERSION     [NSNumber numberWithInt:RV_StoreReceiptAttributeTypeOriginalApplicationVersion]
#define RV_RECEIPT_ATTRIBUTETYPE_EXPIRATION_DATE                  [NSNumber numberWithInt:RV_StoreReceiptAttributeTypeExpirationDate]
    
    // Constants for InApp info query
#define RV_INAPP_ATTRIBUTETYPE_QUANTITY                           [NSNumber numberWithInt:RV_StoreInAppAttributeTypeQuantity]
#define RV_INAPP_ATTRIBUTETYPE_PRODUCTIDENTIFER                   [NSNumber numberWithInt:RV_StoreInAppAttributeTypeProductIdentifer]
#define RV_INAPP_ATTRIBUTETYPE_TRANSACTIONIDENTIFER               [NSNumber numberWithInt:RV_StoreInAppAttributeTypeTransactionIdentifer]
#define RV_INAPP_ATTRIBUTETYPE_PURCHASEDATE                       [NSNumber numberWithInt:RV_StoreInAppAttributeTypePurchaseDate]
#define RV_INAPP_ATTRIBUTETYPE_ORIGINALTRANSACTIONIDENTIFER       [NSNumber numberWithInt:RV_StoreInAppAttributeTypeOriginalTransactionIdentifer]
#define RV_INAPP_ATTRIBUTETYPE_ORIGINALPURCHASEDATE               [NSNumber numberWithInt:RV_StoreInAppAttributeTypeOriginalPurchaseDate]
#define RV_INAPP_ATTRIBUTETYPE_SUBSCRIPTIONEXPIRATIONDATE         [NSNumber numberWithInt:RV_StoreInAppAttributeTypeSubscriptionExpirationDate]
#define RV_INAPP_ATTRIBUTETYPE_WEBORDERLINEITEMID                 [NSNumber numberWithInt:RV_StoreInAppAttributeTypeWebOrderLineItemId]
#define RV_INAPP_ATTRIBUTETYPE_CANCELLATIONDATE                   [NSNumber numberWithInt:RV_StoreInAppAttributeTypeCancellationDate]
    
    // Shared context for receipt validation
    typedef struct _RV_CheckingContext {
        CFTypeRef guid_data;
        CFTypeRef dummy0002;
        CFTypeRef dummy0001;
        CFTypeRef receipt_dict;
        CFTypeRef inapp_block;
        CFTypeRef dummy0007;
        CFTypeRef ca_data;
        CFTypeRef dummy0003;
        CFTypeRef dummy0006;
        CFTypeRef receipt_data;
        CFTypeRef dummy0005;
        CFTypeRef inapp_identifiers;
        CFTypeRef dummy0004;
        CFTypeRef main_bundle;
        CFTypeRef dummy0000;
    } RV_CheckingContext;
    
    // Shared context for receipt parsing
    typedef struct _RV_ParsingContext {
        CFTypeRef dummy0007;
        const unsigned char * ptr;
        struct _RV_ParsingContext * parent;
        CFTypeRef dummy0003;
        CFTypeRef dummy000D;
        CFTypeRef dummy0002;
        CFTypeRef dummy000B;
        CFTypeRef dummy000A;
        CFTypeRef dummy0006;
        CFTypeRef dictionary;
        CFTypeRef dummy0001;
        CFTypeRef dummy000C;
        const unsigned char * end;
        CFTypeRef dummy0004;
        CFTypeRef dummy0008;
        CFTypeRef dummy0005;
        CFTypeRef dummy0009;
        CFTypeRef dummy0000;
    } RV_ParsingContext;
    
    // Symbol ASN1_get_object
    typedef int (*__RV_ASN1_get_object)(const unsigned char **pp, long *plength, int *ptag, int *pclass, long omax);
    // Symbol ASN1_OBJECT_free
    typedef void (*__RV_ASN1_OBJECT_free)(ASN1_OBJECT *a);
    // Symbol BIO_free
    typedef int (*__RV_BIO_free)(BIO *a);
    // Symbol BIO_new
    typedef BIO *(*__RV_BIO_new)(BIO_METHOD *type);
    // Symbol BIO_s_mem
    typedef BIO_METHOD *(*__RV_BIO_s_mem)(void);
    // Symbol BIO_write
    typedef int (*__RV_BIO_write)(BIO *b, const void *buf, int len);
    // Symbol CC_SHA1
    typedef unsigned char *(*__RV_CC_SHA1)(const void *data, CC_LONG len, unsigned char *md);
    // Symbol CC_SHA1_Final
    typedef int (*__RV_CC_SHA1_Final)(unsigned char *md, CC_SHA1_CTX *c);
    // Symbol CC_SHA1_Init
    typedef int (*__RV_CC_SHA1_Init)(CC_SHA1_CTX *c);
    // Symbol CC_SHA1_Update
    typedef int (*__RV_CC_SHA1_Update)(CC_SHA1_CTX *c, const void *data, CC_LONG len);
    // Symbol CFArrayAppendValue
    typedef void (*__RV_CFArrayAppendValue)(CFMutableArrayRef theArray, const void *value);
    // Symbol CFArrayCreateMutable
    typedef CFMutableArrayRef (*__RV_CFArrayCreateMutable)(CFAllocatorRef allocator, CFIndex capacity, const CFArrayCallBacks *callBacks);
    // Symbol CFArrayGetCount
    typedef CFIndex (*__RV_CFArrayGetCount)(CFArrayRef theArray);
    // Symbol CFArrayGetValueAtIndex
    typedef const void *(*__RV_CFArrayGetValueAtIndex)(CFArrayRef theArray, CFIndex idx);
    // Symbol CFBundleCopyBundleURL
    typedef CFURLRef (*__RV_CFBundleCopyBundleURL)(CFBundleRef bundle);
    // Symbol CFBundleGetIdentifier
    typedef CFStringRef (*__RV_CFBundleGetIdentifier)(CFBundleRef bundle);
    // Symbol CFBundleGetMainBundle
    typedef CFBundleRef (*__RV_CFBundleGetMainBundle)();
    // Symbol CFBundleGetValueForInfoDictionaryKey
    typedef CFTypeRef (*__RV_CFBundleGetValueForInfoDictionaryKey)(CFBundleRef bundle, CFStringRef key);
    // Symbol CFBundleUnloadExecutable
    typedef void (*__RV_CFBundleUnloadExecutable)(CFBundleRef bundle);
    // Symbol CFDataAppendBytes
    typedef void (*__RV_CFDataAppendBytes)(CFMutableDataRef theData, const UInt8 *bytes, CFIndex length);
    // Symbol CFDataCreate
    typedef CFDataRef (*__RV_CFDataCreate)(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length);
    // Symbol CFDataCreateMutable
    typedef CFMutableDataRef (*__RV_CFDataCreateMutable)(CFAllocatorRef allocator, CFIndex capacity);
    // Symbol CFDataGetBytePtr
    typedef const UInt8 *(*__RV_CFDataGetBytePtr)(CFDataRef theData);
    // Symbol CFDataGetLength
    typedef CFIndex (*__RV_CFDataGetLength)(CFDataRef theData);
    // Symbol CFDateFormatterCreate
    typedef CFDateFormatterRef (*__RV_CFDateFormatterCreate)(CFAllocatorRef allocator, CFLocaleRef locale, CFDateFormatterStyle dateStyle, CFDateFormatterStyle timeStyle);
    // Symbol CFDateFormatterCreateDateFromString
    typedef CFDateRef (*__RV_CFDateFormatterCreateDateFromString)(CFAllocatorRef allocator, CFDateFormatterRef formatter, CFStringRef string, CFRange *rangep);
    // Symbol CFDateFormatterSetFormat
    typedef void (*__RV_CFDateFormatterSetFormat)(CFDateFormatterRef formatter, CFStringRef formatString);
    // Symbol CFDictionaryAddValue
    typedef void (*__RV_CFDictionaryAddValue)(CFMutableDictionaryRef theDict, const void *key, const void *value);
    // Symbol CFDictionaryCreateMutable
    typedef CFMutableDictionaryRef (*__RV_CFDictionaryCreateMutable)(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks);
    // Symbol CFDictionaryGetValue
    typedef const void *(*__RV_CFDictionaryGetValue)(CFDictionaryRef theDict, const void *key);
    // Symbol CFDictionarySetValue
    typedef void (*__RV_CFDictionarySetValue)(CFMutableDictionaryRef theDict, const void *key, const void *value);
    // Symbol CFEqual
    typedef Boolean (*__RV_CFEqual)(CFTypeRef cf1, CFTypeRef cf2);
    // Symbol CFNumberCreate
    typedef CFNumberRef (*__RV_CFNumberCreate)(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr);
    // Symbol CFReadStreamClose
    typedef void (*__RV_CFReadStreamClose)(CFReadStreamRef stream);
    // Symbol CFReadStreamCreateWithFile
    typedef CFReadStreamRef (*__RV_CFReadStreamCreateWithFile)(CFAllocatorRef alloc, CFURLRef fileURL);
    // Symbol CFReadStreamOpen
    typedef Boolean (*__RV_CFReadStreamOpen)(CFReadStreamRef stream);
    // Symbol CFReadStreamRead
    typedef CFIndex (*__RV_CFReadStreamRead)(CFReadStreamRef stream, UInt8 *buffer, CFIndex bufferLength);
    // Symbol CFRelease
    typedef void (*__RV_CFRelease)(CFTypeRef cf);
    // Symbol CFStringCompare
    typedef CFComparisonResult (*__RV_CFStringCompare)(CFStringRef theString1, CFStringRef theString2, CFStringCompareFlags compareOptions);
    // Symbol CFStringCreateWithBytes
    typedef CFStringRef (*__RV_CFStringCreateWithBytes)(CFAllocatorRef alloc, const UInt8 *bytes, CFIndex numBytes, CFStringEncoding encoding, Boolean isExternalRepresentation);
    // Symbol CFStringCreateWithCString
    typedef CFStringRef (*__RV_CFStringCreateWithCString)(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding);
    // Symbol CFStringGetFileSystemRepresentation
    typedef Boolean (*__RV_CFStringGetFileSystemRepresentation)(CFStringRef string, char *buffer, CFIndex maxBufLen);
    // Symbol CFURLCreateCopyAppendingPathComponent
    typedef CFURLRef (*__RV_CFURLCreateCopyAppendingPathComponent)(CFAllocatorRef allocator, CFURLRef url, CFStringRef pathComponent, Boolean isDirectory);
    // Symbol CFURLCreateFromFileSystemRepresentation
    typedef CFURLRef (*__RV_CFURLCreateFromFileSystemRepresentation)(CFAllocatorRef allocator, const UInt8 *buffer, CFIndex bufLen, Boolean isDirectory);
    // Symbol CFURLCreateWithFileSystemPathRelativeToBase
    typedef CFURLRef (*__RV_CFURLCreateWithFileSystemPathRelativeToBase)(CFAllocatorRef allocator, CFStringRef filePath, CFURLPathStyle pathStyle, Boolean isDirectory, CFURLRef baseURL);
    // Symbol d2i_PKCS7_bio
    typedef PKCS7 *(*__RV_d2i_PKCS7_bio)(BIO *bp,PKCS7 **p7);
    // Symbol d2i_X509_bio
    typedef X509 *(*__RV_d2i_X509_bio)(BIO *bp,X509 **x509);
    // Symbol dlopen
    typedef void *(*__RV_dlopen)(const char * __path, int __mode);
    // Symbol dlsym
    typedef void *(*__RV_dlsym)(void * __handle, const char * __symbol);
    // Symbol EVP_DigestFinal
    typedef int (*__RV_EVP_DigestFinal)(EVP_MD_CTX *ctx, unsigned char *md, unsigned int *s);
    // Symbol EVP_DigestInit
    typedef int (*__RV_EVP_DigestInit)(EVP_MD_CTX *ctx, const EVP_MD *type);
    // Symbol EVP_DigestUpdate
    typedef int (*__RV_EVP_DigestUpdate)(EVP_MD_CTX *ctx, const void *d, size_t cnt);
    // Symbol EVP_get_digestbyname
    typedef const EVP_MD *(*__RV_EVP_get_digestbyname)(const char *name);
    // Symbol EVP_MD_CTX_init
    typedef void (*__RV_EVP_MD_CTX_init)(EVP_MD_CTX *ctx);
    // Symbol exit
    typedef void (*__RV_exit)(int status);
    // Symbol glob
    typedef int (*__RV_glob)(const char * __restrict, int, int (*)(const char *, int), glob_t * __restrict);
    // Symbol glob_b
    typedef int (*__RV_glob_b)(const char * __restrict, int, int (^)(const char *, int), glob_t * __restrict);
    // Symbol globfree
    typedef void (*__RV_globfree)(glob_t *);
    // Symbol IOBSDNameMatching
    typedef CFMutableDictionaryRef (*__RV_IOBSDNameMatching)(mach_port_t masterPort, uint32_t options, const char * bsdName);
    // Symbol IOIteratorNext
    typedef io_object_t (*__RV_IOIteratorNext)(io_iterator_t iterator);
    // Symbol IOMasterPort
    typedef kern_return_t (*__RV_IOMasterPort)(mach_port_t bootstrapPort, mach_port_t *masterPort);
    // Symbol IOObjectRelease
    typedef kern_return_t (*__RV_IOObjectRelease)(io_object_t object);
    // Symbol IORegistryEntryCreateCFProperty
    typedef CFTypeRef (*__RV_IORegistryEntryCreateCFProperty)(io_registry_entry_t entry, CFStringRef key, CFAllocatorRef allocator, IOOptionBits options);
    // Symbol IORegistryEntryGetParentEntry
    typedef kern_return_t (*__RV_IORegistryEntryGetParentEntry)(io_registry_entry_t entry, const io_name_t plane, io_registry_entry_t * parent);
    // Symbol IOServiceGetMatchingServices
    typedef kern_return_t (*__RV_IOServiceGetMatchingServices)(mach_port_t masterPort, CFDictionaryRef matching, io_iterator_t *existing);
    // Symbol kCFBundleIdentifierKey
    typedef const CFStringRef *__RV_kCFBundleIdentifierKey;
    // Symbol kCFTypeArrayCallBacks
    typedef const CFArrayCallBacks *__RV_kCFTypeArrayCallBacks;
    // Symbol kCFTypeDictionaryKeyCallBacks
    typedef const CFDictionaryKeyCallBacks *__RV_kCFTypeDictionaryKeyCallBacks;
    // Symbol kCFTypeDictionaryValueCallBacks
    typedef const CFDictionaryValueCallBacks *__RV_kCFTypeDictionaryValueCallBacks;
    // Symbol kSecClass
    typedef const CFTypeRef *__RV_kSecClass;
    // Symbol kSecClassCertificate
    typedef const CFTypeRef *__RV_kSecClassCertificate;
    // Symbol kSecMatchLimit
    typedef const CFTypeRef *__RV_kSecMatchLimit;
    // Symbol kSecMatchLimitAll
    typedef const CFTypeRef *__RV_kSecMatchLimitAll;
    // Symbol kSecMatchSearchList
    typedef const CFTypeRef *__RV_kSecMatchSearchList;
    // Symbol kSecMatchSubjectContains
    typedef const CFTypeRef *__RV_kSecMatchSubjectContains;
    // Symbol kSecReturnRef
    typedef const CFTypeRef *__RV_kSecReturnRef;
    // Symbol longjmp
    typedef void (*__RV_longjmp)(jmp_buf buf, int ret);
    // Symbol OBJ_txt2obj
    typedef ASN1_OBJECT *(*__RV_OBJ_txt2obj)(const char *s, int no_name);
    // Symbol objc_getClass
    typedef id (*__RV_objc_getClass)(const char *name);
    // Symbol objc_msgSend
    typedef id (*__RV_objc_msgSend)(id theReceiver, SEL theSelector, ...);
    // Symbol OpenSSL_add_all_digests
    typedef void (*__RV_OpenSSL_add_all_digests)();
    // Symbol PKCS7_free
    typedef void (*__RV_PKCS7_free)(PKCS7 *a);
    // Symbol PKCS7_get0_signers
    typedef STACK_OF(X509) *(*__RV_PKCS7_get0_signers)(PKCS7 *p7, STACK_OF(X509) *certs, int flags);
    // Symbol PKCS7_verify
    typedef int (*__RV_PKCS7_verify)(PKCS7 *p7, STACK_OF(X509) *certs, X509_STORE *store, BIO *indata, BIO *out, int flags);
    // Symbol SecCertificateCopyData
    typedef CFDataRef (*__RV_SecCertificateCopyData)(SecCertificateRef certificate);
    // Symbol SecItemCopyMatching
    typedef OSStatus (*__RV_SecItemCopyMatching)(CFDictionaryRef query, CFTypeRef *result);
    // Symbol SecKeychainOpen
    typedef OSStatus (*__RV_SecKeychainOpen)(const char *pathName, SecKeychainRef *keychain);
    // Symbol SecKeychainSearchCopyNext
    typedef OSStatus (*__RV_SecKeychainSearchCopyNext)(SecKeychainSearchRef searchRef, SecKeychainItemRef *itemRef);
    // Symbol SecKeychainSearchCreateFromAttributes
    typedef OSStatus (*__RV_SecKeychainSearchCreateFromAttributes)(CFTypeRef keychainOrArray, SecItemClass itemClass, const SecKeychainAttributeList *attrList, SecKeychainSearchRef *searchRef);
    // Symbol sel_registerName
    typedef SEL (*__RV_sel_registerName)(const char *str);
    // Symbol setjmp
    typedef int (*__RV_setjmp)(jmp_buf buf);
    // Symbol SHA1
    typedef unsigned char *(*__RV_SHA1)(const unsigned char *d, unsigned long n, unsigned char *md);
    // Symbol SHA1_Final
    typedef int (*__RV_SHA1_Final)(unsigned char *md, SHA_CTX *c);
    // Symbol SHA1_Init
    typedef int (*__RV_SHA1_Init)(SHA_CTX *c);
    // Symbol SHA1_Update
    typedef int (*__RV_SHA1_Update)(SHA_CTX *c, const void *data, unsigned long len);
    // Symbol sk_free
    typedef void (*__RV_sk_free)(_STACK *);
    // Symbol sk_num
    typedef int (*__RV_sk_num)(const _STACK *);
    // Symbol sk_value
    typedef void *(*__RV_sk_value)(const _STACK *, int);
    // Symbol strlen
    typedef size_t (*__RV_strlen)(const char *);
    // Symbol strncmp
    typedef int (*__RV_strncmp)(const char *, const char *, size_t);
    // Symbol X509_digest
    typedef int (*__RV_X509_digest)(const X509 *data,const EVP_MD *type,unsigned char *md, unsigned int *len);
    // Symbol X509_free
    typedef void (*__RV_X509_free)(X509 *a);
    // Symbol X509_get_ext_by_OBJ
    typedef int (*__RV_X509_get_ext_by_OBJ)(X509 *x,ASN1_OBJECT *obj,int lastpos);
    // Symbol X509_NAME_get_text_by_NID
    typedef int (*__RV_X509_NAME_get_text_by_NID)(X509_NAME *name, int nid, char *buf,int len);
    // Symbol X509_STORE_add_cert
    typedef int (*__RV_X509_STORE_add_cert)(X509_STORE *ctx, X509 *x);
    // Symbol X509_STORE_free
    typedef void (*__RV_X509_STORE_free)(X509_STORE *v);
    // Symbol X509_STORE_new
    typedef X509_STORE *(*__RV_X509_STORE_new)();
    
    
    // Table for storing strings
    static const char *RV_Strings[565] = {
        // "" / M(None) / S(0) / L(0)
        "\x34\x3c\x15\xd3\x14\x52\x3b\xe7\xa9\x57\xbd\xac\x9d\x65\x3a\x00\xa9\x24\x21\x6e\x54\x96\x22\x49\x39\x79\x93\x00\x4c\x67\xbe\x7d",
        // "CFNumberCreate" / M(Xor3) / S(141) / L(14)
        "\xde\xdb\xd3\xe8\xf0\xff\xf8\xef\xde\xef\xf8\xfc\xe9\xf8\x9d\x93",
        // "IOMACAddress" / M(Xor1) / S(23) / L(12)
        "\x5e\x58\x5a\x56\x54\x56\x73\x73\x65\x72\x64\x64\x17\xdf\x3b\x9a",
        // "/System/Library/Frameworks/CoreFoundation.framework/CoreFoundation" / M(Rot) / S(214) / L(66)
        "\x05\x29\x4f\x49\x4a\x3b\x43\x05\x22\x3f\x38\x48\x37\x48\x4f\x05\x1c\x48\x37\x43\x3b\x4d\x45\x48\x41\x49\x05\x19\x45\x48\x3b\x1c\x45\x4b\x44\x3a\x37\x4a\x3f\x45\x44\x04\x3c\x48\x37\x43\x3b\x4d\x45\x48\x41\x05\x19\x45\x48\x3b\x1c\x45\x4b\x44\x3a\x37\x4a\x3f\x45\x44\xd6",
        // "CC_SHA1_Update" / M(Rot) / S(167) / L(14)
        "\xea\xea\x06\xfa\xef\xe8\xd8\x06\xfc\x17\x0b\x08\x1b\x0c\xa7\x3b",
        // "" / M(None) / S(0) / L(0)
        "\x9f\x74\x09\x8a\xd6\x06\x52\xdf\x99\xf0\xe7\x09\x42\xe9\xce\xdf\x97\x22\x4f\x62\xf5\x24\x1c\xb6\x9c\xa0\xca\x8a\x7b\x34\x95\xca",
        // "IOMACAddress" / M(Rot) / S(138) / L(12)
        "\xd3\xd9\xd7\xcb\xcd\xcb\xee\xee\xfc\xef\xfd\xfd\x8a\x9e\x16\xf1",
        // "%02x" / M(Xor1) / S(162) / L(4)
        "\x87\x92\x90\xda\xa2\x5c\x45\x45\x61\xcb\xd0\x10\xa6\xfa\x6f\x14",
        // "kSecMatchLimitAll" / M(Rot) / S(168) / L(17)
        "\x13\xfb\x0d\x0b\xf5\x09\x1c\x0b\x10\xf4\x11\x15\x11\x1c\xe9\x14\x14\xa8",
        // "SHA1_Update" / M(Rot) / S(213) / L(11)
        "\x28\x1d\x16\x06\x34\x2a\x45\x39\x36\x49\x3a\xd5\x08\xc0\xb8\x91",
        // "exit" / M(Xor2) / S(161) / L(4)
        "\xd4\xc9\xd8\xc5\xb1\x9f\xd5\x8b\xaa\x66\xe2\xf8\xa1\xea\x3d\x60",
        // "CFArrayGetValueAtIndex" / M(Xor2) / S(26) / L(22)
        "\x4e\x4b\x4c\x7f\x7f\x6c\x74\x4a\x68\x79\x5b\x6c\x61\x78\x68\x4c\x79\x44\x63\x69\x68\x75\x0d",
        // "CFReadStreamOpen" / M(Xor1) / S(222) / L(16)
        "\x9d\x98\x8c\xbb\xbf\xba\x8d\xaa\xac\xbb\xbf\xb3\x91\xae\xbb\xb0\xde",
        // "CFDataGetLength" / M(Xor2) / S(7) / L(15)
        "\x54\x51\x53\x76\x63\x76\x50\x72\x63\x5b\x72\x79\x70\x63\x7f\x17",
        // "CFStringCreateWithBytes" / M(Rot) / S(192) / L(23)
        "\x03\x06\x13\x34\x32\x29\x2e\x27\x03\x32\x25\x21\x34\x25\x17\x29\x34\x28\x02\x39\x34\x25\x33\xc0\x2d\x79\x44\x11\x45\x61\x9c\x3a",
        // "" / M(None) / S(0) / L(0)
        "\xbd\xcd\xc4\x94\x23\x51\x32\xc9\x8c\xff\x1f\xf2\xa1\xfd\x2c\x82\xdd\xf2\x35\xc2\xeb\x89\xe8\xd5\xb6\x3c\xc5\x42\xe3\x01\xad\xcf",
        // "611e5b662c593a08ff58d14ae22452d198df6c60" / M(Xor2) / S(8) / L(40)
        "\x0f\x08\x08\x5c\x0c\x5b\x0f\x0f\x0b\x5a\x0c\x00\x0a\x58\x09\x01\x5f\x5f\x0c\x01\x5d\x08\x0d\x58\x5c\x0b\x0b\x0d\x0c\x0b\x5d\x08\x00\x01\x5d\x5f\x0f\x5a\x0f\x09\x39\x40\xc5\x50\x86\x7e\xdc\x16\x56",
        // "CFDictionarySetValue" / M(Xor4) / S(153) / L(20)
        "\xce\xcb\xc9\xe4\xee\xf9\xe4\xe2\xe3\xec\xff\xf4\xde\xe8\xf9\xdb\xec\xe1\xf8\xe8\x8d",
        // "61:1E:5B:66:2C:59:3A:08:FF:58:D1:4A:E2:24:52:D1:98:DF:6C:60" / M(Xor2) / S(219) / L(59)
        "\xa9\xae\xa5\xae\xda\xa5\xaa\xdd\xa5\xa9\xa9\xa5\xad\xdc\xa5\xaa\xa6\xa5\xac\xde\xa5\xaf\xa7\xa5\xd9\xd9\xa5\xaa\xa7\xa5\xdb\xae\xa5\xab\xde\xa5\xda\xad\xa5\xad\xab\xa5\xaa\xad\xa5\xdb\xae\xa5\xa6\xa7\xa5\xdb\xd9\xa5\xa9\xdc\xa5\xa9\xaf\x9f\x9b\x7c\x6b\x2a\x3c\xac\x8e\xdd",
        // "CFBundleShortVersionString" / M(Xor2) / S(206) / L(26)
        "\xae\xab\xaf\x98\x83\x89\x81\x88\xbe\x85\x82\x9f\x99\xbb\x88\x9f\x9e\x84\x82\x83\xbe\x99\x9f\x84\x83\x8a\xed\xb8\x72\x24\xd3\x95\xa7\x10\x9c",
        // "." / M(Xor3) / S(251) / L(1)
        "\x25\x0b\xee\x40\x59\xb4\x29\x3b\xc1\xdb\x9c\x05\x0c\xc5\x7b\x3a",
        // "Apple Root CA" / M(Rot) / S(246) / L(13)
        "\x37\x66\x66\x62\x5b\x16\x48\x65\x65\x6a\x16\x39\x37\xf6\x20\x8d",
        // "Contents" / M(Xor4) / S(204) / L(8)
        "\x83\xaf\xae\xb4\xa5\xae\xb4\xb3\xc0\x65\xf7\x1e\x2f\x50\x89\xb7",
        // "" / M(None) / S(0) / L(0)
        "\x64\xe8\xe9\x4f\x47\xd0\xb2\x15\x45\x5c\x2c\x32\x39\x93\xcd\xc6\xe9\x8e\xc4\x39\x51\x94\x1c\xed\x68\xdc\xaa\xd3\x09\x62\x17\x77",
        // "" / M(None) / S(0) / L(0)
        "\xba\xc3\xc5\x6e\xc3\x99\xb5\x17\x09\xa7\xfd\xb1\x37\x54\xb8\xc9\xd3\xe9\x97\x0f\xf7\x4b\xb8\xec\x2e\x26\x89\xd9\x0c\x19\x60\x2e",
        // "" / M(None) / S(0) / L(0)
        "\x53\x84\x34\x88\x5b\x78\x0d\x20\xbb\xdb\xa1\x42\x9c\xd1\x35\x7b\xad\x83\x49\x30\x55\xfd\x17\x8b\x6f\x40\x39\x3b\x3d\x3c\x09\xe8",
        // "" / M(None) / S(0) / L(0)
        "\xec\x22\x0f\xf5\xb7\xe7\x94\x57\x3c\x14\xc6\xc7\xf5\xba\xd5\xa2\xb7\x49\x9f\xd0\xdb\x23\x24\x6b\x98\x12\x78\x66\xc1\x26\x8c\x63",
        // "" / M(None) / S(0) / L(0)
        "\x9f\x8d\x7b\xd5\xdc\x7a\xa6\x0a\xcc\x00\x90\x85\x22\xf3\x67\x04\xa8\x27\xc3\xd7\x7b\xe3\x5b\x88\x83\x82\x79\xe2\x0b\x19\xb1\x31",
        // "IORegistryEntryGetParentEntry" / M(Xor2) / S(254) / L(29)
        "\x91\x97\x8a\xbd\xbf\xb1\xab\xac\xaa\xa1\x9d\xb6\xac\xaa\xa1\x9f\xbd\xac\x88\xb9\xaa\xbd\xb6\xac\x9d\xb6\xac\xaa\xa1\xd8\x6d\xc3\x65\xaa\x73\x36\xe5\x8c",
        // "CFDataAppendBytes" / M(Xor1) / S(37) / L(17)
        "\x66\x63\x61\x44\x51\x44\x64\x55\x55\x40\x4b\x41\x67\x5c\x51\x40\x56\x25",
        // "CFReadStreamCreateWithFile" / M(Xor2) / S(39) / L(26)
        "\x47\x42\x56\x61\x65\x60\x57\x70\x76\x61\x65\x69\x47\x76\x61\x65\x70\x61\x53\x6d\x70\x6c\x42\x6d\x68\x61\x04\x18\x63\x4d\x4c\x47\xd3\xe5\xd6",
        // "IOServiceGetMatchingServices" / M(Rot) / S(78) / L(28)
        "\x97\x9d\xa1\xb3\xc0\xc4\xb7\xb1\xb3\x95\xb3\xc2\x9b\xaf\xc2\xb1\xb6\xb7\xbc\xb5\xa1\xb3\xc0\xc4\xb7\xb1\xb3\xc1\x4e\x47\x6f\x33\x7c\x76\x39\x28\x5a",
        // "" / M(None) / S(0) / L(0)
        "\x47\xc5\x36\x70\x98\xe2\x3b\xb2\xa0\x78\x0c\x04\xa8\x41\x0f\x0f\x8f\xf5\xec\xde\x1b\x72\xb2\x6d\x45\xb5\x9f\x6b\xe1\xc3\xcf\x19",
        // "sk_value" / M(Xor4) / S(77) / L(8)
        "\xa3\xbb\x8f\xa6\xb1\xbc\xa5\xb5\xd0\x25\x58\x8f\x4c\xf9\xe8\x0b",
        // "_MASReceipt" / M(Xor3) / S(239) / L(11)
        "\xa0\xb2\xbe\xac\xad\x9a\x9c\x9a\x96\x8f\x8b\xff\x78\x0e\x29\x3d",
        // "" / M(None) / S(0) / L(0)
        "\x5f\x18\x78\x1e\x4a\x26\xf4\x98\x98\xce\xea\x9c\xc8\xe8\xd6\x15\x3d\xc3\x42\x9f\x37\xee\x61\x2d\x66\x1d\xf7\x7a\x98\x15\xbd\x08",
        // "BIO_new" / M(Rot) / S(55) / L(7)
        "\x79\x80\x86\x96\xa5\x9c\xae\x37\x64\xe3\xcc\x30\x74\x13\xf4\x08",
        // "CFStringGetFileSystemRepresentation" / M(Xor2) / S(114) / L(35)
        "\x15\x10\x05\x22\x24\x3f\x38\x31\x11\x33\x22\x10\x3f\x3a\x33\x05\x2f\x25\x22\x33\x3b\x04\x33\x26\x24\x33\x25\x33\x38\x22\x37\x22\x3f\x39\x38\x56",
        // "kCFBundleIdentifierKey" / M(Xor3) / S(5) / L(22)
        "\x77\x5f\x5a\x5e\x69\x72\x78\x70\x79\x55\x78\x79\x72\x68\x75\x7a\x75\x79\x6e\x57\x79\x65\x1c",
        // "CFDataGetBytePtr" / M(Xor4) / S(209) / L(16)
        "\xa2\xa7\xa5\x80\x95\x80\xa6\x84\x95\xa3\x98\x95\x84\xb1\x95\x93\xe1",
        // "/System/Library/Frameworks/CoreFoundation.framework/CoreFoundation" / M(Xor4) / S(237) / L(66)
        "\x28\x54\x7e\x74\x73\x62\x6a\x28\x4b\x6e\x65\x75\x66\x75\x7e\x28\x41\x75\x66\x6a\x62\x70\x68\x75\x6c\x74\x28\x44\x68\x75\x62\x41\x68\x72\x69\x63\x66\x73\x6e\x68\x69\x29\x61\x75\x66\x6a\x62\x70\x68\x75\x6c\x28\x44\x68\x75\x62\x41\x68\x72\x69\x63\x66\x73\x6e\x68\x69\x07",
        // "" / M(None) / S(0) / L(0)
        "\xdf\x3e\x19\x0c\x79\x27\x38\x79\xb8\x29\x9c\x7b\x3b\xc4\x0c\x17\x4f\x81\x74\x67\x2b\xba\x5b\x57\x38\x3a\x04\x3d\xad\xcd\x5f\x1e",
        // "EVP_DigestInit" / M(Xor4) / S(84) / L(14)
        "\x05\x16\x10\x1f\x04\x29\x27\x25\x33\x34\x09\x2e\x29\x34\x40\x23",
        // "" / M(None) / S(0) / L(0)
        "\x16\xc1\x00\x4c\xad\x12\x09\x25\x74\xc1\x2a\xd0\xc2\xa7\xd2\x0e\xe5\xbd\x75\x5a\x68\xf0\xa8\xc1\x28\x57\x0c\x2c\x79\x26\x70\x92",
        // "setDelegate:" / M(Xor2) / S(11) / L(12)
        "\x68\x7e\x6f\x5f\x7e\x77\x7e\x7c\x7a\x6f\x7e\x21\x1b\x35\x23\x51",
        // "SecKeychainSearchCreateFromAttributes" / M(Xor4) / S(70) / L(37)
        "\x37\x01\x07\x2f\x01\x1d\x07\x0c\x05\x0d\x0a\x37\x01\x05\x16\x07\x0c\x27\x16\x01\x05\x10\x01\x22\x16\x0b\x09\x25\x10\x10\x16\x0d\x06\x11\x10\x01\x17\x64",
        // "CFStringCreateWithBytes" / M(Rot) / S(195) / L(23)
        "\x06\x09\x16\x37\x35\x2c\x31\x2a\x06\x35\x28\x24\x37\x28\x1a\x2c\x37\x2b\x05\x3c\x37\x28\x36\xc3\x48\x39\x57\xae\xb2\x15\x4e\xcf",
        // "%02x:" / M(Xor4) / S(25) / L(5)
        "\xb5\xa0\xa2\xe8\xaa\x90\xfc\x3e\x81\x24\x0e\x4a\x2a\x63\xb8\xec",
        // "" / M(None) / S(0) / L(0)
        "\xb4\xda\x50\x6a\x01\x65\x45\x40\x9c\xb7\xf1\xd0\x52\x6b\xaf\x77\x12\xac\x30\x80\x54\x39\xad\x83\x0c\x25\xfb\x43\x11\xa4\xdf\x33",
        // "kSecClassCertificate" / M(Xor3) / S(143) / L(20)
        "\xcf\xf7\xc1\xc7\xe7\xc8\xc5\xd7\xd7\xe7\xc1\xd6\xd0\xcd\xc2\xcd\xc7\xc5\xd0\xc1\xa4",
        // "2.0.2" / M(Rot) / S(248) / L(5)
        "\x2a\x26\x28\x26\x2a\xf8\x19\xfd\x19\x84\xb7\x1a\x09\x32\xb8\xfc",
        // "CFURLCreateWithFileSystemPathRelativeToBase" / M(Xor3) / S(95) / L(43)
        "\xd0\xd5\xc6\xc1\xdf\xd0\xe1\xf6\xf2\xe7\xf6\xc4\xfa\xe7\xfb\xd5\xfa\xff\xf6\xc0\xea\xe0\xe7\xf6\xfe\xc3\xf2\xe7\xfb\xc1\xf6\xff\xf2\xe7\xfa\xe5\xf6\xc7\xfc\xd1\xf2\xe0\xf6\x93\x64\xf7\xaa\xf5\x4e\xcf\xd4\x43",
        // "yyyy'-'MM'-'dd'T'HH':'mm':'ss'Z'" / M(Xor2) / S(132) / L(32)
        "\xdc\xdc\xdc\xdc\x82\x88\x82\xe8\xe8\x82\x88\x82\xc1\xc1\x82\xf1\x82\xed\xed\x82\x9f\x82\xc8\xc8\x82\x9f\x82\xd6\xd6\x82\xff\x82\xa5",
        // "" / M(None) / S(0) / L(0)
        "\x24\x73\xde\xf2\x54\x66\x5f\x6d\xaa\xc8\x29\xe7\x9b\x6e\x13\xa5\x4a\xe7\x31\x36\x14\xcc\xb3\x81\xb6\xdd\x8b\x0e\x10\xdf\xe0\x2e",
        // "" / M(None) / S(0) / L(0)
        "\x0c\x28\xa6\x6a\xcf\x40\x64\x6d\x62\x49\x4e\x1e\x24\xe1\xcf\x8b\x6e\x1d\xb7\x02\x93\x00\x53\xf6\x67\xb6\x4c\xea\x96\x1f\x09\x3d",
        // "" / M(None) / S(0) / L(0)
        "\x66\xe0\x99\x7d\x49\x31\xd5\xbe\x78\x13\x7e\x11\x38\xb2\x2d\xbf\x76\xd5\xc2\x26\x48\xc1\x24\xcf\xc2\xc5\xd1\x51\xf6\x32\x98\xa3",
        // "." / M(Xor2) / S(132) / L(1)
        "\xba\x94\x6d\x10\xf2\x04\x54\x8c\x26\x18\x22\x08\x74\xd0\x66\xb5",
        // "/System/Library/Frameworks/Security.framework/Security" / M(Rot) / S(76) / L(54)
        "\x7b\x9f\xc5\xbf\xc0\xb1\xb9\x7b\x98\xb5\xae\xbe\xad\xbe\xc5\x7b\x92\xbe\xad\xb9\xb1\xc3\xbb\xbe\xb7\xbf\x7b\x9f\xb1\xaf\xc1\xbe\xb5\xc0\xc5\x7a\xb2\xbe\xad\xb9\xb1\xc3\xbb\xbe\xb7\x7b\x9f\xb1\xaf\xc1\xbe\xb5\xc0\xc5\x4c",
        // "en0" / M(Xor2) / S(84) / L(3)
        "\x21\x2a\x74\x44\x85\xc1\xe1\xd5\x58\xd6\x93\x84\x44\x67\xdc\x52",
        // "EVP_DigestUpdate" / M(Xor3) / S(205) / L(16)
        "\x9b\x88\x8e\x81\x9a\xb7\xb9\xbb\xad\xaa\x8b\xae\xba\xbf\xaa\xbb\xde",
        // "" / M(None) / S(0) / L(0)
        "\xd0\x3b\x9f\x13\xa8\x1d\x5e\xaf\xa7\xe1\x40\x6d\xb7\x91\xd1\x97\xf4\x86\x18\x44\x29\xd7\xa5\xc3\x10\x5d\xde\x36\x89\xb7\x60\xc9",
        // "CFBundleShortVersionString" / M(Xor4) / S(124) / L(26)
        "\xb7\xb2\xb6\x81\x9a\x90\x98\x91\xa7\x9c\x9b\x86\x80\xa2\x91\x86\x87\x9d\x9b\x9a\xa7\x80\x86\x9d\x9a\x93\xf4\x59\xe2\x80\xe2\x21\x8a\x82\x1d",
        // "" / M(None) / S(0) / L(0)
        "\x6b\x9c\xd1\xcb\xfa\x9b\xed\xde\xe1\x3c\x0d\x04\x98\x4d\x2a\xfe\xb5\x73\x73\xbf\xa8\xe0\x42\x06\xcf\x02\x41\xdc\x22\xc2\xc1\xc9",
        // "OpenSSL_add_all_digests" / M(Xor2) / S(71) / L(23)
        "\x28\x17\x02\x09\x34\x34\x2b\x38\x06\x03\x03\x38\x06\x0b\x0b\x38\x03\x0e\x00\x02\x14\x13\x14\x67\xd3\x8d\xcf\xc9\x59\x0f\x0a\xe9",
        // "CFArrayGetCount" / M(Xor3) / S(7) / L(15)
        "\x54\x51\x56\x65\x65\x76\x6e\x50\x72\x63\x54\x78\x62\x79\x63\x17",
        // "CFStringCompare" / M(Xor1) / S(146) / L(15)
        "\xd1\xd4\xc1\xe6\xe0\xfb\xfc\xf5\xd1\xfd\xff\xe2\xf3\xe0\xf7\x92",
        // "EVP_MD_CTX_init" / M(Rot) / S(172) / L(15)
        "\xf1\x02\xfc\x0b\xf9\xf0\x0b\xef\x00\x04\x0b\x15\x1a\x15\x20\xac",
        // "kSecMatchLimit" / M(Xor3) / S(163) / L(14)
        "\xd8\xe0\xd6\xd0\xfe\xd2\xc7\xd0\xdb\xff\xda\xde\xda\xc7\xb3\xb7",
        // "_MASReceipt" / M(Xor4) / S(171) / L(11)
        "\xef\xfd\xf1\xe3\xe2\xd5\xd3\xd5\xd9\xc0\xc4\xb0\x11\xb6\x98\x41",
        // "%02x:" / M(Xor4) / S(75) / L(5)
        "\x95\x80\x82\xc8\x8a\xb0\x23\xbe\x41\x79\x91\x8b\x50\xd1\xa1\xbb",
        // "CFBundleGetMainBundle" / M(Xor3) / S(56) / L(21)
        "\x0d\x08\x0c\x3b\x20\x2a\x22\x2b\x09\x2b\x3a\x03\x2f\x27\x20\x0c\x3b\x20\x2a\x22\x2b\x4e",
        // "BIO_write" / M(Xor3) / S(240) / L(9)
        "\x42\x49\x4f\x5f\x77\x72\x69\x74\x65\x00\x31\x11\x78\xcb\x3b\x30",
        // "CFDataCreate" / M(Xor1) / S(11) / L(12)
        "\x48\x4d\x4f\x6a\x7f\x6a\x48\x79\x6e\x6a\x7f\x6e\x0b\x2f\x75\xcb",
        // "EVP_DigestInit" / M(Xor3) / S(27) / L(14)
        "\x6e\x7d\x7b\x74\x6f\x42\x4c\x4e\x58\x5f\x62\x45\x42\x5f\x2b\x01",
        // "CFDataGetBytePtr" / M(Rot) / S(15) / L(16)
        "\x52\x55\x53\x70\x83\x70\x56\x74\x83\x51\x88\x83\x74\x5f\x83\x81\x0f",
        // "objc_getClass" / M(Xor1) / S(216) / L(13)
        "\xb7\xba\xb2\xbb\x87\xbf\xbd\xac\x9b\xb4\xb9\xab\xab\xd8\x1d\x08",
        // "611E5B662C593A08FF58D14AE22452D198DF6C60" / M(Xor2) / S(142) / L(40)
        "\x89\x8e\x8e\xfa\x8a\xfd\x89\x89\x8d\xfc\x8a\x86\x8c\xfe\x8f\x87\xf9\xf9\x8a\x87\xfb\x8e\x8b\xfe\xfa\x8d\x8d\x8b\x8a\x8d\xfb\x8e\x86\x87\xfb\xf9\x89\xfc\x89\x8f\xbf\xac\xe4\xc7\x6e\x87\xe6\xab\xe9",
        // "" / M(None) / S(0) / L(0)
        "\x00\x04\x5f\xb3\xf9\x84\x6d\xf5\xd1\xa4\xd1\x69\x2e\xc4\x81\x09\x8e\xdc\xf5\xac\x95\x9e\x08\xa2\x9c\xcd\x6b\x47\xa2\x69\x70\xeb",
        // "CFBundleVersion" / M(Rot) / S(90) / L(15)
        "\x9d\xa0\x9c\xcf\xc8\xbe\xc6\xbf\xb0\xbf\xcc\xcd\xc3\xc9\xc8\x5a",
        // "globfree" / M(Xor1) / S(163) / L(8)
        "\xc4\xcf\xcc\xc1\xc5\xd1\xc6\xc6\xa3\x97\xe0\x02\xf8\x3b\x10\x7b",
        // "" / M(None) / S(0) / L(0)
        "\x6a\x68\x32\x2e\x1e\x65\x7c\xab\xe5\x97\xca\xfc\x4a\xa3\xfe\x2d\x65\x74\x71\xdb\x1f\x58\x58\x14\x99\xf7\x80\xca\x66\x08\x79\x26",
        // "sha1" / M(Rot) / S(239) / L(4)
        "\x62\x57\x50\x20\xef\x3f\xf9\xfb\x6a\xfb\x0c\x7b\xa3\xae\x24\x2a",
        // "" / M(None) / S(0) / L(0)
        "\xbf\x3a\x9f\x32\x7a\xde\x0b\x61\x76\x81\x3b\xba\x7e\xb0\x49\x87\x34\x74\xc6\xd7\x02\x68\x72\x44\xa8\xf8\x8f\xeb\xea\x9e\xa0\x84",
        // "" / M(None) / S(0) / L(0)
        "\x20\x48\xc0\x90\x24\x4e\xe3\xde\x3f\xfd\x15\x48\x55\xf0\xa1\x54\x4e\x88\x3b\x7b\x1d\xda\x85\x3b\x19\x56\x72\xe9\xba\xbc\x7d\x98",
        // "" / M(None) / S(0) / L(0)
        "\x41\x3e\xa4\x36\x5a\x59\xe6\xdf\x26\x3d\x9c\x87\x4b\x97\xbe\x6d\xdf\x39\x78\x01\xe4\xe3\x06\x88\x07\x82\xec\xee\xf4\x8a\xf7\x60",
        // "" / M(None) / S(0) / L(0)
        "\xd7\xd7\xac\xce\xa5\x09\x96\xe1\xa9\x01\x02\x1b\xf6\xa2\x35\x90\x4e\xef\xfd\xcb\xc8\xf3\xa0\xe0\x67\xcc\x89\x8b\xb4\xdc\x48\x44",
        // "" / M(None) / S(0) / L(0)
        "\x94\x9a\x84\x2f\xa1\x1c\x37\x4e\xeb\x89\x03\x18\x1b\x12\xe8\x27\x1b\x1f\x64\x68\xd5\x1b\x17\x92\x43\x12\x4a\x75\x68\x79\xa9\x5a",
        // "" / M(None) / S(0) / L(0)
        "\x16\x79\x18\xde\x86\x22\xa8\x27\xd3\xde\x67\x5f\x1e\x85\xc8\xd4\x89\x77\x41\x3e\x74\xce\x9b\x39\x84\x0b\x17\xc3\x95\x15\xa5\xc3",
        // "receipt" / M(Xor1) / S(80) / L(7)
        "\x22\x35\x33\x35\x39\x20\x24\x50\xa3\x2d\x95\x21\xe7\xca\x6e\xcf",
        // "X509_STORE_add_cert" / M(Xor2) / S(177) / L(19)
        "\xfd\x90\x95\x9c\xfa\xf6\xf1\xea\xf7\xe0\xfa\xc4\xc1\xc1\xfa\xc6\xc0\xd7\xd1\xa5",
        // "Contents/_MASReceipt/receipt" / M(Xor1) / S(138) / L(28)
        "\xc9\xe5\xe4\xfe\xef\xe4\xfe\xf9\xa5\xd5\xc7\xcb\xd9\xd8\xef\xe9\xef\xe3\xfa\xfe\xa5\xf8\xef\xe9\xef\xe3\xfa\xfe\x8a\x16\xb8\xa4\x68\xf2\x1b\x7b\x96",
        // "" / M(None) / S(0) / L(0)
        "\xb5\x25\xb0\xbb\xf4\x63\x5e\x46\x95\xed\x26\x96\xa7\x49\xf6\x09\x8d\x3e\x5e\xa5\xe4\x93\xb5\x52\xc3\xf2\x2d\xcb\x2d\x45\xc9\x8d",
        // "/System/Library/Frameworks/CoreFoundation.framework/CoreFoundation" / M(Rot) / S(213) / L(66)
        "\x04\x28\x4e\x48\x49\x3a\x42\x04\x21\x3e\x37\x47\x36\x47\x4e\x04\x1b\x47\x36\x42\x3a\x4c\x44\x47\x40\x48\x04\x18\x44\x47\x3a\x1b\x44\x4a\x43\x39\x36\x49\x3e\x44\x43\x03\x3b\x47\x36\x42\x3a\x4c\x44\x47\x40\x04\x18\x44\x47\x3a\x1b\x44\x4a\x43\x39\x36\x49\x3e\x44\x43\xd5",
        // "it.iltofa.Turms" / M(Xor2) / S(110) / L(15)
        "\x17\x0a\x50\x17\x12\x0a\x11\x18\x1f\x50\x2a\x0b\x0c\x13\x0d\x7e",
        // "CFArrayAppendValue" / M(Xor1) / S(123) / L(18)
        "\x38\x3d\x3a\x09\x09\x1a\x02\x3a\x0b\x0b\x1e\x15\x1f\x2d\x1a\x17\x0e\x1e\x7b",
        // "%02X:" / M(Xor2) / S(254) / L(5)
        "\xcb\xde\xdc\xb6\xd4\xee\x99\x74\xb9\x1b\xec\x1a\x0e\x89\x49\x23",
        // "" / M(None) / S(0) / L(0)
        "\x49\x7a\x39\x87\xdd\x7f\xde\x80\xea\x03\xdf\xce\xea\x07\x84\x32\x48\x24\x95\xca\xe7\x5f\xfa\x28\xdc\x36\x82\x6d\x85\xde\x68\x14",
        // "CFDateFormatterSetFormat" / M(Rot) / S(255) / L(24)
        "\x42\x45\x43\x60\x73\x64\x45\x6e\x71\x6c\x60\x73\x73\x64\x71\x52\x64\x73\x45\x6e\x71\x6c\x60\x73\xff\xbf\x7a\xa4\x86\x34\xd2\x77\x28",
        // "" / M(None) / S(0) / L(0)
        "\x03\x23\xb6\xd8\x5e\xef\x84\x5a\xf6\x3a\x0f\x19\xac\x55\x57\x9b\x16\xf6\x48\xc0\xc0\xea\x24\x34\x77\x15\xd0\x05\x20\xee\xfb\x8f",
        // "kCFBundleIdentifierKey" / M(Xor1) / S(221) / L(22)
        "\xb6\x9e\x9b\x9f\xa8\xb3\xb9\xb1\xb8\x94\xb9\xb8\xb3\xa9\xb4\xbb\xb4\xb8\xaf\x96\xb8\xa4\xdd",
        // "" / M(None) / S(0) / L(0)
        "\x0c\xa5\xbf\xd0\x5b\x2f\xdb\xac\x0e\x9f\x81\x27\x9f\x10\x03\xa8\xbf\x6c\x9d\x7f\xbd\x79\x19\x74\x16\x11\x18\x8d\x94\x55\x7f\x49",
        // "" / M(None) / S(0) / L(0)
        "\x2b\x70\x97\x85\xb5\x46\x97\x6e\x36\xdb\x22\x40\x2c\xab\x1a\x02\xff\xbf\xec\x93\x5a\xa5\x0f\xc2\x79\x4f\x38\xd6\x79\x94\x14\xa0",
        // "yyyy'-'MM'-'dd'T'HH':'mm':'ss'Z'" / M(Xor2) / S(208) / L(32)
        "\x88\x88\x88\x88\xd6\xdc\xd6\xbc\xbc\xd6\xdc\xd6\x95\x95\xd6\xa5\xd6\xb9\xb9\xd6\xcb\xd6\x9c\x9c\xd6\xcb\xd6\x82\x82\xd6\xab\xd6\xf1",
        // "CFArrayAppendValue" / M(Xor4) / S(172) / L(18)
        "\x87\x82\x85\xb6\xb6\xa5\xbd\x85\xb4\xb4\xa1\xaa\xa0\x92\xa5\xa8\xb1\xa1\xc4",
        // "EVP_MD_CTX_init" / M(Xor4) / S(112) / L(15)
        "\x45\x56\x50\x5f\x4d\x44\x5f\x43\x54\x58\x5f\x69\x6e\x69\x74\x00",
        // "" / M(None) / S(0) / L(0)
        "\x68\xa6\x04\x5e\xe4\x57\x8d\xbc\x6d\xde\x92\x2a\x1e\x73\x64\x53\x97\xc9\x55\xbe\xdc\xea\x34\x8b\x07\xf1\x80\x56\x62\x3f\xe0\x7a",
        // "sk_num" / M(Xor1) / S(192) / L(6)
        "\xb3\xab\x9f\xae\xb5\xad\xc0\xc9\x0d\x3b\x8e\xf7\xd2\x5e\x5b\x3d",
        // "start" / M(Xor3) / S(252) / L(5)
        "\x7f\x78\x6d\x7e\x78\x0c\x65\x3b\x88\xc7\x01\x61\x06\x90\x7a\xba",
        // "BIO_s_mem" / M(Xor4) / S(217) / L(9)
        "\xd2\xd9\xdf\xcf\xe3\xcf\xfd\xf5\xfd\x90\xb3\x13\x56\x0c\xac\xf7",
        // "objc_msgSend" / M(Xor1) / S(230) / L(12)
        "\x89\x84\x8c\x85\xb9\x8b\x95\x81\xb5\x83\x88\x82\xe6\xc5\x6d\x18",
        // "CFStringCreateWithCString" / M(Xor1) / S(69) / L(25)
        "\x06\x03\x16\x31\x37\x2c\x2b\x22\x06\x37\x20\x24\x31\x20\x12\x2c\x31\x2d\x06\x16\x31\x37\x2c\x2b\x22\x45\x29\xe1\x24\x18\x45\xf3\x2f\x3a",
        // "CFBundleVersion" / M(Rot) / S(185) / L(15)
        "\xfc\xff\xfb\x2e\x27\x1d\x25\x1e\x0f\x1e\x2b\x2c\x22\x28\x27\xb9",
        // "CFBundleIdentifier" / M(Xor1) / S(111) / L(18)
        "\x2c\x29\x2d\x1a\x01\x0b\x03\x0a\x26\x0b\x0a\x01\x1b\x06\x09\x06\x0a\x1d\x6f",
        // "_MASReceipt/receipt" / M(Rot) / S(105) / L(19)
        "\xc8\xb6\xaa\xbc\xbb\xce\xcc\xce\xd2\xd9\xdd\x98\xdb\xce\xcc\xce\xd2\xd9\xdd\x69",
        // "" / M(None) / S(0) / L(0)
        "\x6e\x44\xae\x01\x8c\xa7\x9e\xab\x27\x23\x3d\x9c\xc9\x24\x8e\xee\x47\x46\x55\x22\x32\xd4\xbf\xee\x38\xbf\xb0\xe2\xcb\xe5\x1e\xc2",
        // "OBJ_txt2obj" / M(Xor4) / S(99) / L(11)
        "\x7f\x72\x7a\x6f\x44\x48\x44\x02\x5f\x52\x5a\x30\x93\x55\xc1\xab",
        // "" / M(None) / S(0) / L(0)
        "\xb6\x6f\xec\x81\xa9\x40\xc5\xa9\x81\x0e\x68\xb9\xb7\x5f\xcc\x19\xb9\xc1\xa6\x7f\x74\xfa\x5b\xab\x8e\x3e\x14\x0b\xfd\x5e\xe5\x7e",
        // "" / M(None) / S(0) / L(0)
        "\xa1\x2f\x34\x10\x6c\x2e\x22\x2d\x8d\x94\x7c\xb3\x5f\xc4\x92\x8c\x31\x71\xce\xbf\xe8\xc0\xdc\x37\xcd\xbd\x4d\x99\xd3\x97\x86\x54",
        // "SHA1_Final" / M(Xor3) / S(101) / L(10)
        "\x26\x3d\x34\x44\x2a\x33\x1c\x1b\x14\x19\x75\x23\x7e\xd6\x7d\x71",
        // "CFDictionaryGetValue" / M(Xor3) / S(171) / L(20)
        "\x83\x86\x84\xa9\xa3\xb4\xa9\xaf\xae\xa1\xb2\xb9\x87\xa5\xb4\x96\xa1\xac\xb5\xa5\xc0",
        // "CFDataCreateMutable" / M(Rot) / S(10) / L(19)
        "\x4d\x50\x4e\x6b\x7e\x6b\x4d\x7c\x6f\x6b\x7e\x6f\x57\x7f\x7e\x6b\x6c\x76\x6f\x0a",
        // "." / M(Rot) / S(12) / L(1)
        "\x3a\x0c\xfb\xd6\x2b\x58\xfe\x30\x65\x14\x96\x8a\x86\xcb\xd0\x52",
        // "SHA1" / M(Xor2) / S(29) / L(4)
        "\x5e\x45\x4c\x3c\x0d\xa7\x75\x41\xf8\x99\x8f\xb9\x08\xd5\x74\xdc",
        // "BIO_free" / M(Xor2) / S(177) / L(8)
        "\xe3\xe8\xee\xfe\xc7\xd3\xc4\xc4\xa1\x4c\x72\xde\x55\x0f\x99\x7f",
        // "" / M(None) / S(0) / L(0)
        "\x80\xd4\x3c\x04\x00\x07\x87\x2d\x90\x34\xb1\xb5\x12\x9b\xce\x56\x71\x57\xbd\x64\x8a\x4e\xf7\x4d\xae\x5f\xd3\x68\x2e\x1a\xa5\x60",
        // "objc_getClass" / M(Xor2) / S(245) / L(13)
        "\x8a\x87\x8f\x86\xba\x82\x80\x91\xa6\x89\x84\x96\x96\xe5\xc7\xb6",
        // "/System/Library/Frameworks/IOKit.framework/IOKit" / M(Xor4) / S(61) / L(48)
        "\x82\xfe\xd4\xde\xd9\xc8\xc0\x82\xe1\xc4\xcf\xdf\xcc\xdf\xd4\x82\xeb\xdf\xcc\xc0\xc8\xda\xc2\xdf\xc6\xde\x82\xe4\xe2\xe6\xc4\xd9\x83\xcb\xdf\xcc\xc0\xc8\xda\xc2\xdf\xc6\x82\xe4\xe2\xe6\xc4\xd9\xad",
        // "SecKeychainOpen" / M(Xor3) / S(221) / L(15)
        "\xbe\x88\x8e\xa6\x88\x94\x8e\x85\x8c\x84\x83\xa2\x9d\x88\x83\xed",
        // "SKReceiptRefreshRequest" / M(Xor2) / S(248) / L(23)
        "\x8b\x93\x8a\xbd\xbb\xbd\xb1\xa8\xac\x8a\xbd\xbe\xaa\xbd\xab\xb0\x8a\xbd\xa9\xad\xbd\xab\xac\xd8\xa5\x8a\x77\xe2\x5c\x11\x20\x71",
        // "611e5b662c593a08ff58d14ae22452d198df6c60" / M(Xor4) / S(96) / L(40)
        "\x56\x51\x51\x05\x55\x02\x56\x56\x52\x03\x55\x59\x53\x01\x50\x58\x06\x06\x55\x58\x04\x51\x54\x01\x05\x52\x52\x54\x55\x52\x04\x51\x59\x58\x04\x06\x56\x03\x56\x50\x60\xd6\xf5\x24\x8a\xba\x8a\xe2\xe5",
        // "CFBundleCopyBundleURL" / M(Xor4) / S(234) / L(21)
        "\x5f\x5a\x5e\x69\x72\x78\x70\x79\x5f\x73\x6c\x65\x5e\x69\x72\x78\x70\x79\x49\x4e\x50\x1c",
        // "" / M(None) / S(0) / L(0)
        "\x04\x48\x02\xaa\xb1\xf6\xbd\xda\xff\x77\x02\x83\x35\x8e\x3f\x7f\x0e\xee\xc5\x6b\x69\x6c\xae\x20\xd0\xf4\x01\x55\x55\x91\x6f\xb5",
        // "PKCS7_verify" / M(Xor1) / S(89) / L(12)
        "\x09\x12\x1a\x0a\x6e\x06\x2f\x3c\x2b\x30\x3f\x20\x59\x78\x75\x82",
        // "EVP_DigestUpdate" / M(Xor3) / S(19) / L(16)
        "\x61\x72\x74\x7b\x60\x4d\x43\x41\x57\x50\x71\x54\x40\x45\x50\x41\x24",
        // "IOMACAddress" / M(Xor2) / S(201) / L(12)
        "\x90\x96\x94\x98\x9a\x98\xbd\xbd\xab\xbc\xaa\xaa\xd9\xdb\xdc\xf1",
        // "CFBundleUnloadExecutable" / M(Rot) / S(167) / L(24)
        "\xea\xed\xe9\x1c\x15\x0b\x13\x0c\xfc\x15\x13\x16\x08\x0b\xec\x1f\x0c\x0a\x1c\x1b\x08\x09\x13\x0c\xa7\xb2\xe3\x19\x18\xb0\xf6\x3a\x55",
        // "" / M(None) / S(0) / L(0)
        "\x34\x39\xb2\x8f\x66\x40\x16\xf2\x48\xcf\x9f\x1f\xe5\x8b\x9f\x8d\x8e\xdf\x66\xd8\xc5\x14\xf1\x4e\x13\xc8\xf8\x22\x90\x7d\xc3\x0d",
        // "CC_SHA1" / M(Xor2) / S(56) / L(7)
        "\x6b\x6b\x77\x7b\x60\x69\x19\x28\x1f\xad\xf8\x11\xfc\x2a\xbe\xf2",
        // "CFBundleGetIdentifier" / M(Xor1) / S(6) / L(21)
        "\x45\x40\x44\x73\x68\x62\x6a\x63\x41\x63\x72\x4f\x62\x63\x68\x72\x6f\x60\x6f\x63\x74\x06",
        // "glob" / M(Xor4) / S(105) / L(4)
        "\xf7\xfc\xff\xf2\x90\x77\xd4\x4b\xf4\x9d\x76\xd1\x69\x8f\x55\x8d",
        // "BIO_write" / M(Xor4) / S(21) / L(9)
        "\x12\x19\x1f\x0f\x27\x22\x39\x24\x35\x50\x57\x04\x7f\x3e\x8f\x37",
        // "1.2.840.113635.100.6.11.1" / M(Rot) / S(245) / L(25)
        "\x26\x23\x27\x23\x2d\x29\x25\x23\x26\x26\x28\x2b\x28\x2a\x23\x26\x25\x25\x23\x2b\x23\x26\x26\x23\x26\xf5\x0d\xbd\xbf\xc5\x84\x91\xec\x8c",
        // "" / M(None) / S(0) / L(0)
        "\x2e\x33\xe4\x15\xa9\xb4\xdf\x81\x5f\xe6\x04\x90\xa6\x99\x2f\x82\xe0\x39\x5d\x32\x00\xf1\xf2\x27\x0b\x7f\xaa\x50\x97\x62\x13\xc7",
        // "" / M(None) / S(0) / L(0)
        "\x6f\xb8\x1b\x54\xe4\x06\x5e\x0c\xfe\x2d\x7b\x92\x13\xff\x5c\xec\xbd\x78\x78\x3f\xe6\x60\xf9\x67\xc3\x2c\xfa\x54\xcf\xd9\x22\x52",
        // "strncmp" / M(Xor1) / S(241) / L(7)
        "\x82\x85\x83\x9f\x92\x9c\x81\xf1\x97\x5e\x16\x51\xde\x1a\xca\x90",
        // "CFDateFormatterCreate" / M(Xor4) / S(104) / L(21)
        "\xb3\xb6\xb4\x91\x84\x95\xb6\x9f\x82\x9d\x91\x84\x84\x95\x82\xb3\x82\x95\x91\x84\x95\xf0",
        // "CFArrayGetCount" / M(Xor1) / S(1) / L(15)
        "\x42\x47\x40\x73\x73\x60\x78\x46\x64\x75\x42\x6e\x74\x6f\x75\x01",
        // "" / M(None) / S(0) / L(0)
        "\xe8\xd7\x14\x14\x85\x30\x25\xf4\x7b\xe4\xba\xc1\x0b\x91\x2d\xa3\xbc\x7e\x55\x42\x93\x3a\xa4\x1d\xd0\x43\x40\xd0\x80\x2d\xe6\x09",
        // "CFStringGetFileSystemRepresentation" / M(Rot) / S(98) / L(35)
        "\xa5\xa8\xb5\xd6\xd4\xcb\xd0\xc9\xa9\xc7\xd6\xa8\xcb\xce\xc7\xb5\xdb\xd5\xd6\xc7\xcf\xb4\xc7\xd2\xd4\xc7\xd5\xc7\xd0\xd6\xc3\xd6\xcb\xd1\xd0\x62",
        // "CFReadStreamOpen" / M(Xor4) / S(16) / L(16)
        "\x53\x56\x42\x75\x71\x74\x43\x64\x62\x75\x71\x7d\x5f\x60\x75\x7e\x10",
        // "" / M(None) / S(0) / L(0)
        "\xb1\x97\xd7\x52\xf3\xca\xbe\x19\xbc\xf9\xe9\xa4\xcc\xbf\xc3\xa6\x5b\xb7\x14\xfe\x58\xf5\x6b\xde\x26\x7d\x3c\x33\x3c\x5b\x36\x62",
        // "CFArrayCreateMutable" / M(Xor1) / S(252) / L(20)
        "\xbf\xba\xbd\x8e\x8e\x9d\x85\xbf\x8e\x99\x9d\x88\x99\xb1\x89\x88\x9d\x9e\x90\x99\xfc",
        // "en0" / M(Rot) / S(183) / L(3)
        "\x1c\x25\xe7\xb7\x3d\x02\xed\x7b\x87\x14\x47\xd7\xc3\x13\x13\x2a",
        // "/usr/lib/libobjc.dylib" / M(Xor2) / S(228) / L(22)
        "\xdc\x86\x80\x81\xdc\x9f\x9a\x91\xdc\x9f\x9a\x91\x9c\x91\x99\x90\xdd\x97\x8a\x9f\x9a\x91\xf3",
        // "kSecReturnRef" / M(Xor3) / S(60) / L(13)
        "\x27\x1f\x29\x2f\x1e\x29\x38\x39\x3e\x22\x1e\x29\x2a\x4c\x75\x99",
        // "SecCertificateCopyData" / M(Xor4) / S(151) / L(22)
        "\xc2\xf4\xf2\xd2\xf4\xe3\xe5\xf8\xf7\xf8\xf2\xf0\xe5\xf4\xd2\xfe\xe1\xe8\xd5\xf0\xe5\xf0\x91",
        // "" / M(None) / S(0) / L(0)
        "\x28\xc0\xd7\x67\xc5\x6e\xe0\x15\x22\x9e\x2d\x95\xe1\xae\xb1\xf1\x1d\xc2\x93\x4c\xf1\x8b\xd3\x4f\x6f\x17\x7a\x8c\x05\x50\x39\xa6",
        // "" / M(None) / S(0) / L(0)
        "\xd7\x4a\x76\x37\xde\x14\xf5\x6a\x99\x52\x6a\x0b\x04\xe0\x0b\xd6\x0e\x25\xb8\xb0\x56\xe5\x29\x81\xe9\x8c\xf0\x8d\x8f\xcc\x20\xb7",
        // "611e5b662c593a08ff58d14ae22452d198df6c60" / M(Xor2) / S(57) / L(40)
        "\x3e\x39\x39\x6d\x3d\x6a\x3e\x3e\x3a\x6b\x3d\x31\x3b\x69\x38\x30\x6e\x6e\x3d\x30\x6c\x39\x3c\x69\x6d\x3a\x3a\x3c\x3d\x3a\x6c\x39\x31\x30\x6c\x6e\x3e\x6b\x3e\x38\x08\x36\xbf\x68\x94\x8c\xea\x60\xbb",
        // "kCFTypeArrayCallBacks" / M(Xor2) / S(237) / L(21)
        "\x90\xb8\xbd\xaf\x82\x8b\x9e\xba\x89\x89\x9a\x82\xb8\x9a\x97\x97\xb9\x9a\x98\x90\x88\xfb",
        // "sha1" / M(Xor1) / S(248) / L(4)
        "\x8b\x90\x99\xc9\xf8\xed\x2a\xe0\xc3\xb0\xcb\xb7\xe3\xd4\x69\x61",
        // "" / M(None) / S(0) / L(0)
        "\x05\xdb\x2a\xd5\xaa\xd0\xe5\x46\xb4\x6e\x94\x40\x34\xee\x25\xed\x2d\xee\x9b\x77\xc1\x6d\x86\x1f\x45\x9a\x0c\x09\x69\x24\x85\x52",
        // "CFDateFormatterCreateDateFromString" / M(Xor4) / S(70) / L(35)
        "\x9b\x9e\x9c\xb9\xac\xbd\x9e\xb7\xaa\xb5\xb9\xac\xac\xbd\xaa\x9b\xaa\xbd\xb9\xac\xbd\x9c\xb9\xac\xbd\x9e\xaa\xb7\xb5\x8b\xac\xaa\xb1\xb6\xbf\xd8",
        // "kSecMatchSearchList" / M(Xor3) / S(44) / L(19)
        "\x2b\x13\x25\x23\x0d\x21\x34\x23\x28\x13\x25\x21\x32\x23\x28\x0c\x29\x33\x34\x40",
        // "IOBSDNameMatching" / M(Xor3) / S(16) / L(17)
        "\x6b\x6d\x60\x71\x66\x6c\x43\x4f\x47\x6f\x43\x56\x41\x4a\x4b\x4c\x45\x22",
        // "" / M(None) / S(0) / L(0)
        "\x9d\xfb\x77\xc3\xac\x1d\xb0\x20\xf7\xc9\x14\xdf\x24\xbc\xfb\xc9\x47\x56\x81\x86\x62\xfb\x32\xb2\x3d\x2e\x5d\xe7\x24\xc8\x95\x93",
        // "IORegistryEntryCreateCFProperty" / M(Xor4) / S(250) / L(31)
        "\x09\x0f\x12\x25\x27\x29\x33\x34\x32\x39\x05\x2e\x34\x32\x39\x03\x32\x25\x21\x34\x25\x03\x06\x10\x32\x2f\x30\x25\x32\x34\x39\x40",
        // "" / M(None) / S(0) / L(0)
        "\x77\xca\x2c\x55\xc9\x69\xf2\x64\xa7\x45\xf5\x3a\x0a\x8a\xec\x92\x5c\xdd\xab\x82\x00\xbc\xbc\x0a\x84\xac\x97\x56\x53\x47\x2e\x93",
        // "setjmp" / M(Xor1) / S(76) / L(6)
        "\x3f\x29\x38\x26\x21\x3c\x4c\xb7\xeb\x4d\x42\xd4\xd3\xe7\x05\x76",
        // "X509_STORE_add_cert" / M(Xor1) / S(250) / L(19)
        "\xa2\xcf\xca\xc3\xa5\xa9\xae\xb5\xa8\xbf\xa5\x9b\x9e\x9e\xa5\x99\x9f\x88\x8e\xfa",
        // "CFBundleIdentifier" / M(Xor4) / S(223) / L(18)
        "\xce\xcb\xcf\xf8\xe3\xe9\xe1\xe8\xc4\xe9\xe8\xe3\xf9\xe4\xeb\xe4\xe8\xff\x8d",
        // "" / M(None) / S(0) / L(0)
        "\x22\xcf\xe9\xe9\xb1\x70\xdc\xb4\xf9\xa3\xdb\xdf\xfb\x75\xf5\x33\xa9\xb0\x50\xcd\x74\x4e\x65\xe3\xa7\x5c\x6b\xdf\xb8\x81\x87\xf3",
        // "CFURLCreateFromFileSystemRepresentation" / M(Xor2) / S(36) / L(39)
        "\x57\x52\x41\x46\x58\x57\x66\x71\x75\x60\x71\x52\x66\x7b\x79\x52\x7d\x78\x71\x47\x6d\x67\x60\x71\x79\x46\x71\x64\x66\x71\x67\x71\x7a\x60\x75\x60\x7d\x7b\x7a\x14\x99\x07\xb0\x22\x0f\xe7\x11\x2b",
        // "dlopen" / M(Rot) / S(47) / L(6)
        "\x93\x9b\x9e\x9f\x94\x9d\x2f\x21\xab\xbd\x82\x1e\xfa\x01\x0b\x8b",
        // "glob" / M(Xor2) / S(51) / L(4)
        "\x44\x4f\x4c\x41\x23\x06\x4c\xee\x81\x9c\x38\xd6\xd3\xff\xee\x30",
        // "CFArrayGetValueAtIndex" / M(Xor3) / S(227) / L(22)
        "\xb9\xbc\xbb\x88\x88\x9b\x83\xbd\x9f\x8e\xac\x9b\x96\x8f\x9f\xbb\x8e\xb3\x94\x9e\x9f\x82\xfa",
        // "d2i_X509_bio" / M(Xor2) / S(100) / L(12)
        "\x10\x46\x1d\x2b\x2c\x41\x44\x4d\x2b\x16\x1d\x1b\x74\xa8\x71\x75",
        // "ASN1_OBJECT_free" / M(Xor2) / S(119) / L(16)
        "\x27\x35\x28\x57\x39\x29\x24\x2c\x23\x25\x32\x39\x00\x14\x03\x03\x66",
        // "" / M(None) / S(0) / L(0)
        "\x4b\x52\x5f\x2b\x8f\x77\x9c\x29\x34\xfa\x32\x33\x48\x6e\xa4\xa1\x04\x3a\xeb\x73\x8e\xac\x0c\x2f\x83\x96\x8a\x86\xe1\x65\x17\xd0",
        // "SecKeychainSearchCopyNext" / M(Xor2) / S(248) / L(25)
        "\x89\xbf\xb9\x91\xbf\xa3\xb9\xb2\xbb\xb3\xb4\x89\xbf\xbb\xa8\xb9\xb2\x99\xb5\xaa\xa3\x94\xbf\xa2\xae\xda\xf4\xc6\x72\xc4\x83\x16\x70\x48",
        // "d2i_PKCS7_bio" / M(Xor1) / S(13) / L(13)
        "\x69\x3f\x64\x52\x5d\x46\x4e\x5e\x3a\x52\x6f\x64\x62\x0d\xb9\xb1",
        // "" / M(None) / S(0) / L(0)
        "\x6f\xe0\xac\xc7\x2d\x87\x8f\x08\xab\x15\xe1\x00\xc0\xb9\xd7\x78\xd9\xd4\x55\x32\xa0\x21\xdb\x7b\xe3\x7e\x7e\xc7\x49\x14\x99\x2c",
        // "CFBundleGetValueForInfoDictionaryKey" / M(Xor2) / S(186) / L(36)
        "\xdc\xd9\xdd\xea\xf1\xfb\xf3\xfa\xd8\xfa\xeb\xc9\xfe\xf3\xea\xfa\xd9\xf0\xed\xd6\xf1\xf9\xf0\xdb\xf6\xfc\xeb\xf6\xf0\xf1\xfe\xed\xe6\xd4\xfa\xe6\x9f",
        // "" / M(None) / S(0) / L(0)
        "\x4e\x1c\x51\x47\xad\xeb\xca\x8c\x60\x16\x1e\x5c\x0c\xea\x53\x08\xb3\x0c\x08\x1a\x1c\x02\x36\x43\x92\x90\x76\xe6\xda\xa3\x3d\x1f",
        // "" / M(None) / S(0) / L(0)
        "\xb5\xcb\xe1\x63\xac\xec\x24\xd1\x21\x49\x29\x85\x04\xd8\x44\xa0\xeb\xed\x51\x62\x3a\xf6\xee\x2e\x67\x85\x65\x49\x3e\xde\x67\x8f",
        // "kSecClassCertificate" / M(Xor4) / S(180) / L(20)
        "\xaf\x97\xa1\xa7\x87\xa8\xa5\xb7\xb7\x87\xa1\xb6\xb0\xad\xa2\xad\xa7\xa5\xb0\xa1\xc4",
        // "CFDataCreate" / M(Xor3) / S(50) / L(12)
        "\x01\x04\x06\x23\x36\x23\x01\x30\x27\x23\x36\x27\x42\x99\x02\xdb",
        // "" / M(None) / S(0) / L(0)
        "\xf5\xd5\x32\x86\xe5\x7b\xc3\x13\x20\x1a\xc9\xb9\xc8\x40\x54\x63\x28\xf0\x80\x90\x65\x5f\xb7\x25\xd6\x0c\x31\x26\x06\xa9\x0d\x0d",
        // "PKCS7_free" / M(Xor2) / S(247) / L(10)
        "\xb7\xac\xa4\xb4\xd0\xb8\x81\x95\x82\x82\xe7\xb2\x3f\x17\xfa\x7d",
        // "CFReadStreamRead" / M(Xor3) / S(94) / L(16)
        "\x2c\x29\x3d\x0a\x0e\x0b\x3c\x1b\x1d\x0a\x0e\x02\x3d\x0a\x0e\x0b\x6f",
        // "Apple Root CA" / M(Xor3) / S(53) / L(13)
        "\x04\x35\x35\x29\x20\x65\x17\x2a\x2a\x31\x65\x06\x04\x45\x30\x59",
        // "SecCertificateCopyData" / M(Xor4) / S(123) / L(22)
        "\x5e\x68\x6e\x4e\x68\x7f\x79\x64\x6b\x64\x6e\x6c\x79\x68\x4e\x62\x7d\x74\x49\x6c\x79\x6c\x0d",
        // "SHA1_Update" / M(Xor2) / S(104) / L(11)
        "\x2b\x30\x39\x49\x27\x2d\x08\x1c\x19\x0c\x1d\x78\xe2\x8c\x06\x88",
        // "CFEqual" / M(Rot) / S(153) / L(7)
        "\xdc\xdf\xde\x0a\x0e\xfa\x05\x99\xc2\xaa\x08\x90\x95\xbe\x75\x8d",
        // "" / M(None) / S(0) / L(0)
        "\x28\x0f\xbc\x4b\x10\x04\x4b\x88\xc5\x60\xe2\xaa\x91\x8e\x77\x42\xaf\x59\x18\x18\xd7\xbe\x81\xe7\xac\x23\xc9\x9a\x6b\xbf\xc8\x98",
        // "EVP_MD_CTX_init" / M(Xor1) / S(46) / L(15)
        "\x6b\x78\x7e\x71\x63\x6a\x71\x6d\x7a\x76\x71\x47\x40\x47\x5a\x2e",
        // "" / M(None) / S(0) / L(0)
        "\x55\x68\xd7\x1e\xaf\xc6\xec\xe6\x40\x26\x77\x4c\x87\xf8\xa3\xee\x5f\x0e\x5d\x6b\x3d\x4e\x45\x90\xba\x54\x73\xf1\x54\x85\x9b\xdf",
        // "kSecReturnRef" / M(Xor4) / S(100) / L(13)
        "\x2b\x13\x25\x23\x12\x25\x34\x35\x32\x2e\x12\x25\x26\x40\xfc\xca",
        // "SHA1_Init" / M(Xor4) / S(120) / L(9)
        "\xd3\xc8\xc1\xb1\xdf\xc9\xee\xe9\xf4\x80\x46\x62\xac\x7e\xad\x1f",
        // "IOBSDNameMatching" / M(Rot) / S(20) / L(17)
        "\x5d\x63\x56\x67\x58\x62\x75\x81\x79\x61\x75\x88\x77\x7c\x7d\x82\x7b\x14",
        // "" / M(None) / S(0) / L(0)
        "\x1f\xbb\x32\x44\x07\x7e\x9e\xc1\xfa\x0a\xba\x6b\x81\x33\xa1\x1c\x68\x74\x26\x79\x6a\x42\xfd\x75\x48\x1b\xeb\x6b\xbe\x6e\x47\x7f",
        // "2.0.2" / M(Rot) / S(244) / L(5)
        "\x26\x22\x24\x22\x26\xf4\xa9\xc1\x12\xe1\x77\xdb\xfb\x7d\xb4\x1f",
        // "X509_get_ext_by_OBJ" / M(Xor1) / S(184) / L(19)
        "\xe0\x8d\x88\x81\xe7\xdf\xdd\xcc\xe7\xdd\xc0\xcc\xe7\xda\xc1\xe7\xf7\xfa\xf2\xb8",
        // "CC_SHA1_Final" / M(Xor3) / S(205) / L(13)
        "\x9e\x9e\x82\x8e\x95\x9c\xec\x82\x9b\xb4\xb3\xbc\xb1\xdd\x87\xdf",
        // "" / M(None) / S(0) / L(0)
        "\x2c\x6d\x91\x1b\x77\x70\x4c\x42\xa5\xe8\x45\xc4\xe4\x02\x93\x44\x0c\x57\x06\xe9\xc6\x2c\x97\xa0\x8e\xc5\xb2\xeb\x06\x2d\x74\xb7",
        // "it.iltofa.Turms" / M(Xor4) / S(245) / L(15)
        "\x39\x24\x7e\x39\x3c\x24\x3f\x36\x31\x7e\x04\x25\x22\x3d\x23\x50",
        // "SHA1" / M(Xor2) / S(94) / L(4)
        "\x1d\x06\x0f\x7f\x4e\x63\x21\x8b\x94\x54\x01\x32\xa8\x04\xa6\xd6",
        // "CFURLCreateFromFileSystemRepresentation" / M(Xor3) / S(69) / L(39)
        "\x36\x33\x20\x27\x39\x36\x07\x10\x14\x01\x10\x33\x07\x1a\x18\x33\x1c\x19\x10\x26\x0c\x06\x01\x10\x18\x27\x10\x05\x07\x10\x06\x10\x1b\x01\x14\x01\x1c\x1a\x1b\x75\x8b\x30\xe9\x19\xf9\x75\xf2\x9e",
        // "CFArrayCreateMutable" / M(Rot) / S(248) / L(20)
        "\x3b\x3e\x39\x6a\x6a\x59\x71\x3b\x6a\x5d\x59\x6c\x5d\x45\x6d\x6c\x59\x5a\x64\x5d\xf8",
        // "CFArrayAppendValue" / M(Rot) / S(154) / L(18)
        "\xdd\xe0\xdb\x0c\x0c\xfb\x13\xdb\x0a\x0a\xff\x08\xfe\xf0\xfb\x06\x0f\xff\x9a",
        // "" / M(None) / S(0) / L(0)
        "\x64\xd2\x26\xbd\x4f\x9f\x88\x23\x68\xce\x73\x80\x7c\xd0\xde\xa8\x8d\x26\xb8\xd3\x68\x19\x0b\x75\x08\xbf\xf4\xba\x21\xad\xb9\x81",
        // "%02x" / M(Xor3) / S(158) / L(4)
        "\x8b\x9e\x9c\xd6\xae\x21\xd5\x76\xe6\xf0\xfe\x57\x49\xc8\xfb\x91",
        // "kCFTypeDictionaryValueCallBacks" / M(Xor4) / S(105) / L(31)
        "\x4b\x63\x66\x74\x59\x50\x45\x64\x49\x43\x54\x49\x4f\x4e\x41\x52\x59\x76\x41\x4c\x55\x45\x63\x41\x4c\x4c\x62\x41\x43\x4b\x53\x20",
        // "" / M(None) / S(0) / L(0)
        "\x7f\x76\x50\x63\x86\xc3\x65\x64\xca\xe0\x30\xf3\xc4\x7d\x95\x19\xbc\xf3\xf6\x4b\x0c\xc7\xfd\xe2\x52\xb0\x6c\xec\x18\xc5\xbe\x04",
        // "ASN1_get_object" / M(Rot) / S(54) / L(15)
        "\x77\x89\x84\x67\x95\x9d\x9b\xaa\x95\xa5\x98\xa0\x9b\x99\xaa\x36",
        // "OpenSSL_add_all_digests" / M(Xor3) / S(173) / L(23)
        "\x82\xbd\xa8\xa3\x9e\x9e\x81\x92\xac\xa9\xa9\x92\xac\xa1\xa1\x92\xa9\xa4\xaa\xa8\xbe\xb9\xbe\xcd\xb1\x31\x2f\x9e\x84\x1b\x4d\x6b",
        // "" / M(None) / S(0) / L(0)
        "\x03\x92\x50\x89\x0c\x61\x12\x73\x69\xc5\xdc\x1c\x0d\x44\x77\x26\x6c\x44\x4e\x35\x94\xf4\xc3\x7b\x72\xbe\x13\xfd\xb6\x04\x51\x57",
        // "kSecMatchLimitAll" / M(Xor4) / S(57) / L(17)
        "\x69\x51\x67\x61\x4f\x63\x76\x61\x6a\x4e\x6b\x6f\x6b\x76\x43\x6e\x6e\x02",
        // "X509_STORE_free" / M(Xor3) / S(184) / L(15)
        "\x90\xfd\xf8\xf1\x97\x9b\x9c\x87\x9a\x8d\x97\xae\xba\xad\xad\xc8",
        // "longjmp" / M(Rot) / S(204) / L(7)
        "\x38\x3b\x3a\x33\x36\x39\x3c\xcc\x9d\xfa\x77\xa3\x84\x54\x53\xe4",
        // "globfree" / M(Xor2) / S(50) / L(8)
        "\x45\x4e\x4d\x40\x44\x50\x47\x47\x22\x25\xbc\x6c\x75\xf6\x48\x57",
        // "" / M(None) / S(0) / L(0)
        "\x76\x6a\x16\xa7\x6f\x51\xa2\x96\x86\xb1\xfd\xd7\x32\x09\x1f\xd7\x3d\xae\xd8\x1b\x0f\xb9\xb3\xac\x1c\xe5\x72\x64\xf1\xc1\xd1\xd3",
        // "CFDateFormatterCreate" / M(Rot) / S(39) / L(21)
        "\x6a\x6d\x6b\x88\x9b\x8c\x6d\x96\x99\x94\x88\x9b\x9b\x8c\x99\x6a\x99\x8c\x88\x9b\x8c\x27",
        // "CFDateFormatterCreateDateFromString" / M(Xor2) / S(202) / L(35)
        "\xad\xa8\xaa\x8f\x9a\x8b\xa8\x81\x9c\x83\x8f\x9a\x9a\x8b\x9c\xad\x9c\x8b\x8f\x9a\x8b\xaa\x8f\x9a\x8b\xa8\x9c\x81\x83\xbd\x9a\x9c\x87\x80\x89\xee",
        // "X509_free" / M(Xor4) / S(197) / L(9)
        "\x08\x65\x60\x69\x0f\x36\x22\x35\x35\x50\x73\x42\x66\x3d\x90\xc2",
        // "" / M(None) / S(0) / L(0)
        "\x3f\x2b\x1e\x35\x11\x6e\x07\x95\x07\x9f\x5c\x79\xe5\x09\xc8\xc6\xa1\x2d\x8a\x52\x12\x8f\x85\xa2\x2b\xeb\x89\x3a\x3f\x33\x8f\xf0",
        // "X509_STORE_free" / M(Xor2) / S(2) / L(15)
        "\x4a\x27\x22\x2b\x4d\x41\x46\x5d\x40\x57\x4d\x74\x60\x77\x77\x12",
        // "CFStringCreateWithCString" / M(Xor1) / S(206) / L(25)
        "\x8d\x88\x9d\xba\xbc\xa7\xa0\xa9\x8d\xbc\xab\xaf\xba\xab\x99\xa7\xba\xa6\x8d\x9d\xba\xbc\xa7\xa0\xa9\xce\x71\x90\xe3\x5b\xa7\xe3\x7d\x6b",
        // "CFDictionaryCreateMutable" / M(Xor4) / S(48) / L(25)
        "\x23\x26\x24\x09\x03\x14\x09\x0f\x0e\x01\x12\x19\x23\x12\x05\x01\x14\x05\x2d\x15\x14\x01\x02\x0c\x05\x60\x84\x19\x0c\x35\x56\x41\x73\xc8",
        // "CFRelease" / M(Xor1) / S(20) / L(9)
        "\x57\x52\x46\x71\x78\x71\x75\x67\x71\x14\xd9\x1a\x38\xac\xf9\x19",
        // "BIO_free" / M(Xor4) / S(29) / L(8)
        "\x92\x99\x9f\x8f\xb6\xa2\xb5\xb5\xd0\x29\x03\x45\x56\x07\x46\x07",
        // "CC_SHA1_Final" / M(Xor1) / S(140) / L(13)
        "\xcf\xcf\xd3\xdf\xc4\xcd\xbd\xd3\xca\xe5\xe2\xed\xe0\x8c\xd6\x3b",
        // "IORegistryEntryGetParentEntry" / M(Rot) / S(41) / L(29)
        "\x72\x78\x7b\x8e\x90\x92\x9c\x9d\x9b\xa2\x6e\x97\x9d\x9b\xa2\x70\x8e\x9d\x79\x8a\x9b\x8e\x97\x9d\x6e\x97\x9d\x9b\xa2\x29\x1c\x47\xa5\x20\x46\x47\x01\xaf",
        // "" / M(None) / S(0) / L(0)
        "\xaa\x5d\x7b\xb9\x24\x15\x0e\x77\x0c\xaa\x90\xbc\xa6\x23\x27\x79\xb9\x87\xdb\xb7\x82\x9d\x44\x4e\x81\xc1\xba\x58\x49\xf1\x86\x90",
        // "init" / M(Xor2) / S(156) / L(4)
        "\xe5\xe2\xe5\xf8\x8c\x34\x2b\x25\x15\xa1\x1f\x42\x78\x78\xb8\x98",
        // "X509_STORE_add_cert" / M(Xor1) / S(69) / L(19)
        "\x1d\x70\x75\x7c\x1a\x16\x11\x0a\x17\x00\x1a\x24\x21\x21\x1a\x26\x20\x37\x31\x45",
        // "setDelegate:" / M(Rot) / S(176) / L(12)
        "\x23\x15\x24\xf4\x15\x1c\x15\x17\x11\x24\x15\xea\xb0\x28\x47\x28",
        // "X509_get_ext_by_OBJ" / M(Xor4) / S(242) / L(19)
        "\xb0\xdd\xd8\xd1\xb7\x8f\x8d\x9c\xb7\x8d\x90\x9c\xb7\x8a\x91\xb7\xa7\xaa\xa2\xe8",
        // "CFBundleGetIdentifier" / M(Xor1) / S(25) / L(21)
        "\x5a\x5f\x5b\x6c\x77\x7d\x75\x7c\x5e\x7c\x6d\x50\x7d\x7c\x77\x6d\x70\x7f\x70\x7c\x6b\x19",
        // "Contents/_MASReceipt/receipt" / M(Xor4) / S(165) / L(28)
        "\x9a\xb6\xb7\xad\xbc\xb7\xad\xaa\xf6\x86\x94\x98\x8a\x8b\xbc\xba\xbc\xb0\xa9\xad\xf6\xab\xbc\xba\xbc\xb0\xa9\xad\xd9\x6f\xe1\x03\x6a\xa4\x4d\xc1\x31",
        // "" / M(None) / S(0) / L(0)
        "\x93\xb1\xe8\x28\x62\xa4\x9e\x27\x74\x02\x77\x5b\x0d\xe8\x5e\xdc\x6a\xc8\x7f\xe7\xea\x9d\x6a\x19\xca\xc9\xd0\xfc\xb2\x6a\xd8\xe5",
        // "BIO_new" / M(Xor4) / S(158) / L(7)
        "\xa2\xa9\xaf\xbf\x8e\x85\x97\xe0\x66\xaa\x04\x15\x83\x27\xe0\x96",
        // "" / M(None) / S(0) / L(0)
        "\x36\x8d\x45\x4b\x16\x3f\x1b\xdd\x1d\x13\x37\x9b\xb3\xa7\xe4\x67\xf6\xf0\x87\x4d\x3f\x1b\xb8\xae\x7a\x5a\xe3\x17\x8d\x5f\x0b\x96",
        // "X509_STORE_new" / M(Rot) / S(43) / L(14)
        "\x83\x60\x5b\x64\x8a\x7e\x7f\x7a\x7d\x70\x8a\x99\x90\xa2\x2b\x8a",
        // "" / M(None) / S(0) / L(0)
        "\xe5\x64\x23\x71\x34\xb6\xf7\x02\xd1\x8f\x5f\x9c\x5d\x4e\x61\x1c\x4f\x76\x19\x9b\xdd\x78\xd9\x9f\xa8\xe1\x27\xa4\x0a\x65\xe5\x1a",
        // "CFArrayCreateMutable" / M(Rot) / S(92) / L(20)
        "\x9f\xa2\x9d\xce\xce\xbd\xd5\x9f\xce\xc1\xbd\xd0\xc1\xa9\xd1\xd0\xbd\xbe\xc8\xc1\x5c",
        // "" / M(None) / S(0) / L(0)
        "\x41\xa8\x3c\x16\x49\x96\x05\xda\xa1\x11\x34\xa4\x3e\x3f\xd4\xda\xb2\x01\xef\xe8\x55\xa6\xb1\xcb\x22\x7b\x35\x1d\x6d\x61\xfd\xf7",
        // "/usr/lib/libSystem.dylib" / M(Xor4) / S(225) / L(24)
        "\x2e\x74\x72\x73\x2e\x6d\x68\x63\x2e\x6d\x68\x63\x52\x78\x72\x75\x64\x6c\x2f\x65\x78\x6d\x68\x63\x01\x0f\xc5\xd1\x42\x9f\x90\xe7\x04",
        // "%02x" / M(Rot) / S(196) / L(4)
        "\xe9\xf4\xf6\x3c\xc4\xf5\x60\xba\x74\xf9\x68\x7e\x75\x07\x94\xdd",
        // "ASN1_OBJECT_free" / M(Xor4) / S(186) / L(16)
        "\x1b\x09\x14\x6b\x05\x15\x18\x10\x1f\x19\x0e\x05\x3c\x28\x3f\x3f\x5a",
        // "yyyy'-'MM'-'dd'T'HH':'mm':'ss'Z'" / M(Xor1) / S(237) / L(32)
        "\x94\x94\x94\x94\xca\xc0\xca\xa0\xa0\xca\xc0\xca\x89\x89\xca\xb9\xca\xa5\xa5\xca\xd7\xca\x80\x80\xca\xd7\xca\x9e\x9e\xca\xb7\xca\xed",
        // "" / M(None) / S(0) / L(0)
        "\xed\x4d\x67\xb9\x0f\x22\x47\x74\xc3\x17\xab\xf4\x22\x32\xee\xdd\xbf\xac\x6e\xec\xf8\x84\x1d\x4a\xba\xee\xae\x90\x87\xe3\x92\x2c",
        // "strlen" / M(Rot) / S(204) / L(6)
        "\x3f\x40\x3e\x38\x31\x3a\xcc\x95\xdb\x34\x2b\x51\x3d\xc6\xdb\xb3",
        // "/usr/lib/libSystem.dylib" / M(Xor3) / S(254) / L(24)
        "\x30\x6a\x6c\x6d\x30\x73\x76\x7d\x30\x73\x76\x7d\x4c\x66\x6c\x6b\x7a\x72\x31\x7b\x66\x73\x76\x7d\x1f\x04\xf4\x0d\x81\x72\x7c\xbf\x26",
        // "CFBundleCopyBundleURL" / M(Xor3) / S(179) / L(21)
        "\x8a\x8f\x8b\xbc\xa7\xad\xa5\xac\x8a\xa6\xb9\xb0\x8b\xbc\xa7\xad\xa5\xac\x9c\x9b\x85\xc9",
        // "EVP_get_digestbyname" / M(Xor4) / S(232) / L(20)
        "\x4d\x5e\x58\x57\x6f\x6d\x7c\x57\x6c\x61\x6f\x6d\x7b\x7c\x6a\x71\x66\x69\x65\x6d\x08",
        // "611E5B662C593A08FF58D14AE22452D198DF6C60" / M(Rot) / S(247) / L(40)
        "\x2d\x28\x28\x3c\x2c\x39\x2d\x2d\x29\x3a\x2c\x30\x2a\x38\x27\x2f\x3d\x3d\x2c\x2f\x3b\x28\x2b\x38\x3c\x29\x29\x2b\x2c\x29\x3b\x28\x30\x2f\x3b\x3d\x2d\x3a\x2d\x27\xf7\xb9\x31\xda\xdf\x87\x2a\xb6\xd8",
        // "CFDateFormatterSetFormat" / M(Rot) / S(117) / L(24)
        "\xb8\xbb\xb9\xd6\xe9\xda\xbb\xe4\xe7\xe2\xd6\xe9\xe9\xda\xe7\xc8\xda\xe9\xbb\xe4\xe7\xe2\xd6\xe9\x75\xf5\xe5\x5a\x77\x78\x60\x14\xca",
        // "CFDataCreateMutable" / M(Xor4) / S(135) / L(19)
        "\xcf\xca\xc8\xed\xf8\xed\xcf\xfe\xe9\xed\xf8\xe9\xc1\xf9\xf8\xed\xee\xe0\xe9\x8c",
        // "dlopen" / M(Xor1) / S(232) / L(6)
        "\x8c\x84\x87\x98\x8d\x86\xe8\x32\x87\x66\xb8\x7d\xbc\x10\x77\x39",
        // "SHA1" / M(Rot) / S(162) / L(4)
        "\xf5\xea\xe3\xd3\xa2\x6a\x8a\x31\x3e\xff\xfc\x50\xa9\x30\xf3\x8c",
        // "_MASReceipt/receipt" / M(Xor3) / S(122) / L(19)
        "\xd1\xc3\xcf\xdd\xdc\xeb\xed\xeb\xe7\xfe\xfa\xa1\xfc\xeb\xed\xeb\xe7\xfe\xfa\x8e",
        // "IOMasterPort" / M(Xor4) / S(146) / L(12)
        "\x69\x6f\x6d\x41\x53\x54\x45\x52\x70\x4f\x52\x54\x20\xba\x68\xe9",
        // "" / M(None) / S(0) / L(0)
        "\x4d\x1d\xf8\x4a\x1c\xa1\xec\xd5\x42\x43\x79\x69\xae\x2d\xad\xd7\xc0\x47\x6f\xdc\xd9\x19\x64\xc1\xff\x4a\xc0\xc5\x05\xa5\x88\xee",
        // "CFEqual" / M(Xor3) / S(2) / L(7)
        "\x51\x54\x57\x63\x67\x73\x7e\x12\xad\x25\xe9\x10\x91\x88\x54\x57",
        // "X509_NAME_get_text_by_NID" / M(Xor1) / S(35) / L(25)
        "\x7b\x16\x13\x1a\x7c\x6d\x62\x6e\x66\x7c\x44\x46\x57\x7c\x57\x46\x5b\x57\x7c\x41\x5a\x7c\x6d\x6a\x67\x23\xd4\x2e\x72\x15\x3c\xe6\x56\xd4",
        // "RTLD_MAIN_ONLY" / M(Xor1) / S(122) / L(14)
        "\x28\x2e\x36\x3e\x25\x37\x3b\x33\x34\x25\x35\x34\x36\x23\x7a\x9a",
        // "IOServiceGetMatchingServices" / M(Xor2) / S(181) / L(28)
        "\xd9\xdf\xc3\xf5\xe2\xe6\xf9\xf3\xf5\xd7\xf5\xe4\xdd\xf1\xe4\xf3\xf8\xf9\xfe\xf7\xc3\xf5\xe2\xe6\xf9\xf3\xf5\xe3\x90\xe7\xab\x9c\x10\x74\x20\x42\x39",
        // "" / M(None) / S(0) / L(0)
        "\xd4\x68\x7a\xb9\x84\xc1\x2f\xe7\xeb\x27\x7d\x1b\xaa\x03\xe6\xf9\xef\x64\xcf\xc1\xde\xed\xa3\x5f\x48\x90\xcf\x63\x1d\x2a\xa5\x5b",
        // "sk_free" / M(Xor2) / S(5) / L(7)
        "\x66\x7e\x4a\x73\x67\x70\x70\x15\x11\x98\x69\x14\xdb\x00\x6e\xf7",
        // "CFURLCreateWithFileSystemPathRelativeToBase" / M(Xor3) / S(20) / L(43)
        "\x0b\x0e\x1d\x1a\x04\x0b\x3a\x2d\x29\x3c\x2d\x1f\x21\x3c\x20\x0e\x21\x24\x2d\x1b\x31\x3b\x3c\x2d\x25\x18\x29\x3c\x20\x1a\x2d\x24\x29\x3c\x21\x3e\x2d\x1c\x27\x0a\x29\x3b\x2d\x48\x5b\x85\x5e\xe6\x78\xc4\xf1\x9b",
        // "CFBundleIdentifier" / M(Rot) / S(125) / L(18)
        "\xc0\xc3\xbf\xf2\xeb\xe1\xe9\xe2\xc6\xe1\xe2\xeb\xf1\xe6\xe3\xe6\xe2\xef\x7d",
        // "SHA1_Init" / M(Xor4) / S(135) / L(9)
        "\x23\x38\x31\x41\x2f\x39\x1e\x19\x04\x70\x53\x44\x75\x32\x2e\xd1",
        // "CC_SHA1_Final" / M(Xor2) / S(47) / L(13)
        "\x7c\x7c\x60\x6c\x77\x7e\x0e\x60\x79\x56\x51\x5e\x53\x3f\x39\x5f",
        // "kSecClassCertificate" / M(Xor1) / S(213) / L(20)
        "\xbe\x86\xb0\xb6\x96\xb9\xb4\xa6\xa6\x96\xb0\xa7\xa1\xbc\xb3\xbc\xb6\xb4\xa1\xb0\xd5",
        // "strlen" / M(Rot) / S(231) / L(6)
        "\x5a\x5b\x59\x53\x4c\x55\xe7\x73\x31\x5c\x4e\xed\xd2\x32\x9f\xdc",
        // "61:1E:5B:66:2C:59:3A:08:FF:58:D1:4A:E2:24:52:D1:98:DF:6C:60" / M(Xor4) / S(116) / L(59)
        "\xe6\xe1\xea\xe1\x95\xea\xe5\x92\xea\xe6\xe6\xea\xe2\x93\xea\xe5\xe9\xea\xe3\x91\xea\xe0\xe8\xea\x96\x96\xea\xe5\xe8\xea\x94\xe1\xea\xe4\x91\xea\x95\xe2\xea\xe2\xe4\xea\xe5\xe2\xea\x94\xe1\xea\xe9\xe8\xea\x94\x96\xea\xe6\x93\xea\xe6\xe0\xd0\xbc\x89\x8a\x3e\x6f\x1d\xeb\x96",
        // "BIO_s_mem" / M(Xor3) / S(71) / L(9)
        "\x15\x1e\x18\x08\x24\x08\x3a\x32\x3a\x57\xe2\x2a\x46\xe5\xb1\x25",
        // "" / M(None) / S(0) / L(0)
        "\x57\x52\xec\x93\x82\xaa\xf1\xc7\x57\x0b\x0d\x18\x3b\x76\x1e\xa0\x02\x2f\xf5\xa1\x87\x5e\x49\x79\x10\x28\xcd\xf1\x3e\x84\xf6\x24",
        // "kCFTypeArrayCallBacks" / M(Xor4) / S(69) / L(21)
        "\x85\xad\xa8\xba\x97\x9e\x8b\xaf\x9c\x9c\x8f\x97\xad\x8f\x82\x82\xac\x8f\x8d\x85\x9d\xee",
        // "61:1e:5b:66:2c:59:3a:08:ff:58:d1:4a:e2:24:52:d1:98:df:6c:60" / M(Rot) / S(119) / L(59)
        "\xad\xa8\xb1\xa8\xdc\xb1\xac\xd9\xb1\xad\xad\xb1\xa9\xda\xb1\xac\xb0\xb1\xaa\xd8\xb1\xa7\xaf\xb1\xdd\xdd\xb1\xac\xaf\xb1\xdb\xa8\xb1\xab\xd8\xb1\xdc\xa9\xb1\xa9\xab\xb1\xac\xa9\xb1\xdb\xa8\xb1\xb0\xaf\xb1\xdb\xdd\xb1\xad\xda\xb1\xad\xa7\x77\x83\x2e\x3c\xc4\x06\xaa\xcc\x4f",
        // "X509_NAME_get_text_by_NID" / M(Xor3) / S(132) / L(25)
        "\xfe\x93\x96\x9f\xf9\xe8\xe7\xeb\xe3\xf9\xc1\xc3\xd2\xf9\xd2\xc3\xde\xd2\xf9\xc4\xdf\xf9\xe8\xef\xe2\xa6\x22\xd8\x5c\x17\x04\x8b\x4b\xf5",
        // "" / M(None) / S(0) / L(0)
        "\xcf\x71\x0d\x92\xc7\x6f\xdb\x4f\x61\x9f\xcb\x3c\x65\x45\x15\xce\x80\xa6\x95\x2c\xec\x20\x64\x33\x82\x7a\x85\xf0\xe2\x81\xec\x08",
        // "CFDictionaryGetValue" / M(Xor4) / S(13) / L(20)
        "\x52\x57\x55\x78\x72\x65\x78\x7e\x7f\x70\x63\x68\x56\x74\x65\x47\x70\x7d\x64\x74\x11",
        // "" / M(None) / S(0) / L(0)
        "\xa9\x6e\x4c\xff\x11\xd8\x8a\x33\xaf\x4f\x0c\x5b\x71\x28\x15\xdd\xa6\x53\x6b\x4d\xa1\x75\x38\xc6\xc8\x9f\x45\xc8\x5e\x02\xc4\x2e",
        // "" / M(None) / S(0) / L(0)
        "\xef\x7c\x2f\x09\xd3\xed\xb9\xa2\x00\x42\xc0\x9e\x7e\xef\xfa\xbb\xb1\xe6\xab\x1a\x22\xe9\x44\x7a\x7e\xcf\xcf\x07\x05\x9c\x79\x0d",
        // "" / M(None) / S(0) / L(0)
        "\x4e\xc9\x9b\xd2\xa9\x25\xe2\xea\xa1\x85\xa2\x87\x52\x4e\x82\x4d\x20\x76\xf8\x56\xfd\x28\xb4\xe2\x2e\x66\x6e\x00\x44\x94\xbf\x15",
        // "SecKeychainSearchCreateFromAttributes" / M(Xor4) / S(67) / L(37)
        "\xa1\x97\x91\xb9\x97\x8b\x91\x9a\x93\x9b\x9c\xa1\x97\x93\x80\x91\x9a\xb1\x80\x97\x93\x86\x97\xb4\x80\x9d\x9f\xb3\x86\x86\x80\x9b\x90\x87\x86\x97\x81\xf2",
        // "CFDateFormatterCreate" / M(Xor1) / S(116) / L(21)
        "\x37\x32\x30\x15\x00\x11\x32\x1b\x06\x19\x15\x00\x00\x11\x06\x37\x06\x11\x15\x00\x11\x74",
        // "RTLD_MAIN_ONLY" / M(Rot) / S(118) / L(14)
        "\xc8\xca\xc2\xba\xd5\xc3\xb7\xbf\xc4\xd5\xc5\xc4\xc2\xcf\x76\xd7",
        // "strncmp" / M(Xor4) / S(109) / L(7)
        "\xa3\xa4\xa2\xbe\xb3\xbd\xa0\xd0\x09\xb0\x3f\x9c\x6a\xf1\x93\x78",
        // "PKCS7_verify" / M(Xor1) / S(124) / L(12)
        "\x2c\x37\x3f\x2f\x4b\x23\x0a\x19\x0e\x15\x1a\x05\x7c\x39\xaf\xdf",
        // "alloc" / M(Xor1) / S(95) / L(5)
        "\x3e\x33\x33\x30\x3c\x5f\xfa\xf0\x66\x60\x25\xd6\x48\x3f\x49\xb8",
        // "IOIteratorNext" / M(Xor3) / S(192) / L(14)
        "\x99\x9f\x99\xa4\xb5\xa2\xb1\xa4\xbf\xa2\x9e\xb5\xa8\xa4\xd0\xda",
        // "kSecMatchLimit" / M(Xor2) / S(193) / L(14)
        "\xba\x82\xb4\xb2\x9c\xb0\xa5\xb2\xb9\x9d\xb8\xbc\xb8\xa5\xd1\xa0",
        // "SHA1_Final" / M(Xor2) / S(144) / L(10)
        "\xd3\xc8\xc1\xb1\xdf\xc6\xe9\xee\xe1\xec\x80\x60\x80\xa0\x1d\x0a",
        // "" / M(None) / S(0) / L(0)
        "\xa0\x3a\xfc\xf7\x9d\xac\x38\x63\xc5\x34\x22\xcc\xec\x1b\xc5\x9c\xa1\x69\x99\x04\x58\xe5\x4d\x38\x29\x60\xd6\xb1\x88\x36\xb2\x3e",
        // "IORegistryEntryCreateCFProperty" / M(Xor1) / S(59) / L(31)
        "\x72\x74\x69\x5e\x5c\x52\x48\x4f\x49\x42\x7e\x55\x4f\x49\x42\x78\x49\x5e\x5a\x4f\x5e\x78\x7d\x6b\x49\x54\x4b\x5e\x49\x4f\x42\x3b",
        // "EVP_DigestFinal" / M(Xor3) / S(48) / L(15)
        "\x05\x16\x10\x1f\x04\x29\x27\x25\x33\x34\x06\x29\x2e\x21\x2c\x40",
        // "kSecMatchLimitAll" / M(Xor1) / S(202) / L(17)
        "\xa1\x99\xaf\xa9\x87\xab\xbe\xa9\xa2\x86\xa3\xa7\xa3\xbe\x8b\xa6\xa6\xca",
        // "%02X" / M(Rot) / S(153) / L(4)
        "\xbe\xc9\xcb\xf1\x99\x8e\xe9\x07\x8c\x9d\x7b\xdb\xb9\x24\x9d\x5e",
        // "CFDataAppendBytes" / M(Xor1) / S(121) / L(17)
        "\x3a\x3f\x3d\x18\x0d\x18\x38\x09\x09\x1c\x17\x1d\x3b\x00\x0d\x1c\x0a\x79",
        // "PKCS7_get0_signers" / M(Xor2) / S(17) / L(18)
        "\x52\x49\x41\x51\x35\x5d\x65\x67\x76\x32\x5d\x71\x6b\x65\x6c\x67\x70\x71\x02",
        // "sk_num" / M(Xor3) / S(212) / L(6)
        "\x97\x8f\xbb\x8a\x91\x89\xe4\x7c\x04\x90\xff\x40\x79\xb6\xd6\x1d",
        // "SecCertificateCopyData" / M(Xor3) / S(91) / L(22)
        "\x21\x17\x11\x31\x17\x00\x06\x1b\x14\x1b\x11\x13\x06\x17\x31\x1d\x02\x0b\x36\x13\x06\x13\x72",
        // "X509_digest" / M(Xor1) / S(200) / L(11)
        "\x90\xfd\xf8\xf1\x97\xac\xa1\xaf\xad\xbb\xbc\xc8\x86\xb6\x9a\xc1",
        // "EVP_get_digestbyname" / M(Xor4) / S(52) / L(20)
        "\x01\x12\x14\x1b\x23\x21\x30\x1b\x20\x2d\x23\x21\x37\x30\x26\x3d\x2a\x25\x29\x21\x44",
        // "CFReadStreamCreateWithFile" / M(Xor3) / S(251) / L(26)
        "\x5d\x58\x4c\x7b\x7f\x7a\x4d\x6a\x6c\x7b\x7f\x73\x5d\x6c\x7b\x7f\x6a\x7b\x49\x77\x6a\x76\x58\x77\x72\x7b\x1e\x5e\x8f\xe5\x4a\xbb\xce\x91\x40",
        // "" / M(None) / S(0) / L(0)
        "\xc0\x6d\x65\x85\x62\x66\x87\x84\xd4\x8f\xbc\xf9\xd0\xcf\x94\xf6\x3c\x0d\x29\x92\x0b\x88\x63\x62\x7a\x8e\x92\x17\x4a\xd1\xdc\x40",
        // "BIO_new" / M(Xor3) / S(24) / L(7)
        "\x6a\x61\x67\x77\x46\x4d\x5f\x28\xa0\x68\xb3\x3b\x79\xb7\xd0\xfc",
        // "" / M(None) / S(0) / L(0)
        "\x60\x93\x0f\xf3\x4b\xf6\x07\xab\x2d\x8c\xda\xc5\xd9\xc4\xd4\xc7\xe6\x48\x1f\x71\xec\xe0\x61\x80\x0d\xd2\x76\x6f\x1a\x91\x7c\x29",
        // "%02x:" / M(Xor2) / S(159) / L(5)
        "\xaa\xbf\xbd\xf7\xb5\x8f\x68\xd1\x93\xd5\x3c\x72\x99\x9a\x51\xb9",
        // "OBJ_txt2obj" / M(Xor4) / S(27) / L(11)
        "\xff\xf2\xfa\xef\xc4\xc8\xc4\x82\xdf\xd2\xda\xb0\x83\x08\x80\xb5",
        // "CFDataGetLength" / M(Xor3) / S(73) / L(15)
        "\x1a\x1f\x1d\x38\x2d\x38\x1e\x3c\x2d\x15\x3c\x37\x3e\x2d\x31\x59",
        // "CC_SHA1" / M(Rot) / S(176) / L(7)
        "\xf3\xf3\x0f\x03\xf8\xf1\xe1\xb0\x83\x55\x13\x48\xfb\xbf\xab\x37",
        // "CFReadStreamRead" / M(Xor2) / S(202) / L(16)
        "\x98\x9d\x89\xbe\xba\xbf\x88\xaf\xa9\xbe\xba\xb6\x89\xbe\xba\xbf\xdb",
        // "CFRelease" / M(Xor2) / S(207) / L(9)
        "\x9c\x99\x8d\xba\xb3\xba\xbe\xac\xba\xdf\x0e\x61\xb5\xaa\xe2\xa3",
        // "CFBundleCopyBundleURL" / M(Rot) / S(66) / L(21)
        "\x85\x88\x84\xb7\xb0\xa6\xae\xa7\x85\xb1\xb2\xbb\x84\xb7\xb0\xa6\xae\xa7\x97\x94\x8e\x42",
        // "Contents/_MASReceipt/receipt" / M(Xor1) / S(24) / L(28)
        "\x5b\x77\x76\x6c\x7d\x76\x6c\x6b\x37\x47\x55\x59\x4b\x4a\x7d\x7b\x7d\x71\x68\x6c\x37\x6a\x7d\x7b\x7d\x71\x68\x6c\x18\xd8\x95\xdf\xf7\x73\x7b\x24\x0e",
        // "CFDataGetLength" / M(Xor1) / S(88) / L(15)
        "\x1b\x1e\x1c\x39\x2c\x39\x1f\x3d\x2c\x14\x3d\x36\x3f\x2c\x30\x58",
        // "kCFTypeDictionaryKeyCallBacks" / M(Xor2) / S(188) / L(29)
        "\xf1\xd9\xdc\xce\xe3\xea\xff\xde\xf3\xf9\xee\xf3\xf5\xf4\xfb\xe8\xe3\xd1\xff\xe3\xd9\xfb\xf6\xf6\xd8\xfb\xf9\xf1\xe9\x9a\x80\xb1\x4b\x6f\x20\xa9\x48\x41",
        // "IOObjectRelease" / M(Xor2) / S(30) / L(15)
        "\x47\x41\x41\x6c\x64\x6b\x6d\x7a\x5c\x6b\x62\x6b\x6f\x7d\x6b\x0e",
        // "IORegistryEntryCreateCFProperty" / M(Xor4) / S(109) / L(31)
        "\xe9\xef\xf2\xc5\xc7\xc9\xd3\xd4\xd2\xd9\xe5\xce\xd4\xd2\xd9\xe3\xd2\xc5\xc1\xd4\xc5\xe3\xe6\xf0\xd2\xcf\xd0\xc5\xd2\xd4\xd9\xa0",
        // "CFBundleGetMainBundle" / M(Rot) / S(129) / L(21)
        "\xc4\xc7\xc3\xf6\xef\xe5\xed\xe6\xc8\xe6\xf5\xce\xe2\xea\xef\xc3\xf6\xef\xe5\xed\xe6\x81",
        // "longjmp" / M(Xor3) / S(229) / L(7)
        "\x99\x9a\x9b\x92\x9f\x98\x85\xf5\x46\x5c\xdb\x99\xe8\x11\x96\x04",
        // "CFDataCreateMutable" / M(Xor1) / S(161) / L(19)
        "\xe2\xe7\xe5\xc0\xd5\xc0\xe2\xd3\xc4\xc0\xd5\xc4\xec\xd4\xd5\xc0\xc3\xcd\xc4\xa1",
        // "alloc" / M(Rot) / S(210) / L(5)
        "\x33\x3e\x3e\x41\x35\xd2\xdb\xfd\xc9\x46\x13\x51\xb9\xac\x0e\xce",
        // "" / M(None) / S(0) / L(0)
        "\x62\x30\x1e\x0a\xf5\xcf\x21\x75\x26\xe1\x73\x99\x9c\x83\x00\xf9\x81\xc0\xa0\xda\xb6\x4a\xc3\x36\x30\xde\xd4\x41\x00\x37\x89\xb7",
        // "CFDictionaryAddValue" / M(Xor4) / S(69) / L(20)
        "\xea\xef\xed\xc0\xca\xdd\xc0\xc6\xc7\xc8\xdb\xd0\xe8\xcd\xcd\xff\xc8\xc5\xdc\xcc\xa9",
        // "kSecReturnRef" / M(Xor3) / S(67) / L(13)
        "\x38\x00\x36\x30\x01\x36\x27\x26\x21\x3d\x01\x36\x35\x53\x94\xd6",
        // "kCFTypeArrayCallBacks" / M(Xor4) / S(146) / L(21)
        "\xe7\xcf\xca\xd8\xf5\xfc\xe9\xcd\xfe\xfe\xed\xf5\xcf\xed\xe0\xe0\xce\xed\xef\xe7\xff\x8c",
        // "alloc" / M(Xor2) / S(212) / L(5)
        "\xa5\xa8\xa8\xab\xa7\xc4\xa8\xcf\x0d\x5d\xfe\x87\x06\x9c\xc4\xb9",
        // "Contents/_MASReceipt" / M(Xor4) / S(229) / L(20)
        "\x8a\xa6\xa7\xbd\xac\xa7\xbd\xba\xe6\x96\x84\x88\x9a\x9b\xac\xaa\xac\xa0\xb9\xbd\xc9",
        // "" / M(None) / S(0) / L(0)
        "\x65\xf8\x51\x3f\x28\x51\xc6\xec\xc7\x5e\xd0\x11\x29\x17\xbc\xd7\xa1\x97\x9a\xd9\x91\x45\xa0\xaa\xcb\x25\xb9\xb6\xa7\xcf\xae\x39",
        // "1.2.840.113635.100.6.11.1" / M(Xor4) / S(202) / L(25)
        "\xe5\xfa\xe6\xfa\xec\xe0\xe4\xfa\xe5\xe5\xe7\xe2\xe7\xe1\xfa\xe5\xe4\xe4\xfa\xe2\xfa\xe5\xe5\xfa\xe5\xd4\x28\xf8\x3e\xe2\x26\xf0\x5d\x07",
        // "/System/Library/Keychains/SystemRootCertificates.keychain" / M(Xor4) / S(67) / L(57)
        "\x69\x15\x3f\x35\x32\x23\x2b\x69\x0a\x2f\x24\x34\x27\x34\x3f\x69\x0d\x23\x3f\x25\x2e\x27\x2f\x28\x35\x69\x15\x3f\x35\x32\x23\x2b\x14\x29\x29\x32\x05\x23\x34\x32\x2f\x20\x2f\x25\x27\x32\x23\x35\x68\x2d\x23\x3f\x25\x2e\x27\x2f\x28\x46\x63\xc9\x0b\x5a\x40\xc8\xdf\x04",
        // "BIO_write" / M(Xor1) / S(58) / L(9)
        "\x78\x73\x75\x65\x4d\x48\x53\x4e\x5f\x3a\xfe\x9d\xca\x02\x0d\x7b",
        // "CFBundleGetIdentifier" / M(Xor2) / S(184) / L(21)
        "\xed\xe8\xec\xdb\xc0\xca\xc2\xcb\xe9\xcb\xda\xe7\xca\xcb\xc0\xda\xc7\xc8\xc7\xcb\xdc\xae",
        // "CFReadStreamOpen" / M(Xor4) / S(164) / L(16)
        "\xa7\xa2\xb6\x81\x85\x80\xb7\x90\x96\x81\x85\x89\xab\x94\x81\x8a\xe4",
        // "/usr/lib/libobjc.dylib" / M(Xor3) / S(117) / L(22)
        "\xa3\xf9\xff\xfe\xa3\xe0\xe5\xee\xa3\xe0\xe5\xee\xe3\xee\xe6\xef\xa2\xe8\xf5\xe0\xe5\xee\x8c",
        // "CFURLCreateCopyAppendingPathComponent" / M(Xor1) / S(105) / L(37)
        "\x2a\x2f\x3c\x3b\x25\x2a\x1b\x0c\x08\x1d\x0c\x2a\x06\x19\x10\x28\x19\x19\x0c\x07\x0d\x00\x07\x0e\x39\x08\x1d\x01\x2a\x06\x04\x19\x06\x07\x0c\x07\x1d\x69",
        // "Apple Root CA" / M(Xor2) / S(120) / L(13)
        "\x29\x18\x18\x04\x0d\x48\x3a\x07\x07\x1c\x48\x2b\x29\x68\x44\xbd",
        // "setDelegate:" / M(Rot) / S(84) / L(12)
        "\xc7\xb9\xc8\x98\xb9\xc0\xb9\xbb\xb5\xc8\xb9\x8e\x54\x49\x3b\x5b",
        // "" / M(None) / S(0) / L(0)
        "\x1a\x15\xc9\x8a\x59\xe9\x3c\xa9\x1f\x09\x40\xdc\xb9\x7e\x96\x86\x13\xae\x87\x4a\x90\xb9\x09\x2b\xde\x3c\x76\x9d\xf8\xdd\xaf\x1d",
        // "SecItemCopyMatching" / M(Xor3) / S(53) / L(19)
        "\x1a\x2c\x2a\x00\x3d\x2c\x24\x0a\x26\x39\x30\x04\x28\x3d\x2a\x21\x20\x27\x2e\x49",
        // "CFArrayGetCount" / M(Xor4) / S(191) / L(15)
        "\xb3\xb6\xb1\x82\x82\x91\x89\xb7\x95\x84\xb3\x9f\x85\x9e\x84\xf0",
        // "" / M(None) / S(0) / L(0)
        "\x3f\xc7\xd1\x4c\x5d\x3e\x41\x1a\x83\xec\x51\x46\xb4\xe6\xa0\x9f\x47\x7d\x3f\x09\xd7\xd0\x89\xfc\xd6\x01\xb9\x0c\x8c\xfe\x68\x05",
        // "" / M(None) / S(0) / L(0)
        "\x85\x54\x8b\x72\xc9\xaf\xe6\x74\x67\x0a\x0a\x86\xe2\x39\xa1\xe1\x66\x74\xe4\xeb\x51\xb1\xb5\x3a\x41\x7d\xc1\xea\x74\x91\x34\x0f",
        // "/System/Library/Frameworks/IOKit.framework/IOKit" / M(Xor2) / S(35) / L(48)
        "\x3d\x41\x6b\x61\x66\x77\x7f\x3d\x5e\x7b\x70\x60\x73\x60\x6b\x3d\x54\x60\x73\x7f\x77\x65\x7d\x60\x79\x61\x3d\x5b\x5d\x59\x7b\x66\x3c\x74\x60\x73\x7f\x77\x65\x7d\x60\x79\x3d\x5b\x5d\x59\x7b\x66\x12",
        // "kCFTypeDictionaryKeyCallBacks" / M(Xor2) / S(230) / L(29)
        "\xab\x83\x86\x94\xb9\xb0\xa5\x84\xa9\xa3\xb4\xa9\xaf\xae\xa1\xb2\xb9\x8b\xa5\xb9\x83\xa1\xac\xac\x82\xa1\xa3\xab\xb3\xc0\x8a\xaf\xc4\xe2\x06\x39\x81\xc4",
        // "CFDictionaryCreateMutable" / M(Xor2) / S(226) / L(25)
        "\x83\x86\x84\xa9\xa3\xb4\xa9\xaf\xae\xa1\xb2\xb9\x83\xb2\xa5\xa1\xb4\xa5\x8d\xb5\xb4\xa1\xa2\xac\xa5\xc0\x0a\x06\x2f\xed\x4f\xc4\xea\x30",
        // "CFDateFormatterSetFormat" / M(Xor3) / S(240) / L(24)
        "\x52\x57\x55\x70\x65\x74\x57\x7e\x63\x7c\x70\x65\x65\x74\x63\x42\x74\x65\x57\x7e\x63\x7c\x70\x65\x11\x69\xc5\xa5\x8e\xb8\x82\xb4\xfa",
        // "kCFBundleIdentifierKey" / M(Xor2) / S(39) / L(22)
        "\x5b\x73\x76\x72\x45\x5e\x54\x5c\x55\x79\x54\x55\x5e\x44\x59\x56\x59\x55\x42\x7b\x55\x49\x30",
        // "" / M(None) / S(0) / L(0)
        "\x84\x47\x3c\x2d\x04\x67\xfd\x65\x17\xcb\x25\xeb\x7f\xd8\x47\x9c\xc0\x3c\x4a\xa1\x89\xd6\xd1\x76\xcf\x43\x36\x9b\xab\x7e\x76\x01",
        // "globfree" / M(Xor3) / S(142) / L(8)
        "\xf9\xf2\xf1\xfc\xf8\xec\xfb\xfb\x9e\xa0\xbc\xb8\x6d\x4f\xa9\x76",
        // "X509_digest" / M(Xor2) / S(40) / L(11)
        "\x60\x0d\x08\x01\x67\x5c\x51\x5f\x5d\x4b\x4c\x38\xf8\x3a\x26\x52",
        // "_MASReceipt" / M(Rot) / S(142) / L(11)
        "\xed\xdb\xcf\xe1\xe0\xf3\xf1\xf3\xf7\xfe\x02\x8e\x2c\x90\xea\xf2",
        // "" / M(None) / S(0) / L(0)
        "\xf3\x3f\x61\xf6\xba\xc9\x9a\xc9\xb4\xa8\xa1\xaf\x27\xde\x68\xca\xad\x7e\xb3\xd8\xe5\xb5\x98\x83\x53\xfc\xcc\x0d\xad\x33\xcb\x4d",
        // "" / M(None) / S(0) / L(0)
        "\x16\x7d\x4a\xcf\xb0\x69\x33\xf5\x8e\xcc\xed\xb0\xf0\x1b\xde\x4b\xf0\x39\xcf\x9d\xd1\x43\x35\xa6\x28\xe3\xac\xea\x19\x30\x96\xbe",
        // "IOIteratorNext" / M(Xor4) / S(162) / L(14)
        "\x69\x6f\x69\x54\x45\x52\x41\x54\x4f\x52\x6e\x45\x58\x54\x20\xbd",
        // "d2i_PKCS7_bio" / M(Xor2) / S(253) / L(13)
        "\x89\xdf\x84\xb2\xbd\xa6\xae\xbe\xda\xb2\x8f\x84\x82\xed\x03\xba",
        // "BIO_free" / M(Xor3) / S(158) / L(8)
        "\xec\xe7\xe1\xf1\xc8\xdc\xcb\xcb\xae\x23\x83\x7d\x64\x06\xe9\x7d",
        // "init" / M(Xor2) / S(175) / L(4)
        "\xd6\xd1\xd6\xcb\xbf\x1d\x60\x3e\xcb\x69\xa6\x6b\x9c\xfa\xf4\xb6",
        // "CC_SHA1_Update" / M(Xor4) / S(250) / L(14)
        "\xe3\xe3\xff\xf3\xe8\xe1\x91\xff\xf5\xd0\xc4\xc1\xd4\xc5\xa0\x21",
        // "" / M(None) / S(0) / L(0)
        "\x19\xd5\xc1\x77\xed\x4c\xec\x61\x8d\x7a\x09\x48\xe3\x55\x4d\xac\xd4\xe8\x61\xc2\x1a\x9a\xb6\x58\x63\x75\x0d\x39\x7c\xe6\x08\x2c",
        // "kSecMatchSubjectContains" / M(Xor1) / S(221) / L(24)
        "\xb6\x8e\xb8\xbe\x90\xbc\xa9\xbe\xb5\x8e\xa8\xbf\xb7\xb8\xbe\xa9\x9e\xb2\xb3\xa9\xbc\xb4\xb3\xae\xdd\x9f\x88\xab\xb5\xbf\xec\x12\xe0",
        // "" / M(None) / S(0) / L(0)
        "\x3e\x73\xa6\xa8\x38\x88\xfd\x43\x65\xe6\x3c\x0f\x28\x9a\xf0\xd0\x80\x37\xdd\xe0\xb4\xb0\xb5\xec\x96\x4e\xd0\x44\x14\x63\x63\x4a",
        // "SHA1_Init" / M(Xor4) / S(83) / L(9)
        "\x63\x78\x71\x01\x6f\x79\x5e\x59\x44\x30\x5a\x76\x43\xf0\x99\x01",
        // "longjmp" / M(Xor2) / S(109) / L(7)
        "\x11\x12\x13\x1a\x17\x10\x0d\x7d\xdb\x95\x8b\x92\x80\xd1\x98\xba",
        // "/System/Library/Keychains/SystemRootCertificates.keychain" / M(Xor3) / S(160) / L(57)
        "\xcd\xb1\x9b\x91\x96\x87\x8f\xcd\xae\x8b\x80\x90\x83\x90\x9b\xcd\xa9\x87\x9b\x81\x8a\x83\x8b\x8c\x91\xcd\xb1\x9b\x91\x96\x87\x8f\xb0\x8d\x8d\x96\xa1\x87\x90\x96\x8b\x84\x8b\x81\x83\x96\x87\x91\xcc\x89\x87\x9b\x81\x8a\x83\x8b\x8c\xe2\xed\xbc\xe1\xce\x7f\x33\xe9\x67",
        // "kSecClass" / M(Xor2) / S(166) / L(9)
        "\xdd\xe5\xd3\xd5\xf5\xda\xd7\xc5\xc5\xb6\x76\x73\x35\xff\x47\xf7",
        // "dlsym" / M(Xor1) / S(34) / L(5)
        "\x46\x4e\x51\x5b\x4f\x22\x85\xe3\x20\xa5\x1c\x9e\x9d\x8d\x96\x5c",
        // "ASN1_get_object" / M(Rot) / S(139) / L(15)
        "\xcc\xde\xd9\xbc\xea\xf2\xf0\xff\xea\xfa\xed\xf5\xf0\xee\xff\x8b",
        // "" / M(None) / S(0) / L(0)
        "\x14\x23\x0b\xd3\x2c\xb3\xbc\x04\x68\x2a\xe4\x3a\xe6\x05\xa2\x77\xde\xbe\x68\x37\xd1\xa5\xc8\xf4\x5e\x83\x9d\x64\x5c\x4a\x87\x61",
        // "CFURLCreateCopyAppendingPathComponent" / M(Xor3) / S(214) / L(37)
        "\xbf\xba\xa9\xae\xb0\xbf\x8e\x99\x9d\x88\x99\xbf\x93\x8c\x85\xbd\x8c\x8c\x99\x92\x98\x95\x92\x9b\xac\x9d\x88\x94\xbf\x93\x91\x8c\x93\x92\x99\x92\x88\xfc",
        // "IOIteratorNext" / M(Rot) / S(137) / L(14)
        "\xd2\xd8\xd2\xfd\xee\xfb\xea\xfd\xf8\xfb\xd7\xee\x01\xfd\x89\x22",
        // "glob_b" / M(Xor4) / S(80) / L(6)
        "\x67\x6c\x6f\x62\x5f\x62\x00\x94\x19\xc8\x01\x8a\xae\xdb\xc6\x17",
        // "EVP_DigestFinal" / M(Xor3) / S(66) / L(15)
        "\x17\x04\x02\x0d\x16\x3b\x35\x37\x21\x26\x14\x3b\x3c\x33\x3e\x52",
        // "setjmp" / M(Xor2) / S(63) / L(6)
        "\x5c\x4a\x5b\x45\x42\x5f\x2f\x1a\x47\x82\x86\x1d\xee\x31\x55\x25",
        // "IOObjectRelease" / M(Xor2) / S(224) / L(15)
        "\xb9\xbf\xbf\x92\x9a\x95\x93\x84\xa2\x95\x9c\x95\x91\x83\x95\xf0",
        // "" / M(None) / S(0) / L(0)
        "\x7d\x12\x2a\xed\xb4\xea\x2d\x09\x58\x1e\x77\x7d\xde\x10\x24\xa1\xef\x4c\xa6\xaf\x07\x18\xc2\xb3\xa5\xf8\xa9\x3e\xfe\xd1\xd6\x5f",
        // "SecItemCopyMatching" / M(Xor4) / S(135) / L(19)
        "\xdf\xe9\xef\xc5\xf8\xe9\xe1\xcf\xe3\xfc\xf5\xc1\xed\xf8\xef\xe4\xe5\xe2\xeb\x8c",
        // "CFDateFormatterCreateDateFromString" / M(Xor2) / S(152) / L(35)
        "\xff\xfa\xf8\xdd\xc8\xd9\xfa\xd3\xce\xd1\xdd\xc8\xc8\xd9\xce\xff\xce\xd9\xdd\xc8\xd9\xf8\xdd\xc8\xd9\xfa\xce\xd3\xd1\xef\xc8\xce\xd5\xd2\xdb\xbc",
        // "kSecClass" / M(Xor2) / S(62) / L(9)
        "\x45\x7d\x4b\x4d\x6d\x42\x4f\x5d\x5d\x2e\x07\x13\x6c\xf1\xff\x02",
        // "d2i_X509_bio" / M(Xor4) / S(31) / L(12)
        "\x94\xc2\x99\xaf\xa8\xc5\xc0\xc9\xaf\x92\x99\x9f\xf0\x2d\x4a\x69",
        // "strncmp" / M(Rot) / S(35) / L(7)
        "\x96\x97\x95\x91\x86\x90\x93\x23\x6a\x39\x24\x5b\xc5\xef\xee\x1d",
        // "" / M(None) / S(0) / L(0)
        "\xd1\xc6\xc3\x69\x27\x92\x52\x3c\xcf\x1c\x90\x22\x9d\xaf\x31\xaa\xdd\xa4\xbb\x1d\x4c\xb5\x8a\x1e\x40\x64\x2a\x4b\xc3\x9b\xb6\x1b",
        // "OpenSSL_add_all_digests" / M(Xor1) / S(157) / L(23)
        "\xd2\xed\xf8\xf3\xce\xce\xd1\xc2\xfc\xf9\xf9\xc2\xfc\xf1\xf1\xc2\xf9\xf4\xfa\xf8\xee\xe9\xee\x9d\x9b\x9d\xd6\xc1\x9a\xfc\x9f\xd0",
        // "/usr/lib/libSystem.dylib" / M(Xor4) / S(37) / L(24)
        "\xea\xb0\xb6\xb7\xea\xa9\xac\xa7\xea\xa9\xac\xa7\x96\xbc\xb6\xb1\xa0\xa8\xeb\xa1\xbc\xa9\xac\xa7\xc5\xd1\x1d\xb2\x43\x70\x1d\x52\x08",
        // "CFBundleGetValueForInfoDictionaryKey" / M(Xor4) / S(78) / L(36)
        "\x05\x00\x04\x33\x28\x22\x2a\x23\x01\x23\x32\x10\x27\x2a\x33\x23\x00\x29\x34\x0f\x28\x20\x29\x02\x2f\x25\x32\x2f\x29\x28\x27\x34\x3f\x0d\x23\x3f\x46",
        // "receipt" / M(Rot) / S(218) / L(7)
        "\x4c\x3f\x3d\x3f\x43\x4a\x4e\xda\x2b\x72\x9f\x8a\xd1\x88\x69\xcb",
        // "" / M(None) / S(0) / L(0)
        "\x4f\x5b\xec\xbc\x73\x74\x6f\x44\x6e\x02\xf4\xea\xcc\x0d\x29\x87\xb8\x44\x14\xb2\x0d\x3b\xa9\xb6\x76\x68\x7c\x6a\x1e\xde\xcd\x8a",
        // "kSecMatchLimit" / M(Xor2) / S(79) / L(14)
        "\x34\x0c\x3a\x3c\x12\x3e\x2b\x3c\x37\x13\x36\x32\x36\x2b\x5f\xec",
        // "CFBundleGetMainBundle" / M(Xor4) / S(24) / L(21)
        "\x53\x56\x52\x65\x7e\x74\x7c\x75\x57\x75\x64\x5d\x71\x79\x7e\x52\x65\x7e\x74\x7c\x75\x10",
        // "dlsym" / M(Rot) / S(240) / L(5)
        "\x54\x5c\x63\x69\x5d\xf0\xd4\x24\xa9\x57\x42\xdb\x0f\xcc\x86\xe5",
        // "it.iltofa.Turms" / M(Xor3) / S(41) / L(15)
        "\x50\x4d\x17\x50\x55\x4d\x56\x5f\x58\x17\x6d\x4c\x4b\x54\x4a\x39",
        // "611E5B662C593A08FF58D14AE22452D198DF6C60" / M(Xor3) / S(85) / L(40)
        "\xb0\xb7\xb7\xc3\xb3\xc4\xb0\xb0\xb4\xc5\xb3\xbf\xb5\xc7\xb6\xbe\xc0\xc0\xb3\xbe\xc2\xb7\xb2\xc7\xc3\xb4\xb4\xb2\xb3\xb4\xc2\xb7\xbf\xbe\xc2\xc0\xb0\xc5\xb0\xb6\x86\x09\x51\xc1\x26\x3f\xa3\xd3\xa5",
        // "%02X:" / M(Xor3) / S(5) / L(5)
        "\x30\x25\x27\x4d\x2f\x15\x9c\xd5\xb7\xe7\x8e\x21\x38\xae\x52\xa2",
        // "61:1e:5b:66:2c:59:3a:08:ff:58:d1:4a:e2:24:52:d1:98:df:6c:60" / M(Xor1) / S(127) / L(59)
        "\x49\x4e\x45\x4e\x1a\x45\x4a\x1d\x45\x49\x49\x45\x4d\x1c\x45\x4a\x46\x45\x4c\x1e\x45\x4f\x47\x45\x19\x19\x45\x4a\x47\x45\x1b\x4e\x45\x4b\x1e\x45\x1a\x4d\x45\x4d\x4b\x45\x4a\x4d\x45\x1b\x4e\x45\x46\x47\x45\x1b\x19\x45\x49\x1c\x45\x49\x4f\x7f\x6b\x1e\x95\x8c\xab\xe6\x7e\xfc",
        // "kSecClass" / M(Rot) / S(241) / L(9)
        "\x5c\x44\x56\x54\x34\x5d\x52\x64\x64\xf1\x43\xae\x2f\x4f\x0e\x38",
        // "SKReceiptRefreshRequest" / M(Xor1) / S(23) / L(23)
        "\x44\x5c\x45\x72\x74\x72\x7e\x67\x63\x45\x72\x71\x65\x72\x64\x7f\x45\x72\x66\x62\x72\x64\x63\x17\xa9\x3e\x83\x1d\x9a\xd2\x60\xd8",
        // "X509_digest" / M(Rot) / S(149) / L(11)
        "\xed\xca\xc5\xce\xf4\xf9\xfe\xfc\xfa\x08\x09\x95\x61\x2d\x63\x3c",
        // "glob_b" / M(Xor1) / S(45) / L(6)
        "\x4a\x41\x42\x4f\x72\x4f\x2d\xfb\xee\x1d\xf4\x29\x4d\xc2\x11\xe2",
        // "sk_free" / M(Xor4) / S(245) / L(7)
        "\x23\x3b\x0f\x36\x22\x35\x35\x50\x10\x32\x28\x7f\x76\xb8\x91\x0d",
        // "" / M(None) / S(0) / L(0)
        "\xad\x8e\x2d\xb3\xe3\x24\x81\x56\xec\x76\x08\x99\xa7\x4f\x74\x8a\xed\xc2\xce\x59\x7c\xd7\x4e\xc4\xad\x5e\x8e\xbf\x90\x4b\xc3\x18",
        // "CFDictionaryGetValue" / M(Xor4) / S(111) / L(20)
        "\x58\x5d\x5f\x72\x78\x6f\x72\x74\x75\x7a\x69\x62\x5c\x7e\x6f\x4d\x7a\x77\x6e\x7e\x1b",
        // "" / M(None) / S(0) / L(0)
        "\x15\x7d\xe1\x32\x65\xd9\x13\x2d\x56\x52\xe4\xb4\xbe\xd2\x67\xb1\xba\x1e\xdb\x5e\x4d\x81\xc6\x94\x78\xb0\xd1\xb0\xbf\xa7\x43\xbe",
        // "IOMasterPort" / M(Rot) / S(20) / L(12)
        "\x5d\x63\x61\x75\x87\x88\x79\x86\x64\x83\x86\x88\x14\x1b\xc3\xd6",
        // "%02X:" / M(Xor3) / S(133) / L(5)
        "\xb0\xa5\xa7\xcd\xaf\x95\xca\xc9\x8f\xca\x0e\x14\xec\xe9\x52\x28",
        // "kCFTypeDictionaryKeyCallBacks" / M(Xor1) / S(227) / L(29)
        "\x88\xa0\xa5\xb7\x9a\x93\x86\xa7\x8a\x80\x97\x8a\x8c\x8d\x82\x91\x9a\xa8\x86\x9a\xa0\x82\x8f\x8f\xa1\x82\x80\x88\x90\xe3\xb3\xb6\xdf\xcd\x87\x87\xc2\xc4",
        // "CC_SHA1_Init" / M(Rot) / S(237) / L(12)
        "\x30\x30\x4c\x40\x35\x2e\x1e\x4c\x36\x5b\x56\x61\xed\x86\x59\x08",
        // "sk_num" / M(Xor3) / S(57) / L(6)
        "\x3a\x22\x16\x27\x3c\x24\x49\x13\x63\xd0\x09\xa2\xcf\x75\x48\xdd",
        // "" / M(None) / S(0) / L(0)
        "\x1f\xb6\xb5\xf3\x90\xa2\x23\x3c\x07\xb0\x7d\x1d\x89\xcc\xfd\x19\xe5\xde\xee\xe0\x8b\x1b\xd5\x57\x5d\x2a\x7d\x72\x48\x70\x0a\x1a",
        // "CC_SHA1_Init" / M(Xor2) / S(70) / L(12)
        "\x15\x15\x09\x05\x1e\x17\x67\x09\x1f\x38\x3f\x22\x56\xec\xd3\xf8",
        // "SecKeychainSearchCopyNext" / M(Xor1) / S(124) / L(25)
        "\x2f\x19\x1f\x37\x19\x05\x1f\x14\x1d\x15\x12\x2f\x19\x1d\x0e\x1f\x14\x3f\x13\x0c\x05\x32\x19\x04\x08\x7c\x36\xe2\xa7\x52\x49\x51\x29\x4c",
        // "" / M(None) / S(0) / L(0)
        "\x4a\x33\x37\xa0\x48\x9a\xb3\xa1\x38\xfd\x70\x6d\xf6\xab\xbf\x21\x52\xa6\x33\x4d\x5e\xd2\xb4\x05\x6b\x81\xbb\xf0\x59\x88\x88\x66",
        // "CFBundleUnloadExecutable" / M(Xor3) / S(34) / L(24)
        "\x00\x05\x01\x36\x2d\x27\x2f\x26\x16\x2d\x2f\x2c\x22\x27\x06\x3b\x26\x20\x36\x37\x22\x21\x2f\x26\x43\x38\xb1\x35\x7e\x3d\x76\x6c\x50",
        // "objc_msgSend" / M(Xor4) / S(255) / L(12)
        "\x9f\x92\x9a\x93\xaf\x9d\x83\x97\xa3\x95\x9e\x94\xf0\xa9\x68\x48",
        // "d2i_X509_bio" / M(Xor3) / S(41) / L(12)
        "\x5d\x0b\x50\x66\x61\x0c\x09\x00\x66\x5b\x50\x56\x39\x1b\xbd\xcd",
        // "CC_SHA1_Update" / M(Xor1) / S(93) / L(14)
        "\x1e\x1e\x02\x0e\x15\x1c\x6c\x02\x08\x2d\x39\x3c\x29\x38\x5d\xa4",
        // "strlen" / M(Xor4) / S(208) / L(6)
        "\x73\x74\x72\x6c\x65\x6e\x00\x46\x31\x37\x44\xcd\x09\x61\x27\xb7",
        // "/System/Library/Frameworks/Security.framework/Security" / M(Xor1) / S(32) / L(54)
        "\x0f\x73\x59\x53\x54\x45\x4d\x0f\x6c\x49\x42\x52\x41\x52\x59\x0f\x66\x52\x41\x4d\x45\x57\x4f\x52\x4b\x53\x0f\x73\x45\x43\x55\x52\x49\x54\x59\x0e\x46\x52\x41\x4d\x45\x57\x4f\x52\x4b\x0f\x73\x45\x43\x55\x52\x49\x54\x59\x20",
        // "glob" / M(Xor3) / S(72) / L(4)
        "\x3f\x34\x37\x3a\x58\xb5\xeb\x4d\xc6\x0a\x42\x0c\xec\xf9\x3b\xd1",
        // "/System/Library/Frameworks/Security.framework/Security" / M(Rot) / S(158) / L(54)
        "\xcd\xf1\x17\x11\x12\x03\x0b\xcd\xea\x07\x00\x10\xff\x10\x17\xcd\xe4\x10\xff\x0b\x03\x15\x0d\x10\x09\x11\xcd\xf1\x03\x01\x13\x10\x07\x12\x17\xcc\x04\x10\xff\x0b\x03\x15\x0d\x10\x09\xcd\xf1\x03\x01\x13\x10\x07\x12\x17\x9e",
        // "CFStringCompare" / M(Xor1) / S(30) / L(15)
        "\x5d\x58\x4d\x6a\x6c\x77\x70\x79\x5d\x71\x73\x6e\x7f\x6c\x7b\x1e",
        // "" / M(None) / S(0) / L(0)
        "\x77\x7f\xac\x1c\xd5\x52\x59\xc4\x8b\x47\xad\x3d\xbc\x02\xa2\x58\xbe\xfb\xb6\x58\x17\x81\x92\xe4\xbc\xb8\xf4\x2c\xc4\x61\x47\x74",
        // "d2i_PKCS7_bio" / M(Xor3) / S(3) / L(13)
        "\x77\x21\x7a\x4c\x43\x58\x50\x40\x24\x4c\x71\x7a\x7c\x13\x9d\x74",
        // "" / M(None) / S(0) / L(0)
        "\x72\x29\xc0\xb8\xee\xbc\x7e\xfa\xe7\x37\x96\x06\xbb\x32\x72\x87\xc5\x03\xfb\x2d\xc3\x27\x1e\x03\x0c\x83\x5c\x1d\x63\x9d\x45\x91",
        // "CFStringGetFileSystemRepresentation" / M(Rot) / S(158) / L(35)
        "\xe1\xe4\xf1\x12\x10\x07\x0c\x05\xe5\x03\x12\xe4\x07\x0a\x03\xf1\x17\x11\x12\x03\x0b\xf0\x03\x0e\x10\x03\x11\x03\x0c\x12\xff\x12\x07\x0d\x0c\x9e",
        // "CFReadStreamClose" / M(Xor1) / S(251) / L(17)
        "\xb8\xbd\xa9\x9e\x9a\x9f\xa8\x8f\x89\x9e\x9a\x96\xb8\x97\x94\x88\x9e\xfb",
        // "CFReadStreamRead" / M(Xor3) / S(0) / L(16)
        "\x52\x57\x43\x74\x70\x75\x42\x65\x63\x74\x70\x7c\x43\x74\x70\x75\x11",
        // "X509_free" / M(Xor4) / S(210) / L(9)
        "\x78\x15\x10\x19\x7f\x46\x52\x45\x45\x20\x45\x6c\x37\xa1\x33\x3a",
        // "" / M(None) / S(0) / L(0)
        "\x5f\x75\xa7\xb6\x47\x6f\xe5\x37\x35\xb3\x5c\xe9\xbe\x6b\xc6\xb9\xab\x70\xd0\xa7\xfd\xaa\x2e\xe1\xc9\x4b\x11\x38\x74\x0f\x14\xb0",
        // "CFEqual" / M(Rot) / S(34) / L(7)
        "\x65\x68\x67\x93\x97\x83\x8e\x22\xf4\x7a\x01\x35\x4c\x0c\x3e\x55",
        // "EVP_get_digestbyname" / M(Xor1) / S(37) / L(20)
        "\x60\x73\x75\x7a\x42\x40\x51\x7a\x41\x4c\x42\x40\x56\x51\x47\x5c\x4b\x44\x48\x40\x25",
        // "init" / M(Xor4) / S(240) / L(4)
        "\x69\x6e\x69\x74\x00\xbc\x0f\x7d\xd4\x42\xe4\xae\x03\xfb\xee\x01",
        // "CFDictionarySetValue" / M(Xor1) / S(22) / L(20)
        "\x55\x50\x52\x7f\x75\x62\x7f\x79\x78\x77\x64\x6f\x45\x73\x62\x40\x77\x7a\x63\x73\x16",
        // "" / M(None) / S(0) / L(0)
        "\x02\xe3\xa9\xd1\x74\x07\xc1\x0c\x57\x8b\x5d\x1b\x29\x74\xd4\x2b\xb9\x10\x0c\x2b\x28\x35\x7c\xaf\x72\xc4\x0d\x75\xfa\xde\x76\x28",
        // "" / M(None) / S(0) / L(0)
        "\x5b\xd1\x8b\xa2\x41\x51\xe4\x7f\xb6\xbf\x9b\xd1\x81\xf8\x64\x1a\xd8\x4c\x2b\xfe\x14\x36\x39\xd9\x87\xd8\x45\xd2\xc6\x6f\x27\xd8",
        // "Contents/_MASReceipt" / M(Xor3) / S(135) / L(20)
        "\xdf\xf3\xf2\xe8\xf9\xf2\xe8\xef\xb3\xc3\xd1\xdd\xcf\xce\xf9\xff\xf9\xf5\xec\xe8\x9c",
        // "" / M(None) / S(0) / L(0)
        "\xd5\x9e\x80\x58\xf2\xdb\xc7\x9f\x38\xbf\x00\x2a\x21\x46\x75\x99\x3d\x35\x30\x28\x17\x07\x01\x83\xfc\xed\x21\xe9\x5f\x09\xb8\x17",
        // "sk_free" / M(Xor1) / S(83) / L(7)
        "\x20\x38\x0c\x35\x21\x36\x36\x53\x7f\xa8\x0b\x38\xfb\x4c\x68\x34",
        // "SecItemCopyMatching" / M(Rot) / S(197) / L(19)
        "\x18\x2a\x28\x0e\x39\x2a\x32\x08\x34\x35\x3e\x12\x26\x39\x28\x2d\x2e\x33\x2c\xc5",
        // "" / M(None) / S(0) / L(0)
        "\x86\xdc\xd1\x57\xd7\x1d\xa5\x3f\x0f\xf6\xce\xec\x1e\x32\xd8\x03\xdc\x58\xb0\xdd\x10\x1e\x1f\xbd\x17\xa4\x87\x9b\x03\xa9\xfa\xf9",
        // "CFStringCreateWithCString" / M(Rot) / S(199) / L(25)
        "\x0a\x0d\x1a\x3b\x39\x30\x35\x2e\x0a\x39\x2c\x28\x3b\x2c\x1e\x30\x3b\x2f\x0a\x1a\x3b\x39\x30\x35\x2e\xc7\x79\x75\x5e\x54\x22\x52\x7e\x84",
        // "sel_registerName" / M(Xor4) / S(255) / L(16)
        "\x9c\x8a\x83\xb0\x9d\x8a\x88\x86\x9c\x9b\x8a\x9d\xa1\x8e\x82\x8a\xef",
        // "" / M(None) / S(0) / L(0)
        "\xaf\x0a\x5b\x35\x27\x42\xc0\x39\x58\xd7\x78\x3a\xf6\xe2\x63\x3e\xd5\x7d\x62\xc3\x06\x0e\x1c\x8d\x2c\xc6\xfc\xa2\xf6\x62\x7e\xd6",
        // "X509_get_ext_by_OBJ" / M(Xor1) / S(130) / L(19)
        "\xda\xb7\xb2\xbb\xdd\xe5\xe7\xf6\xdd\xe7\xfa\xf6\xdd\xe0\xfb\xdd\xcd\xc0\xc8\x82",
        // "" / M(None) / S(0) / L(0)
        "\x9d\xf7\x73\xe4\x3c\xf5\xa0\x9d\x83\x32\x7b\x4c\x17\x10\xa1\x8a\x77\xc0\x9f\x60\xb3\x97\x7a\xd8\x6d\x64\xc1\x43\x06\xca\x99\xba",
        // "SKReceiptRefreshRequest" / M(Rot) / S(150) / L(23)
        "\xe9\xe1\xe8\xfb\xf9\xfb\xff\x06\x0a\xe8\xfb\xfc\x08\xfb\x09\xfe\xe8\xfb\x07\x0b\xfb\x09\x0a\x96\x80\x0b\x8a\xcb\xee\x98\x9d\x60",
        // "CFDictionaryCreateMutable" / M(Xor1) / S(210) / L(25)
        "\x91\x94\x96\xbb\xb1\xa6\xbb\xbd\xbc\xb3\xa0\xab\x91\xa0\xb7\xb3\xa6\xb7\x9f\xa7\xa6\xb3\xb0\xbe\xb7\xd2\x9e\x25\xe1\x90\x60\xe3\xbf\x0d",
        // "kSecMatchSubjectContains" / M(Xor3) / S(94) / L(24)
        "\x14\x2c\x1a\x1c\x32\x1e\x0b\x1c\x17\x2c\x0a\x1d\x15\x1a\x1c\x0b\x3c\x10\x11\x0b\x1e\x16\x11\x0c\x7f\x51\x6b\x14\x0a\xdb\x69\x03\x52",
        // "CFReadStreamClose" / M(Xor4) / S(35) / L(17)
        "\x35\x30\x24\x13\x17\x12\x25\x02\x04\x13\x17\x1b\x35\x1a\x19\x05\x13\x76",
        // "CFNumberCreate" / M(Rot) / S(207) / L(14)
        "\x12\x15\x1d\x44\x3c\x31\x34\x41\x12\x41\x34\x30\x43\x34\xcf\x8d",
        // "" / M(None) / S(0) / L(0)
        "\x54\x45\xbf\xaa\xcb\x52\x9d\x4a\x05\xa1\x24\xa5\x5b\x85\x12\x53\x59\x98\xe1\xb2\x5c\xb3\x3d\xe2\xa2\x2e\x24\x91\x2a\x4d\x00\x38",
        // "/System/Library/Keychains/SystemRootCertificates.keychain" / M(Xor1) / S(198) / L(57)
        "\xe9\x95\xbf\xb5\xb2\xa3\xab\xe9\x8a\xaf\xa4\xb4\xa7\xb4\xbf\xe9\x8d\xa3\xbf\xa5\xae\xa7\xaf\xa8\xb5\xe9\x95\xbf\xb5\xb2\xa3\xab\x94\xa9\xa9\xb2\x85\xa3\xb4\xb2\xaf\xa0\xaf\xa5\xa7\xb2\xa3\xb5\xe8\xad\xa3\xbf\xa5\xae\xa7\xaf\xa8\xc6\x01\xfc\x03\xdc\x46\x12\xcc\x80",
        // "CFReadStreamCreateWithFile" / M(Xor2) / S(242) / L(26)
        "\x92\x97\x83\xb4\xb0\xb5\x82\xa5\xa3\xb4\xb0\xbc\x92\xa3\xb4\xb0\xa5\xb4\x86\xb8\xa5\xb9\x97\xb8\xbd\xb4\xd1\x5c\x69\x2c\x18\x6d\xcd\xb1\x73",
        // "CFDataCreate" / M(Xor4) / S(232) / L(12)
        "\xc3\xc6\xc4\xe1\xf4\xe1\xc3\xf2\xe5\xe1\xf4\xe5\x80\x91\x2a\x39",
        // "EVP_DigestFinal" / M(Xor4) / S(79) / L(15)
        "\xb5\xa6\xa0\xaf\xb4\x99\x97\x95\x83\x84\xb6\x99\x9e\x91\x9c\xf0",
        // "" / M(None) / S(0) / L(0)
        "\x2d\xd9\x28\x72\xb5\x1b\x78\x23\x66\x07\x7f\x00\x3b\xc7\x9b\x8b\xc1\x92\x1e\x74\xa0\x4b\xba\x1b\x18\xe5\x82\x58\x9d\x81\xd2\xe2",
        // "X509_STORE_free" / M(Xor1) / S(248) / L(15)
        "\xa0\xcd\xc8\xc1\xa7\xab\xac\xb7\xaa\xbd\xa7\x9e\x8a\x9d\x9d\xf8",
        // "PKCS7_get0_signers" / M(Xor3) / S(161) / L(18)
        "\xe4\xff\xf7\xe7\x83\xeb\xd3\xd1\xc0\x84\xeb\xc7\xdd\xd3\xda\xd1\xc6\xc7\xb4",
        // "SecKeychainSearchCopyNext" / M(Xor3) / S(96) / L(25)
        "\xd1\xe7\xe1\xc9\xe7\xfb\xe1\xea\xe3\xeb\xec\xd1\xe7\xe3\xf0\xe1\xea\xc1\xed\xf2\xfb\xcc\xe7\xfa\xf6\x82\xfa\xd9\xc9\xf5\x65\xee\x41\xb0",
        // "CC_SHA1_Init" / M(Xor3) / S(180) / L(12)
        "\x87\x87\x9b\x97\x8c\x85\xf5\x9b\x8d\xaa\xad\xb0\xc4\xd1\x6e\xd4",
        // "SHA1_Update" / M(Xor2) / S(48) / L(11)
        "\x73\x68\x61\x11\x7f\x75\x50\x44\x41\x54\x45\x20\x73\x14\x48\x6d",
        // "sha1" / M(Xor3) / S(19) / L(4)
        "\x50\x4b\x42\x12\x23\x6b\x4d\xf9\xbf\xa5\x3f\xb1\x42\x6e\x75\xf6",
        // "kSecMatchSubjectContains" / M(Xor2) / S(84) / L(24)
        "\x1e\x26\x10\x16\x38\x14\x01\x16\x1d\x26\x00\x17\x1f\x10\x16\x01\x36\x1a\x1b\x01\x14\x1c\x1b\x06\x75\x3e\xb9\xc7\xe8\xe5\x23\x45\xc3",
        // "SecKeychainOpen" / M(Xor3) / S(230) / L(15)
        "\xa5\x93\x95\xbd\x93\x8f\x95\x9e\x97\x9f\x98\xb9\x86\x93\x98\xf6",
        // "ASN1_get_object" / M(Xor3) / S(121) / L(15)
        "\xc8\xda\xc7\xb8\xd6\xee\xec\xfd\xd6\xe6\xeb\xe3\xec\xea\xfd\x89",
        // "sel_registerName" / M(Xor2) / S(30) / L(16)
        "\x7c\x6a\x63\x50\x7d\x6a\x68\x66\x7c\x7b\x6a\x7d\x41\x6e\x62\x6a\x0f",
        // "kCFTypeDictionaryValueCallBacks" / M(Xor4) / S(81) / L(31)
        "\x4b\x63\x66\x74\x59\x50\x45\x64\x49\x43\x54\x49\x4f\x4e\x41\x52\x59\x76\x41\x4c\x55\x45\x63\x41\x4c\x4c\x62\x41\x43\x4b\x53\x20",
        // "CFDictionaryAddValue" / M(Xor1) / S(32) / L(20)
        "\x63\x66\x64\x49\x43\x54\x49\x4f\x4e\x41\x52\x59\x61\x44\x44\x76\x41\x4c\x55\x45\x20",
        // "2.0.2" / M(Xor1) / S(93) / L(5)
        "\x6f\x73\x6d\x73\x6f\x5d\xee\xfe\x7d\xf3\xc1\xa5\x79\xf4\xb6\x6b",
        // "" / M(None) / S(0) / L(0)
        "\x3a\x1d\x26\x5a\x4a\x4b\xb8\xce\xd6\x4e\x93\xe7\x13\xf1\x28\x87\x16\x3f\x0f\xd1\xb0\x7f\x66\x4b\x9e\x0a\x4c\x5a\xd1\x2d\x6b\x98",
        // "EVP_DigestInit" / M(Rot) / S(4) / L(14)
        "\x49\x5a\x54\x63\x48\x6d\x6b\x69\x77\x78\x4d\x72\x6d\x78\x04\x41",
        // "" / M(None) / S(0) / L(0)
        "\x30\x31\x6d\x53\xb4\xa9\x63\x3a\x7c\xdf\x64\xce\x9b\x3a\xb5\xcd\x46\x77\x0c\x43\xb0\xa4\x76\xa2\xec\xf4\xed\xf6\x97\x0f\x6b\x9c",
        // "Contents" / M(Rot) / S(190) / L(8)
        "\x01\x2d\x2c\x32\x23\x2c\x32\x31\xbe\x94\x20\x25\x92\x39\x18\xcc",
        // "SHA1_Final" / M(Xor1) / S(124) / L(10)
        "\x2f\x34\x3d\x4d\x23\x3a\x15\x12\x1d\x10\x7c\xaa\x34\xb6\x18\x03",
        // "CFStringCompare" / M(Xor2) / S(178) / L(15)
        "\xe1\xe4\xf1\xd6\xd0\xcb\xcc\xc5\xe1\xcd\xcf\xd2\xc3\xd0\xc7\xa2",
        // "kSecMatchSearchList" / M(Rot) / S(80) / L(19)
        "\xbb\xa3\xb5\xb3\x9d\xb1\xc4\xb3\xb8\xa3\xb5\xb1\xc2\xb3\xb8\x9c\xb9\xc3\xc4\x50",
        // "61:1e:5b:66:2c:59:3a:08:ff:58:d1:4a:e2:24:52:d1:98:df:6c:60" / M(Xor2) / S(193) / L(59)
        "\xb3\xb4\xbf\xb4\xe0\xbf\xb0\xe7\xbf\xb3\xb3\xbf\xb7\xe6\xbf\xb0\xbc\xbf\xb6\xe4\xbf\xb5\xbd\xbf\xe3\xe3\xbf\xb0\xbd\xbf\xe1\xb4\xbf\xb1\xe4\xbf\xe0\xb7\xbf\xb7\xb1\xbf\xb0\xb7\xbf\xe1\xb4\xbf\xbc\xbd\xbf\xe1\xe3\xbf\xb3\xe6\xbf\xb3\xb5\x85\x50\xaa\x59\x63\x64\x94\xcf\x7d",
        // "" / M(None) / S(0) / L(0)
        "\xd1\xb4\x83\x44\x56\xed\xd1\x48\xf8\x98\xc4\x6c\xce\xc1\xd4\xfc\x1d\x57\x6c\xda\x95\x5c\x2d\x93\x5f\xb8\xd0\x6f\x53\x75\x68\x34",
        // "X509_STORE_new" / M(Xor4) / S(190) / L(14)
        "\xb8\xd5\xd0\xd9\xbf\xb3\xb4\xaf\xb2\xa5\xbf\x8e\x85\x97\xe0\xfe",
        // "start" / M(Rot) / S(28) / L(5)
        "\x8f\x90\x7d\x8e\x90\x1c\xdd\x47\xcd\xc4\x56\xf8\x32\xa0\x0e\x06",
        // "%02X" / M(Xor4) / S(228) / L(4)
        "\x65\x70\x72\x18\x40\x9a\x78\x78\xf2\x4e\x9a\xb1\x8b\x91\xb9\x37",
        // "" / M(None) / S(0) / L(0)
        "\xe7\xcc\x0a\x2e\x6b\xf3\xf9\x4a\x59\xb5\xd6\xd6\x0e\x1a\x74\x59\x95\x34\x26\x27\xbb\xf5\x34\x9d\xcd\xb6\x39\x27\x81\xde\x4f\xae",
        // "X509_free" / M(Xor1) / S(230) / L(9)
        "\xbe\xd3\xd6\xdf\xb9\x80\x94\x83\x83\xe6\xaf\x86\x6c\x0e\xf5\x31",
        // "" / M(None) / S(0) / L(0)
        "\x3e\x0f\x96\xf8\xb2\xb9\x87\xc4\xc1\x37\xb4\x6e\xa0\x37\x5f\xc2\xeb\x19\x35\x2c\xf4\x89\xe4\x38\x8e\xfa\x98\x72\x40\x40\xc2\x95",
        // "PKCS7_get0_signers" / M(Xor3) / S(16) / L(18)
        "\x73\x68\x60\x70\x14\x7c\x44\x46\x57\x13\x7c\x50\x4a\x44\x4d\x46\x51\x50\x23",
        // "kSecMatchSearchList" / M(Xor1) / S(101) / L(19)
        "\x0e\x36\x00\x06\x28\x04\x11\x06\x0d\x36\x00\x04\x17\x06\x0d\x29\x0c\x16\x11\x65",
        // "Contents/_MASReceipt" / M(Rot) / S(106) / L(20)
        "\xad\xd9\xd8\xde\xcf\xd8\xde\xdd\x99\xc9\xb7\xab\xbd\xbc\xcf\xcd\xcf\xd3\xda\xde\x6a",
        // "" / M(None) / S(0) / L(0)
        "\xf3\x9f\x21\xa0\x7a\x3c\xf9\xd3\x49\x0c\xf1\x8f\x01\xaa\xb8\x94\x28\x3f\x8e\x0e\x9d\x0f\xeb\xa9\x1b\xf7\xd6\x12\x3e\x4b\xca\xee",
        // "RTLD_MAIN_ONLY" / M(Xor4) / S(241) / L(14)
        "\x42\x44\x5c\x54\x4f\x5d\x51\x59\x5e\x4f\x5f\x5e\x5c\x49\x10\x12",
        // "PKCS7_free" / M(Xor3) / S(92) / L(10)
        "\x3c\x27\x2f\x3f\x5b\x33\x0a\x1e\x09\x09\x6c\xf3\x35\xbf\xac\xc3",
        // "EVP_DigestUpdate" / M(Xor3) / S(207) / L(16)
        "\xa5\xb6\xb0\xbf\xa4\x89\x87\x85\x93\x94\xb5\x90\x84\x81\x94\x85\xe0",
        // "IOServiceGetMatchingServices" / M(Xor4) / S(224) / L(28)
        "\x29\x2f\x33\x05\x12\x16\x09\x03\x05\x27\x05\x14\x2d\x01\x14\x03\x08\x09\x0e\x07\x33\x05\x12\x16\x09\x03\x05\x13\x60\xa1\xd3\x78\xc3\x52\xa7\xa6\xd3",
        // "IOBSDNameMatching" / M(Rot) / S(163) / L(17)
        "\xec\xf2\xe5\xf6\xe7\xf1\x04\x10\x08\xf0\x04\x17\x06\x0b\x0c\x11\x0a\xa3",
        // "_MASReceipt/receipt" / M(Rot) / S(132) / L(19)
        "\xe3\xd1\xc5\xd7\xd6\xe9\xe7\xe9\xed\xf4\xf8\xb3\xf6\xe9\xe7\xe9\xed\xf4\xf8\x84",
        // "61:1E:5B:66:2C:59:3A:08:FF:58:D1:4A:E2:24:52:D1:98:DF:6C:60" / M(Xor4) / S(157) / L(59)
        "\x82\x85\x8e\x85\xf1\x8e\x81\xf6\x8e\x82\x82\x8e\x86\xf7\x8e\x81\x8d\x8e\x87\xf5\x8e\x84\x8c\x8e\xf2\xf2\x8e\x81\x8c\x8e\xf0\x85\x8e\x80\xf5\x8e\xf1\x86\x8e\x86\x80\x8e\x81\x86\x8e\xf0\x85\x8e\x8d\x8c\x8e\xf0\xf2\x8e\x82\xf7\x8e\x82\x84\xb4\x60\x57\xb3\x43\x30\x62\xb4\x59",
        // "" / M(None) / S(0) / L(0)
        "\xee\xa7\x7d\x10\x36\xb4\x09\x57\xf1\xf6\x9d\xe5\xec\xd5\x4d\xe5\xdf\xa1\x9c\x2e\x01\x76\xca\x05\xb0\x7a\x23\x69\x06\x44\xca\xf1",
        // "IOObjectRelease" / M(Xor1) / S(83) / L(15)
        "\x1a\x1c\x1c\x31\x39\x36\x30\x27\x01\x36\x3f\x36\x32\x20\x36\x53",
        // "" / M(None) / S(0) / L(0)
        "\x1a\xfa\xf2\x1b\xbe\xe3\x47\x43\x60\xed\x72\x6e\x0d\x74\xde\x16\x46\x5c\xef\xd5\x45\x86\x24\xfc\x8c\x82\x1e\x1b\xf6\x25\x10\xae",
        // "X509_NAME_get_text_by_NID" / M(Xor2) / S(253) / L(25)
        "\x87\xea\xef\xe6\x80\x91\x9e\x92\x9a\x80\xb8\xba\xab\x80\xab\xba\xa7\xab\x80\xbd\xa6\x80\x91\x96\x9b\xdf\x87\x0e\x17\x58\x0c\x05\xa4\xdc",
        // "CFDataGetBytePtr" / M(Rot) / S(239) / L(16)
        "\x32\x35\x33\x50\x63\x50\x36\x54\x63\x31\x68\x63\x54\x3f\x63\x61\xef",
        // "sel_registerName" / M(Xor3) / S(80) / L(16)
        "\x12\x04\x0d\x3e\x13\x04\x06\x08\x12\x15\x04\x13\x2f\x00\x0c\x04\x61",
        // "ASN1_OBJECT_free" / M(Xor2) / S(115) / L(16)
        "\x23\x31\x2c\x53\x3d\x2d\x20\x28\x27\x21\x36\x3d\x04\x10\x07\x07\x62",
        // "IORegistryEntryGetParentEntry" / M(Xor4) / S(45) / L(29)
        "\xe7\xe1\xfc\xcb\xc9\xc7\xdd\xda\xdc\xd7\xeb\xc0\xda\xdc\xd7\xe9\xcb\xda\xfe\xcf\xdc\xcb\xc0\xda\xeb\xc0\xda\xdc\xd7\xae\x95\x67\xc4\x4b\xee\x00\x0b\xa2",
        // "kCFTypeDictionaryValueCallBacks" / M(Xor4) / S(132) / L(31)
        "\xeb\xc3\xc6\xd4\xf9\xf0\xe5\xc4\xe9\xe3\xf4\xe9\xef\xee\xe1\xf2\xf9\xd6\xe1\xec\xf5\xe5\xc3\xe1\xec\xec\xc2\xe1\xe3\xeb\xf3\x80",
        // "" / M(None) / S(0) / L(0)
        "\x96\xaf\x73\x7d\xc7\xd8\x06\xc8\x5b\x3f\x3f\x2c\x31\x44\xe1\xb3\xed\xa0\x4a\xea\x4d\xa4\xe0\x6c\x63\x42\xa8\x40\x1c\x6e\x3c\x97",
        // "" / M(None) / S(0) / L(0)
        "\x92\x32\x2f\xe1\x43\x9a\x35\x92\x6e\x4e\x8a\x5a\x38\x7f\x1b\x1f\x1e\xdb\x73\xb6\x09\xa1\x71\xff\x1d\x40\x4d\xe5\x95\x6c\x93\xc8",
        // "OBJ_txt2obj" / M(Rot) / S(126) / L(11)
        "\xcd\xc0\xc8\xdd\xf2\xf6\xf2\xb0\xed\xe0\xe8\x7e\xa2\x31\xb6\x8c",
        // "" / M(None) / S(0) / L(0)
        "\xd0\xf0\xa1\xd7\x0b\x61\x97\xcd\x81\x6f\x77\x97\x9b\x3f\xfb\x64\x25\x67\xf2\x36\xd9\xd0\x04\xc9\x62\x3f\x3f\x6b\x8e\xd3\xfa\xa1",
        // "objc_msgSend" / M(Xor3) / S(243) / L(12)
        "\x6c\x61\x69\x60\x5c\x6e\x70\x64\x50\x66\x6d\x67\x03\x52\x09\x80",
        // "CFBundleUnloadExecutable" / M(Xor4) / S(159) / L(24)
        "\x3c\x39\x3d\x0a\x11\x1b\x13\x1a\x2a\x11\x13\x10\x1e\x1b\x3a\x07\x1a\x1c\x0a\x0b\x1e\x1d\x13\x1a\x7f\x8c\x99\xcb\xfd\xa0\xff\xb8\x60",
        // "SecKeychainSearchCreateFromAttributes" / M(Xor4) / S(21) / L(37)
        "\x4d\x7b\x7d\x55\x7b\x67\x7d\x76\x7f\x77\x70\x4d\x7b\x7f\x6c\x7d\x76\x5d\x6c\x7b\x7f\x6a\x7b\x58\x6c\x71\x73\x5f\x6a\x6a\x6c\x77\x7c\x6b\x6a\x7b\x6d\x1e",
        // "" / M(None) / S(0) / L(0)
        "\xcd\x1b\xe2\xa0\xe4\xdc\x24\xba\xb6\x0b\xc3\xd3\xc7\xa0\xfa\x54\xde\x0e\xa6\x29\xdd\xbf\xcd\x2f\x23\x86\xf4\x6a\x7d\xbb\xa9\xc7",
        // "" / M(None) / S(0) / L(0)
        "\xb8\x6c\xd4\xc7\x77\x5a\x69\xd0\x89\xe4\x90\xb0\xf2\x45\xfb\x32\x1c\xb9\x76\x23\x56\x3f\xf8\x05\x63\x76\xcc\x1c\x64\xc9\x50\xe5",
        // "" / M(None) / S(0) / L(0)
        "\x82\xde\x43\x17\xad\xb5\x58\xab\xf1\xec\xb2\xba\x68\x8e\x37\x1d\x23\x7e\x9e\x60\x56\xdf\x76\xd2\xe9\xf5\x84\x60\xad\xb3\x78\xdd",
        // "CFURLCreateWithFileSystemPathRelativeToBase" / M(Rot) / S(85) / L(43)
        "\x98\x9b\xaa\xa7\xa1\x98\xc7\xba\xb6\xc9\xba\xac\xbe\xc9\xbd\x9b\xbe\xc1\xba\xa8\xce\xc8\xc9\xba\xc2\xa5\xb6\xc9\xbd\xa7\xba\xc1\xb6\xc9\xbe\xcb\xba\xa9\xc4\x97\xb6\xc8\xba\x55\x43\xc0\x01\x43\x3b\x58\x75\x46",
        // "glob_b" / M(Xor2) / S(104) / L(6)
        "\x1f\x14\x17\x1a\x27\x1a\x78\x53\xf9\x6c\x00\x28\x18\x0a\x5d\xde",
        // "" / M(None) / S(0) / L(0)
        "\xf2\xa3\xfe\x38\xdc\x6d\xfb\xff\x95\xf8\x85\xf5\xe9\x18\x8f\x90\x8c\xd7\x97\x03\x1c\x9c\x6d\xa4\xeb\x9f\x18\x75\xd9\xea\xaf\xf2",
        // "" / M(None) / S(0) / L(0)
        "\x56\xb9\x35\x72\xa4\x1e\x8e\x92\xf2\xc6\xc9\x52\xc2\xda\x65\x45\x09\xe4\x48\x38\xda\x8e\x2d\xff\x4c\x44\x03\x69\xc9\xdc\x70\x02",
        // "PKCS7_free" / M(Rot) / S(98) / L(10)
        "\xb2\xad\xa5\xb5\x99\xc1\xc8\xd4\xc7\xc7\x62\x64\x28\xb1\x9c\x1f",
        // "1.2.840.113635.100.6.11.1" / M(Rot) / S(86) / L(25)
        "\x87\x84\x88\x84\x8e\x8a\x86\x84\x87\x87\x89\x8c\x89\x8b\x84\x87\x86\x86\x84\x8c\x84\x87\x87\x84\x87\x56\x08\x28\xba\x9e\xcf\x2b\x59\xea",
        // "CC_SHA1" / M(Xor3) / S(103) / L(7)
        "\x34\x34\x28\x24\x3f\x36\x46\x77\xff\x62\x9a\x01\x33\x5c\x34\x92",
        // "" / M(None) / S(0) / L(0)
        "\x06\xbe\x2c\x96\x55\xb4\x2b\x46\xcd\xb2\xbb\xe4\xc1\xdf\x76\xec\x53\xd4\x71\x6f\x21\xd3\x82\x53\xb3\x76\x46\x0d\xc9\xd9\x67\xab",
        // "BIO_s_mem" / M(Xor1) / S(104) / L(9)
        "\x2a\x21\x27\x37\x1b\x37\x05\x0d\x05\x68\xe6\xb7\xdc\x20\x56\x74",
        // "en0" / M(Xor4) / S(56) / L(3)
        "\xe5\xee\xb0\x80\x36\x58\xad\x7b\xd6\xcf\xce\x58\xdb\x90\x64\xb6",
        // "PKCS7_verify" / M(Xor1) / S(48) / L(12)
        "\x60\x7b\x73\x63\x07\x6f\x46\x55\x42\x59\x56\x49\x30\xc2\x1b\xec",
        // "X509_STORE_new" / M(Xor4) / S(109) / L(14)
        "\x88\xe5\xe0\xe9\x8f\x83\x84\x9f\x82\x95\x8f\xbe\xb5\xa7\xd0\xfb",
        // "objc_getClass" / M(Xor4) / S(158) / L(13)
        "\x8f\x82\x8a\x83\xbf\x87\x85\x94\xa3\x8c\x81\x93\x93\xe0\x49\x25",
        // "setjmp" / M(Xor4) / S(95) / L(6)
        "\x83\x95\x84\x9a\x9d\x80\xf0\xed\x79\x79\x5b\x74\x74\x58\x15\x68",
        // "CFArrayGetValueAtIndex" / M(Xor4) / S(191) / L(22)
        "\x6a\x6f\x68\x5b\x5b\x48\x50\x6e\x4c\x5d\x7f\x48\x45\x5c\x4c\x68\x5d\x60\x47\x4d\x4c\x51\x29",
        // "CFDictionaryAddValue" / M(Rot) / S(9) / L(20)
        "\x4c\x4f\x4d\x72\x6c\x7d\x72\x78\x77\x6a\x7b\x82\x4a\x6d\x6d\x5f\x6a\x75\x7e\x6e\x09",
        // "receipt" / M(Xor1) / S(25) / L(7)
        "\x6b\x7c\x7a\x7c\x70\x69\x6d\x19\xfb\x40\xf2\x5d\x3f\xaf\x07\x12",
        // "CFBundleShortVersionString" / M(Xor3) / S(89) / L(26)
        "\x3f\x3a\x3e\x09\x12\x18\x10\x19\x2f\x14\x13\x0e\x08\x2a\x19\x0e\x0f\x15\x13\x12\x2f\x08\x0e\x15\x12\x1b\x7c\xf3\xea\x6d\x0d\x31\xd9\x25\x9e",
        // "Contents" / M(Xor2) / S(78) / L(8)
        "\x1d\x31\x30\x2a\x3b\x30\x2a\x2d\x5e\x5e\xaf\xd2\x54\x99\xe5\x70",
        // "CFURLCreateFromFileSystemRepresentation" / M(Xor4) / S(113) / L(39)
        "\x73\x76\x65\x62\x7c\x73\x42\x55\x51\x44\x55\x76\x42\x5f\x5d\x76\x59\x5c\x55\x63\x49\x43\x44\x55\x5d\x62\x55\x40\x42\x55\x43\x55\x5e\x44\x51\x44\x59\x5f\x5e\x30\xd0\x87\x09\x88\x93\x11\xb8\x74",
        // "" / M(None) / S(0) / L(0)
        "\xf9\x16\x96\xde\x18\x86\xce\x1d\x91\x73\xc6\x6b\x6c\x5a\x7d\xf8\x90\x8c\x23\xbb\x13\x97\x9b\x5a\xc4\x16\x00\x77\x9b\xa4\x78\xb0",
        // "CFURLCreateCopyAppendingPathComponent" / M(Rot) / S(179) / L(37)
        "\xf6\xf9\x08\x05\xff\xf6\x25\x18\x14\x27\x18\xf6\x22\x23\x2c\xf4\x23\x23\x18\x21\x17\x1c\x21\x1a\x03\x14\x27\x1b\xf6\x22\x20\x23\x22\x21\x18\x21\x27\xb3",
        // "sk_value" / M(Xor1) / S(25) / L(8)
        "\x6a\x72\x46\x6f\x78\x75\x6c\x7c\x19\x21\x8d\x18\x38\x4f\x17\x8a",
        // "CFRelease" / M(Xor3) / S(156) / L(9)
        "\xef\xea\xfe\xc9\xc0\xc9\xcd\xdf\xc9\xac\xb6\x5d\x76\x76\x79\xf7",
        // "CFDataAppendBytes" / M(Xor2) / S(168) / L(17)
        "\xf9\xfc\xfe\xdb\xce\xdb\xfb\xca\xca\xdf\xd4\xde\xf8\xc3\xce\xdf\xc9\xba",
        // "sk_value" / M(Xor3) / S(70) / L(8)
        "\x25\x3d\x09\x20\x37\x3a\x23\x33\x56\x5f\x34\x8b\xf1\xb5\x03\x6b",
        // "CFBundleGetValueForInfoDictionaryKey" / M(Rot) / S(91) / L(36)
        "\x9e\xa1\x9d\xd0\xc9\xbf\xc7\xc0\xa2\xc0\xcf\xb1\xbc\xc7\xd0\xc0\xa1\xca\xcd\xa4\xc9\xc1\xca\x9f\xc4\xbe\xcf\xc4\xca\xc9\xbc\xcd\xd4\xa6\xc0\xd4\x5b",
        // "" / M(None) / S(0) / L(0)
        "\x21\x48\x1d\x56\x72\x1c\x6e\x5a\x43\xe4\x4b\x66\xbf\xea\xb8\x58\xb1\x30\x0d\x52\x3d\xc2\x33\x48\xf4\x4e\xc0\xc2\x13\xb2\xae\x36",
        // "exit" / M(Xor1) / S(186) / L(4)
        "\xdf\xc2\xd3\xce\xba\x1e\xdb\x08\x0a\xfc\xd2\xdc\x44\x72\x4d\x22",
        // "CFDictionarySetValue" / M(Xor1) / S(219) / L(20)
        "\x98\x9d\x9f\xb2\xb8\xaf\xb2\xb4\xb5\xba\xa9\xa2\x88\xbe\xaf\x8d\xba\xb7\xae\xbe\xdb",
        // "" / M(None) / S(0) / L(0)
        "\x30\xe1\x1f\x06\x9a\x93\x40\x38\xda\xf3\xad\xc1\x59\xd8\x27\x7c\x21\xb1\xb6\xd9\x91\xc5\x01\xea\x17\x3c\x36\x6c\x81\xdb\x1a\x0b",
        // "exit" / M(Rot) / S(18) / L(4)
        "\x77\x8a\x7b\x86\x12\x37\x05\x43\x76\x50\xec\x7b\x4f\xd2\x1c\xc6",
        // "IOMasterPort" / M(Xor3) / S(233) / L(12)
        "\xb0\xb6\xb4\x98\x8a\x8d\x9c\x8b\xa9\x96\x8b\x8d\xf9\xde\xd9\x76",
        // "CFNumberCreate" / M(Xor3) / S(34) / L(14)
        "\x71\x74\x7c\x47\x5f\x50\x57\x40\x71\x40\x57\x53\x46\x57\x32\x93",
        // "" / M(None) / S(0) / L(0)
        "\x09\x58\xb9\xfe\x90\xe0\x31\x35\x0e\x5c\x9b\x64\x31\x6e\x47\x0a\x36\x84\x8c\xa7\x31\xd3\x1b\x24\xd8\xc7\x4d\x9c\x02\x60\x06\xa5",
        // "/System/Library/Frameworks/IOKit.framework/IOKit" / M(Rot) / S(233) / L(48)
        "\x18\x3c\x62\x5c\x5d\x4e\x56\x18\x35\x52\x4b\x5b\x4a\x5b\x62\x18\x2f\x5b\x4a\x56\x4e\x60\x58\x5b\x54\x5c\x18\x32\x38\x34\x52\x5d\x17\x4f\x5b\x4a\x56\x4e\x60\x58\x5b\x54\x18\x32\x38\x34\x52\x5d\xe9",
        // "%02X" / M(Xor2) / S(87) / L(4)
        "\x62\x77\x75\x1f\x47\x83\xea\x6b\x45\x11\xd3\x62\xff\x88\xeb\x9b",
        // "dlsym" / M(Xor3) / S(1) / L(5)
        "\x75\x7d\x62\x68\x7c\x11\x50\x6d\x79\x30\xb0\x22\x0e\xf8\xa5\x22",
        // "SecKeychainOpen" / M(Xor3) / S(148) / L(15)
        "\xf7\xc1\xc7\xef\xc1\xdd\xc7\xcc\xc5\xcd\xca\xeb\xd4\xc1\xca\xa4",
        // "start" / M(Xor3) / S(126) / L(5)
        "\xfd\xfa\xef\xfc\xfa\x8e\x24\x0b\x81\xd1\xc7\x09\x24\x52\xa3\x6d",
        // "/usr/lib/libobjc.dylib" / M(Xor2) / S(193) / L(22)
        "\xf9\xa3\xa5\xa4\xf9\xba\xbf\xb4\xf9\xba\xbf\xb4\xb9\xb4\xbc\xb5\xf8\xb2\xaf\xba\xbf\xb4\xd6",
        // "CFStringCreateWithBytes" / M(Xor2) / S(28) / L(23)
        "\x7f\x7a\x6f\x48\x4e\x55\x52\x5b\x7f\x4e\x59\x5d\x48\x59\x6b\x55\x48\x54\x7e\x45\x48\x59\x4f\x3c\xba\x34\xb2\xe7\x38\x6f\x69\xc1",
        // "CFBundleVersion" / M(Xor1) / S(9) / L(15)
        "\x4a\x4f\x4b\x7c\x67\x6d\x65\x6c\x5f\x6c\x7b\x7a\x60\x66\x67\x09",
        // "CFReadStreamClose" / M(Xor1) / S(204) / L(17)
        "\x8f\x8a\x9e\xa9\xad\xa8\x9f\xb8\xbe\xa9\xad\xa1\x8f\xa0\xa3\xbf\xa9\xcc",
        // "dlopen" / M(Xor1) / S(87) / L(6)
        "\x33\x3b\x38\x27\x32\x39\x57\x85\xef\x6c\x9c\xbd\xf0\x86\x0c\x91",
        // "" / M(None) / S(0) / L(0)
        "\xe4\x50\x26\xf5\xa7\xb9\x34\x17\x7a\x32\x4d\xe9\x94\x2e\xce\xf2\x63\x6f\x1f\xe5\xd9\xba\x04\x64\x73\x68\xd8\x9b\x38\x77\x00\xf7",
        // "" / M(None) / S(0) / L(0)
        "\xe1\x69\x16\x47\xd9\x18\x3b\x44\x20\x1d\x88\x4c\xf9\x61\x20\x73\x53\xe4\xc4\x66\x27\x8e\xa4\xed\x6f\xbc\xde\x5f\xdf\x1c\xdb\x36",
    };
    
    // Table for storing pointers
    static void *RV_Pointers[565] = {
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) SHA1_Update),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) CFStringCreateWithBytes),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) sk_value),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) BIO_new),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) EVP_DigestInit),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) CFStringCreateWithBytes),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) EVP_DigestUpdate),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) OpenSSL_add_all_digests),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) EVP_MD_CTX_init),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) BIO_write),
        ((void *) NULL),
        ((void *) EVP_DigestInit),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) globfree),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) X509_STORE_add_cert),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) EVP_MD_CTX_init),
        ((void *) NULL),
        ((void *) sk_num),
        ((void *) NULL),
        ((void *) BIO_s_mem),
        ((void *) NULL),
        ((void *) CFStringCreateWithCString),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) OBJ_txt2obj),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) SHA1_Final),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) SHA1),
        ((void *) BIO_free),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) PKCS7_verify),
        ((void *) EVP_DigestUpdate),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) glob),
        ((void *) BIO_write),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) strncmp),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) X509_STORE_add_cert),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) dlopen),
        ((void *) glob),
        ((void *) NULL),
        ((void *) d2i_X509_bio),
        ((void *) ASN1_OBJECT_free),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) d2i_PKCS7_bio),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) PKCS7_free),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) SHA1_Update),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) EVP_MD_CTX_init),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) SHA1_Init),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) X509_get_ext_by_OBJ),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) SHA1),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) ASN1_get_object),
        ((void *) OpenSSL_add_all_digests),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) X509_STORE_free),
        ((void *) NULL),
        ((void *) globfree),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) X509_free),
        ((void *) NULL),
        ((void *) X509_STORE_free),
        ((void *) CFStringCreateWithCString),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) BIO_free),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) X509_STORE_add_cert),
        ((void *) NULL),
        ((void *) X509_get_ext_by_OBJ),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) BIO_new),
        ((void *) NULL),
        ((void *) X509_STORE_new),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) ASN1_OBJECT_free),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) strlen),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) EVP_get_digestbyname),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) dlopen),
        ((void *) SHA1),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) X509_NAME_get_text_by_NID),
        ((void *) RTLD_MAIN_ONLY),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) sk_free),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) SHA1_Init),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) strlen),
        ((void *) NULL),
        ((void *) BIO_s_mem),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) X509_NAME_get_text_by_NID),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) RTLD_MAIN_ONLY),
        ((void *) strncmp),
        ((void *) PKCS7_verify),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) SHA1_Final),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) EVP_DigestFinal),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) PKCS7_get0_signers),
        ((void *) sk_num),
        ((void *) NULL),
        ((void *) X509_digest),
        ((void *) EVP_get_digestbyname),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) BIO_new),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) OBJ_txt2obj),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) BIO_write),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) globfree),
        ((void *) X509_digest),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) d2i_PKCS7_bio),
        ((void *) BIO_free),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) SHA1_Init),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) dlsym),
        ((void *) ASN1_get_object),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) glob_b),
        ((void *) EVP_DigestFinal),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) d2i_X509_bio),
        ((void *) strncmp),
        ((void *) NULL),
        ((void *) OpenSSL_add_all_digests),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) dlsym),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) X509_digest),
        ((void *) glob_b),
        ((void *) sk_free),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) sk_num),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) d2i_X509_bio),
        ((void *) NULL),
        ((void *) strlen),
        ((void *) NULL),
        ((void *) glob),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) d2i_PKCS7_bio),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) X509_free),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) EVP_get_digestbyname),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) sk_free),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) CFStringCreateWithCString),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) X509_get_ext_by_OBJ),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) EVP_DigestFinal),
        ((void *) NULL),
        ((void *) X509_STORE_free),
        ((void *) PKCS7_get0_signers),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) SHA1_Update),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) ASN1_get_object),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) EVP_DigestInit),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) SHA1_Final),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) X509_STORE_new),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) X509_free),
        ((void *) NULL),
        ((void *) PKCS7_get0_signers),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) RTLD_MAIN_ONLY),
        ((void *) PKCS7_free),
        ((void *) EVP_DigestUpdate),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) X509_NAME_get_text_by_NID),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) ASN1_OBJECT_free),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) OBJ_txt2obj),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) glob_b),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) PKCS7_free),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) BIO_s_mem),
        ((void *) NULL),
        ((void *) PKCS7_verify),
        ((void *) X509_STORE_new),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) sk_value),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) sk_value),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) dlsym),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) CFStringCreateWithBytes),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) dlopen),
        ((void *) NULL),
        ((void *) NULL),
    };
    
    // Push a new diagnostic context
#pragma clang diagnostic push
    // When getting primary MAC address, an effectless alignment requirement increase is reported
#pragma clang diagnostic ignored "-Wcast-align"
    // In RELEASE mode, static variable are inlined but their declaration are not removed
#pragma clang diagnostic ignored "-Wunused"
    // In DEBUG mode, static variable are not inlined
#pragma clang diagnostic ignored "-Wused-but-marked-unused"
    
    // Global variables
    static int RV_ECALNOSQDWYS __unused;
    static int RV_MHSNAFCFYPEH __unused;
    static int RV_KGEKHUECRWVN __unused;
    static int RV_IMKOFEPLMGLM __unused;
    static int RV_RVTAEYGBLEPA __unused;
    static int RV_GGGORTCBVLBO __unused;
    static int RV_NHLYKFAIUZUG __unused;
    static int RV_OYWCECKGRYMQ __unused;
    
    
    // The long jump buffer
    static jmp_buf RV_JumpBuf __unused;
    
#define RV_ASN1_get_object_010A0174 ((__RV_ASN1_get_object) RV_LookupFunction015(RV_ObfuscationFunction005, 266, 122, 16, RV_ObfuscationFunction003, 372, 139, 16))
#define RV_ASN1_get_object_010A01D4 ((__RV_ASN1_get_object) RV_LookupFunction015(RV_ObfuscationFunction005, 266, 122, 16, RV_ObfuscationFunction009, 468, 121, 16))
#define RV_ASN1_OBJECT_free_010A00B1 ((__RV_ASN1_OBJECT_free) RV_LookupFunction015(RV_ObfuscationFunction005, 266, 122, 16, RV_ObfuscationFunction007, 177, 119, 17))
#define RV_BIO_free_012100E6 ((__RV_BIO_free) RV_LookupFunction015(RV_ObfuscationFunction004, 289, 118, 16, RV_ObfuscationFunction00C, 230, 29, 16))
#define RV_BIO_free_01EC007B ((__RV_BIO_free) RV_LookupFunction015(RV_ObfuscationFunction00C, 492, 241, 16, RV_ObfuscationFunction008, 123, 177, 16))
#define RV_BIO_free_01EC0169 ((__RV_BIO_free) RV_LookupFunction015(RV_ObfuscationFunction00C, 492, 241, 16, RV_ObfuscationFunction009, 361, 158, 16))
#define RV_BIO_new_010A0135 ((__RV_BIO_new) RV_LookupFunction015(RV_ObfuscationFunction005, 266, 122, 16, RV_ObfuscationFunction00A, 309, 24, 16))
#define RV_BIO_new_01210024 ((__RV_BIO_new) RV_LookupFunction015(RV_ObfuscationFunction004, 289, 118, 16, RV_ObfuscationFunction003, 36, 55, 16))
#define RV_BIO_new_01210135 ((__RV_BIO_new) RV_LookupFunction015(RV_ObfuscationFunction004, 289, 118, 16, RV_ObfuscationFunction00A, 309, 24, 16))
#define RV_BIO_s_mem_010A0115 ((__RV_BIO_s_mem) RV_LookupFunction015(RV_ObfuscationFunction005, 266, 122, 16, RV_ObfuscationFunction00A, 277, 71, 16))
#define RV_BIO_s_mem_01EC020E ((__RV_BIO_s_mem) RV_LookupFunction015(RV_ObfuscationFunction00C, 492, 241, 16, RV_ObfuscationFunction005, 526, 104, 16))
#define RV_BIO_write_0121008C ((__RV_BIO_write) RV_LookupFunction015(RV_ObfuscationFunction004, 289, 118, 16, RV_ObfuscationFunction00B, 140, 21, 16))
#define RV_BIO_write_01EC0047 ((__RV_BIO_write) RV_LookupFunction015(RV_ObfuscationFunction00C, 492, 241, 16, RV_ObfuscationFunction009, 71, 240, 16))
#define RV_BIO_write_01EC008C ((__RV_BIO_write) RV_LookupFunction015(RV_ObfuscationFunction00C, 492, 241, 16, RV_ObfuscationFunction00B, 140, 21, 16))
#define RV_CC_SHA1_Init_018401CF ((__RV_CC_SHA1_Init) RV_LookupFunction015(RV_ObfuscationFunction00C, 388, 37, 33, RV_ObfuscationFunction00A, 463, 180, 16))
#define RV_CFArrayAppendValue_0003005E ((__RV_CFArrayAppendValue) RV_LookupFunction015(RV_ObfuscationFunction003, 3, 214, 67, RV_ObfuscationFunction005, 94, 123, 19))
#define RV_CFArrayAppendValue_0028005E ((__RV_CFArrayAppendValue) RV_LookupFunction015(RV_ObfuscationFunction00B, 40, 237, 67, RV_ObfuscationFunction005, 94, 123, 19))
#define RV_CFArrayAppendValue_002800D1 ((__RV_CFArrayAppendValue) RV_LookupFunction015(RV_ObfuscationFunction00B, 40, 237, 67, RV_ObfuscationFunction003, 209, 154, 19))
#define RV_CFArrayCreateMutable_000300D0 ((__RV_CFArrayCreateMutable) RV_LookupFunction015(RV_ObfuscationFunction003, 3, 214, 67, RV_ObfuscationFunction003, 208, 248, 21))
#define RV_CFArrayCreateMutable_002800F5 ((__RV_CFArrayCreateMutable) RV_LookupFunction015(RV_ObfuscationFunction00B, 40, 237, 67, RV_ObfuscationFunction003, 245, 92, 21))
#define RV_CFArrayGetValueAtIndex_002800AF ((__RV_CFArrayGetValueAtIndex) RV_LookupFunction015(RV_ObfuscationFunction00B, 40, 237, 67, RV_ObfuscationFunction009, 175, 227, 23))
#define RV_CFArrayGetValueAtIndex_005C0214 ((__RV_CFArrayGetValueAtIndex) RV_LookupFunction015(RV_ObfuscationFunction004, 92, 213, 67, RV_ObfuscationFunction00C, 532, 191, 23))
#define RV_CFBundleGetMainBundle_00280189 ((__RV_CFBundleGetMainBundle) RV_LookupFunction015(RV_ObfuscationFunction00B, 40, 237, 67, RV_ObfuscationFunction00B, 393, 24, 22))
#define RV_CFBundleUnloadExecutable_005C0201 ((__RV_CFBundleUnloadExecutable) RV_LookupFunction015(RV_ObfuscationFunction004, 92, 213, 67, RV_ObfuscationFunction00B, 513, 159, 33))
#define RV_CFDataAppendBytes_0028001D ((__RV_CFDataAppendBytes) RV_LookupFunction015(RV_ObfuscationFunction00B, 40, 237, 67, RV_ObfuscationFunction006, 29, 37, 18))
#define RV_CFDataCreate_002801C9 ((__RV_CFDataCreate) RV_LookupFunction015(RV_ObfuscationFunction00B, 40, 237, 67, RV_ObfuscationFunction00B, 457, 232, 16))
#define RV_CFDataCreateMutable_00030102 ((__RV_CFDataCreateMutable) RV_LookupFunction015(RV_ObfuscationFunction003, 3, 214, 67, RV_ObfuscationFunction00B, 258, 135, 20))
#define RV_CFDataCreateMutable_00280078 ((__RV_CFDataCreateMutable) RV_LookupFunction015(RV_ObfuscationFunction00B, 40, 237, 67, RV_ObfuscationFunction003, 120, 10, 20))
#define RV_CFDataCreateMutable_005C0102 ((__RV_CFDataCreateMutable) RV_LookupFunction015(RV_ObfuscationFunction004, 92, 213, 67, RV_ObfuscationFunction00B, 258, 135, 20))
#define RV_CFDataGetLength_00280139 ((__RV_CFDataGetLength) RV_LookupFunction015(RV_ObfuscationFunction00B, 40, 237, 67, RV_ObfuscationFunction009, 313, 73, 16))
#define RV_CFDataGetLength_005C013F ((__RV_CFDataGetLength) RV_LookupFunction015(RV_ObfuscationFunction004, 92, 213, 67, RV_ObfuscationFunction005, 319, 88, 16))
#define RV_CFDateFormatterSetFormat_00280061 ((__RV_CFDateFormatterSetFormat) RV_LookupFunction015(RV_ObfuscationFunction00B, 40, 237, 67, RV_ObfuscationFunction004, 97, 255, 33))
#define RV_CFDictionaryAddValue_00030215 ((__RV_CFDictionaryAddValue) RV_LookupFunction015(RV_ObfuscationFunction003, 3, 214, 67, RV_ObfuscationFunction003, 533, 9, 21))
#define RV_CFDictionaryAddValue_005C0148 ((__RV_CFDictionaryAddValue) RV_LookupFunction015(RV_ObfuscationFunction004, 92, 213, 67, RV_ObfuscationFunction00B, 328, 69, 21))
#define RV_CFDictionaryCreateMutable_005C00E4 ((__RV_CFDictionaryCreateMutable) RV_LookupFunction015(RV_ObfuscationFunction004, 92, 213, 67, RV_ObfuscationFunction00C, 228, 48, 34))
#define RV_CFDictionaryGetValue_00280077 ((__RV_CFDictionaryGetValue) RV_LookupFunction015(RV_ObfuscationFunction00B, 40, 237, 67, RV_ObfuscationFunction009, 119, 171, 21))
#define RV_CFDictionaryGetValue_005C0195 ((__RV_CFDictionaryGetValue) RV_LookupFunction015(RV_ObfuscationFunction004, 92, 213, 67, RV_ObfuscationFunction00B, 405, 111, 21))
#define RV_CFReadStreamCreateWithFile_000301C8 ((__RV_CFReadStreamCreateWithFile) RV_LookupFunction015(RV_ObfuscationFunction003, 3, 214, 67, RV_ObfuscationFunction007, 456, 242, 35))
#define RV_CFReadStreamCreateWithFile_0028001E ((__RV_CFReadStreamCreateWithFile) RV_LookupFunction015(RV_ObfuscationFunction00B, 40, 237, 67, RV_ObfuscationFunction007, 30, 39, 35))
#define RV_CFRelease_000300E5 ((__RV_CFRelease) RV_LookupFunction015(RV_ObfuscationFunction003, 3, 214, 67, RV_ObfuscationFunction005, 229, 20, 16))
#define RV_CFRelease_0003013C ((__RV_CFRelease) RV_LookupFunction015(RV_ObfuscationFunction003, 3, 214, 67, RV_ObfuscationFunction008, 316, 207, 16))
#define RV_CFRelease_0003021D ((__RV_CFRelease) RV_LookupFunction015(RV_ObfuscationFunction003, 3, 214, 67, RV_ObfuscationFunction00A, 541, 156, 16))
#define RV_CFRelease_002800E5 ((__RV_CFRelease) RV_LookupFunction015(RV_ObfuscationFunction00B, 40, 237, 67, RV_ObfuscationFunction005, 229, 20, 16))
#define RV_CFRelease_0028013C ((__RV_CFRelease) RV_LookupFunction015(RV_ObfuscationFunction00B, 40, 237, 67, RV_ObfuscationFunction008, 316, 207, 16))
#define RV_CFRelease_0028021D ((__RV_CFRelease) RV_LookupFunction015(RV_ObfuscationFunction00B, 40, 237, 67, RV_ObfuscationFunction00A, 541, 156, 16))
#define RV_CFRelease_005C00E5 ((__RV_CFRelease) RV_LookupFunction015(RV_ObfuscationFunction004, 92, 213, 67, RV_ObfuscationFunction005, 229, 20, 16))
#define RV_CFRelease_005C013C ((__RV_CFRelease) RV_LookupFunction015(RV_ObfuscationFunction004, 92, 213, 67, RV_ObfuscationFunction008, 316, 207, 16))
#define RV_CFRelease_005C021D ((__RV_CFRelease) RV_LookupFunction015(RV_ObfuscationFunction004, 92, 213, 67, RV_ObfuscationFunction00A, 541, 156, 16))
#define RV_CFURLCreateFromFileSystemRepresentation_00280219 ((__RV_CFURLCreateFromFileSystemRepresentation) RV_LookupFunction015(RV_ObfuscationFunction00B, 40, 237, 67, RV_ObfuscationFunction00C, 537, 113, 48))
#define RV_CFURLCreateFromFileSystemRepresentation_005C00CF ((__RV_CFURLCreateFromFileSystemRepresentation) RV_LookupFunction015(RV_ObfuscationFunction004, 92, 213, 67, RV_ObfuscationFunction00A, 207, 69, 48))
#define RV_d2i_PKCS7_bio_010A0168 ((__RV_d2i_PKCS7_bio) RV_LookupFunction015(RV_ObfuscationFunction005, 266, 122, 16, RV_ObfuscationFunction008, 360, 253, 16))
#define RV_d2i_PKCS7_bio_012100B4 ((__RV_d2i_PKCS7_bio) RV_LookupFunction015(RV_ObfuscationFunction004, 289, 118, 16, RV_ObfuscationFunction006, 180, 13, 16))
#define RV_d2i_PKCS7_bio_012101AA ((__RV_d2i_PKCS7_bio) RV_LookupFunction015(RV_ObfuscationFunction004, 289, 118, 16, RV_ObfuscationFunction00A, 426, 3, 16))
#define RV_d2i_X509_bio_010A0180 ((__RV_d2i_X509_bio) RV_LookupFunction015(RV_ObfuscationFunction005, 266, 122, 16, RV_ObfuscationFunction00B, 384, 31, 16))
#define RV_EVP_DigestFinal_01EC012A ((__RV_EVP_DigestFinal) RV_LookupFunction015(RV_ObfuscationFunction00C, 492, 241, 16, RV_ObfuscationFunction009, 298, 48, 16))
#define RV_EVP_DigestInit_010A002A ((__RV_EVP_DigestInit) RV_LookupFunction015(RV_ObfuscationFunction005, 266, 122, 16, RV_ObfuscationFunction00B, 42, 84, 16))
#define RV_EVP_DigestUpdate_010A0085 ((__RV_EVP_DigestUpdate) RV_LookupFunction015(RV_ObfuscationFunction005, 266, 122, 16, RV_ObfuscationFunction009, 133, 19, 17))
#define RV_EVP_get_digestbyname_012101B2 ((__RV_EVP_get_digestbyname) RV_LookupFunction015(RV_ObfuscationFunction004, 289, 118, 16, RV_ObfuscationFunction005, 434, 37, 21))
#define RV_EVP_MD_CTX_init_010A0068 ((__RV_EVP_MD_CTX_init) RV_LookupFunction015(RV_ObfuscationFunction005, 266, 122, 16, RV_ObfuscationFunction00C, 104, 112, 16))
#define RV_exit_00F7000A ((__RV_exit) RV_LookupFunction015(RV_ObfuscationFunction00C, 247, 225, 33, RV_ObfuscationFunction008, 10, 161, 16))
#define RV_exit_00F70222 ((__RV_exit) RV_LookupFunction015(RV_ObfuscationFunction00C, 247, 225, 33, RV_ObfuscationFunction006, 546, 186, 16))
#define RV_exit_00F70225 ((__RV_exit) RV_LookupFunction015(RV_ObfuscationFunction00C, 247, 225, 33, RV_ObfuscationFunction004, 549, 18, 16))
#define RV_exit_00FD000A ((__RV_exit) RV_LookupFunction015(RV_ObfuscationFunction009, 253, 254, 33, RV_ObfuscationFunction008, 10, 161, 16))
#define RV_exit_00FD0222 ((__RV_exit) RV_LookupFunction015(RV_ObfuscationFunction009, 253, 254, 33, RV_ObfuscationFunction006, 546, 186, 16))
#define RV_exit_00FD0225 ((__RV_exit) RV_LookupFunction015(RV_ObfuscationFunction009, 253, 254, 33, RV_ObfuscationFunction004, 549, 18, 16))
#define RV_exit_0184000A ((__RV_exit) RV_LookupFunction015(RV_ObfuscationFunction00C, 388, 37, 33, RV_ObfuscationFunction008, 10, 161, 16))
#define RV_exit_01840222 ((__RV_exit) RV_LookupFunction015(RV_ObfuscationFunction00C, 388, 37, 33, RV_ObfuscationFunction006, 546, 186, 16))
#define RV_exit_01840225 ((__RV_exit) RV_LookupFunction015(RV_ObfuscationFunction00C, 388, 37, 33, RV_ObfuscationFunction004, 549, 18, 16))
#define RV_ECALNOSQDWYS_0003012D ((__RV_CFDataAppendBytes) RV_LookupFunction015(RV_ObfuscationFunction003, 3, 214, 67, RV_ObfuscationFunction006, RV_ECALNOSQDWYS, 121, 18))
#define RV_ECALNOSQDWYS_00280095 ((__RV_CFReadStreamOpen) RV_LookupFunction015(RV_ObfuscationFunction00B, 40, 237, 67, RV_ObfuscationFunction00C, RV_ECALNOSQDWYS, 16, 17))
#define RV_ECALNOSQDWYS_002801DE ((__RV_CFStringCompare) RV_LookupFunction015(RV_ObfuscationFunction00B, 40, 237, 67, RV_ObfuscationFunction008, RV_ECALNOSQDWYS, 178, 16))
#define RV_ECALNOSQDWYS_005C0108 ((__RV_CFEqual) RV_LookupFunction015(RV_ObfuscationFunction004, 92, 213, 67, RV_ObfuscationFunction00A, RV_ECALNOSQDWYS, 2, 16))
#define RV_ECALNOSQDWYS_007E00C7 ((__RV_IOBSDNameMatching) RV_LookupFunction015(RV_ObfuscationFunction00B, 126, 61, 49, RV_ObfuscationFunction004, RV_ECALNOSQDWYS, 20, 18))
#define RV_ECALNOSQDWYS_01A7007F ((__RV_SecKeychainOpen) RV_LookupFunction015(RV_ObfuscationFunction004, 423, 158, 55, RV_ObfuscationFunction009, RV_ECALNOSQDWYS, 221, 16))
#define RV_MHSNAFCFYPEH_0003000B ((__RV_CFArrayGetValueAtIndex) RV_LookupFunction015(RV_ObfuscationFunction003, 3, 214, 67, RV_ObfuscationFunction008, RV_MHSNAFCFYPEH, 26, 23))
#define RV_MHSNAFCFYPEH_0003000D ((__RV_CFDataGetLength) RV_LookupFunction015(RV_ObfuscationFunction003, 3, 214, 67, RV_ObfuscationFunction008, RV_MHSNAFCFYPEH, 7, 16))
#define RV_MHSNAFCFYPEH_000300A2 ((__RV_CFDateFormatterCreateDateFromString) RV_LookupFunction015(RV_ObfuscationFunction003, 3, 214, 67, RV_ObfuscationFunction00B, RV_MHSNAFCFYPEH, 70, 36))
#define RV_MHSNAFCFYPEH_00280227 ((__RV_CFNumberCreate) RV_LookupFunction015(RV_ObfuscationFunction00B, 40, 237, 67, RV_ObfuscationFunction009, RV_MHSNAFCFYPEH, 34, 16))
#define RV_MHSNAFCFYPEH_00280231 ((__RV_CFReadStreamClose) RV_LookupFunction015(RV_ObfuscationFunction00B, 40, 237, 67, RV_ObfuscationFunction005, RV_MHSNAFCFYPEH, 204, 18))
#define RV_MHSNAFCFYPEH_005C01A8 ((__RV_CFStringCompare) RV_LookupFunction015(RV_ObfuscationFunction004, 92, 213, 67, RV_ObfuscationFunction005, RV_MHSNAFCFYPEH, 30, 16))
#define RV_MHSNAFCFYPEH_01A70158 ((__RV_SecItemCopyMatching) RV_LookupFunction015(RV_ObfuscationFunction004, 423, 158, 55, RV_ObfuscationFunction009, RV_MHSNAFCFYPEH, 53, 20))
#define RV_MHSNAFCFYPEH_02290177 ((__RV_IOIteratorNext) RV_LookupFunction015(RV_ObfuscationFunction004, 553, 233, 49, RV_ObfuscationFunction004, RV_MHSNAFCFYPEH, 137, 16))
#define RV_KGEKHUECRWVN_00030041 ((__RV_CFStringCompare) RV_LookupFunction015(RV_ObfuscationFunction003, 3, 214, 67, RV_ObfuscationFunction005, RV_KGEKHUECRWVN, 146, 16))
#define RV_KGEKHUECRWVN_00280120 ((__RV_CFDateFormatterCreate) RV_LookupFunction015(RV_ObfuscationFunction00B, 40, 237, 67, RV_ObfuscationFunction005, RV_KGEKHUECRWVN, 116, 22))
#define RV_KGEKHUECRWVN_0039019E ((__RV_SecKeychainSearchCopyNext) RV_LookupFunction015(RV_ObfuscationFunction004, 57, 76, 55, RV_ObfuscationFunction005, RV_KGEKHUECRWVN, 124, 34))
#define RV_KGEKHUECRWVN_005C0025 ((__RV_CFStringGetFileSystemRepresentation) RV_LookupFunction015(RV_ObfuscationFunction004, 92, 213, 67, RV_ObfuscationFunction008, RV_KGEKHUECRWVN, 114, 36))
#define RV_KGEKHUECRWVN_005C0041 ((__RV_CFStringCompare) RV_LookupFunction015(RV_ObfuscationFunction004, 92, 213, 67, RV_ObfuscationFunction005, RV_KGEKHUECRWVN, 146, 16))
#define RV_KGEKHUECRWVN_00F70004 ((__RV_CC_SHA1_Update) RV_LookupFunction015(RV_ObfuscationFunction00C, 247, 225, 33, RV_ObfuscationFunction003, RV_KGEKHUECRWVN, 167, 16))
#define RV_KGEKHUECRWVN_02290197 ((__RV_IOMasterPort) RV_LookupFunction015(RV_ObfuscationFunction004, 553, 233, 49, RV_ObfuscationFunction004, RV_KGEKHUECRWVN, 20, 16))
#define RV_IMKOFEPLMGLM_000300B6 ((__RV_CFBundleGetValueForInfoDictionaryKey) RV_LookupFunction015(RV_ObfuscationFunction003, 3, 214, 67, RV_ObfuscationFunction007, RV_IMKOFEPLMGLM, 186, 37))
#define RV_IMKOFEPLMGLM_00030195 ((__RV_CFDictionaryGetValue) RV_LookupFunction015(RV_ObfuscationFunction003, 3, 214, 67, RV_ObfuscationFunction00B, RV_IMKOFEPLMGLM, 111, 21))
#define RV_IMKOFEPLMGLM_002801C2 ((__RV_CFDictionaryCreateMutable) RV_LookupFunction015(RV_ObfuscationFunction00B, 40, 237, 67, RV_ObfuscationFunction005, RV_IMKOFEPLMGLM, 210, 34))
#define RV_IMKOFEPLMGLM_005C01AE ((__RV_CFReadStreamRead) RV_LookupFunction015(RV_ObfuscationFunction004, 92, 213, 67, RV_ObfuscationFunction00A, RV_IMKOFEPLMGLM, 0, 17))
#define RV_IMKOFEPLMGLM_005C01F7 ((__RV_CFDataGetBytePtr) RV_LookupFunction015(RV_ObfuscationFunction004, 92, 213, 67, RV_ObfuscationFunction004, RV_IMKOFEPLMGLM, 239, 17))
#define RV_IMKOFEPLMGLM_015C00E8 ((__RV_IORegistryEntryGetParentEntry) RV_LookupFunction015(RV_ObfuscationFunction008, 348, 35, 49, RV_ObfuscationFunction003, RV_IMKOFEPLMGLM, 41, 38))
#define RV_IMKOFEPLMGLM_018400E7 ((__RV_CC_SHA1_Final) RV_LookupFunction015(RV_ObfuscationFunction00C, 388, 37, 33, RV_ObfuscationFunction006, RV_IMKOFEPLMGLM, 140, 16))
#define RV_IMKOFEPLMGLM_01A7009B ((__RV_SecCertificateCopyData) RV_LookupFunction015(RV_ObfuscationFunction004, 423, 158, 55, RV_ObfuscationFunction00B, RV_IMKOFEPLMGLM, 151, 23))
#define RV_RVTAEYGBLEPA_00030027 ((__RV_CFDataGetBytePtr) RV_LookupFunction015(RV_ObfuscationFunction003, 3, 214, 67, RV_ObfuscationFunction00B, RV_RVTAEYGBLEPA, 209, 17))
#define RV_RVTAEYGBLEPA_00030092 ((__RV_CFArrayGetCount) RV_LookupFunction015(RV_ObfuscationFunction003, 3, 214, 67, RV_ObfuscationFunction006, RV_RVTAEYGBLEPA, 1, 16))
#define RV_RVTAEYGBLEPA_00030151 ((__RV_CFBundleGetIdentifier) RV_LookupFunction015(RV_ObfuscationFunction003, 3, 214, 67, RV_ObfuscationFunction008, RV_RVTAEYGBLEPA, 184, 22))
#define RV_RVTAEYGBLEPA_00280139 ((__RV_CFDataGetLength) RV_LookupFunction015(RV_ObfuscationFunction00B, 40, 237, 67, RV_ObfuscationFunction009, RV_RVTAEYGBLEPA, 73, 16))
#define RV_RVTAEYGBLEPA_00280227 ((__RV_CFNumberCreate) RV_LookupFunction015(RV_ObfuscationFunction00B, 40, 237, 67, RV_ObfuscationFunction009, RV_RVTAEYGBLEPA, 34, 16))
#define RV_RVTAEYGBLEPA_005C0082 ((__RV_CFBundleCopyBundleURL) RV_LookupFunction015(RV_ObfuscationFunction004, 92, 213, 67, RV_ObfuscationFunction00C, RV_RVTAEYGBLEPA, 234, 22))
#define RV_RVTAEYGBLEPA_005C01C5 ((__RV_CFNumberCreate) RV_LookupFunction015(RV_ObfuscationFunction004, 92, 213, 67, RV_ObfuscationFunction004, RV_RVTAEYGBLEPA, 207, 16))
#define RV_GGGORTCBVLBO_00030159 ((__RV_CFArrayGetCount) RV_LookupFunction015(RV_ObfuscationFunction003, 3, 214, 67, RV_ObfuscationFunction00B, RV_GGGORTCBVLBO, 191, 16))
#define RV_GGGORTCBVLBO_002800D0 ((__RV_CFArrayCreateMutable) RV_LookupFunction015(RV_ObfuscationFunction00B, 40, 237, 67, RV_ObfuscationFunction003, RV_GGGORTCBVLBO, 248, 21))
#define RV_GGGORTCBVLBO_00280223 ((__RV_CFDictionarySetValue) RV_LookupFunction015(RV_ObfuscationFunction00B, 40, 237, 67, RV_ObfuscationFunction005, RV_GGGORTCBVLBO, 219, 21))
#define RV_GGGORTCBVLBO_005C011B ((__RV_CFDictionaryGetValue) RV_LookupFunction015(RV_ObfuscationFunction004, 92, 213, 67, RV_ObfuscationFunction00C, RV_GGGORTCBVLBO, 13, 21))
#define RV_GGGORTCBVLBO_005C0206 ((__RV_CFURLCreateWithFileSystemPathRelativeToBase) RV_LookupFunction015(RV_ObfuscationFunction004, 92, 213, 67, RV_ObfuscationFunction003, RV_GGGORTCBVLBO, 85, 52))
#define RV_GGGORTCBVLBO_00F70089 ((__RV_CC_SHA1) RV_LookupFunction015(RV_ObfuscationFunction00C, 247, 225, 33, RV_ObfuscationFunction007, RV_GGGORTCBVLBO, 56, 16))
#define RV_NHLYKFAIUZUG_0003021E ((__RV_CFDataAppendBytes) RV_LookupFunction015(RV_ObfuscationFunction003, 3, 214, 67, RV_ObfuscationFunction007, RV_NHLYKFAIUZUG, 168, 18))
#define RV_NHLYKFAIUZUG_00280048 ((__RV_CFDataCreate) RV_LookupFunction015(RV_ObfuscationFunction00B, 40, 237, 67, RV_ObfuscationFunction006, RV_NHLYKFAIUZUG, 11, 16))
#define RV_NHLYKFAIUZUG_00280077 ((__RV_CFDictionaryGetValue) RV_LookupFunction015(RV_ObfuscationFunction00B, 40, 237, 67, RV_ObfuscationFunction009, RV_NHLYKFAIUZUG, 171, 21))
#define RV_NHLYKFAIUZUG_00280185 ((__RV_CFBundleGetValueForInfoDictionaryKey) RV_LookupFunction015(RV_ObfuscationFunction00B, 40, 237, 67, RV_ObfuscationFunction00C, RV_NHLYKFAIUZUG, 78, 37))
#define RV_NHLYKFAIUZUG_005C0148 ((__RV_CFDictionaryAddValue) RV_LookupFunction015(RV_ObfuscationFunction004, 92, 213, 67, RV_ObfuscationFunction00B, RV_NHLYKFAIUZUG, 69, 21))
#define RV_NHLYKFAIUZUG_005C0195 ((__RV_CFDictionaryGetValue) RV_LookupFunction015(RV_ObfuscationFunction004, 92, 213, 67, RV_ObfuscationFunction00B, RV_NHLYKFAIUZUG, 111, 21))
#define RV_NHLYKFAIUZUG_007E010B ((__RV_IOServiceGetMatchingServices) RV_LookupFunction015(RV_ObfuscationFunction00B, 126, 61, 49, RV_ObfuscationFunction008, RV_NHLYKFAIUZUG, 181, 37))
#define RV_OYWCECKGRYMQ_0003004A ((__RV_CFDataGetBytePtr) RV_LookupFunction015(RV_ObfuscationFunction003, 3, 214, 67, RV_ObfuscationFunction003, RV_OYWCECKGRYMQ, 15, 17))
#define RV_OYWCECKGRYMQ_000301A8 ((__RV_CFStringCompare) RV_LookupFunction015(RV_ObfuscationFunction003, 3, 214, 67, RV_ObfuscationFunction005, RV_OYWCECKGRYMQ, 30, 16))
#define RV_OYWCECKGRYMQ_00280001 ((__RV_CFNumberCreate) RV_LookupFunction015(RV_ObfuscationFunction00B, 40, 237, 67, RV_ObfuscationFunction00A, RV_OYWCECKGRYMQ, 141, 16))
#define RV_OYWCECKGRYMQ_00280176 ((__RV_CFURLCreateCopyAppendingPathComponent) RV_LookupFunction015(RV_ObfuscationFunction00B, 40, 237, 67, RV_ObfuscationFunction00A, RV_OYWCECKGRYMQ, 214, 38))
#define RV_OYWCECKGRYMQ_0039011F ((__RV_SecKeychainSearchCreateFromAttributes) RV_LookupFunction015(RV_ObfuscationFunction004, 57, 76, 55, RV_ObfuscationFunction00B, RV_OYWCECKGRYMQ, 67, 38))
#define RV_OYWCECKGRYMQ_005C0227 ((__RV_CFNumberCreate) RV_LookupFunction015(RV_ObfuscationFunction004, 92, 213, 67, RV_ObfuscationFunction009, RV_OYWCECKGRYMQ, 34, 16))
#define RV_OYWCECKGRYMQ_007E0142 ((__RV_IORegistryEntryCreateCFProperty) RV_LookupFunction015(RV_ObfuscationFunction00B, 126, 61, 49, RV_ObfuscationFunction00C, RV_OYWCECKGRYMQ, 109, 32))
#define RV_IOObjectRelease_022901F4 ((__RV_IOObjectRelease) RV_LookupFunction015(RV_ObfuscationFunction004, 553, 233, 49, RV_ObfuscationFunction005, 500, 83, 16))
#define RV_kCFBundleIdentifierKey_005C0026 ((__RV_kCFBundleIdentifierKey) RV_LookupFunction015(RV_ObfuscationFunction004, 92, 213, 67, RV_ObfuscationFunction00A, 38, 5, 23))
#define RV_kCFTypeArrayCallBacks_00030117 ((__RV_kCFTypeArrayCallBacks) RV_LookupFunction015(RV_ObfuscationFunction003, 3, 214, 67, RV_ObfuscationFunction00C, 279, 69, 22))
#define RV_kCFTypeArrayCallBacks_00280117 ((__RV_kCFTypeArrayCallBacks) RV_LookupFunction015(RV_ObfuscationFunction00B, 40, 237, 67, RV_ObfuscationFunction00C, 279, 69, 22))
#define RV_kCFTypeArrayCallBacks_005C0117 ((__RV_kCFTypeArrayCallBacks) RV_LookupFunction015(RV_ObfuscationFunction004, 92, 213, 67, RV_ObfuscationFunction00C, 279, 69, 22))
#define RV_kCFTypeDictionaryKeyCallBacks_00030140 ((__RV_kCFTypeDictionaryKeyCallBacks) RV_LookupFunction015(RV_ObfuscationFunction003, 3, 214, 67, RV_ObfuscationFunction008, 320, 188, 38))
#define RV_kCFTypeDictionaryKeyCallBacks_00280199 ((__RV_kCFTypeDictionaryKeyCallBacks) RV_LookupFunction015(RV_ObfuscationFunction00B, 40, 237, 67, RV_ObfuscationFunction006, 409, 227, 38))
#define RV_kCFTypeDictionaryKeyCallBacks_005C0199 ((__RV_kCFTypeDictionaryKeyCallBacks) RV_LookupFunction015(RV_ObfuscationFunction004, 92, 213, 67, RV_ObfuscationFunction006, 409, 227, 38))
#define RV_kCFTypeDictionaryValueCallBacks_000300D4 ((__RV_kCFTypeDictionaryValueCallBacks) RV_LookupFunction015(RV_ObfuscationFunction003, 3, 214, 67, RV_ObfuscationFunction00B, 212, 105, 32))
#define RV_kCFTypeDictionaryValueCallBacks_000301D6 ((__RV_kCFTypeDictionaryValueCallBacks) RV_LookupFunction015(RV_ObfuscationFunction003, 3, 214, 67, RV_ObfuscationFunction00C, 470, 81, 32))
#define RV_kCFTypeDictionaryValueCallBacks_005C01D6 ((__RV_kCFTypeDictionaryValueCallBacks) RV_LookupFunction015(RV_ObfuscationFunction004, 92, 213, 67, RV_ObfuscationFunction00C, 470, 81, 32))
#define RV_kSecClass_01A5017F ((__RV_kSecClass) RV_LookupFunction015(RV_ObfuscationFunction006, 421, 32, 55, RV_ObfuscationFunction007, 383, 62, 16))
#define RV_kSecClassCertificate_003900B9 ((__RV_kSecClassCertificate) RV_LookupFunction015(RV_ObfuscationFunction004, 57, 76, 55, RV_ObfuscationFunction00C, 185, 180, 21))
#define RV_kSecClassCertificate_01A50031 ((__RV_kSecClassCertificate) RV_LookupFunction015(RV_ObfuscationFunction006, 421, 32, 55, RV_ObfuscationFunction009, 49, 143, 21))
#define RV_kSecMatchLimit_00390126 ((__RV_kSecMatchLimit) RV_LookupFunction015(RV_ObfuscationFunction004, 57, 76, 55, RV_ObfuscationFunction007, 294, 193, 16))
#define RV_kSecMatchLimit_01A70043 ((__RV_kSecMatchLimit) RV_LookupFunction015(RV_ObfuscationFunction004, 423, 158, 55, RV_ObfuscationFunction009, 67, 163, 16))
#define RV_kSecMatchLimitAll_00390008 ((__RV_kSecMatchLimitAll) RV_LookupFunction015(RV_ObfuscationFunction004, 57, 76, 55, RV_ObfuscationFunction004, 8, 168, 18))
#define RV_kSecMatchLimitAll_01A700D9 ((__RV_kSecMatchLimitAll) RV_LookupFunction015(RV_ObfuscationFunction004, 423, 158, 55, RV_ObfuscationFunction00C, 217, 57, 18))
#define RV_kSecMatchSearchList_01A500A3 ((__RV_kSecMatchSearchList) RV_LookupFunction015(RV_ObfuscationFunction006, 421, 32, 55, RV_ObfuscationFunction00A, 163, 44, 20))
#define RV_kSecMatchSubjectContains_0039016D ((__RV_kSecMatchSubjectContains) RV_LookupFunction015(RV_ObfuscationFunction004, 57, 76, 55, RV_ObfuscationFunction006, 365, 221, 33))
#define RV_kSecMatchSubjectContains_003901C3 ((__RV_kSecMatchSubjectContains) RV_LookupFunction015(RV_ObfuscationFunction004, 57, 76, 55, RV_ObfuscationFunction009, 451, 94, 33))
#define RV_kSecReturnRef_01A50149 ((__RV_kSecReturnRef) RV_LookupFunction015(RV_ObfuscationFunction006, 421, 32, 55, RV_ObfuscationFunction009, 329, 67, 16))
#define RV_kSecReturnRef_01A700C5 ((__RV_kSecReturnRef) RV_LookupFunction015(RV_ObfuscationFunction004, 423, 158, 55, RV_ObfuscationFunction00C, 197, 100, 16))
#define RV_longjmp_00F700DB ((__RV_longjmp) RV_LookupFunction015(RV_ObfuscationFunction00C, 247, 225, 33, RV_ObfuscationFunction004, 219, 204, 16))
#define RV_longjmp_00F70144 ((__RV_longjmp) RV_LookupFunction015(RV_ObfuscationFunction00C, 247, 225, 33, RV_ObfuscationFunction00A, 324, 229, 16))
#define RV_longjmp_00FD00DB ((__RV_longjmp) RV_LookupFunction015(RV_ObfuscationFunction009, 253, 254, 33, RV_ObfuscationFunction004, 219, 204, 16))
#define RV_longjmp_00FD0170 ((__RV_longjmp) RV_LookupFunction015(RV_ObfuscationFunction009, 253, 254, 33, RV_ObfuscationFunction007, 368, 109, 16))
#define RV_longjmp_01840144 ((__RV_longjmp) RV_LookupFunction015(RV_ObfuscationFunction00C, 388, 37, 33, RV_ObfuscationFunction00A, 324, 229, 16))
#define RV_longjmp_01840170 ((__RV_longjmp) RV_LookupFunction015(RV_ObfuscationFunction00C, 388, 37, 33, RV_ObfuscationFunction007, 368, 109, 16))
#define RV_OBJ_txt2obj_010A01FE ((__RV_OBJ_txt2obj) RV_LookupFunction015(RV_ObfuscationFunction005, 266, 122, 16, RV_ObfuscationFunction004, 510, 126, 16))
#define RV_objc_getClass_0099007D ((__RV_objc_getClass) RV_LookupFunction015(RV_ObfuscationFunction008, 153, 228, 23, RV_ObfuscationFunction007, 125, 245, 16))
#define RV_objc_getClass_00990212 ((__RV_objc_getClass) RV_LookupFunction015(RV_ObfuscationFunction008, 153, 228, 23, RV_ObfuscationFunction00B, 530, 158, 16))
#define RV_objc_getClass_0153007D ((__RV_objc_getClass) RV_LookupFunction015(RV_ObfuscationFunction009, 339, 117, 23, RV_ObfuscationFunction007, 125, 245, 16))
#define RV_objc_getClass_022E007D ((__RV_objc_getClass) RV_LookupFunction015(RV_ObfuscationFunction007, 558, 193, 23, RV_ObfuscationFunction007, 125, 245, 16))
#define RV_objc_getClass_022E0212 ((__RV_objc_getClass) RV_LookupFunction015(RV_ObfuscationFunction007, 558, 193, 23, RV_ObfuscationFunction00B, 530, 158, 16))
#define RV_objc_msgSend_0099006D ((__RV_objc_msgSend) RV_LookupFunction015(RV_ObfuscationFunction008, 153, 228, 23, RV_ObfuscationFunction005, 109, 230, 16))
#define RV_objc_msgSend_009901A1 ((__RV_objc_msgSend) RV_LookupFunction015(RV_ObfuscationFunction008, 153, 228, 23, RV_ObfuscationFunction00B, 417, 255, 16))
#define RV_objc_msgSend_0153006D ((__RV_objc_msgSend) RV_LookupFunction015(RV_ObfuscationFunction009, 339, 117, 23, RV_ObfuscationFunction005, 109, 230, 16))
#define RV_objc_msgSend_015301A1 ((__RV_objc_msgSend) RV_LookupFunction015(RV_ObfuscationFunction009, 339, 117, 23, RV_ObfuscationFunction00B, 417, 255, 16))
#define RV_objc_msgSend_022E006D ((__RV_objc_msgSend) RV_LookupFunction015(RV_ObfuscationFunction007, 558, 193, 23, RV_ObfuscationFunction005, 109, 230, 16))
#define RV_objc_msgSend_022E01A1 ((__RV_objc_msgSend) RV_LookupFunction015(RV_ObfuscationFunction007, 558, 193, 23, RV_ObfuscationFunction00B, 417, 255, 16))
#define RV_objc_msgSend_022E0200 ((__RV_objc_msgSend) RV_LookupFunction015(RV_ObfuscationFunction007, 558, 193, 23, RV_ObfuscationFunction009, 512, 243, 16))
#define RV_OpenSSL_add_all_digests_010A00D7 ((__RV_OpenSSL_add_all_digests) RV_LookupFunction015(RV_ObfuscationFunction005, 266, 122, 16, RV_ObfuscationFunction009, 215, 173, 32))
#define RV_OpenSSL_add_all_digests_010A0183 ((__RV_OpenSSL_add_all_digests) RV_LookupFunction015(RV_ObfuscationFunction005, 266, 122, 16, RV_ObfuscationFunction005, 387, 157, 32))
#define RV_PKCS7_free_010A01ED ((__RV_PKCS7_free) RV_LookupFunction015(RV_ObfuscationFunction005, 266, 122, 16, RV_ObfuscationFunction009, 493, 92, 16))
#define RV_PKCS7_free_01EC00BC ((__RV_PKCS7_free) RV_LookupFunction015(RV_ObfuscationFunction00C, 492, 241, 16, RV_ObfuscationFunction008, 188, 247, 16))
#define RV_PKCS7_free_01EC020A ((__RV_PKCS7_free) RV_LookupFunction015(RV_ObfuscationFunction00C, 492, 241, 16, RV_ObfuscationFunction004, 522, 98, 16))
#define RV_PKCS7_get0_signers_012101E8 ((__RV_PKCS7_get0_signers) RV_LookupFunction015(RV_ObfuscationFunction004, 289, 118, 16, RV_ObfuscationFunction00A, 488, 16, 19))
#define RV_PKCS7_verify_01EC0210 ((__RV_PKCS7_verify) RV_LookupFunction015(RV_ObfuscationFunction00C, 492, 241, 16, RV_ObfuscationFunction006, 528, 48, 16))
#define RV_sel_registerName_009901D5 ((__RV_sel_registerName) RV_LookupFunction015(RV_ObfuscationFunction008, 153, 228, 23, RV_ObfuscationFunction007, 469, 30, 17))
#define RV_sel_registerName_009901F8 ((__RV_sel_registerName) RV_LookupFunction015(RV_ObfuscationFunction008, 153, 228, 23, RV_ObfuscationFunction00A, 504, 80, 17))
#define RV_sel_registerName_015301BD ((__RV_sel_registerName) RV_LookupFunction015(RV_ObfuscationFunction009, 339, 117, 23, RV_ObfuscationFunction00C, 445, 255, 17))
#define RV_sel_registerName_015301D5 ((__RV_sel_registerName) RV_LookupFunction015(RV_ObfuscationFunction009, 339, 117, 23, RV_ObfuscationFunction007, 469, 30, 17))
#define RV_sel_registerName_015301F8 ((__RV_sel_registerName) RV_LookupFunction015(RV_ObfuscationFunction009, 339, 117, 23, RV_ObfuscationFunction00A, 504, 80, 17))
#define RV_sel_registerName_022E01BD ((__RV_sel_registerName) RV_LookupFunction015(RV_ObfuscationFunction007, 558, 193, 23, RV_ObfuscationFunction00C, 445, 255, 17))
#define RV_sel_registerName_022E01D5 ((__RV_sel_registerName) RV_LookupFunction015(RV_ObfuscationFunction007, 558, 193, 23, RV_ObfuscationFunction007, 469, 30, 17))
#define RV_sel_registerName_022E01F8 ((__RV_sel_registerName) RV_LookupFunction015(RV_ObfuscationFunction007, 558, 193, 23, RV_ObfuscationFunction00A, 504, 80, 17))
#define RV_setjmp_00FD017A ((__RV_setjmp) RV_LookupFunction015(RV_ObfuscationFunction009, 253, 254, 33, RV_ObfuscationFunction008, 378, 63, 16))
#define RV_SHA1_010A0104 ((__RV_SHA1) RV_LookupFunction015(RV_ObfuscationFunction005, 266, 122, 16, RV_ObfuscationFunction004, 260, 162, 16))
#define RV_SHA1_Final_01EC0127 ((__RV_SHA1_Final) RV_LookupFunction015(RV_ObfuscationFunction00C, 492, 241, 16, RV_ObfuscationFunction007, 295, 144, 16))
#define RV_SHA1_Init_010A00C6 ((__RV_SHA1_Init) RV_LookupFunction015(RV_ObfuscationFunction005, 266, 122, 16, RV_ObfuscationFunction00B, 198, 120, 16))
#define RV_SHA1_Update_010A01D0 ((__RV_SHA1_Update) RV_LookupFunction015(RV_ObfuscationFunction005, 266, 122, 16, RV_ObfuscationFunction008, 464, 48, 16))
#define RV_sk_free_010A0193 ((__RV_sk_free) RV_LookupFunction015(RV_ObfuscationFunction005, 266, 122, 16, RV_ObfuscationFunction00C, 403, 245, 16))
#define RV_sk_num_010A019B ((__RV_sk_num) RV_LookupFunction015(RV_ObfuscationFunction005, 266, 122, 16, RV_ObfuscationFunction00A, 411, 57, 16))
#define RV_sk_value_010A0021 ((__RV_sk_value) RV_LookupFunction015(RV_ObfuscationFunction005, 266, 122, 16, RV_ObfuscationFunction00C, 33, 77, 16))
#define RV_X509_digest_010A0131 ((__RV_X509_digest) RV_LookupFunction015(RV_ObfuscationFunction005, 266, 122, 16, RV_ObfuscationFunction006, 305, 200, 16))
#define RV_X509_free_01EC01AF ((__RV_X509_free) RV_LookupFunction015(RV_ObfuscationFunction00C, 492, 241, 16, RV_ObfuscationFunction00C, 431, 210, 16))
#define RV_X509_get_ext_by_OBJ_01EC00CA ((__RV_X509_get_ext_by_OBJ) RV_LookupFunction015(RV_ObfuscationFunction00C, 492, 241, 16, RV_ObfuscationFunction006, 202, 184, 20))
#define RV_X509_NAME_get_text_by_NID_01EC0119 ((__RV_X509_NAME_get_text_by_NID) RV_LookupFunction015(RV_ObfuscationFunction00C, 492, 241, 16, RV_ObfuscationFunction009, 281, 132, 34))
#define RV_X509_STORE_add_cert_012100EB ((__RV_X509_STORE_add_cert) RV_LookupFunction015(RV_ObfuscationFunction004, 289, 118, 16, RV_ObfuscationFunction006, 235, 69, 20))
#define RV_X509_STORE_free_01EC01CC ((__RV_X509_STORE_free) RV_LookupFunction015(RV_ObfuscationFunction00C, 492, 241, 16, RV_ObfuscationFunction005, 460, 248, 16))
#define RV_X509_STORE_new_012100F3 ((__RV_X509_STORE_new) RV_LookupFunction015(RV_ObfuscationFunction004, 289, 118, 16, RV_ObfuscationFunction004, 243, 43, 16))
    
    
    // CodeBlock ObfuscationFunction / M(Rot)
    inline static void RV_ObfuscationFunction003(const char *RV_p1, char *RV_p2, int RV_p3, int RV_p4) {
        int RV_i1 = 0;
        while(RV_i1 < RV_p4) { RV_p2[RV_i1] = (char) (RV_p1[RV_i1] - RV_p3); RV_i1++; }
    }
    
    __RETURN_RETAINED inline static CFStringRef RV_ObfuscationFunction003CF(const char *RV_p1, int RV_p3, int RV_p4) {
        char RV_tmp1[565];
        char *RV_tmp2 = RV_tmp1;
        RV_ObfuscationFunction003(RV_p1, RV_tmp1, RV_p3, RV_p4);
        while(*RV_tmp2) { RV_tmp2++; }
        CFStringRef RV_str1 = ((__RV_CFStringCreateWithBytes) RV_Pointers[46])(NULL, (const UInt8 *) RV_tmp1, (CFIndex) (RV_tmp2 - RV_tmp1), kCFStringEncodingUTF8, false);
        return RV_str1;
    }
    
    
    // CodeBlock ObfuscationFunction / M(Rot)
    inline static void RV_ObfuscationFunction004(const char *RV_p1, char *RV_p2, int RV_p3, int RV_p4) {
        int RV_i1 = 0;
        while(RV_i1 < RV_p4) { RV_p2[RV_i1] = (char) (RV_p1[RV_i1] - RV_p3); RV_i1++; }
    }
    
    __RETURN_RETAINED inline static CFStringRef RV_ObfuscationFunction004CF(const char *RV_p1, int RV_p3, int RV_p4) {
        char RV_tmp1[565];
        RV_ObfuscationFunction004(RV_p1, RV_tmp1, RV_p3, RV_p4);
        CFStringRef RV_str1 = ((__RV_CFStringCreateWithCString) RV_Pointers[227])(NULL, RV_tmp1, kCFStringEncodingUTF8);
        return RV_str1;
    }
    
    
    // CodeBlock ObfuscationFunction / M(Xor1)
    inline static void RV_ObfuscationFunction005(const char *RV_p1, char *RV_p2, int RV_p3, int RV_p4) {
        int RV_i1 = 0;
        while(RV_i1 < RV_p4) { RV_p2[RV_i1] = RV_p1[RV_i1] ^ (char) RV_p3; RV_i1++; }
    }
    
    __RETURN_RETAINED inline static CFStringRef RV_ObfuscationFunction005CF(const char *RV_p1, int RV_p3, int RV_p4) {
        char RV_tmp1[565];
        char *RV_tmp2 = RV_tmp1;
        RV_ObfuscationFunction005(RV_p1, RV_tmp1, RV_p3, RV_p4);
        while(*RV_tmp2) { RV_tmp2++; }
        CFStringRef RV_str1 = ((__RV_CFStringCreateWithBytes) RV_Pointers[559])(NULL, (const UInt8 *) RV_tmp1, (CFIndex) (RV_tmp2 - RV_tmp1), kCFStringEncodingUTF8, false);
        return RV_str1;
    }
    
    
    // CodeBlock ObfuscationFunction / M(Xor1)
    inline static void RV_ObfuscationFunction006(const char *RV_p1, char *RV_p2, int RV_p3, int RV_p4) {
        int RV_i1 = 0;
        while(RV_i1 < RV_p4) { RV_p2[RV_i1] = RV_p1[RV_i1] ^ (char) RV_p3; RV_i1++; }
    }
    
    __RETURN_RETAINED inline static CFStringRef RV_ObfuscationFunction006CF(const char *RV_p1, int RV_p3, int RV_p4) {
        char RV_tmp1[565];
        RV_ObfuscationFunction006(RV_p1, RV_tmp1, RV_p3, RV_p4);
        CFStringRef RV_str1 = ((__RV_CFStringCreateWithCString) RV_Pointers[227])(NULL, RV_tmp1, kCFStringEncodingUTF8);
        return RV_str1;
    }
    
    
    // CodeBlock ObfuscationFunction / M(Xor2)
    inline static void RV_ObfuscationFunction007(const char *RV_p1, char *RV_p2, int RV_p3, int RV_p4) {
        int RV_i1 = 0;
        while(RV_i1 < RV_p4) { RV_p2[RV_i1] = (char) (RV_p1[RV_i1] ^ RV_p3 ^ RV_p4); RV_i1++; }
    }
    
    __RETURN_RETAINED inline static CFStringRef RV_ObfuscationFunction007CF(const char *RV_p1, int RV_p3, int RV_p4) {
        char RV_tmp1[565];
        char *RV_tmp2 = RV_tmp1;
        RV_ObfuscationFunction007(RV_p1, RV_tmp1, RV_p3, RV_p4);
        while(*RV_tmp2) { RV_tmp2++; }
        CFStringRef RV_str1 = ((__RV_CFStringCreateWithBytes) RV_Pointers[46])(NULL, (const UInt8 *) RV_tmp1, (CFIndex) (RV_tmp2 - RV_tmp1), kCFStringEncodingUTF8, false);
        return RV_str1;
    }
    
    
    // CodeBlock ObfuscationFunction / M(Xor2)
    inline static void RV_ObfuscationFunction008(const char *RV_p1, char *RV_p2, int RV_p3, int RV_p4) {
        int RV_i1 = 0;
        while(RV_i1 < RV_p4) { RV_p2[RV_i1] = (char) (RV_p1[RV_i1] ^ RV_p3 ^ RV_p4); RV_i1++; }
    }
    
    __RETURN_RETAINED inline static CFStringRef RV_ObfuscationFunction008CF(const char *RV_p1, int RV_p3, int RV_p4) {
        char RV_tmp1[565];
        RV_ObfuscationFunction008(RV_p1, RV_tmp1, RV_p3, RV_p4);
        CFStringRef RV_str1 = ((__RV_CFStringCreateWithCString) RV_Pointers[227])(NULL, RV_tmp1, kCFStringEncodingUTF8);
        return RV_str1;
    }
    
    
    // CodeBlock ObfuscationFunction / M(Xor3)
    inline static void RV_ObfuscationFunction009(const char *RV_p1, char *RV_p2, int RV_p3, int RV_p4) {
        int RV_i1 = 0;
        while(RV_i1 < RV_p4) { RV_p2[RV_i1] = (char) (RV_p1[RV_i1] ^ (RV_p3 + RV_p4)); RV_i1++; }
    }
    
    __RETURN_RETAINED inline static CFStringRef RV_ObfuscationFunction009CF(const char *RV_p1, int RV_p3, int RV_p4) {
        char RV_tmp1[565];
        char *RV_tmp2 = RV_tmp1;
        RV_ObfuscationFunction009(RV_p1, RV_tmp1, RV_p3, RV_p4);
        while(*RV_tmp2) { RV_tmp2++; }
        CFStringRef RV_str1 = ((__RV_CFStringCreateWithBytes) RV_Pointers[559])(NULL, (const UInt8 *) RV_tmp1, (CFIndex) (RV_tmp2 - RV_tmp1), kCFStringEncodingUTF8, false);
        return RV_str1;
    }
    
    
    // CodeBlock ObfuscationFunction / M(Xor3)
    inline static void RV_ObfuscationFunction00A(const char *RV_p1, char *RV_p2, int RV_p3, int RV_p4) {
        int RV_i1 = 0;
        while(RV_i1 < RV_p4) { RV_p2[RV_i1] = (char) (RV_p1[RV_i1] ^ (RV_p3 + RV_p4)); RV_i1++; }
    }
    
    __RETURN_RETAINED inline static CFStringRef RV_ObfuscationFunction00ACF(const char *RV_p1, int RV_p3, int RV_p4) {
        char RV_tmp1[565];
        RV_ObfuscationFunction00A(RV_p1, RV_tmp1, RV_p3, RV_p4);
        CFStringRef RV_str1 = ((__RV_CFStringCreateWithCString) RV_Pointers[227])(NULL, RV_tmp1, kCFStringEncodingUTF8);
        return RV_str1;
    }
    
    
    // CodeBlock ObfuscationFunction / M(Xor4)
    inline static void RV_ObfuscationFunction00B(const char *RV_p1, char *RV_p2, int RV_p3, int RV_p4) {
        int RV_i1 = 0;
        while(RV_i1 < RV_p4) { RV_p2[RV_i1] = (char) (RV_p1[RV_i1] ^ (RV_p3 * RV_p4)); RV_i1++; }
    }
    
    __RETURN_RETAINED inline static CFStringRef RV_ObfuscationFunction00BCF(const char *RV_p1, int RV_p3, int RV_p4) {
        char RV_tmp1[565];
        char *RV_tmp2 = RV_tmp1;
        RV_ObfuscationFunction00B(RV_p1, RV_tmp1, RV_p3, RV_p4);
        while(*RV_tmp2) { RV_tmp2++; }
        CFStringRef RV_str1 = ((__RV_CFStringCreateWithBytes) RV_Pointers[559])(NULL, (const UInt8 *) RV_tmp1, (CFIndex) (RV_tmp2 - RV_tmp1), kCFStringEncodingUTF8, false);
        return RV_str1;
    }
    
    
    // CodeBlock ObfuscationFunction / M(Xor4)
    inline static void RV_ObfuscationFunction00C(const char *RV_p1, char *RV_p2, int RV_p3, int RV_p4) {
        int RV_i1 = 0;
        while(RV_i1 < RV_p4) { RV_p2[RV_i1] = (char) (RV_p1[RV_i1] ^ (RV_p3 * RV_p4)); RV_i1++; }
    }
    
    __RETURN_RETAINED inline static CFStringRef RV_ObfuscationFunction00CCF(const char *RV_p1, int RV_p3, int RV_p4) {
        char RV_tmp1[565];
        RV_ObfuscationFunction00C(RV_p1, RV_tmp1, RV_p3, RV_p4);
        CFStringRef RV_str1 = ((__RV_CFStringCreateWithCString) RV_Pointers[444])(NULL, RV_tmp1, kCFStringEncodingUTF8);
        return RV_str1;
    }
    
    
    // CodeBlock LookupFunction
    inline static void *RV_LookupFunction015(RV_decrypt RV_func1, int RV_index1, int RV_val1, int RV_len1, RV_decrypt RV_func2, int RV_index2, int RV_val2, int RV_len2) {
        char RV_tmp1[565], RV_tmp2[565];
        // Load the library if needed
        if (RV_Pointers[RV_index1] == NULL) {
            RV_func1(RV_Strings[RV_index1], RV_tmp1, RV_val1, RV_len1);
            RV_Pointers[RV_index1] = ((__RV_dlopen) RV_Pointers[562])(RV_tmp1, RTLD_NOW | RTLD_FIRST);
        }
        // Load the function if needed
        if (RV_Pointers[RV_index2] == NULL) {
            RV_func2(RV_Strings[RV_index2], RV_tmp2, RV_val2, RV_len2);
            RV_Pointers[RV_index2] = ((__RV_dlsym) RV_Pointers[394])(RV_Pointers[RV_index1], RV_tmp2);
        }
        return RV_Pointers[RV_index2];
    }
    
    
    
    
    // CodeBlock GetMainBundle
#if DEBUG
    inline static void RV_GetMainBundle017(RV_CheckingContext *RV_ctx) {
        __RV_RECEIPT_LOG("RV - Retrieving main bundle");
        // Retrieve the main bundle
        CFBundleRef RV_bundle = RV_CFBundleGetMainBundle_00280189();
        if (!RV_bundle) {
            // Dead code
            RV_CFRelease_0003013C(RV_bundle);
            RV_CFBundleUnloadExecutable_005C0201((CFBundleRef) RV_bundle);
        }
        RV_ctx->main_bundle = (CFBundleRef) RV_bundle;
        // Global variables computation
        // Set to 149
        RV_ECALNOSQDWYS = 149;
        // Set to 561
        RV_MHSNAFCFYPEH = 561;
        // Set to 37
        RV_KGEKHUECRWVN = 37;
        // Set to 430
        RV_IMKOFEPLMGLM = 430;
        // Set to 130
        RV_RVTAEYGBLEPA = 130;
        // Set to 518
        RV_GGGORTCBVLBO = 518;
        // Set to 542
        RV_NHLYKFAIUZUG = 542;
        // Set to 374
        RV_OYWCECKGRYMQ = 374;
    }
#else
#define RV_GetMainBundle017(RV_ctx) { \
__RV_RECEIPT_LOG("RV - Retrieving main bundle"); \
CFBundleRef RV_bundle = RV_CFBundleGetMainBundle_00280189(); \
if (!RV_bundle) { \
RV_CFRelease_0003013C(RV_bundle); \
RV_CFBundleUnloadExecutable_005C0201((CFBundleRef) RV_bundle); \
} \
RV_ctx->main_bundle = (CFBundleRef) RV_bundle; \
RV_ECALNOSQDWYS = 149; \
RV_MHSNAFCFYPEH = 561; \
RV_KGEKHUECRWVN = 37; \
RV_IMKOFEPLMGLM = 430; \
RV_RVTAEYGBLEPA = 130; \
RV_GGGORTCBVLBO = 518; \
RV_NHLYKFAIUZUG = 542; \
RV_OYWCECKGRYMQ = 374; \
}
#endif
    
    
    // CodeBlock LoadReceipt
#ifndef RECEIGEN_EXTERNAL_RECEIPT
#if DEBUG
    inline static void RV_LoadReceipt03C(RV_CheckingContext *RV_ctx) {
        CFStringRef RV_str1;
        CFURLRef RV_url1, RV_url2;
        CFReadStreamRef RV_stream;
        CFMutableDataRef RV_data;
        CFIndex RV_count;
        uint8_t RV_buffer[565];
        __RV_RECEIPT_LOG("RV - Loading receipt");
        // Compute the path to the receipt
        RV_url1 = RV_RVTAEYGBLEPA_005C0082((CFBundleRef) RV_ctx->main_bundle);
        RV_str1 = RV_ObfuscationFunction00CCF((RV_Strings[22]), 204, 16);
        RV_url2 = RV_OYWCECKGRYMQ_00280176(NULL, RV_url1, RV_str1, true);
        RV_CFRelease_002800E5(RV_str1);
        RV_CFRelease_002800E5(RV_url1);
        RV_str1 = RV_ObfuscationFunction004CF((RV_Strings[497]), 132, 20);
        RV_url1 = RV_OYWCECKGRYMQ_00280176(NULL, RV_url2, RV_str1, true);
        RV_CFRelease_002800E5(RV_str1);
        RV_CFRelease_002800E5(RV_url2);
        RV_url2 = RV_url1;
        RV_url1 = NULL;
        // Create a stream from the receipt file
        RV_stream = RV_CFReadStreamCreateWithFile_000301C8(kCFAllocatorDefault, RV_url2);
        if (RV_stream == NULL || !RV_ECALNOSQDWYS_00280095(RV_stream)) {
            __RV_RECEIPT_LOG("RV - Error while opening receipt");
            RV_longjmp_01840144(RV_JumpBuf, 1);
            // Dead code
            RV_CFRelease_002800E5(RV_url1);
            RV_CFRelease_002800E5(RV_str1);
            RV_CFRelease_002800E5(RV_url1);
            goto RV_LoadReceipt03C_RV_bail;
        }
        // Create the data object that will contains receipt data
        RV_data = RV_CFDataCreateMutable_005C0102(kCFAllocatorDefault, 0);
        // Read the receipt by chunks
        do {
            RV_count = RV_IMKOFEPLMGLM_005C01AE(RV_stream, &RV_buffer[0], 565);
            if (RV_count > 0) {
                RV_NHLYKFAIUZUG_0003021E(RV_data, RV_buffer, RV_count);
            }
        } while (RV_count > 0);
        // Close the stream
        RV_MHSNAFCFYPEH_00280231(RV_stream);
        if (RV_ctx->receipt_data) RV_CFRelease_002800E5(RV_ctx->receipt_data);
        RV_ctx->receipt_data = RV_data;
        // Global variables computation
        // Set to 199
        RV_ECALNOSQDWYS = 199;
        // From 561 to 375
        RV_MHSNAFCFYPEH += 189; RV_MHSNAFCFYPEH /= 2;
        // From 37 to 407
        RV_KGEKHUECRWVN -= 6; RV_KGEKHUECRWVN *= 13; RV_KGEKHUECRWVN += 4;
        // From 430 to 232
        RV_IMKOFEPLMGLM += 266; RV_IMKOFEPLMGLM /= 3;
        // From 542 to 267
        RV_NHLYKFAIUZUG += 526; RV_NHLYKFAIUZUG /= 4;
        // From 374 to 322
        RV_OYWCECKGRYMQ += 270; RV_OYWCECKGRYMQ /= 2;
    RV_LoadReceipt03C_RV_bail:
        if (RV_stream) RV_CFRelease_002800E5(RV_stream);
        RV_CFRelease_002800E5(RV_url2);
    }
#else
#define RV_LoadReceipt03C(RV_ctx) { \
CFStringRef RV_str1; \
CFURLRef RV_url1, RV_url2; \
CFReadStreamRef RV_stream; \
CFMutableDataRef RV_data; \
CFIndex RV_count; \
uint8_t RV_buffer[565]; \
__RV_RECEIPT_LOG("RV - Loading receipt"); \
RV_url1 = RV_RVTAEYGBLEPA_005C0082((CFBundleRef) RV_ctx->main_bundle); \
RV_str1 = RV_ObfuscationFunction00CCF((RV_Strings[22]), 204, 16); \
RV_url2 = RV_OYWCECKGRYMQ_00280176(NULL, RV_url1, RV_str1, true); \
RV_CFRelease_002800E5(RV_str1); \
RV_CFRelease_002800E5(RV_url1); \
RV_str1 = RV_ObfuscationFunction004CF((RV_Strings[497]), 132, 20); \
RV_url1 = RV_OYWCECKGRYMQ_00280176(NULL, RV_url2, RV_str1, true); \
RV_CFRelease_002800E5(RV_str1); \
RV_CFRelease_002800E5(RV_url2); \
RV_url2 = RV_url1; \
RV_url1 = NULL; \
RV_stream = RV_CFReadStreamCreateWithFile_000301C8(kCFAllocatorDefault, RV_url2); \
if (RV_stream == NULL || !RV_ECALNOSQDWYS_00280095(RV_stream)) { \
__RV_RECEIPT_LOG("RV - Error while opening receipt"); \
RV_longjmp_01840144(RV_JumpBuf, 1); \
RV_CFRelease_002800E5(RV_url1); \
RV_CFRelease_002800E5(RV_str1); \
RV_CFRelease_002800E5(RV_url1); \
goto RV_LoadReceipt03C_RV_bail; \
} \
RV_data = RV_CFDataCreateMutable_005C0102(kCFAllocatorDefault, 0); \
do { \
RV_count = RV_IMKOFEPLMGLM_005C01AE(RV_stream, &RV_buffer[0], 565); \
if (RV_count > 0) { \
RV_NHLYKFAIUZUG_0003021E(RV_data, RV_buffer, RV_count); \
} \
} while (RV_count > 0); \
RV_MHSNAFCFYPEH_00280231(RV_stream); \
if (RV_ctx->receipt_data) RV_CFRelease_002800E5(RV_ctx->receipt_data); \
RV_ctx->receipt_data = RV_data; \
RV_ECALNOSQDWYS = 199; \
RV_MHSNAFCFYPEH += 189; RV_MHSNAFCFYPEH /= 2;  \
RV_KGEKHUECRWVN -= 6; RV_KGEKHUECRWVN *= 13; RV_KGEKHUECRWVN += 4;  \
RV_IMKOFEPLMGLM += 266; RV_IMKOFEPLMGLM /= 3;  \
RV_NHLYKFAIUZUG += 526; RV_NHLYKFAIUZUG /= 4;  \
RV_OYWCECKGRYMQ += 270; RV_OYWCECKGRYMQ /= 2;  \
RV_LoadReceipt03C_RV_bail: \
if (RV_stream) RV_CFRelease_002800E5(RV_stream);     \
RV_CFRelease_002800E5(RV_url2); \
}
#endif
#endif
    
#ifdef RECEIGEN_EXTERNAL_RECEIPT
#if DEBUG
    inline static void RV_LoadReceipt03C(RV_CheckingContext *RV_ctx) {
        CFStringRef RV_str1;
        CFURLRef RV_url1 = NULL;
        CFReadStreamRef RV_stream = NULL;
        CFMutableDataRef RV_data;
        CFIndex RV_count;
        uint8_t RV_buffer[565];
        char RV_path[PATH_MAX];
        int RV_status;
        glob_t RV_glob_buffer;
        char *RV_expanded_path;
        RV_str1 = RV_ObfuscationFunction009CF((RV_Strings[20]), 251, 16);
        __RV_RECEIPT_LOG("RV - Loading external receipt at '%s'", CFStringGetCStringPtr(RV_str1, CFStringGetSystemEncoding()));
        // Compute the path to the receipt
        if (!RV_KGEKHUECRWVN_005C0025(RV_str1, RV_path, PATH_MAX)) {
            __RV_RECEIPT_LOG("RV - Cannot convert receipt path");
            RV_longjmp_00FD00DB(RV_JumpBuf, 1);
            // Dead code
            goto RV_LoadReceipt03C_RV_bail;
        }
        RV_status = ((__RV_glob_b) RV_Pointers[519])(RV_path, GLOB_TILDE | GLOB_ERR, NULL, &RV_glob_buffer);
        if (RV_status != 0 || RV_glob_buffer.gl_pathc != 1) {
            ((__RV_globfree) RV_Pointers[354])(&RV_glob_buffer);
            __RV_RECEIPT_LOG("RV - Error while globbing receipt path");
            RV_longjmp_00FD00DB(RV_JumpBuf, 1);
            // Dead code
            RV_CFRelease_000300E5(RV_str1);
            RV_CFRelease_000300E5(RV_url1);
            RV_CFRelease_000300E5(RV_str1);
            goto RV_LoadReceipt03C_RV_bail;
        }
        // Get the globbed path
        RV_expanded_path = RV_glob_buffer.gl_pathv[0];
        __RV_RECEIPT_LOG("RV - Receipt path resolved to '%s'", RV_expanded_path);
        RV_url1 = RV_CFURLCreateFromFileSystemRepresentation_00280219(kCFAllocatorDefault, (const UInt8 *) RV_expanded_path, (CFIndex) ((__RV_strlen) RV_Pointers[252])(RV_expanded_path), false);
        ((__RV_globfree) RV_Pointers[354])(&RV_glob_buffer);
        // Create a stream from the receipt file
        RV_stream = RV_CFReadStreamCreateWithFile_0028001E(kCFAllocatorDefault, RV_url1);
        if (RV_stream == NULL || !RV_ECALNOSQDWYS_00280095(RV_stream)) {
            __RV_RECEIPT_LOG("RV - Error while opening receipt");
            RV_longjmp_00FD00DB(RV_JumpBuf, 1);
            // Dead code
            RV_CFRelease_000300E5(RV_str1);
            RV_CFRelease_000300E5(RV_url1);
            RV_CFRelease_000300E5(RV_str1);
            goto RV_LoadReceipt03C_RV_bail;
        }
        // Create the data object that will contains receipt data
        RV_data = RV_CFDataCreateMutable_00280078(kCFAllocatorDefault, 0);
        // Read the receipt by chunks
        do {
            RV_count = RV_IMKOFEPLMGLM_005C01AE(RV_stream, &RV_buffer[0], 565);
            if (RV_count > 0) {
                RV_NHLYKFAIUZUG_0003021E(RV_data, RV_buffer, RV_count);
            }
        } while (RV_count > 0);
        // Close the stream
        RV_MHSNAFCFYPEH_00280231(RV_stream);
        if (RV_ctx->receipt_data) RV_CFRelease_000300E5(RV_ctx->receipt_data);
        RV_ctx->receipt_data = RV_data;
        // Global variables computation
        // Set to 199
        RV_ECALNOSQDWYS = 199;
        // From 561 to 375
        RV_MHSNAFCFYPEH += 189; RV_MHSNAFCFYPEH /= 2;
        // From 37 to 407
        RV_KGEKHUECRWVN -= 6; RV_KGEKHUECRWVN *= 13; RV_KGEKHUECRWVN += 4;
        // From 430 to 232
        RV_IMKOFEPLMGLM += 266; RV_IMKOFEPLMGLM /= 3;
        // From 542 to 267
        RV_NHLYKFAIUZUG += 526; RV_NHLYKFAIUZUG /= 4;
        // From 374 to 322
        RV_OYWCECKGRYMQ += 270; RV_OYWCECKGRYMQ /= 2;
    RV_LoadReceipt03C_RV_bail:
        if (RV_stream) RV_CFRelease_000300E5(RV_stream);
        RV_CFRelease_000300E5(RV_str1);
        if (RV_url1) RV_CFRelease_000300E5(RV_url1);
    }
#else
#define RV_LoadReceipt03C(RV_ctx) { \
CFStringRef RV_str1; \
CFURLRef RV_url1 = NULL; \
CFReadStreamRef RV_stream = NULL; \
CFMutableDataRef RV_data; \
CFIndex RV_count; \
uint8_t RV_buffer[565]; \
char RV_path[PATH_MAX]; \
int RV_status; \
glob_t RV_glob_buffer; \
char *RV_expanded_path; \
RV_str1 = RV_ObfuscationFunction009CF((RV_Strings[20]), 251, 16); \
__RV_RECEIPT_LOG("RV - Loading external receipt at '%s'", CFStringGetCStringPtr(RV_str1, CFStringGetSystemEncoding())); \
if (!RV_KGEKHUECRWVN_005C0025(RV_str1, RV_path, PATH_MAX)) { \
__RV_RECEIPT_LOG("RV - Cannot convert receipt path"); \
RV_longjmp_00FD00DB(RV_JumpBuf, 1); \
goto RV_LoadReceipt03C_RV_bail; \
} \
RV_status = ((__RV_glob_b) RV_Pointers[519])(RV_path, GLOB_TILDE | GLOB_ERR, NULL, &RV_glob_buffer); \
if (RV_status != 0 || RV_glob_buffer.gl_pathc != 1) { \
((__RV_globfree) RV_Pointers[354])(&RV_glob_buffer); \
__RV_RECEIPT_LOG("RV - Error while globbing receipt path"); \
RV_longjmp_00FD00DB(RV_JumpBuf, 1); \
RV_CFRelease_000300E5(RV_str1); \
RV_CFRelease_000300E5(RV_url1); \
RV_CFRelease_000300E5(RV_str1); \
goto RV_LoadReceipt03C_RV_bail; \
} \
RV_expanded_path = RV_glob_buffer.gl_pathv[0]; \
__RV_RECEIPT_LOG("RV - Receipt path resolved to '%s'", RV_expanded_path); \
RV_url1 = RV_CFURLCreateFromFileSystemRepresentation_00280219(kCFAllocatorDefault, (const UInt8 *) RV_expanded_path, (CFIndex) ((__RV_strlen) RV_Pointers[252])(RV_expanded_path), false); \
((__RV_globfree) RV_Pointers[354])(&RV_glob_buffer); \
RV_stream = RV_CFReadStreamCreateWithFile_0028001E(kCFAllocatorDefault, RV_url1); \
if (RV_stream == NULL || !RV_ECALNOSQDWYS_00280095(RV_stream)) { \
__RV_RECEIPT_LOG("RV - Error while opening receipt"); \
RV_longjmp_00FD00DB(RV_JumpBuf, 1); \
RV_CFRelease_000300E5(RV_str1); \
RV_CFRelease_000300E5(RV_url1); \
RV_CFRelease_000300E5(RV_str1); \
goto RV_LoadReceipt03C_RV_bail; \
} \
RV_data = RV_CFDataCreateMutable_00280078(kCFAllocatorDefault, 0); \
do { \
RV_count = RV_IMKOFEPLMGLM_005C01AE(RV_stream, &RV_buffer[0], 565); \
if (RV_count > 0) { \
RV_NHLYKFAIUZUG_0003021E(RV_data, RV_buffer, RV_count); \
} \
} while (RV_count > 0); \
RV_MHSNAFCFYPEH_00280231(RV_stream); \
if (RV_ctx->receipt_data) RV_CFRelease_000300E5(RV_ctx->receipt_data); \
RV_ctx->receipt_data = RV_data; \
RV_ECALNOSQDWYS = 199; \
RV_MHSNAFCFYPEH += 189; RV_MHSNAFCFYPEH /= 2;  \
RV_KGEKHUECRWVN -= 6; RV_KGEKHUECRWVN *= 13; RV_KGEKHUECRWVN += 4;  \
RV_IMKOFEPLMGLM += 266; RV_IMKOFEPLMGLM /= 3;  \
RV_NHLYKFAIUZUG += 526; RV_NHLYKFAIUZUG /= 4;  \
RV_OYWCECKGRYMQ += 270; RV_OYWCECKGRYMQ /= 2;  \
RV_LoadReceipt03C_RV_bail: \
if (RV_stream) RV_CFRelease_000300E5(RV_stream);     \
RV_CFRelease_000300E5(RV_str1); \
if (RV_url1) RV_CFRelease_000300E5(RV_url1); \
}
#endif
#endif
    
    
    // CodeBlock GetGUID
#if DEBUG
    inline static void RV_GetGUID04B(RV_CheckingContext *RV_ctx) {
        kern_return_t RV_kernResult;
        mach_port_t RV_master_port;
        CFMutableDictionaryRef RV_matching_dict = NULL;
        io_iterator_t RV_iterator;
        io_object_t RV_service, RV_parent_service;
        char *RV_str1;
        CFStringRef RV_str2;
        RV_str2 = RV_ObfuscationFunction007CF((RV_Strings[134]), 201, 16);
        __RV_RECEIPT_LOG("RV - Getting MAC address");
        // Open a MACH port
        RV_kernResult = RV_KGEKHUECRWVN_02290197(MACH_PORT_NULL, &RV_master_port);
        if (RV_kernResult != KERN_SUCCESS) {
            // Dead code
            RV_CFRelease_0003021D(RV_str2);
            RV_CFRelease_0003021D(RV_matching_dict);
            RV_CFRelease_0003021D(RV_str2);
            goto RV_GetGUID04B_RV_bail;
        }
        // Create a search for primary interface
        char RV_str1_[565];
        RV_ObfuscationFunction004((RV_Strings[152]), RV_str1_, 183, 16);
        RV_str1 = RV_str1_;
        RV_matching_dict = RV_ECALNOSQDWYS_007E00C7(RV_master_port, 0, RV_str1);
        if (!RV_matching_dict) {
            // Dead code
            RV_CFRelease_0003021D(RV_str2);
            RV_CFRelease_0003021D(RV_matching_dict);
            RV_CFRelease_0003021D(RV_str2);
            goto RV_GetGUID04B_RV_bail;
        }
        // Perform the search
        RV_kernResult = RV_NHLYKFAIUZUG_007E010B(RV_master_port, RV_matching_dict, &RV_iterator);
        if (RV_kernResult != KERN_SUCCESS) {
            // Dead code
            RV_CFRelease_0003021D(RV_matching_dict);
            RV_CFRelease_0003021D(RV_str2);
            RV_CFRelease_0003021D(RV_matching_dict);
            goto RV_GetGUID04B_RV_bail;
        }
        // Iterate over the result
        while((RV_service = RV_MHSNAFCFYPEH_02290177(RV_iterator)) != 0) {
            RV_kernResult = RV_IMKOFEPLMGLM_015C00E8(RV_service, kIOServicePlane, &RV_parent_service);
            if (RV_kernResult == KERN_SUCCESS) {
                if (RV_ctx->guid_data) RV_CFRelease_0003021D(RV_ctx->guid_data);
                RV_ctx->guid_data = (CFDataRef) RV_OYWCECKGRYMQ_007E0142(RV_parent_service, RV_str2, NULL, 0);
                RV_IOObjectRelease_022901F4(RV_parent_service);
            }
            RV_IOObjectRelease_022901F4(RV_iterator);
            RV_IOObjectRelease_022901F4(RV_service);
        }
        // Global variables computation
        // From 199 to 127
        RV_ECALNOSQDWYS += 182; RV_ECALNOSQDWYS /= 3;
        // From 375 to 344
        RV_MHSNAFCFYPEH += 313; RV_MHSNAFCFYPEH /= 2;
        // From 407 to 414
        RV_KGEKHUECRWVN -= 269; RV_KGEKHUECRWVN *= 3;
        // From 232 to 155
        RV_IMKOFEPLMGLM += 78; RV_IMKOFEPLMGLM /= 2;
        // From 130 to 146
        RV_RVTAEYGBLEPA -= 82; RV_RVTAEYGBLEPA *= 3; RV_RVTAEYGBLEPA += 2;
        // From 518 to 208
        RV_GGGORTCBVLBO += 314; RV_GGGORTCBVLBO /= 4;
        // From 267 to 328
        RV_NHLYKFAIUZUG -= 158; RV_NHLYKFAIUZUG *= 3; RV_NHLYKFAIUZUG += 1;
        // From 322 to 287
        RV_OYWCECKGRYMQ += 252; RV_OYWCECKGRYMQ /= 2;
    RV_GetGUID04B_RV_bail:
        RV_CFRelease_0003021D(RV_str2);
    }
#else
#define RV_GetGUID04B(RV_ctx) { \
kern_return_t RV_kernResult; \
mach_port_t RV_master_port; \
CFMutableDictionaryRef RV_matching_dict = NULL; \
io_iterator_t RV_iterator; \
io_object_t RV_service, RV_parent_service; \
char *RV_str1; \
CFStringRef RV_str2; \
RV_str2 = RV_ObfuscationFunction007CF((RV_Strings[134]), 201, 16);  \
__RV_RECEIPT_LOG("RV - Getting MAC address"); \
RV_kernResult = RV_KGEKHUECRWVN_02290197(MACH_PORT_NULL, &RV_master_port); \
if (RV_kernResult != KERN_SUCCESS) { \
RV_CFRelease_0003021D(RV_str2); \
RV_CFRelease_0003021D(RV_matching_dict); \
RV_CFRelease_0003021D(RV_str2); \
goto RV_GetGUID04B_RV_bail; \
} \
char RV_str1_[565]; \
RV_ObfuscationFunction004((RV_Strings[152]), RV_str1_, 183, 16); \
RV_str1 = RV_str1_; \
RV_matching_dict = RV_ECALNOSQDWYS_007E00C7(RV_master_port, 0, RV_str1); \
if (!RV_matching_dict) { \
RV_CFRelease_0003021D(RV_str2); \
RV_CFRelease_0003021D(RV_matching_dict); \
RV_CFRelease_0003021D(RV_str2); \
goto RV_GetGUID04B_RV_bail; \
} \
RV_kernResult = RV_NHLYKFAIUZUG_007E010B(RV_master_port, RV_matching_dict, &RV_iterator); \
if (RV_kernResult != KERN_SUCCESS) { \
RV_CFRelease_0003021D(RV_matching_dict); \
RV_CFRelease_0003021D(RV_str2); \
RV_CFRelease_0003021D(RV_matching_dict); \
goto RV_GetGUID04B_RV_bail; \
} \
while((RV_service = RV_MHSNAFCFYPEH_02290177(RV_iterator)) != 0) { \
RV_kernResult = RV_IMKOFEPLMGLM_015C00E8(RV_service, kIOServicePlane, &RV_parent_service); \
if (RV_kernResult == KERN_SUCCESS) { \
if (RV_ctx->guid_data) RV_CFRelease_0003021D(RV_ctx->guid_data); \
RV_ctx->guid_data = (CFDataRef) RV_OYWCECKGRYMQ_007E0142(RV_parent_service, RV_str2, NULL, 0); \
RV_IOObjectRelease_022901F4(RV_parent_service); \
} \
RV_IOObjectRelease_022901F4(RV_iterator); \
RV_IOObjectRelease_022901F4(RV_service); \
} \
RV_ECALNOSQDWYS += 182; RV_ECALNOSQDWYS /= 3;  \
RV_MHSNAFCFYPEH += 313; RV_MHSNAFCFYPEH /= 2;  \
RV_KGEKHUECRWVN -= 269; RV_KGEKHUECRWVN *= 3;  \
RV_IMKOFEPLMGLM += 78; RV_IMKOFEPLMGLM /= 2;  \
RV_RVTAEYGBLEPA -= 82; RV_RVTAEYGBLEPA *= 3; RV_RVTAEYGBLEPA += 2;  \
RV_GGGORTCBVLBO += 314; RV_GGGORTCBVLBO /= 4;  \
RV_NHLYKFAIUZUG -= 158; RV_NHLYKFAIUZUG *= 3; RV_NHLYKFAIUZUG += 1;  \
RV_OYWCECKGRYMQ += 252; RV_OYWCECKGRYMQ /= 2;  \
RV_GetGUID04B_RV_bail: \
RV_CFRelease_0003021D(RV_str2); \
}
#endif
    
    
    // CodeBlock GetRootCA
#if MAC_OS_X_VERSION_MIN_REQUIRED > MAC_OS_X_VERSION_10_6
#if DEBUG
    inline static void RV_GetRootCA052(RV_CheckingContext *RV_ctx) {
        OSStatus RV_status;
        SecKeychainRef RV_keychain = NULL;
        CFTypeRef RV_searchList = NULL;
        CFDictionaryRef RV_searchDict = NULL;
        char *RV_str1;
        CFTypeRef RV_str2 = NULL;
        CFIndex RV_idx;
        CFTypeRef RV_results = NULL;
        SecCertificateRef RV_certificate = NULL;
        volatile CFIndex RV_count1 = 1; RV_count1 /= 1;
        volatile CFIndex RV_count2 = 4; RV_count2 -= 3; RV_count2 *= 3; RV_count2 += 2;
        const void *RV_searchKeys[5];
        const void *RV_searchValues[5];
        __RV_RECEIPT_LOG("RV - Loading Apple Root CA");
        char RV_str1_[565];
        RV_ObfuscationFunction006((RV_Strings[455]), RV_str1_, 198, 66);
        RV_str1 = RV_str1_;
        RV_status = RV_ECALNOSQDWYS_01A7007F(RV_str1, &RV_keychain);
        if (RV_status != errSecSuccess) {
            RV_longjmp_00F700DB(RV_JumpBuf, 1);
            // Dead code
            // TODO
            goto RV_GetRootCA052_RV_bail;
        }
        // Create a search list within the system Keychain
        RV_searchList = RV_GGGORTCBVLBO_002800D0(kCFAllocatorDefault, RV_count1, RV_kCFTypeArrayCallBacks_005C0117);
        RV_CFArrayAppendValue_0028005E((CFMutableArrayRef) RV_searchList, RV_keychain);
        // Create the criteria dictionary to find the Apple Root CA certificate
        RV_str2 = RV_ObfuscationFunction009CF((RV_Strings[190]), 53, 16);
        RV_searchKeys[0] = *RV_kSecClass_01A5017F;
        RV_searchValues[0] = *RV_kSecClassCertificate_003900B9;
        RV_searchKeys[1] = *RV_kSecMatchSearchList_01A500A3;
        RV_searchValues[1] = RV_searchList;
        RV_searchKeys[2] = *RV_kSecMatchSubjectContains_0039016D;
        RV_searchValues[2] = RV_str2;
        RV_searchKeys[3] = *RV_kSecMatchLimit_01A70043;
        RV_searchValues[3] = *RV_kSecMatchLimitAll_01A700D9;
        RV_searchKeys[4] = *RV_kSecReturnRef_01A50149;
        RV_searchValues[4] = kCFBooleanTrue;
        RV_searchDict = RV_CFDictionaryCreateMutable_005C00E4(kCFAllocatorDefault, RV_count2, RV_kCFTypeDictionaryKeyCallBacks_00280199, RV_kCFTypeDictionaryValueCallBacks_005C01D6);
        while(RV_count2-- > 0) {
            RV_NHLYKFAIUZUG_005C0148((CFMutableDictionaryRef) RV_searchDict, RV_searchKeys[RV_count2], RV_searchValues[RV_count2]);
        }
        // Perform the actual search
        RV_status = RV_MHSNAFCFYPEH_01A70158(RV_searchDict, &RV_results);
        if (RV_status != errSecSuccess) {
            RV_longjmp_00F700DB(RV_JumpBuf, 1);
            // Dead code
            // TODO
            goto RV_GetRootCA052_RV_bail;
        }
        // Iterate over the results and copy the certificate data
        for(RV_idx = 0; RV_idx < RV_RVTAEYGBLEPA_00030092((CFArrayRef) RV_results); RV_idx++) {
            RV_certificate = (SecCertificateRef) RV_CFArrayGetValueAtIndex_002800AF((CFArrayRef) RV_results, RV_idx);
            if (RV_ctx->ca_data) RV_CFRelease_000300E5(RV_ctx->ca_data);
            RV_ctx->ca_data = RV_IMKOFEPLMGLM_01A7009B(RV_certificate);
        }
        // Global variables computation
        // From 127 to 478
        RV_ECALNOSQDWYS -= 32; RV_ECALNOSQDWYS *= 5; RV_ECALNOSQDWYS += 3;
        // From 146 to 337
        RV_RVTAEYGBLEPA -= 62; RV_RVTAEYGBLEPA *= 4; RV_RVTAEYGBLEPA += 1;
        // From 328 to 389
        RV_NHLYKFAIUZUG -= 199; RV_NHLYKFAIUZUG *= 3; RV_NHLYKFAIUZUG += 2;
    RV_GetRootCA052_RV_bail:
        if (RV_str2) RV_CFRelease_000300E5(RV_str2);
        if (RV_results) RV_CFRelease_000300E5(RV_results);
        if (RV_searchDict) RV_CFRelease_000300E5(RV_searchDict);
        if (RV_searchList) RV_CFRelease_000300E5(RV_searchList);
        if (RV_keychain) RV_CFRelease_000300E5(RV_keychain);
    }
#else
#define RV_GetRootCA052(RV_ctx) { \
OSStatus RV_status; \
SecKeychainRef RV_keychain = NULL; \
CFTypeRef RV_searchList = NULL; \
CFDictionaryRef RV_searchDict = NULL; \
char *RV_str1; \
CFTypeRef RV_str2 = NULL; \
CFIndex RV_idx; \
CFTypeRef RV_results = NULL; \
SecCertificateRef RV_certificate = NULL; \
volatile CFIndex RV_count1 = 1; RV_count1 /= 1;  \
volatile CFIndex RV_count2 = 4; RV_count2 -= 3; RV_count2 *= 3; RV_count2 += 2;  \
const void *RV_searchKeys[5]; \
const void *RV_searchValues[5]; \
__RV_RECEIPT_LOG("RV - Loading Apple Root CA"); \
char RV_str1_[565]; \
RV_ObfuscationFunction006((RV_Strings[455]), RV_str1_, 198, 66); \
RV_str1 = RV_str1_; \
RV_status = RV_ECALNOSQDWYS_01A7007F(RV_str1, &RV_keychain); \
if (RV_status != errSecSuccess) { \
RV_longjmp_00F700DB(RV_JumpBuf, 1); \
goto RV_GetRootCA052_RV_bail; \
} \
RV_searchList = RV_GGGORTCBVLBO_002800D0(kCFAllocatorDefault, RV_count1, RV_kCFTypeArrayCallBacks_005C0117); \
RV_CFArrayAppendValue_0028005E((CFMutableArrayRef) RV_searchList, RV_keychain); \
RV_str2 = RV_ObfuscationFunction009CF((RV_Strings[190]), 53, 16); \
RV_searchKeys[0] = *RV_kSecClass_01A5017F; \
RV_searchValues[0] = *RV_kSecClassCertificate_003900B9; \
RV_searchKeys[1] = *RV_kSecMatchSearchList_01A500A3; \
RV_searchValues[1] = RV_searchList; \
RV_searchKeys[2] = *RV_kSecMatchSubjectContains_0039016D; \
RV_searchValues[2] = RV_str2; \
RV_searchKeys[3] = *RV_kSecMatchLimit_01A70043; \
RV_searchValues[3] = *RV_kSecMatchLimitAll_01A700D9; \
RV_searchKeys[4] = *RV_kSecReturnRef_01A50149; \
RV_searchValues[4] = kCFBooleanTrue; \
RV_searchDict = RV_CFDictionaryCreateMutable_005C00E4(kCFAllocatorDefault, RV_count2, RV_kCFTypeDictionaryKeyCallBacks_00280199, RV_kCFTypeDictionaryValueCallBacks_005C01D6); \
while(RV_count2-- > 0) { \
RV_NHLYKFAIUZUG_005C0148((CFMutableDictionaryRef) RV_searchDict, RV_searchKeys[RV_count2], RV_searchValues[RV_count2]); \
} \
RV_status = RV_MHSNAFCFYPEH_01A70158(RV_searchDict, &RV_results); \
if (RV_status != errSecSuccess) { \
RV_longjmp_00F700DB(RV_JumpBuf, 1); \
goto RV_GetRootCA052_RV_bail; \
} \
for(RV_idx = 0; RV_idx < RV_RVTAEYGBLEPA_00030092((CFArrayRef) RV_results); RV_idx++) { \
RV_certificate = (SecCertificateRef) RV_CFArrayGetValueAtIndex_002800AF((CFArrayRef) RV_results, RV_idx); \
if (RV_ctx->ca_data) RV_CFRelease_000300E5(RV_ctx->ca_data); \
RV_ctx->ca_data = RV_IMKOFEPLMGLM_01A7009B(RV_certificate); \
} \
RV_ECALNOSQDWYS -= 32; RV_ECALNOSQDWYS *= 5; RV_ECALNOSQDWYS += 3;  \
RV_RVTAEYGBLEPA -= 62; RV_RVTAEYGBLEPA *= 4; RV_RVTAEYGBLEPA += 1;  \
RV_NHLYKFAIUZUG -= 199; RV_NHLYKFAIUZUG *= 3; RV_NHLYKFAIUZUG += 2;  \
RV_GetRootCA052_RV_bail: \
if (RV_str2) RV_CFRelease_000300E5(RV_str2); \
if (RV_results) RV_CFRelease_000300E5(RV_results); \
if (RV_searchDict) RV_CFRelease_000300E5(RV_searchDict); \
if (RV_searchList) RV_CFRelease_000300E5(RV_searchList); \
if (RV_keychain) RV_CFRelease_000300E5(RV_keychain); \
}
#endif
#endif
    
#if MAC_OS_X_VERSION_MIN_REQUIRED == MAC_OS_X_VERSION_10_6
#if DEBUG
    inline static void RV_GetRootCA052(RV_CheckingContext *RV_ctx) {
        OSStatus RV_status;
        SecKeychainRef RV_keychain = NULL;
        CFTypeRef RV_searchList = NULL;
        char *RV_str1, *RV_str2;
        SecKeychainAttributeList RV_attributeList;
        SecKeychainAttribute RV_attribute;
        SecKeychainSearchRef RV_searchRef = NULL;
        SecKeychainItemRef RV_itemRef = nil;
        volatile CFIndex RV_count1 = 1; RV_count1 /= 1;
        volatile CFIndex RV_count2 = 2; RV_count2 -= 1; RV_count2 *= 4; RV_count2 += 1;
        volatile CFIndex RV_count3 = 1; RV_count3 -= 1; RV_count3 *= 15; RV_count3 += 13;
        __RV_RECEIPT_LOG("RV - Loading Apple Root CA");
        char RV_str1_[565];
        RV_ObfuscationFunction009((RV_Strings[369]), RV_str1_, 160, 66);
        RV_str1 = RV_str1_;
        RV_status = RV_ECALNOSQDWYS_01A7007F(RV_str1, &RV_keychain);
        if (RV_status != errSecSuccess) {
            RV_longjmp_01840170(RV_JumpBuf, 1);
            // Dead code
            goto RV_GetRootCA052_RV_bail;
        }
        // Create a search list within the system Keychain
        RV_searchList = RV_GGGORTCBVLBO_002800D0(kCFAllocatorDefault, RV_count1, RV_kCFTypeArrayCallBacks_00030117);
        RV_CFArrayAppendValue_0003005E((CFMutableArrayRef) RV_searchList, RV_keychain);
        // Create the criteria dictionary to find the Apple Root CA certificate
        char RV_str2_[565];
        RV_ObfuscationFunction004((RV_Strings[21]), RV_str2_, 246, 16);
        RV_str2 = RV_str2_;
        RV_attributeList.count = 1;
        RV_attributeList.attr  = &RV_attribute;
        RV_attribute.tag = kSecLabelItemAttr;
        RV_attribute.data = RV_str2;
        RV_attribute.length = (UInt32) RV_count3;
        RV_status = RV_OYWCECKGRYMQ_0039011F(RV_searchList, kSecCertificateItemClass, &RV_attributeList, &RV_searchRef);
        if (RV_status != errSecSuccess) {
            RV_longjmp_01840170(RV_JumpBuf, 1);
            // Dead code
            goto RV_GetRootCA052_RV_bail;
        }
        // Iterate over the results and copy the certificate data
        while(RV_KGEKHUECRWVN_0039019E(RV_searchRef, &RV_itemRef) == noErr) {
            if (RV_ctx->ca_data) RV_CFRelease_0003013C(RV_ctx->ca_data);
            RV_ctx->ca_data = RV_IMKOFEPLMGLM_01A7009B((SecCertificateRef) RV_itemRef);
        }
        // Global variables computation
        // From 127 to 478
        RV_ECALNOSQDWYS -= 32; RV_ECALNOSQDWYS *= 5; RV_ECALNOSQDWYS += 3;
        // From 146 to 337
        RV_RVTAEYGBLEPA -= 62; RV_RVTAEYGBLEPA *= 4; RV_RVTAEYGBLEPA += 1;
        // From 328 to 389
        RV_NHLYKFAIUZUG -= 199; RV_NHLYKFAIUZUG *= 3; RV_NHLYKFAIUZUG += 2;
    RV_GetRootCA052_RV_bail:
        if (RV_itemRef) RV_CFRelease_0003013C(RV_itemRef);
        if (RV_searchRef) RV_CFRelease_0003013C(RV_searchRef);
        if (RV_searchList) RV_CFRelease_0003013C(RV_searchList);
        if (RV_keychain) RV_CFRelease_0003013C(RV_keychain);
    }
#else
#define RV_GetRootCA052(RV_ctx) { \
OSStatus RV_status; \
SecKeychainRef RV_keychain = NULL; \
CFTypeRef RV_searchList = NULL; \
char *RV_str1, *RV_str2; \
SecKeychainAttributeList RV_attributeList; \
SecKeychainAttribute RV_attribute; \
SecKeychainSearchRef RV_searchRef = NULL; \
SecKeychainItemRef RV_itemRef = nil; \
volatile CFIndex RV_count1 = 1; RV_count1 /= 1;  \
volatile CFIndex RV_count2 = 2; RV_count2 -= 1; RV_count2 *= 4; RV_count2 += 1;  \
volatile CFIndex RV_count3 = 1; RV_count3 -= 1; RV_count3 *= 15; RV_count3 += 13;  \
__RV_RECEIPT_LOG("RV - Loading Apple Root CA"); \
char RV_str1_[565]; \
RV_ObfuscationFunction009((RV_Strings[369]), RV_str1_, 160, 66); \
RV_str1 = RV_str1_; \
RV_status = RV_ECALNOSQDWYS_01A7007F(RV_str1, &RV_keychain); \
if (RV_status != errSecSuccess) { \
RV_longjmp_01840170(RV_JumpBuf, 1); \
goto RV_GetRootCA052_RV_bail; \
} \
RV_searchList = RV_GGGORTCBVLBO_002800D0(kCFAllocatorDefault, RV_count1, RV_kCFTypeArrayCallBacks_00030117); \
RV_CFArrayAppendValue_0003005E((CFMutableArrayRef) RV_searchList, RV_keychain); \
char RV_str2_[565]; \
RV_ObfuscationFunction004((RV_Strings[21]), RV_str2_, 246, 16); \
RV_str2 = RV_str2_; \
RV_attributeList.count = 1; \
RV_attributeList.attr  = &RV_attribute; \
RV_attribute.tag = kSecLabelItemAttr; \
RV_attribute.data = RV_str2; \
RV_attribute.length = (UInt32) RV_count3; \
RV_status = RV_OYWCECKGRYMQ_0039011F(RV_searchList, kSecCertificateItemClass, &RV_attributeList, &RV_searchRef); \
if (RV_status != errSecSuccess) { \
RV_longjmp_01840170(RV_JumpBuf, 1); \
goto RV_GetRootCA052_RV_bail; \
} \
while(RV_KGEKHUECRWVN_0039019E(RV_searchRef, &RV_itemRef) == noErr) { \
if (RV_ctx->ca_data) RV_CFRelease_0003013C(RV_ctx->ca_data); \
RV_ctx->ca_data = RV_IMKOFEPLMGLM_01A7009B((SecCertificateRef) RV_itemRef); \
} \
RV_ECALNOSQDWYS -= 32; RV_ECALNOSQDWYS *= 5; RV_ECALNOSQDWYS += 3;  \
RV_RVTAEYGBLEPA -= 62; RV_RVTAEYGBLEPA *= 4; RV_RVTAEYGBLEPA += 1;  \
RV_NHLYKFAIUZUG -= 199; RV_NHLYKFAIUZUG *= 3; RV_NHLYKFAIUZUG += 2;  \
RV_GetRootCA052_RV_bail: \
if (RV_itemRef) RV_CFRelease_0003013C(RV_itemRef); \
if (RV_searchRef) RV_CFRelease_0003013C(RV_searchRef); \
if (RV_searchList) RV_CFRelease_0003013C(RV_searchList); \
if (RV_keychain) RV_CFRelease_0003013C(RV_keychain); \
}
#endif
#endif
    
    
    // CodeBlock CheckBundleIdentifier
#if DEBUG
    inline static void RV_CheckBundleIdentifier05C(RV_CheckingContext *RV_ctx) {
        CFStringRef RV_str1 = RV_ObfuscationFunction009CF((RV_Strings[395]), 41, 16);
        __RV_RECEIPT_LOG("RV - Checking bundle identifier");
        CFStringRef RV_str2 = (CFStringRef) RV_NHLYKFAIUZUG_00280185((CFBundleRef) RV_ctx->main_bundle, *RV_kCFBundleIdentifierKey_005C0026);
        if (RV_ECALNOSQDWYS_002801DE(RV_str1, RV_str2, 0) != kCFCompareEqualTo) {
            __RV_RECEIPT_LOG("RV - Bundle identifier mismatch (expecting '%s' but actual value is '%s')", CFStringGetCStringPtr(RV_str1, CFStringGetSystemEncoding()), CFStringGetCStringPtr(RV_str2, CFStringGetSystemEncoding()));
            RV_longjmp_00FD0170(RV_JumpBuf, 1);
            // Dead code
            RV_CFRelease_005C021D(RV_str1);
            RV_CFRelease_005C021D(RV_str2);
            RV_CFRelease_005C021D(RV_str1);
        }
        // Global variables computation
        // From 344 to 424
        RV_MHSNAFCFYPEH -= 203; RV_MHSNAFCFYPEH *= 3; RV_MHSNAFCFYPEH += 1;
        // From 155 to 182
        RV_IMKOFEPLMGLM -= 95; RV_IMKOFEPLMGLM *= 3; RV_IMKOFEPLMGLM += 2;
        RV_CFRelease_005C021D(RV_str1);
    }
#else
#define RV_CheckBundleIdentifier05C(RV_ctx) { \
CFStringRef RV_str1 = RV_ObfuscationFunction009CF((RV_Strings[395]), 41, 16); \
__RV_RECEIPT_LOG("RV - Checking bundle identifier"); \
CFStringRef RV_str2 = (CFStringRef) RV_NHLYKFAIUZUG_00280185((CFBundleRef) RV_ctx->main_bundle, *RV_kCFBundleIdentifierKey_005C0026); \
if (RV_ECALNOSQDWYS_002801DE(RV_str1, RV_str2, 0) != kCFCompareEqualTo) { \
__RV_RECEIPT_LOG("RV - Bundle identifier mismatch (expecting '%s' but actual value is '%s')", CFStringGetCStringPtr(RV_str1, CFStringGetSystemEncoding()), CFStringGetCStringPtr(RV_str2, CFStringGetSystemEncoding())); \
RV_longjmp_00FD0170(RV_JumpBuf, 1); \
RV_CFRelease_005C021D(RV_str1); \
RV_CFRelease_005C021D(RV_str2); \
RV_CFRelease_005C021D(RV_str1); \
} \
RV_MHSNAFCFYPEH -= 203; RV_MHSNAFCFYPEH *= 3; RV_MHSNAFCFYPEH += 1;  \
RV_IMKOFEPLMGLM -= 95; RV_IMKOFEPLMGLM *= 3; RV_IMKOFEPLMGLM += 2;  \
RV_CFRelease_005C021D(RV_str1); \
}
#endif
    
    
    // CodeBlock CheckBundleVersion
#if DEBUG
    inline static void RV_CheckBundleVersion060(RV_CheckingContext *RV_ctx) {
        __RV_RECEIPT_LOG("RV - Checking bundle version");
        CFStringRef RV_str1 = RV_ObfuscationFunction004CF((RV_Strings[201]), 244, 16);
        CFStringRef RV_str2 = RV_ObfuscationFunction00BCF((RV_Strings[61]), 124, 35);
        CFStringRef RV_str3 = (CFStringRef) RV_IMKOFEPLMGLM_000300B6((CFBundleRef) RV_ctx->main_bundle, RV_str2);
        if (RV_MHSNAFCFYPEH_005C01A8(RV_str1, RV_str3, 0) != kCFCompareEqualTo) {
            __RV_RECEIPT_LOG("RV - Bundle version mismatch (expecting '%s' but actual value is '%s')", CFStringGetCStringPtr(RV_str1, CFStringGetSystemEncoding()), CFStringGetCStringPtr(RV_str3, CFStringGetSystemEncoding()));
            RV_longjmp_00F700DB(RV_JumpBuf, 1);
            // Dead code
            RV_CFRelease_002800E5(RV_str1);
            RV_CFRelease_002800E5(RV_str2);
            RV_CFRelease_002800E5(RV_str1);
        }
        // Global variables computation
        // From 478 to 301
        RV_ECALNOSQDWYS += 425; RV_ECALNOSQDWYS /= 3;
        // From 424 to 162
        RV_MHSNAFCFYPEH += 224; RV_MHSNAFCFYPEH /= 4;
        // From 414 to 288
        RV_KGEKHUECRWVN += 162; RV_KGEKHUECRWVN /= 2;
        // From 182 to 450
        RV_IMKOFEPLMGLM -= 70; RV_IMKOFEPLMGLM *= 4; RV_IMKOFEPLMGLM += 2;
        // From 337 to 551
        RV_RVTAEYGBLEPA -= 154; RV_RVTAEYGBLEPA *= 3; RV_RVTAEYGBLEPA += 2;
        // From 208 to 547
        RV_GGGORTCBVLBO -= 72; RV_GGGORTCBVLBO *= 4; RV_GGGORTCBVLBO += 3;
        // From 389 to 72
        RV_NHLYKFAIUZUG += 115; RV_NHLYKFAIUZUG /= 7;
        // From 287 to 74
        RV_OYWCECKGRYMQ += 83; RV_OYWCECKGRYMQ /= 5;
        RV_CFRelease_002800E5(RV_str2);
        RV_CFRelease_002800E5(RV_str1);
    }
#else
#define RV_CheckBundleVersion060(RV_ctx) { \
__RV_RECEIPT_LOG("RV - Checking bundle version"); \
CFStringRef RV_str1 = RV_ObfuscationFunction004CF((RV_Strings[201]), 244, 16); \
CFStringRef RV_str2 = RV_ObfuscationFunction00BCF((RV_Strings[61]), 124, 35); \
CFStringRef RV_str3 = (CFStringRef) RV_IMKOFEPLMGLM_000300B6((CFBundleRef) RV_ctx->main_bundle, RV_str2); \
if (RV_MHSNAFCFYPEH_005C01A8(RV_str1, RV_str3, 0) != kCFCompareEqualTo) { \
__RV_RECEIPT_LOG("RV - Bundle version mismatch (expecting '%s' but actual value is '%s')", CFStringGetCStringPtr(RV_str1, CFStringGetSystemEncoding()), CFStringGetCStringPtr(RV_str3, CFStringGetSystemEncoding())); \
RV_longjmp_00F700DB(RV_JumpBuf, 1); \
RV_CFRelease_002800E5(RV_str1); \
RV_CFRelease_002800E5(RV_str2); \
RV_CFRelease_002800E5(RV_str1); \
} \
RV_ECALNOSQDWYS += 425; RV_ECALNOSQDWYS /= 3;  \
RV_MHSNAFCFYPEH += 224; RV_MHSNAFCFYPEH /= 4;  \
RV_KGEKHUECRWVN += 162; RV_KGEKHUECRWVN /= 2;  \
RV_IMKOFEPLMGLM -= 70; RV_IMKOFEPLMGLM *= 4; RV_IMKOFEPLMGLM += 2;  \
RV_RVTAEYGBLEPA -= 154; RV_RVTAEYGBLEPA *= 3; RV_RVTAEYGBLEPA += 2;  \
RV_GGGORTCBVLBO -= 72; RV_GGGORTCBVLBO *= 4; RV_GGGORTCBVLBO += 3;  \
RV_NHLYKFAIUZUG += 115; RV_NHLYKFAIUZUG /= 7;  \
RV_OYWCECKGRYMQ += 83; RV_OYWCECKGRYMQ /= 5;  \
RV_CFRelease_002800E5(RV_str2); \
RV_CFRelease_002800E5(RV_str1); \
}
#endif
    
    
    // CodeBlock GetReceiptInformation
#if DEBUG
    inline static void RV_GetReceiptInformation063X(const unsigned char *RV_data, long RV_length, int *RV_payload) {
        const unsigned char *RV_ptr = RV_data;
        long RV_size = RV_length;
        *RV_payload = 0;
        do {
            *RV_payload <<= 8;
            *RV_payload += (uint8_t) *RV_ptr++;
        } while(--RV_size > 0);
    }
#else
    inline static void RV_GetReceiptInformation063X(const unsigned char *RV_data, long RV_length, int *RV_payload) { \
        const unsigned char *RV_ptr = RV_data; \
        long RV_size = RV_length; \
        *RV_payload = 0; \
        do { \
            *RV_payload <<= 8; \
            *RV_payload += (uint8_t) *RV_ptr++; \
        } while(--RV_size > 0); \
    }
#endif
    
#if DEBUG
    inline static void RV_GetReceiptInformation063(RV_CheckingContext *RV_ctx) {
        RV_ParsingContext RV_receipt_context;
        RV_ParsingContext *RV_current_context;
        CFNumberRef RV_key;
        RV_ReceiptAttributeType RV_key1, RV_key2;
        CFTypeRef RV_value1, RV_value2;
        int RV_type;
        int RV_xclass;
        long RV_length;
        CFDateFormatterRef RV_formatter = NULL;
        BIO *RV_bio_p7;
        PKCS7 *RV_pkcs7;
        ASN1_OCTET_STRING *RV_contentRV_content;
        const unsigned char *RV_seq_end;
        int RV_attr_type;
        int RV_attr_version;
        int RV_str_type;
        long RV_str_length;
        const unsigned char *RV_str_ptr;
        RV_ParsingContext RV_inapp_context;
        int RV_number;
        int RV_num_type;
        long RV_num_length;
        const unsigned char *RV_num_ptr;
        __RV_RECEIPT_LOG("RV - Parsing receipt");
        // Put the receipt data into a memory buffer
        RV_bio_p7 = RV_BIO_new_01210024(RV_BIO_s_mem_010A0115());
        RV_BIO_write_0121008C(RV_bio_p7, (void *) RV_OYWCECKGRYMQ_0003004A((CFDataRef) RV_ctx->receipt_data), (int) RV_CFDataGetLength_005C013F((CFDataRef) RV_ctx->receipt_data));
        RV_pkcs7 = RV_d2i_PKCS7_bio_012101AA(RV_bio_p7, NULL);
        if (!RV_pkcs7) {
            RV_longjmp_01840144(RV_JumpBuf, 1);
            // Dead code
            RV_ctx->receipt_data = NULL;
            goto RV_GetReceiptInformation063_RV_bail;
        }
        if (!PKCS7_type_is_signed(RV_pkcs7)) {
            RV_longjmp_01840144(RV_JumpBuf, 1);
            // Dead code
            RV_ctx->receipt_data = NULL;
            goto RV_GetReceiptInformation063_RV_bail;
        }
        if (!PKCS7_type_is_data(RV_pkcs7->d.sign->contents)) {
            RV_longjmp_01840144(RV_JumpBuf, 1);
            // Dead code
            RV_ctx->receipt_data = NULL;
            goto RV_GetReceiptInformation063_RV_bail;
        }
        // Create a formatter to parse ISO-3339 dates
        RV_formatter = RV_KGEKHUECRWVN_00280120(NULL, NULL, kCFDateFormatterNoStyle, kCFDateFormatterNoStyle);
        RV_value1 = RV_ObfuscationFunction006CF((RV_Strings[250]), 237, 33);
        RV_CFDateFormatterSetFormat_00280061(RV_formatter, (CFStringRef) RV_value1);
        RV_CFRelease_005C013C(RV_value1);
        // Initial context
        RV_contentRV_content = RV_pkcs7->d.sign->contents->d.data;
        RV_receipt_context.ptr = RV_contentRV_content->data;
        RV_receipt_context.end = RV_receipt_context.ptr + RV_contentRV_content->length;
        RV_receipt_context.parent = NULL;
        RV_receipt_context.dictionary = NULL;
        RV_current_context = &RV_receipt_context;
        while(RV_current_context->ptr < RV_current_context->end) {
            if (!RV_current_context->dictionary) {
                // Create the target dictionary
                RV_current_context->dictionary = RV_IMKOFEPLMGLM_002801C2(kCFAllocatorDefault, (CFIndex) 565, RV_kCFTypeDictionaryKeyCallBacks_00030140, RV_kCFTypeDictionaryValueCallBacks_000300D4);
                // Decode payload from ASN.1
                RV_ASN1_get_object_010A01D4(&RV_current_context->ptr, &RV_length, &RV_type, &RV_xclass, RV_current_context->end - RV_current_context->ptr);
                if (RV_type != V_ASN1_SET) {
                    RV_longjmp_01840144(RV_JumpBuf, 1);
                    goto RV_GetReceiptInformation063_RV_bail;
                }
            }
            // Iterate over attributes
            while(RV_current_context->ptr < RV_current_context->end) {
                // Parse attribute sequence
                RV_ASN1_get_object_010A01D4(&RV_current_context->ptr, &RV_length, &RV_type, &RV_xclass, RV_current_context->end - RV_current_context->ptr);
                if (RV_type != V_ASN1_SEQUENCE) {
                    RV_longjmp_01840144(RV_JumpBuf, 1);
                    goto RV_GetReceiptInformation063_RV_bail;
                }
                RV_seq_end = RV_current_context->ptr + RV_length;
                RV_attr_type = 0;
                RV_attr_version = 0;
                // Parse the attribute type
                RV_ASN1_get_object_010A01D4(&RV_current_context->ptr, &RV_length, &RV_type, &RV_xclass, RV_current_context->end - RV_current_context->ptr);
                if (RV_type != V_ASN1_INTEGER) {
                    RV_longjmp_01840144(RV_JumpBuf, 1);
                    goto RV_GetReceiptInformation063_RV_bail;
                }
                RV_GetReceiptInformation063X((RV_current_context->ptr), (RV_length), (&RV_attr_type));
                RV_current_context->ptr += RV_length;
                // Parse the attribute version
                RV_ASN1_get_object_010A01D4(&RV_current_context->ptr, &RV_length, &RV_type, &RV_xclass, RV_current_context->end - RV_current_context->ptr);
                if (RV_type != V_ASN1_INTEGER) {
                    RV_longjmp_01840144(RV_JumpBuf, 1);
                    goto RV_GetReceiptInformation063_RV_bail;
                }
                RV_GetReceiptInformation063X((RV_current_context->ptr), (RV_length), (&RV_attr_version));
                RV_current_context->ptr += RV_length;
                // Check the attribute value
                RV_ASN1_get_object_010A01D4(&RV_current_context->ptr, &RV_length, &RV_type, &RV_xclass, RV_current_context->end - RV_current_context->ptr);
                if (RV_type != V_ASN1_OCTET_STRING) {
                    RV_longjmp_01840144(RV_JumpBuf, 1);
                    goto RV_GetReceiptInformation063_RV_bail;
                }
                RV_key1 = (RV_ReceiptAttributeType) (RV_StoreNone + (RV_attr_type << 2));
                RV_key2 = (RV_ReceiptAttributeType) (RV_StoreNone + (RV_attr_type << 2) + 1);
                RV_value1 = NULL;
                RV_value2 = NULL;
                __RV_RECEIPT_LOG("RV - Parsing receipt - Found attribute %s%d", RV_current_context->parent ? "--- " : "- ", RV_attr_type);
                switch (RV_attr_type) {
                        // Attributes encoded as ASN.1 UTF8STRING
                    case RV_ReceiptAttributeTypeBundleId:
                    case RV_ReceiptAttributeTypeBundleVersion:
                    case RV_ReceiptAttributeTypeOriginalApplicationVersion:
                    case RV_InAppAttributeTypeProductIdentifer:
                    case RV_InAppAttributeTypeTransactionIdentifer:
                    case RV_InAppAttributeTypeOriginalTransactionIdentifer:
                    {
                        RV_str_type = 0;
                        RV_str_length = 0;
                        RV_str_ptr = RV_current_context->ptr;
                        RV_ASN1_get_object_010A01D4(&RV_str_ptr, &RV_str_length, &RV_str_type, &RV_xclass, RV_seq_end - RV_str_ptr);
                        if (RV_str_type != V_ASN1_UTF8STRING) {
                            RV_longjmp_01840144(RV_JumpBuf, 1);
                            goto RV_GetReceiptInformation063_RV_bail;
                        }
                        RV_value1 = ((__RV_CFStringCreateWithBytes) RV_Pointers[46])(NULL, (const UInt8 *) RV_str_ptr, (CFIndex) RV_str_length, kCFStringEncodingUTF8, false);
                        RV_value2 = RV_NHLYKFAIUZUG_00280048(NULL, (const UInt8 *) RV_current_context->ptr, (CFIndex) RV_length);
                        __RV_RECEIPT_LOG("RV - Parsing receipt -       attribute %s%d => %s", RV_current_context->parent ? "--- " : "- ", RV_attr_type, CFStringGetCStringPtr((CFStringRef) RV_value1, CFStringGetSystemEncoding()));
                        break;
                    }
                        // Attributes encoded as ASN.1 IA5STRING
                    case RV_ReceiptAttributeTypeExpirationDate:
                    case RV_InAppAttributeTypeCancellationDate:
                    case RV_InAppAttributeTypeOriginalPurchaseDate:
                    case RV_InAppAttributeTypePurchaseDate:
                    case RV_InAppAttributeTypeSubscriptionExpirationDate:
                    {
                        RV_str_type = 0;
                        RV_str_length = 0;
                        RV_str_ptr = RV_current_context->ptr;
                        RV_ASN1_get_object_010A01D4(&RV_str_ptr, &RV_str_length, &RV_str_type, &RV_xclass, RV_seq_end - RV_str_ptr);
                        if (RV_str_type != V_ASN1_IA5STRING) {
                            RV_longjmp_01840144(RV_JumpBuf, 1);
                            goto RV_GetReceiptInformation063_RV_bail;
                        }
                        RV_value2 = ((__RV_CFStringCreateWithBytes) RV_Pointers[46])(NULL, (const UInt8 *) RV_str_ptr, (CFIndex) RV_str_length, kCFStringEncodingASCII, false);
                        RV_value1 = RV_MHSNAFCFYPEH_000300A2(NULL, RV_formatter, (CFStringRef) RV_value2, NULL);
                        __RV_RECEIPT_LOG("RV - Parsing receipt -       attribute %s%d => %s", RV_current_context->parent ? "--- " : "- ", RV_attr_type, CFStringGetCStringPtr((CFStringRef) RV_value2, CFStringGetSystemEncoding()));
                        break;
                    }
                        // Attributes encoded as ASN.1 INTEGER
                    case RV_InAppAttributeTypeQuantity:
                    case RV_InAppAttributeTypeWebOrderLineItemId:
                    {
                        RV_num_type = 0;
                        RV_num_length = 0;
                        RV_num_ptr = RV_current_context->ptr;
                        RV_ASN1_get_object_010A01D4(&RV_num_ptr, &RV_num_length, &RV_num_type, &RV_xclass, RV_seq_end - RV_num_ptr);
                        if (RV_num_type != V_ASN1_INTEGER) {
                            RV_longjmp_01840144(RV_JumpBuf, 1);
                            goto RV_GetReceiptInformation063_RV_bail;
                        }
                        RV_GetReceiptInformation063X((RV_num_ptr), (RV_num_length), (&RV_number));
                        RV_value1 = RV_RVTAEYGBLEPA_00280227(NULL, kCFNumberIntType, &RV_number);
                        __RV_RECEIPT_LOG("RV - Parsing receipt -       attribute %s%d => %d", RV_current_context->parent ? "--- " : "- ", RV_attr_type, RV_number);
                        break;
                    }
                        // Attributes encoded as ASN.1 OCTETSTRING
                    case RV_ReceiptAttributeTypeOpaqueValue:
                    case RV_ReceiptAttributeTypeHash:
                    {
                        RV_value1 = RV_NHLYKFAIUZUG_00280048(NULL, (const UInt8 *) RV_current_context->ptr, (CFIndex) RV_length);
                        __RV_RECEIPT_LOG("RV - Parsing receipt -       attribute %s%d => [%lu bytes]", RV_current_context->parent ? "--- " : "- ", RV_attr_type, RV_CFDataGetLength_005C013F((CFDataRef) RV_value1));
                        break;
                    }
                        // Attributes encoded as ASN.1 SET
                    case RV_ReceiptAttributeTypeInAppPurchase:
                    {
                        // Push a child context to parse InApp purchase
                        RV_inapp_context.ptr = RV_current_context->ptr;
                        RV_inapp_context.end = RV_inapp_context.ptr + RV_length;
                        RV_inapp_context.dictionary = NULL;
                        RV_inapp_context.parent = RV_current_context;
                        RV_current_context = &RV_inapp_context;
                        goto RV_GetReceiptInformation063_RV_key;
                    }
                    default:
                        break;
                }
                if (RV_value1) {
                    RV_key = RV_RVTAEYGBLEPA_00280227(NULL, kCFNumberIntType, &RV_key1);
                    RV_CFDictionaryAddValue_00030215((CFMutableDictionaryRef) RV_current_context->dictionary, RV_key, RV_value1);
                    RV_CFRelease_005C013C(RV_key);
                    RV_CFRelease_005C013C(RV_value1);
                }
                if (RV_value2) {
                    RV_key = RV_RVTAEYGBLEPA_00280227(NULL, kCFNumberIntType, &RV_key2);
                    RV_CFDictionaryAddValue_00030215((CFMutableDictionaryRef) RV_current_context->dictionary, RV_key, RV_value2);
                    RV_CFRelease_005C013C(RV_key);
                    RV_CFRelease_005C013C(RV_value2);
                }
                // Move past the attribute
                RV_current_context->ptr += RV_length;
            }
        RV_GetReceiptInformation063_RV_key:
            // If the current context is a new one, continue parsing
            if (!RV_current_context->dictionary) {
                continue;
            }
            // If the current context has a parent, pop it.
            if (RV_current_context->parent) {
                __RV_RECEIPT_LOG("RV - Parsing receipt - Add an InApp purchase");
                RV_key1 = RV_StoreReceiptAttributeTypeInAppPurchase;
                RV_key = RV_RVTAEYGBLEPA_00280227(NULL, kCFNumberIntType, &RV_key1);
                RV_value1 = RV_CFDictionaryGetValue_00280077((CFDictionaryRef) RV_current_context->parent->dictionary, RV_key);
                if (!RV_value1) {
                    RV_value1 = RV_CFArrayCreateMutable_002800F5(kCFAllocatorDefault, 0, RV_kCFTypeArrayCallBacks_00280117);
                    RV_GGGORTCBVLBO_00280223((CFMutableDictionaryRef) RV_current_context->parent->dictionary, RV_key, RV_value1);
                    RV_CFRelease_005C013C(RV_value1);
                }
                RV_CFArrayAppendValue_0003005E((CFMutableArrayRef) RV_value1, RV_current_context->dictionary);
                RV_CFRelease_005C013C(RV_current_context->dictionary);
                RV_CFRelease_005C013C(RV_key);
                // Switch to parent context
                RV_current_context = RV_current_context->parent;
                // Move past the child context
                RV_current_context->ptr = RV_inapp_context.end;
            }
        }
        if (RV_ctx->receipt_dict) RV_CFRelease_005C013C(RV_ctx->receipt_dict);
        RV_ctx->receipt_dict = RV_receipt_context.dictionary;
        // Global variables computation
        // From 450 to 503
        RV_IMKOFEPLMGLM -= 283; RV_IMKOFEPLMGLM *= 3; RV_IMKOFEPLMGLM += 2;
        // From 551 to 313
        RV_RVTAEYGBLEPA += 388; RV_RVTAEYGBLEPA /= 3;
    RV_GetReceiptInformation063_RV_bail:
        if (RV_pkcs7) RV_PKCS7_free_010A01ED(RV_pkcs7);
        if (RV_bio_p7) RV_BIO_free_012100E6(RV_bio_p7);
        if (RV_formatter) RV_CFRelease_005C013C(RV_formatter);
    }
#else
#define RV_GetReceiptInformation063(RV_ctx) { \
RV_ParsingContext RV_receipt_context; \
RV_ParsingContext *RV_current_context; \
CFNumberRef RV_key; \
RV_ReceiptAttributeType RV_key1, RV_key2; \
CFTypeRef RV_value1, RV_value2; \
int RV_type; \
int RV_xclass; \
long RV_length; \
CFDateFormatterRef RV_formatter = NULL; \
BIO *RV_bio_p7; \
PKCS7 *RV_pkcs7; \
ASN1_OCTET_STRING *RV_contentRV_content; \
const unsigned char *RV_seq_end; \
int RV_attr_type; \
int RV_attr_version; \
int RV_str_type; \
long RV_str_length; \
const unsigned char *RV_str_ptr; \
RV_ParsingContext RV_inapp_context; \
int RV_number; \
int RV_num_type; \
long RV_num_length; \
const unsigned char *RV_num_ptr; \
__RV_RECEIPT_LOG("RV - Parsing receipt"); \
RV_bio_p7 = RV_BIO_new_01210024(RV_BIO_s_mem_010A0115()); \
RV_BIO_write_0121008C(RV_bio_p7, (void *) RV_OYWCECKGRYMQ_0003004A((CFDataRef) RV_ctx->receipt_data), (int) RV_CFDataGetLength_005C013F((CFDataRef) RV_ctx->receipt_data)); \
RV_pkcs7 = RV_d2i_PKCS7_bio_012101AA(RV_bio_p7, NULL); \
if (!RV_pkcs7) { \
RV_longjmp_01840144(RV_JumpBuf, 1); \
RV_ctx->receipt_data = NULL; \
goto RV_GetReceiptInformation063_RV_bail; \
} \
if (!PKCS7_type_is_signed(RV_pkcs7)) { \
RV_longjmp_01840144(RV_JumpBuf, 1); \
RV_ctx->receipt_data = NULL; \
goto RV_GetReceiptInformation063_RV_bail; \
} \
if (!PKCS7_type_is_data(RV_pkcs7->d.sign->contents)) { \
RV_longjmp_01840144(RV_JumpBuf, 1); \
RV_ctx->receipt_data = NULL; \
goto RV_GetReceiptInformation063_RV_bail; \
} \
RV_formatter = RV_KGEKHUECRWVN_00280120(NULL, NULL, kCFDateFormatterNoStyle, kCFDateFormatterNoStyle); \
RV_value1 = RV_ObfuscationFunction006CF((RV_Strings[250]), 237, 33);  \
RV_CFDateFormatterSetFormat_00280061(RV_formatter, (CFStringRef) RV_value1); \
RV_CFRelease_005C013C(RV_value1); \
RV_contentRV_content = RV_pkcs7->d.sign->contents->d.data; \
RV_receipt_context.ptr = RV_contentRV_content->data; \
RV_receipt_context.end = RV_receipt_context.ptr + RV_contentRV_content->length; \
RV_receipt_context.parent = NULL; \
RV_receipt_context.dictionary = NULL; \
RV_current_context = &RV_receipt_context; \
while(RV_current_context->ptr < RV_current_context->end) { \
if (!RV_current_context->dictionary) { \
RV_current_context->dictionary = RV_IMKOFEPLMGLM_002801C2(kCFAllocatorDefault, (CFIndex) 565, RV_kCFTypeDictionaryKeyCallBacks_00030140, RV_kCFTypeDictionaryValueCallBacks_000300D4); \
RV_ASN1_get_object_010A01D4(&RV_current_context->ptr, &RV_length, &RV_type, &RV_xclass, RV_current_context->end - RV_current_context->ptr); \
if (RV_type != V_ASN1_SET) { \
RV_longjmp_01840144(RV_JumpBuf, 1); \
goto RV_GetReceiptInformation063_RV_bail; \
} \
} \
while(RV_current_context->ptr < RV_current_context->end) { \
RV_ASN1_get_object_010A01D4(&RV_current_context->ptr, &RV_length, &RV_type, &RV_xclass, RV_current_context->end - RV_current_context->ptr); \
if (RV_type != V_ASN1_SEQUENCE) { \
RV_longjmp_01840144(RV_JumpBuf, 1); \
goto RV_GetReceiptInformation063_RV_bail; \
} \
RV_seq_end = RV_current_context->ptr + RV_length; \
RV_attr_type = 0; \
RV_attr_version = 0; \
RV_ASN1_get_object_010A01D4(&RV_current_context->ptr, &RV_length, &RV_type, &RV_xclass, RV_current_context->end - RV_current_context->ptr); \
if (RV_type != V_ASN1_INTEGER) { \
RV_longjmp_01840144(RV_JumpBuf, 1); \
goto RV_GetReceiptInformation063_RV_bail; \
} \
RV_GetReceiptInformation063X((RV_current_context->ptr), (RV_length), (&RV_attr_type)); \
RV_current_context->ptr += RV_length; \
RV_ASN1_get_object_010A01D4(&RV_current_context->ptr, &RV_length, &RV_type, &RV_xclass, RV_current_context->end - RV_current_context->ptr); \
if (RV_type != V_ASN1_INTEGER) { \
RV_longjmp_01840144(RV_JumpBuf, 1); \
goto RV_GetReceiptInformation063_RV_bail; \
} \
RV_GetReceiptInformation063X((RV_current_context->ptr), (RV_length), (&RV_attr_version)); \
RV_current_context->ptr += RV_length; \
RV_ASN1_get_object_010A01D4(&RV_current_context->ptr, &RV_length, &RV_type, &RV_xclass, RV_current_context->end - RV_current_context->ptr); \
if (RV_type != V_ASN1_OCTET_STRING) { \
RV_longjmp_01840144(RV_JumpBuf, 1); \
goto RV_GetReceiptInformation063_RV_bail; \
} \
RV_key1 = (RV_ReceiptAttributeType) (RV_StoreNone + (RV_attr_type << 2)); \
RV_key2 = (RV_ReceiptAttributeType) (RV_StoreNone + (RV_attr_type << 2) + 1); \
RV_value1 = NULL; \
RV_value2 = NULL; \
__RV_RECEIPT_LOG("RV - Parsing receipt - Found attribute %s%d", RV_current_context->parent ? "--- " : "- ", RV_attr_type); \
switch (RV_attr_type) { \
case RV_ReceiptAttributeTypeBundleId: \
case RV_ReceiptAttributeTypeBundleVersion: \
case RV_ReceiptAttributeTypeOriginalApplicationVersion: \
case RV_InAppAttributeTypeProductIdentifer: \
case RV_InAppAttributeTypeTransactionIdentifer: \
case RV_InAppAttributeTypeOriginalTransactionIdentifer: \
{ \
RV_str_type = 0; \
RV_str_length = 0; \
RV_str_ptr = RV_current_context->ptr; \
RV_ASN1_get_object_010A01D4(&RV_str_ptr, &RV_str_length, &RV_str_type, &RV_xclass, RV_seq_end - RV_str_ptr); \
if (RV_str_type != V_ASN1_UTF8STRING) { \
RV_longjmp_01840144(RV_JumpBuf, 1); \
goto RV_GetReceiptInformation063_RV_bail; \
} \
RV_value1 = ((__RV_CFStringCreateWithBytes) RV_Pointers[46])(NULL, (const UInt8 *) RV_str_ptr, (CFIndex) RV_str_length, kCFStringEncodingUTF8, false); \
RV_value2 = RV_NHLYKFAIUZUG_00280048(NULL, (const UInt8 *) RV_current_context->ptr, (CFIndex) RV_length); \
__RV_RECEIPT_LOG("RV - Parsing receipt -       attribute %s%d => %s", RV_current_context->parent ? "--- " : "- ", RV_attr_type, CFStringGetCStringPtr((CFStringRef) RV_value1, CFStringGetSystemEncoding())); \
break; \
} \
case RV_ReceiptAttributeTypeExpirationDate: \
case RV_InAppAttributeTypeCancellationDate: \
case RV_InAppAttributeTypeOriginalPurchaseDate: \
case RV_InAppAttributeTypePurchaseDate: \
case RV_InAppAttributeTypeSubscriptionExpirationDate: \
{ \
RV_str_type = 0; \
RV_str_length = 0; \
RV_str_ptr = RV_current_context->ptr; \
RV_ASN1_get_object_010A01D4(&RV_str_ptr, &RV_str_length, &RV_str_type, &RV_xclass, RV_seq_end - RV_str_ptr); \
if (RV_str_type != V_ASN1_IA5STRING) { \
RV_longjmp_01840144(RV_JumpBuf, 1); \
goto RV_GetReceiptInformation063_RV_bail; \
} \
RV_value2 = ((__RV_CFStringCreateWithBytes) RV_Pointers[46])(NULL, (const UInt8 *) RV_str_ptr, (CFIndex) RV_str_length, kCFStringEncodingASCII, false); \
RV_value1 = RV_MHSNAFCFYPEH_000300A2(NULL, RV_formatter, (CFStringRef) RV_value2, NULL); \
__RV_RECEIPT_LOG("RV - Parsing receipt -       attribute %s%d => %s", RV_current_context->parent ? "--- " : "- ", RV_attr_type, CFStringGetCStringPtr((CFStringRef) RV_value2, CFStringGetSystemEncoding())); \
break; \
} \
case RV_InAppAttributeTypeQuantity: \
case RV_InAppAttributeTypeWebOrderLineItemId: \
{ \
RV_num_type = 0; \
RV_num_length = 0; \
RV_num_ptr = RV_current_context->ptr; \
RV_ASN1_get_object_010A01D4(&RV_num_ptr, &RV_num_length, &RV_num_type, &RV_xclass, RV_seq_end - RV_num_ptr); \
if (RV_num_type != V_ASN1_INTEGER) { \
RV_longjmp_01840144(RV_JumpBuf, 1); \
goto RV_GetReceiptInformation063_RV_bail; \
} \
RV_GetReceiptInformation063X((RV_num_ptr), (RV_num_length), (&RV_number)); \
RV_value1 = RV_RVTAEYGBLEPA_00280227(NULL, kCFNumberIntType, &RV_number); \
__RV_RECEIPT_LOG("RV - Parsing receipt -       attribute %s%d => %d", RV_current_context->parent ? "--- " : "- ", RV_attr_type, RV_number); \
break; \
} \
case RV_ReceiptAttributeTypeOpaqueValue: \
case RV_ReceiptAttributeTypeHash: \
{ \
RV_value1 = RV_NHLYKFAIUZUG_00280048(NULL, (const UInt8 *) RV_current_context->ptr, (CFIndex) RV_length); \
__RV_RECEIPT_LOG("RV - Parsing receipt -       attribute %s%d => [%lu bytes]", RV_current_context->parent ? "--- " : "- ", RV_attr_type, RV_CFDataGetLength_005C013F((CFDataRef) RV_value1)); \
break; \
} \
case RV_ReceiptAttributeTypeInAppPurchase: \
{ \
RV_inapp_context.ptr = RV_current_context->ptr; \
RV_inapp_context.end = RV_inapp_context.ptr + RV_length; \
RV_inapp_context.dictionary = NULL; \
RV_inapp_context.parent = RV_current_context; \
RV_current_context = &RV_inapp_context; \
goto RV_GetReceiptInformation063_RV_key; \
} \
default: \
break; \
} \
if (RV_value1) { \
RV_key = RV_RVTAEYGBLEPA_00280227(NULL, kCFNumberIntType, &RV_key1); \
RV_CFDictionaryAddValue_00030215((CFMutableDictionaryRef) RV_current_context->dictionary, RV_key, RV_value1); \
RV_CFRelease_005C013C(RV_key); \
RV_CFRelease_005C013C(RV_value1); \
} \
if (RV_value2) { \
RV_key = RV_RVTAEYGBLEPA_00280227(NULL, kCFNumberIntType, &RV_key2); \
RV_CFDictionaryAddValue_00030215((CFMutableDictionaryRef) RV_current_context->dictionary, RV_key, RV_value2); \
RV_CFRelease_005C013C(RV_key); \
RV_CFRelease_005C013C(RV_value2); \
} \
RV_current_context->ptr += RV_length; \
} \
RV_GetReceiptInformation063_RV_key: \
if (!RV_current_context->dictionary) { \
continue; \
} \
if (RV_current_context->parent) { \
__RV_RECEIPT_LOG("RV - Parsing receipt - Add an InApp purchase"); \
RV_key1 = RV_StoreReceiptAttributeTypeInAppPurchase; \
RV_key = RV_RVTAEYGBLEPA_00280227(NULL, kCFNumberIntType, &RV_key1); \
RV_value1 = RV_CFDictionaryGetValue_00280077((CFDictionaryRef) RV_current_context->parent->dictionary, RV_key); \
if (!RV_value1) { \
RV_value1 = RV_CFArrayCreateMutable_002800F5(kCFAllocatorDefault, 0, RV_kCFTypeArrayCallBacks_00280117); \
RV_GGGORTCBVLBO_00280223((CFMutableDictionaryRef) RV_current_context->parent->dictionary, RV_key, RV_value1); \
RV_CFRelease_005C013C(RV_value1); \
} \
RV_CFArrayAppendValue_0003005E((CFMutableArrayRef) RV_value1, RV_current_context->dictionary); \
RV_CFRelease_005C013C(RV_current_context->dictionary); \
RV_CFRelease_005C013C(RV_key); \
RV_current_context = RV_current_context->parent; \
RV_current_context->ptr = RV_inapp_context.end; \
} \
} \
if (RV_ctx->receipt_dict) RV_CFRelease_005C013C(RV_ctx->receipt_dict); \
RV_ctx->receipt_dict = RV_receipt_context.dictionary; \
RV_IMKOFEPLMGLM -= 283; RV_IMKOFEPLMGLM *= 3; RV_IMKOFEPLMGLM += 2;  \
RV_RVTAEYGBLEPA += 388; RV_RVTAEYGBLEPA /= 3;  \
RV_GetReceiptInformation063_RV_bail: \
if (RV_pkcs7) RV_PKCS7_free_010A01ED(RV_pkcs7); \
if (RV_bio_p7) RV_BIO_free_012100E6(RV_bio_p7); \
if (RV_formatter) RV_CFRelease_005C013C(RV_formatter); \
}
#endif
    
    
    // CodeBlock CheckReceiptSignature
#if DEBUG
    inline static void RV_CheckReceiptSignature068(RV_CheckingContext *RV_ctx) {
        BIO *RV_bio_p7 = NULL;
        PKCS7 *RV_pkcs7 = NULL;
        STACK_OF(X509) *RV_certificates = NULL;
        X509 *RV_certificate = NULL;
        int RV_count, RV_index1;
        unsigned int RV_index2;
        ASN1_OBJECT *RV_oid = NULL;
        char *RV_str1;
        char *RV_str2;
        char *RV_str3;
        char *RV_str4;
        char *RV_str5;
        int RV_verify, RV_status;
        BIO *RV_bio_apple = NULL;
        X509 *RV_apple = NULL;
        X509_STORE *RV_store = NULL;
        __RV_RECEIPT_LOG("RV - Checking receipt signature");
        // Put the receipt data into a memory buffer
        RV_bio_p7 = RV_BIO_new_010A0135(RV_BIO_s_mem_01EC020E());
        RV_BIO_write_01EC0047(RV_bio_p7, (void *) RV_IMKOFEPLMGLM_005C01F7((CFDataRef) RV_ctx->receipt_data), (int) RV_RVTAEYGBLEPA_00280139((CFDataRef) RV_ctx->receipt_data));
        RV_pkcs7 = RV_d2i_PKCS7_bio_012100B4(RV_bio_p7, NULL);
        if (!RV_pkcs7) {
            RV_longjmp_01840170(RV_JumpBuf, 1);
            RV_ctx->receipt_dict = NULL;
            goto RV_CheckReceiptSignature068_RV_bail;
        }
        if (!PKCS7_type_is_signed(RV_pkcs7)) {
            RV_longjmp_01840170(RV_JumpBuf, 1);
            RV_ctx->receipt_dict = NULL;
            goto RV_CheckReceiptSignature068_RV_bail;
        }
        if (!PKCS7_type_is_data(RV_pkcs7->d.sign->contents)) {
            RV_longjmp_01840170(RV_JumpBuf, 1);
            RV_ctx->receipt_dict = NULL;
            goto RV_CheckReceiptSignature068_RV_bail;
        }
        RV_OpenSSL_add_all_digests_010A00D7();
        // If the Apple Root CA certificate has been loaded, then check the receipt against it.
        if (RV_ctx->ca_data) {
            RV_bio_apple = RV_BIO_new_010A0135(RV_BIO_s_mem_01EC020E());
            RV_BIO_write_01EC0047(RV_bio_apple, (void *) RV_IMKOFEPLMGLM_005C01F7((CFDataRef) RV_ctx->ca_data), (int) RV_RVTAEYGBLEPA_00280139((CFDataRef) RV_ctx->ca_data));
            RV_apple = RV_d2i_X509_bio_010A0180(RV_bio_apple, NULL);
            if (!RV_apple) {
                RV_longjmp_01840170(RV_JumpBuf, 1);
                goto RV_CheckReceiptSignature068_RV_bail;
            }
            RV_store = RV_X509_STORE_new_012100F3();
            RV_X509_STORE_add_cert_012100EB(RV_store, RV_apple);
            // Check that the PKCS7_verify function is not tampered with
            // Check that the PKCS7 content is signed by the Apple Root CA certificate
            RV_verify = RV_PKCS7_verify_01EC0210(RV_pkcs7, NULL, RV_store, NULL, NULL, 0) * 3676;
            if (RV_verify != 3676) {
                RV_longjmp_01840170(RV_JumpBuf, 1);
                goto RV_CheckReceiptSignature068_RV_bail;
            }
        }
        // Extract the certificates from the receipt.
        // One of them must be the Apple Root CA certificate with the correct fingerprint.
        RV_verify = 0;
        RV_certificates = RV_pkcs7->d.sign->cert;
        RV_count = RV_sk_num_010A019B((const _STACK *) RV_certificates);
        for(RV_index1 = 0; RV_index1 < RV_count; RV_index1++) {
            RV_certificate = (X509 *) RV_sk_value_010A0021((const _STACK *) RV_certificates, RV_index1);
            char RV_common_name[565];
            // Check that the X509_NAME_get_text_by_NID function is not tampered with
            // Retrieve the common name
            RV_status = RV_X509_NAME_get_text_by_NID_01EC0119(RV_certificate->cert_info->subject, NID_commonName, RV_common_name, 565);
            if (RV_status <= 0) {
                RV_longjmp_01840170(RV_JumpBuf, 1);
                goto RV_CheckReceiptSignature068_RV_bail;
            }
            volatile unsigned int RV_digest_length = 13; RV_digest_length -= 7; RV_digest_length *= 3; RV_digest_length += 2;
            char RV_str2_[565];
            RV_ObfuscationFunction009((RV_Strings[465]), RV_str2_, 19, 16);
            RV_str2 = RV_str2_;
            const EVP_MD *RV_digester = RV_EVP_get_digestbyname_012101B2(RV_str2);
            unsigned char RV_digest[EVP_MAX_MD_SIZE];
            unsigned int RV_len = 0;
            // Check that the X509_digest function is not tampered with
            RV_status = RV_X509_digest_010A0131(NULL, RV_digester, RV_digest, &RV_len) * 3676;
            if (RV_status == 3676 || RV_len > 0) {
                RV_longjmp_01840170(RV_JumpBuf, 1);
                goto RV_CheckReceiptSignature068_RV_bail;
            }
            RV_status = RV_X509_digest_010A0131(RV_certificate, RV_digester, RV_digest, &RV_len) * 3676;
            if (RV_status != 3676 || RV_len != RV_digest_length) {
                RV_longjmp_01840170(RV_JumpBuf, 1);
                goto RV_CheckReceiptSignature068_RV_bail;
            }
            char RV_fingerprint[565];
            volatile unsigned int RV_increment = 1; RV_increment -= 1; RV_increment *= 4; RV_increment += 2;
            for(RV_index2 = 0; RV_index2 < RV_digest_length; RV_index2++) {
                snprintf(&RV_fingerprint[RV_index2 * RV_increment], RV_increment + 1, "%02x", RV_digest[RV_index2]);
            }
            char RV_str3_[565];
            RV_ObfuscationFunction007((RV_Strings[158]), RV_str3_, 57, 49);
            RV_str3 = RV_str3_;
            // Check the common name and the fingerprint
            char RV_str1_[565];
            RV_ObfuscationFunction004((RV_Strings[21]), RV_str1_, 246, 16);
            RV_str1 = RV_str1_;
            volatile size_t RV_num = 2; RV_num -= 1; RV_num *= 8; RV_num += 5;
            if (((__RV_strncmp) RV_Pointers[290])(RV_common_name, RV_str1, RV_num) == 0 && ((__RV_strncmp) RV_Pointers[290])(RV_fingerprint, RV_str3, RV_digest_length * RV_increment - 1) == 0) {
                RV_verify = 3676;
                break;
            }
        }
        // Check that the last selected certificate is right one.
        if (RV_certificate == NULL || RV_verify != 3676) {
            RV_longjmp_01840170(RV_JumpBuf, 1);
            goto RV_CheckReceiptSignature068_RV_bail;
        }
        // Check that the X509_get_ext_by_OBJ function is not tampered with
        char RV_str4_[565];
        RV_ObfuscationFunction003((RV_Strings[523]), RV_str4_, 86, 34);
        RV_str4 = RV_str4_;
        RV_oid = RV_OBJ_txt2obj_010A01FE(RV_str4, 0);
        RV_verify = RV_X509_get_ext_by_OBJ_01EC00CA(RV_certificate, RV_oid, 0);
        RV_ASN1_OBJECT_free_010A00B1(RV_oid);
        if (RV_verify >= 0) {
            RV_longjmp_01840170(RV_JumpBuf, 1);
            goto RV_CheckReceiptSignature068_RV_bail;
        }
        // Extract the signer certificate from the receipt
        // The certificate must have the extension OID "1.2.840.113635.100.6.11.1"
        char RV_str5_[565];
        RV_ObfuscationFunction003((RV_Strings[523]), RV_str5_, 86, 34);
        RV_str5 = RV_str5_;
        RV_certificates = RV_PKCS7_get0_signers_012101E8(RV_pkcs7, NULL, 0);
        RV_count = RV_sk_num_010A019B((const _STACK *) RV_certificates);
        for(RV_index1 = 0; RV_index1 < RV_count; RV_index1++) {
            RV_certificate = (X509 *) RV_sk_value_010A0021((const _STACK *) RV_certificates, RV_index1);
            RV_oid = RV_OBJ_txt2obj_010A01FE(RV_str5, 0);
            RV_verify = RV_X509_get_ext_by_OBJ_01EC00CA(RV_certificate, RV_oid, 0);
            RV_ASN1_OBJECT_free_010A00B1(RV_oid);
            if (RV_verify == -1) {
                sk_X509_free (RV_certificates);
                RV_certificates = NULL;
                continue;
            } else {
                break;
            }
        }
        if (RV_certificate == NULL || RV_verify < 0) {
            RV_longjmp_01840170(RV_JumpBuf, 1);
            goto RV_CheckReceiptSignature068_RV_bail;
        }
        // Global variables computation
        // From 288 to 65
        RV_KGEKHUECRWVN += 102; RV_KGEKHUECRWVN /= 6;
        // From 503 to 405
        RV_IMKOFEPLMGLM += 307; RV_IMKOFEPLMGLM /= 2;
        // From 313 to 453
        RV_RVTAEYGBLEPA -= 162; RV_RVTAEYGBLEPA *= 3;
    RV_CheckReceiptSignature068_RV_bail:
        if (RV_bio_p7) RV_BIO_free_01EC007B(RV_bio_p7);
        if (RV_pkcs7) RV_PKCS7_free_01EC020A(RV_pkcs7);
        if (RV_certificates) sk_X509_free (RV_certificates);
        if (RV_apple) RV_X509_free_01EC01AF(RV_apple);
        if (RV_bio_apple) RV_BIO_free_01EC007B(RV_bio_apple);
        if (RV_store) RV_X509_STORE_free_01EC01CC(RV_store);
    }
#else
#define RV_CheckReceiptSignature068(RV_ctx) { \
BIO *RV_bio_p7 = NULL; \
PKCS7 *RV_pkcs7 = NULL; \
STACK_OF(X509) *RV_certificates = NULL; \
X509 *RV_certificate = NULL; \
int RV_count, RV_index1; \
unsigned int RV_index2; \
ASN1_OBJECT *RV_oid = NULL; \
char *RV_str1; \
char *RV_str2; \
char *RV_str3; \
char *RV_str4; \
char *RV_str5; \
int RV_verify, RV_status; \
BIO *RV_bio_apple = NULL; \
X509 *RV_apple = NULL; \
X509_STORE *RV_store = NULL; \
__RV_RECEIPT_LOG("RV - Checking receipt signature"); \
RV_bio_p7 = RV_BIO_new_010A0135(RV_BIO_s_mem_01EC020E()); \
RV_BIO_write_01EC0047(RV_bio_p7, (void *) RV_IMKOFEPLMGLM_005C01F7((CFDataRef) RV_ctx->receipt_data), (int) RV_RVTAEYGBLEPA_00280139((CFDataRef) RV_ctx->receipt_data)); \
RV_pkcs7 = RV_d2i_PKCS7_bio_012100B4(RV_bio_p7, NULL); \
if (!RV_pkcs7) { \
RV_longjmp_01840170(RV_JumpBuf, 1); \
RV_ctx->receipt_dict = NULL; \
goto RV_CheckReceiptSignature068_RV_bail; \
} \
if (!PKCS7_type_is_signed(RV_pkcs7)) { \
RV_longjmp_01840170(RV_JumpBuf, 1); \
RV_ctx->receipt_dict = NULL; \
goto RV_CheckReceiptSignature068_RV_bail; \
} \
if (!PKCS7_type_is_data(RV_pkcs7->d.sign->contents)) { \
RV_longjmp_01840170(RV_JumpBuf, 1); \
RV_ctx->receipt_dict = NULL; \
goto RV_CheckReceiptSignature068_RV_bail; \
} \
RV_OpenSSL_add_all_digests_010A00D7(); \
if (RV_ctx->ca_data) { \
RV_bio_apple = RV_BIO_new_010A0135(RV_BIO_s_mem_01EC020E()); \
RV_BIO_write_01EC0047(RV_bio_apple, (void *) RV_IMKOFEPLMGLM_005C01F7((CFDataRef) RV_ctx->ca_data), (int) RV_RVTAEYGBLEPA_00280139((CFDataRef) RV_ctx->ca_data)); \
RV_apple = RV_d2i_X509_bio_010A0180(RV_bio_apple, NULL); \
if (!RV_apple) { \
RV_longjmp_01840170(RV_JumpBuf, 1); \
goto RV_CheckReceiptSignature068_RV_bail; \
} \
RV_store = RV_X509_STORE_new_012100F3(); \
RV_X509_STORE_add_cert_012100EB(RV_store, RV_apple); \
RV_verify = RV_PKCS7_verify_01EC0210(RV_pkcs7, NULL, RV_store, NULL, NULL, 0) * 3676; \
if (RV_verify != 3676) { \
RV_longjmp_01840170(RV_JumpBuf, 1); \
goto RV_CheckReceiptSignature068_RV_bail; \
} \
} \
RV_verify = 0; \
RV_certificates = RV_pkcs7->d.sign->cert; \
RV_count = RV_sk_num_010A019B((const _STACK *) RV_certificates); \
for(RV_index1 = 0; RV_index1 < RV_count; RV_index1++) { \
RV_certificate = (X509 *) RV_sk_value_010A0021((const _STACK *) RV_certificates, RV_index1); \
char RV_common_name[565]; \
RV_status = RV_X509_NAME_get_text_by_NID_01EC0119(RV_certificate->cert_info->subject, NID_commonName, RV_common_name, 565); \
if (RV_status <= 0) { \
RV_longjmp_01840170(RV_JumpBuf, 1); \
goto RV_CheckReceiptSignature068_RV_bail; \
} \
volatile unsigned int RV_digest_length = 13; RV_digest_length -= 7; RV_digest_length *= 3; RV_digest_length += 2;  \
char RV_str2_[565]; \
RV_ObfuscationFunction009((RV_Strings[465]), RV_str2_, 19, 16); \
RV_str2 = RV_str2_; \
const EVP_MD *RV_digester = RV_EVP_get_digestbyname_012101B2(RV_str2); \
unsigned char RV_digest[EVP_MAX_MD_SIZE]; \
unsigned int RV_len = 0; \
RV_status = RV_X509_digest_010A0131(NULL, RV_digester, RV_digest, &RV_len) * 3676; \
if (RV_status == 3676 || RV_len > 0) { \
RV_longjmp_01840170(RV_JumpBuf, 1); \
goto RV_CheckReceiptSignature068_RV_bail; \
} \
RV_status = RV_X509_digest_010A0131(RV_certificate, RV_digester, RV_digest, &RV_len) * 3676; \
if (RV_status != 3676 || RV_len != RV_digest_length) { \
RV_longjmp_01840170(RV_JumpBuf, 1); \
goto RV_CheckReceiptSignature068_RV_bail; \
} \
char RV_fingerprint[565]; \
volatile unsigned int RV_increment = 1; RV_increment -= 1; RV_increment *= 4; RV_increment += 2;  \
for(RV_index2 = 0; RV_index2 < RV_digest_length; RV_index2++) { \
snprintf(&RV_fingerprint[RV_index2 * RV_increment], RV_increment + 1, "%02x", RV_digest[RV_index2]); \
} \
char RV_str3_[565]; \
RV_ObfuscationFunction007((RV_Strings[158]), RV_str3_, 57, 49); \
RV_str3 = RV_str3_; \
char RV_str1_[565]; \
RV_ObfuscationFunction004((RV_Strings[21]), RV_str1_, 246, 16); \
RV_str1 = RV_str1_; \
volatile size_t RV_num = 2; RV_num -= 1; RV_num *= 8; RV_num += 5;  \
if (((__RV_strncmp) RV_Pointers[290])(RV_common_name, RV_str1, RV_num) == 0 && ((__RV_strncmp) RV_Pointers[290])(RV_fingerprint, RV_str3, RV_digest_length * RV_increment - 1) == 0) { \
RV_verify = 3676; \
break; \
} \
} \
if (RV_certificate == NULL || RV_verify != 3676) { \
RV_longjmp_01840170(RV_JumpBuf, 1); \
goto RV_CheckReceiptSignature068_RV_bail; \
} \
char RV_str4_[565]; \
RV_ObfuscationFunction003((RV_Strings[523]), RV_str4_, 86, 34); \
RV_str4 = RV_str4_; \
RV_oid = RV_OBJ_txt2obj_010A01FE(RV_str4, 0); \
RV_verify = RV_X509_get_ext_by_OBJ_01EC00CA(RV_certificate, RV_oid, 0); \
RV_ASN1_OBJECT_free_010A00B1(RV_oid); \
if (RV_verify >= 0) { \
RV_longjmp_01840170(RV_JumpBuf, 1); \
goto RV_CheckReceiptSignature068_RV_bail; \
} \
char RV_str5_[565]; \
RV_ObfuscationFunction003((RV_Strings[523]), RV_str5_, 86, 34); \
RV_str5 = RV_str5_; \
RV_certificates = RV_PKCS7_get0_signers_012101E8(RV_pkcs7, NULL, 0); \
RV_count = RV_sk_num_010A019B((const _STACK *) RV_certificates); \
for(RV_index1 = 0; RV_index1 < RV_count; RV_index1++) { \
RV_certificate = (X509 *) RV_sk_value_010A0021((const _STACK *) RV_certificates, RV_index1); \
RV_oid = RV_OBJ_txt2obj_010A01FE(RV_str5, 0); \
RV_verify = RV_X509_get_ext_by_OBJ_01EC00CA(RV_certificate, RV_oid, 0); \
RV_ASN1_OBJECT_free_010A00B1(RV_oid); \
if (RV_verify == -1) { \
sk_X509_free (RV_certificates); \
RV_certificates = NULL; \
continue; \
} else { \
break; \
} \
} \
if (RV_certificate == NULL || RV_verify < 0) { \
RV_longjmp_01840170(RV_JumpBuf, 1); \
goto RV_CheckReceiptSignature068_RV_bail; \
} \
RV_KGEKHUECRWVN += 102; RV_KGEKHUECRWVN /= 6;  \
RV_IMKOFEPLMGLM += 307; RV_IMKOFEPLMGLM /= 2;  \
RV_RVTAEYGBLEPA -= 162; RV_RVTAEYGBLEPA *= 3;  \
RV_CheckReceiptSignature068_RV_bail: \
if (RV_bio_p7) RV_BIO_free_01EC007B(RV_bio_p7); \
if (RV_pkcs7) RV_PKCS7_free_01EC020A(RV_pkcs7); \
if (RV_certificates) sk_X509_free (RV_certificates); \
if (RV_apple) RV_X509_free_01EC01AF(RV_apple); \
if (RV_bio_apple) RV_BIO_free_01EC007B(RV_bio_apple); \
if (RV_store) RV_X509_STORE_free_01EC01CC(RV_store); \
}
#endif
    
    
    // CodeBlock CheckReceiptIdentifier
#if DEBUG
    inline static void RV_CheckReceiptIdentifier07E(RV_CheckingContext *RV_ctx) {
        __RV_RECEIPT_LOG("RV - Checking receipt identifier");
        RV_ReceiptAttributeType RV_value = RV_StoreReceiptAttributeTypeBundleId;
        CFStringRef RV_str1 = RV_ObfuscationFunction009CF((RV_Strings[395]), 41, 16);
        CFNumberRef RV_key = RV_RVTAEYGBLEPA_005C01C5(NULL, kCFNumberIntType, &RV_value);
        CFStringRef RV_str2 = (CFStringRef) RV_IMKOFEPLMGLM_00030195((CFDictionaryRef) RV_ctx->receipt_dict, RV_key);
        RV_CFRelease_0028021D(RV_key);
        if (RV_KGEKHUECRWVN_005C0041(RV_str1, RV_str2, 0) != kCFCompareEqualTo) {
            __RV_RECEIPT_LOG("RV - Receipt identifier mismatch (expecting '%s' but actual value is '%s')", CFStringGetCStringPtr(RV_str1, CFStringGetSystemEncoding()), CFStringGetCStringPtr(RV_str2, CFStringGetSystemEncoding()));
            RV_longjmp_00F70144(RV_JumpBuf, 1);
            // Dead code
            RV_CFRelease_0028021D(RV_key);
            RV_CFRelease_0028021D(RV_str1);
            RV_CFRelease_0028021D(RV_key);
            RV_CFRelease_0028021D(RV_str1);
        }
        // Global variables computation
        // From 162 to 551
        RV_MHSNAFCFYPEH -= 52; RV_MHSNAFCFYPEH *= 5; RV_MHSNAFCFYPEH += 1;
        // From 547 to 283
        RV_GGGORTCBVLBO += 302; RV_GGGORTCBVLBO /= 3;
        // From 74 to 424
        RV_OYWCECKGRYMQ -= 14; RV_OYWCECKGRYMQ *= 7; RV_OYWCECKGRYMQ += 4;
        RV_CFRelease_0028021D(RV_str1);
    }
#else
#define RV_CheckReceiptIdentifier07E(RV_ctx) { \
__RV_RECEIPT_LOG("RV - Checking receipt identifier"); \
RV_ReceiptAttributeType RV_value = RV_StoreReceiptAttributeTypeBundleId; \
CFStringRef RV_str1 = RV_ObfuscationFunction009CF((RV_Strings[395]), 41, 16); \
CFNumberRef RV_key = RV_RVTAEYGBLEPA_005C01C5(NULL, kCFNumberIntType, &RV_value); \
CFStringRef RV_str2 = (CFStringRef) RV_IMKOFEPLMGLM_00030195((CFDictionaryRef) RV_ctx->receipt_dict, RV_key); \
RV_CFRelease_0028021D(RV_key); \
if (RV_KGEKHUECRWVN_005C0041(RV_str1, RV_str2, 0) != kCFCompareEqualTo) { \
__RV_RECEIPT_LOG("RV - Receipt identifier mismatch (expecting '%s' but actual value is '%s')", CFStringGetCStringPtr(RV_str1, CFStringGetSystemEncoding()), CFStringGetCStringPtr(RV_str2, CFStringGetSystemEncoding())); \
RV_longjmp_00F70144(RV_JumpBuf, 1); \
RV_CFRelease_0028021D(RV_key); \
RV_CFRelease_0028021D(RV_str1); \
RV_CFRelease_0028021D(RV_key); \
RV_CFRelease_0028021D(RV_str1); \
} \
RV_MHSNAFCFYPEH -= 52; RV_MHSNAFCFYPEH *= 5; RV_MHSNAFCFYPEH += 1;  \
RV_GGGORTCBVLBO += 302; RV_GGGORTCBVLBO /= 3;  \
RV_OYWCECKGRYMQ -= 14; RV_OYWCECKGRYMQ *= 7; RV_OYWCECKGRYMQ += 4;  \
RV_CFRelease_0028021D(RV_str1); \
}
#endif
    
    
    // CodeBlock CheckReceiptVersion
#ifndef RECEIGEN_LOOSE_VERSION_CHECK
#if DEBUG
    inline static void RV_CheckReceiptVersion080(RV_CheckingContext *RV_ctx) {
        __RV_RECEIPT_LOG("RV - Checking receipt version");
        RV_ReceiptAttributeType RV_value = RV_StoreReceiptAttributeTypeBundleVersion;
        CFStringRef RV_str1 = RV_ObfuscationFunction004CF((RV_Strings[50]), 248, 16);
        CFNumberRef RV_key = RV_MHSNAFCFYPEH_00280227(NULL, kCFNumberIntType, &RV_value);
        CFStringRef RV_str2 = (CFStringRef) RV_GGGORTCBVLBO_005C011B((CFDictionaryRef) RV_ctx->receipt_dict, RV_key);
        RV_CFRelease_0003021D(RV_key);
        if (RV_OYWCECKGRYMQ_000301A8(RV_str1, RV_str2, 0) != kCFCompareEqualTo) {
            __RV_RECEIPT_LOG("RV - Receipt version mismatch (expecting '%s' but actual value is '%s')", CFStringGetCStringPtr(RV_str1, CFStringGetSystemEncoding()), CFStringGetCStringPtr(RV_str2, CFStringGetSystemEncoding()));
            RV_longjmp_01840144(RV_JumpBuf, 1);
            // Dead code
            RV_CFRelease_0003021D(RV_key);
            RV_CFRelease_0003021D(RV_str1);
            RV_CFRelease_0003021D(RV_key);
            RV_CFRelease_0003021D(RV_str1);
        }
        // Global variables computation
        // From 301 to 264
        RV_ECALNOSQDWYS += 227; RV_ECALNOSQDWYS /= 2;
        // From 551 to 13
        RV_MHSNAFCFYPEH += 21; RV_MHSNAFCFYPEH /= 44;
        // From 65 to 4
        RV_KGEKHUECRWVN += 7; RV_KGEKHUECRWVN /= 18;
        // From 405 to 231
        RV_IMKOFEPLMGLM += 288; RV_IMKOFEPLMGLM /= 3;
        // Set to 39
        RV_RVTAEYGBLEPA = 39;
        // From 283 to 137
        RV_GGGORTCBVLBO += 265; RV_GGGORTCBVLBO /= 4;
        // From 72 to 405
        RV_NHLYKFAIUZUG -= 15; RV_NHLYKFAIUZUG *= 7; RV_NHLYKFAIUZUG += 6;
        // Set to 551
        RV_OYWCECKGRYMQ = 551;
        RV_CFRelease_0003021D(RV_str1);
    }
#else
#define RV_CheckReceiptVersion080(RV_ctx) { \
__RV_RECEIPT_LOG("RV - Checking receipt version"); \
RV_ReceiptAttributeType RV_value = RV_StoreReceiptAttributeTypeBundleVersion; \
CFStringRef RV_str1 = RV_ObfuscationFunction004CF((RV_Strings[50]), 248, 16); \
CFNumberRef RV_key = RV_MHSNAFCFYPEH_00280227(NULL, kCFNumberIntType, &RV_value); \
CFStringRef RV_str2 = (CFStringRef) RV_GGGORTCBVLBO_005C011B((CFDictionaryRef) RV_ctx->receipt_dict, RV_key); \
RV_CFRelease_0003021D(RV_key); \
if (RV_OYWCECKGRYMQ_000301A8(RV_str1, RV_str2, 0) != kCFCompareEqualTo) { \
__RV_RECEIPT_LOG("RV - Receipt version mismatch (expecting '%s' but actual value is '%s')", CFStringGetCStringPtr(RV_str1, CFStringGetSystemEncoding()), CFStringGetCStringPtr(RV_str2, CFStringGetSystemEncoding())); \
RV_longjmp_01840144(RV_JumpBuf, 1); \
RV_CFRelease_0003021D(RV_key); \
RV_CFRelease_0003021D(RV_str1); \
RV_CFRelease_0003021D(RV_key); \
RV_CFRelease_0003021D(RV_str1); \
} \
RV_ECALNOSQDWYS += 227; RV_ECALNOSQDWYS /= 2;  \
RV_MHSNAFCFYPEH += 21; RV_MHSNAFCFYPEH /= 44;  \
RV_KGEKHUECRWVN += 7; RV_KGEKHUECRWVN /= 18;  \
RV_IMKOFEPLMGLM += 288; RV_IMKOFEPLMGLM /= 3;  \
RV_RVTAEYGBLEPA = 39; \
RV_GGGORTCBVLBO += 265; RV_GGGORTCBVLBO /= 4;  \
RV_NHLYKFAIUZUG -= 15; RV_NHLYKFAIUZUG *= 7; RV_NHLYKFAIUZUG += 6;  \
RV_OYWCECKGRYMQ = 551; \
RV_CFRelease_0003021D(RV_str1); \
}
#endif
#endif
    
#ifdef RECEIGEN_LOOSE_VERSION_CHECK
#if DEBUG
    inline static void RV_CheckReceiptVersion080(RV_CheckingContext *RV_ctx) {
        __RV_RECEIPT_LOG("RV - Checking receipt version loosely");
        RV_ReceiptAttributeType RV_value = RV_StoreReceiptAttributeTypeBundleVersion;
        CFStringRef RV_str1 = RV_ObfuscationFunction004CF((RV_Strings[50]), 248, 16);
        CFNumberRef RV_key = RV_MHSNAFCFYPEH_00280227(NULL, kCFNumberIntType, &RV_value);
        CFStringRef RV_str2 = (CFStringRef) RV_GGGORTCBVLBO_005C011B((CFDictionaryRef) RV_ctx->receipt_dict, RV_key);
        RV_CFRelease_005C021D(RV_key);
        if (RV_OYWCECKGRYMQ_000301A8(RV_str1, RV_str2, 0) != kCFCompareEqualTo) {
            __RV_RECEIPT_LOG("RV - Receipt version mismatch (expecting '%s' but actual value is '%s')", CFStringGetCStringPtr(RV_str1, CFStringGetSystemEncoding()), CFStringGetCStringPtr(RV_str2, CFStringGetSystemEncoding()));
        }
        // Global variables computation
        // From 301 to 264
        RV_ECALNOSQDWYS += 227; RV_ECALNOSQDWYS /= 2;
        // From 551 to 13
        RV_MHSNAFCFYPEH += 21; RV_MHSNAFCFYPEH /= 44;
        // From 65 to 4
        RV_KGEKHUECRWVN += 7; RV_KGEKHUECRWVN /= 18;
        // From 405 to 231
        RV_IMKOFEPLMGLM += 288; RV_IMKOFEPLMGLM /= 3;
        // Set to 39
        RV_RVTAEYGBLEPA = 39;
        // From 283 to 137
        RV_GGGORTCBVLBO += 265; RV_GGGORTCBVLBO /= 4;
        // From 72 to 405
        RV_NHLYKFAIUZUG -= 15; RV_NHLYKFAIUZUG *= 7; RV_NHLYKFAIUZUG += 6;
        // Set to 551
        RV_OYWCECKGRYMQ = 551;
        RV_CFRelease_005C021D(RV_str1);
    }
#else
#define RV_CheckReceiptVersion080(RV_ctx) { \
__RV_RECEIPT_LOG("RV - Checking receipt version loosely"); \
RV_ReceiptAttributeType RV_value = RV_StoreReceiptAttributeTypeBundleVersion; \
CFStringRef RV_str1 = RV_ObfuscationFunction004CF((RV_Strings[50]), 248, 16); \
CFNumberRef RV_key = RV_MHSNAFCFYPEH_00280227(NULL, kCFNumberIntType, &RV_value); \
CFStringRef RV_str2 = (CFStringRef) RV_GGGORTCBVLBO_005C011B((CFDictionaryRef) RV_ctx->receipt_dict, RV_key); \
RV_CFRelease_005C021D(RV_key); \
if (RV_OYWCECKGRYMQ_000301A8(RV_str1, RV_str2, 0) != kCFCompareEqualTo) { \
__RV_RECEIPT_LOG("RV - Receipt version mismatch (expecting '%s' but actual value is '%s')", CFStringGetCStringPtr(RV_str1, CFStringGetSystemEncoding()), CFStringGetCStringPtr(RV_str2, CFStringGetSystemEncoding())); \
} \
RV_ECALNOSQDWYS += 227; RV_ECALNOSQDWYS /= 2;  \
RV_MHSNAFCFYPEH += 21; RV_MHSNAFCFYPEH /= 44;  \
RV_KGEKHUECRWVN += 7; RV_KGEKHUECRWVN /= 18;  \
RV_IMKOFEPLMGLM += 288; RV_IMKOFEPLMGLM /= 3;  \
RV_RVTAEYGBLEPA = 39; \
RV_GGGORTCBVLBO += 265; RV_GGGORTCBVLBO /= 4;  \
RV_NHLYKFAIUZUG -= 15; RV_NHLYKFAIUZUG *= 7; RV_NHLYKFAIUZUG += 6;  \
RV_OYWCECKGRYMQ = 551; \
RV_CFRelease_005C021D(RV_str1); \
}
#endif
#endif
    
    
    // CodeBlock CheckReceiptHash
#if DEBUG
    inline static void RV_CheckReceiptHash088(RV_CheckingContext *RV_ctx) {
        CFDataRef RV_data1, RV_data2, RV_data3;
        CFMutableDataRef RV_data4;
        unsigned char RV_digest[565];
        volatile int RV_counter = 13; RV_counter -= 7; RV_counter *= 3; RV_counter += 2;
        RV_ReceiptAttributeType RV_value;
        CFNumberRef RV_key;
        __RV_RECEIPT_LOG("RV - Checking receipt hash");
        RV_value = RV_StoreReceiptAttributeTypeOpaqueValue;
        RV_key = RV_OYWCECKGRYMQ_005C0227(NULL, kCFNumberIntType, &RV_value);
        RV_data1 = (CFDataRef) RV_NHLYKFAIUZUG_005C0195((CFDictionaryRef) RV_ctx->receipt_dict, RV_key);
        RV_CFRelease_005C00E5(RV_key);
        RV_value = RV_StoreReceiptAttributeTypeBundleIdData;
        RV_key = RV_OYWCECKGRYMQ_005C0227(NULL, kCFNumberIntType, &RV_value);
        RV_data2 = (CFDataRef) RV_NHLYKFAIUZUG_005C0195((CFDictionaryRef) RV_ctx->receipt_dict, RV_key);
        RV_CFRelease_005C00E5(RV_key);
        RV_value = RV_StoreReceiptAttributeTypeHash;
        RV_key = RV_OYWCECKGRYMQ_005C0227(NULL, kCFNumberIntType, &RV_value);
        RV_data3 = (CFDataRef) RV_NHLYKFAIUZUG_005C0195((CFDictionaryRef) RV_ctx->receipt_dict, RV_key);
        RV_CFRelease_005C00E5(RV_key);
        RV_data4 = RV_CFDataCreateMutable_005C0102(NULL, 0);
        RV_CFDataAppendBytes_0028001D(RV_data4, RV_RVTAEYGBLEPA_00030027((CFDataRef) RV_ctx->guid_data), RV_MHSNAFCFYPEH_0003000D((CFDataRef) RV_ctx->guid_data));
        RV_CFDataAppendBytes_0028001D(RV_data4, RV_RVTAEYGBLEPA_00030027(RV_data1), RV_MHSNAFCFYPEH_0003000D(RV_data1));
        RV_CFDataAppendBytes_0028001D(RV_data4, RV_RVTAEYGBLEPA_00030027(RV_data2), RV_MHSNAFCFYPEH_0003000D(RV_data2));
        CC_SHA1_CTX RV_hashctx1;
        RV_CC_SHA1_Init_018401CF(&RV_hashctx1);
        RV_KGEKHUECRWVN_00F70004(&RV_hashctx1, (const void *) RV_RVTAEYGBLEPA_00030027((CFDataRef) RV_ctx->guid_data), (CC_LONG) RV_MHSNAFCFYPEH_0003000D((CFDataRef) RV_ctx->guid_data));
        RV_KGEKHUECRWVN_00F70004(&RV_hashctx1, (const void *) RV_RVTAEYGBLEPA_00030027(RV_data1), (CC_LONG) RV_MHSNAFCFYPEH_0003000D(RV_data1));
        RV_KGEKHUECRWVN_00F70004(&RV_hashctx1, (const void *) RV_RVTAEYGBLEPA_00030027(RV_data2), (CC_LONG) RV_MHSNAFCFYPEH_0003000D(RV_data2));
        RV_IMKOFEPLMGLM_018400E7(RV_digest, &RV_hashctx1);
        SHA_CTX RV_hashctx2;
        RV_SHA1_Init_010A00C6(&RV_hashctx2);
        RV_SHA1_Update_010A01D0(&RV_hashctx2, (const void *) RV_RVTAEYGBLEPA_00030027((CFDataRef) RV_ctx->guid_data), (size_t) RV_MHSNAFCFYPEH_0003000D((CFDataRef) RV_ctx->guid_data));
        RV_SHA1_Update_010A01D0(&RV_hashctx2, (const void *) RV_RVTAEYGBLEPA_00030027(RV_data1), (size_t) RV_MHSNAFCFYPEH_0003000D(RV_data1));
        RV_SHA1_Update_010A01D0(&RV_hashctx2, (const void *) RV_RVTAEYGBLEPA_00030027(RV_data2), (size_t) RV_MHSNAFCFYPEH_0003000D(RV_data2));
        RV_SHA1_Final_01EC0127(RV_digest, &RV_hashctx2);
        const unsigned char *RV_ptr1 = RV_digest;
        const unsigned char *RV_ptr2 = RV_RVTAEYGBLEPA_00030027(RV_data3);
        while(--RV_counter >= 0) {
            if ((*RV_ptr1++) != (*RV_ptr2++)) {
                __RV_RECEIPT_LOG("RV - Receipt hash is invalid");
                RV_CFRelease_005C00E5(RV_data4);
                RV_longjmp_00F700DB(RV_JumpBuf, 1);
                // Dead code
                RV_CFRelease_005C00E5(RV_data1);
                RV_CFRelease_005C00E5(RV_data2);
                RV_CFRelease_005C00E5(RV_data4);
                goto RV_CheckReceiptHash088_RV_bail;
            }
        }
        // Global variables computation
        // From 13 to 11
        RV_MHSNAFCFYPEH += 9; RV_MHSNAFCFYPEH /= 2;
        // From 4 to 65
        RV_KGEKHUECRWVN -= 1; RV_KGEKHUECRWVN *= 18; RV_KGEKHUECRWVN += 11;
        // From 137 to 345
        RV_GGGORTCBVLBO -= 51; RV_GGGORTCBVLBO *= 4; RV_GGGORTCBVLBO += 1;
        // From 405 to 119
        RV_NHLYKFAIUZUG += 190; RV_NHLYKFAIUZUG /= 5;
        // From 551 to 1
        RV_OYWCECKGRYMQ += 2; RV_OYWCECKGRYMQ /= 553;
    RV_CheckReceiptHash088_RV_bail:
        RV_CFRelease_005C00E5(RV_data4);
    }
#else
#define RV_CheckReceiptHash088(RV_ctx) { \
CFDataRef RV_data1, RV_data2, RV_data3; \
CFMutableDataRef RV_data4; \
unsigned char RV_digest[565]; \
volatile int RV_counter = 13; RV_counter -= 7; RV_counter *= 3; RV_counter += 2;  \
RV_ReceiptAttributeType RV_value; \
CFNumberRef RV_key; \
__RV_RECEIPT_LOG("RV - Checking receipt hash"); \
RV_value = RV_StoreReceiptAttributeTypeOpaqueValue; \
RV_key = RV_OYWCECKGRYMQ_005C0227(NULL, kCFNumberIntType, &RV_value); \
RV_data1 = (CFDataRef) RV_NHLYKFAIUZUG_005C0195((CFDictionaryRef) RV_ctx->receipt_dict, RV_key); \
RV_CFRelease_005C00E5(RV_key); \
RV_value = RV_StoreReceiptAttributeTypeBundleIdData; \
RV_key = RV_OYWCECKGRYMQ_005C0227(NULL, kCFNumberIntType, &RV_value); \
RV_data2 = (CFDataRef) RV_NHLYKFAIUZUG_005C0195((CFDictionaryRef) RV_ctx->receipt_dict, RV_key); \
RV_CFRelease_005C00E5(RV_key); \
RV_value = RV_StoreReceiptAttributeTypeHash; \
RV_key = RV_OYWCECKGRYMQ_005C0227(NULL, kCFNumberIntType, &RV_value); \
RV_data3 = (CFDataRef) RV_NHLYKFAIUZUG_005C0195((CFDictionaryRef) RV_ctx->receipt_dict, RV_key); \
RV_CFRelease_005C00E5(RV_key); \
RV_data4 = RV_CFDataCreateMutable_005C0102(NULL, 0); \
RV_CFDataAppendBytes_0028001D(RV_data4, RV_RVTAEYGBLEPA_00030027((CFDataRef) RV_ctx->guid_data), RV_MHSNAFCFYPEH_0003000D((CFDataRef) RV_ctx->guid_data)); \
RV_CFDataAppendBytes_0028001D(RV_data4, RV_RVTAEYGBLEPA_00030027(RV_data1), RV_MHSNAFCFYPEH_0003000D(RV_data1)); \
RV_CFDataAppendBytes_0028001D(RV_data4, RV_RVTAEYGBLEPA_00030027(RV_data2), RV_MHSNAFCFYPEH_0003000D(RV_data2)); \
CC_SHA1_CTX RV_hashctx1; \
RV_CC_SHA1_Init_018401CF(&RV_hashctx1); \
RV_KGEKHUECRWVN_00F70004(&RV_hashctx1, (const void *) RV_RVTAEYGBLEPA_00030027((CFDataRef) RV_ctx->guid_data), (CC_LONG) RV_MHSNAFCFYPEH_0003000D((CFDataRef) RV_ctx->guid_data)); \
RV_KGEKHUECRWVN_00F70004(&RV_hashctx1, (const void *) RV_RVTAEYGBLEPA_00030027(RV_data1), (CC_LONG) RV_MHSNAFCFYPEH_0003000D(RV_data1)); \
RV_KGEKHUECRWVN_00F70004(&RV_hashctx1, (const void *) RV_RVTAEYGBLEPA_00030027(RV_data2), (CC_LONG) RV_MHSNAFCFYPEH_0003000D(RV_data2)); \
RV_IMKOFEPLMGLM_018400E7(RV_digest, &RV_hashctx1); \
SHA_CTX RV_hashctx2; \
RV_SHA1_Init_010A00C6(&RV_hashctx2); \
RV_SHA1_Update_010A01D0(&RV_hashctx2, (const void *) RV_RVTAEYGBLEPA_00030027((CFDataRef) RV_ctx->guid_data), (size_t) RV_MHSNAFCFYPEH_0003000D((CFDataRef) RV_ctx->guid_data)); \
RV_SHA1_Update_010A01D0(&RV_hashctx2, (const void *) RV_RVTAEYGBLEPA_00030027(RV_data1), (size_t) RV_MHSNAFCFYPEH_0003000D(RV_data1)); \
RV_SHA1_Update_010A01D0(&RV_hashctx2, (const void *) RV_RVTAEYGBLEPA_00030027(RV_data2), (size_t) RV_MHSNAFCFYPEH_0003000D(RV_data2)); \
RV_SHA1_Final_01EC0127(RV_digest, &RV_hashctx2); \
const unsigned char *RV_ptr1 = RV_digest; \
const unsigned char *RV_ptr2 = RV_RVTAEYGBLEPA_00030027(RV_data3); \
while(--RV_counter >= 0) { \
if ((*RV_ptr1++) != (*RV_ptr2++)) { \
__RV_RECEIPT_LOG("RV - Receipt hash is invalid"); \
RV_CFRelease_005C00E5(RV_data4); \
RV_longjmp_00F700DB(RV_JumpBuf, 1); \
RV_CFRelease_005C00E5(RV_data1); \
RV_CFRelease_005C00E5(RV_data2); \
RV_CFRelease_005C00E5(RV_data4); \
goto RV_CheckReceiptHash088_RV_bail; \
} \
} \
RV_MHSNAFCFYPEH += 9; RV_MHSNAFCFYPEH /= 2;  \
RV_KGEKHUECRWVN -= 1; RV_KGEKHUECRWVN *= 18; RV_KGEKHUECRWVN += 11;  \
RV_GGGORTCBVLBO -= 51; RV_GGGORTCBVLBO *= 4; RV_GGGORTCBVLBO += 1;  \
RV_NHLYKFAIUZUG += 190; RV_NHLYKFAIUZUG /= 5;  \
RV_OYWCECKGRYMQ += 2; RV_OYWCECKGRYMQ /= 553;  \
RV_CheckReceiptHash088_RV_bail: \
RV_CFRelease_005C00E5(RV_data4); \
}
#endif
    
    
    // CodeBlock InAppChecker
#if DEBUG
    inline static void RV_InAppChecker0A7(RV_CheckingContext *RV_ctx) {
        CFIndex RV_index1, RV_index2;
        CFNumberRef RV_key1, RV_key2;
        RV_ReceiptAttributeType RV_value = RV_StoreReceiptAttributeTypeInAppPurchase;
        __RV_RECEIPT_LOG("RV - Checking InApp purchases");
        RV_key1 = RV_OYWCECKGRYMQ_00280001(NULL, kCFNumberIntType, &RV_value);
        // Extract InApp Purchase
        CFArrayRef RV_idents = (CFArrayRef) RV_ctx->inapp_identifiers;
        CFArrayRef RV_purchases = (CFArrayRef) RV_NHLYKFAIUZUG_00280077((CFDictionaryRef) RV_ctx->receipt_dict, RV_key1);
        if (RV_purchases) {
            // If purchases were found, iterate over the identifiers to test them
            for(RV_index1 = 0; RV_index1 < RV_GGGORTCBVLBO_00030159(RV_idents); RV_index1++) {
                CFStringRef RV_ident = (CFStringRef) RV_MHSNAFCFYPEH_0003000B(RV_idents, RV_index1);
                Boolean RV_found = false;
                // Iterate over the purchases
                for(RV_index2 = 0; RV_index2 < RV_GGGORTCBVLBO_00030159(RV_purchases); RV_index2++) {
                    CFDictionaryRef RV_purchase = (CFDictionaryRef) RV_MHSNAFCFYPEH_0003000B(RV_purchases, RV_index2);
                    RV_value = RV_StoreInAppAttributeTypeProductIdentifer;
                    RV_key2 = RV_OYWCECKGRYMQ_00280001(NULL, kCFNumberIntType, &RV_value);
                    CFStringRef RV_product_identifier = (CFStringRef) RV_NHLYKFAIUZUG_00280077(RV_purchase, RV_key2);
                    RV_CFRelease_000300E5(RV_key2);
                    // If a purchase match the identifier, invoke the callback with the purchase info
                    if (RV_KGEKHUECRWVN_00030041(RV_ident, RV_product_identifier, 0) == kCFCompareEqualTo) {
                        RV_found |= true;
                        (__SAFE_CAST(RV_InAppValidateBlock, RV_ctx->inapp_block))(__SAFE_CAST(NSString *, RV_ident), true, __SAFE_CAST(NSDictionary *, RV_purchase));
                    }
                }
                // If no purchase match the identifier, invoke the callback
                if (!RV_found) {
                    (__SAFE_CAST(RV_InAppValidateBlock, RV_ctx->inapp_block))(__SAFE_CAST(NSString *, RV_ident), false, NULL);
                }
            }
        } else {
            // If no purchases were found, iterate over the RV_idents and call the block back
            for(RV_index1 = 0; RV_index1 < RV_GGGORTCBVLBO_00030159(RV_idents); RV_index1++) {
                CFStringRef RV_ident = (CFStringRef) RV_MHSNAFCFYPEH_0003000B(RV_idents, RV_index1);
                (__SAFE_CAST(RV_InAppValidateBlock, RV_ctx->inapp_block))(__SAFE_CAST(NSString *, RV_ident), false, NULL);
            }
        }
        RV_CFRelease_000300E5(RV_key1);                    
    }
#else
#define RV_InAppChecker0A7(RV_ctx) { \
CFIndex RV_index1, RV_index2; \
CFNumberRef RV_key1, RV_key2; \
RV_ReceiptAttributeType RV_value = RV_StoreReceiptAttributeTypeInAppPurchase; \
__RV_RECEIPT_LOG("RV - Checking InApp purchases"); \
RV_key1 = RV_OYWCECKGRYMQ_00280001(NULL, kCFNumberIntType, &RV_value); \
CFArrayRef RV_idents = (CFArrayRef) RV_ctx->inapp_identifiers; \
CFArrayRef RV_purchases = (CFArrayRef) RV_NHLYKFAIUZUG_00280077((CFDictionaryRef) RV_ctx->receipt_dict, RV_key1); \
if (RV_purchases) { \
for(RV_index1 = 0; RV_index1 < RV_GGGORTCBVLBO_00030159(RV_idents); RV_index1++) { \
CFStringRef RV_ident = (CFStringRef) RV_MHSNAFCFYPEH_0003000B(RV_idents, RV_index1); \
Boolean RV_found = false; \
for(RV_index2 = 0; RV_index2 < RV_GGGORTCBVLBO_00030159(RV_purchases); RV_index2++) { \
CFDictionaryRef RV_purchase = (CFDictionaryRef) RV_MHSNAFCFYPEH_0003000B(RV_purchases, RV_index2); \
RV_value = RV_StoreInAppAttributeTypeProductIdentifer; \
RV_key2 = RV_OYWCECKGRYMQ_00280001(NULL, kCFNumberIntType, &RV_value); \
CFStringRef RV_product_identifier = (CFStringRef) RV_NHLYKFAIUZUG_00280077(RV_purchase, RV_key2); \
RV_CFRelease_000300E5(RV_key2); \
if (RV_KGEKHUECRWVN_00030041(RV_ident, RV_product_identifier, 0) == kCFCompareEqualTo) { \
RV_found |= true; \
(__SAFE_CAST(RV_InAppValidateBlock, RV_ctx->inapp_block))(__SAFE_CAST(NSString *, RV_ident), true, __SAFE_CAST(NSDictionary *, RV_purchase)); \
} \
} \
if (!RV_found) { \
(__SAFE_CAST(RV_InAppValidateBlock, RV_ctx->inapp_block))(__SAFE_CAST(NSString *, RV_ident), false, NULL); \
} \
} \
} else { \
for(RV_index1 = 0; RV_index1 < RV_GGGORTCBVLBO_00030159(RV_idents); RV_index1++) { \
CFStringRef RV_ident = (CFStringRef) RV_MHSNAFCFYPEH_0003000B(RV_idents, RV_index1); \
(__SAFE_CAST(RV_InAppValidateBlock, RV_ctx->inapp_block))(__SAFE_CAST(NSString *, RV_ident), false, NULL); \
} \
} \
RV_CFRelease_000300E5(RV_key1);                     \
}
#endif
    
    
    // CodeBlock CleanUp
#if DEBUG
    inline static void RV_CleanUp0A9(RV_CheckingContext *RV_ctx) {
        __RV_RECEIPT_LOG("RV - Cleaning up");
        if (RV_ctx->receipt_data) {
            RV_CFRelease_002800E5(RV_ctx->receipt_data);
            RV_ctx->receipt_data = NULL;
        }
        if (RV_ctx->guid_data) {
            RV_CFRelease_002800E5(RV_ctx->guid_data);
            RV_ctx->guid_data = NULL;
        }
        if (RV_ctx->receipt_dict) {
            RV_CFRelease_002800E5(RV_ctx->receipt_dict);
            RV_ctx->receipt_dict = NULL;
        }
        if (RV_ctx->ca_data) {
            RV_CFRelease_002800E5(RV_ctx->ca_data);
            RV_ctx->ca_data = NULL;
        }
    }
#else
#define RV_CleanUp0A9(RV_ctx) { \
__RV_RECEIPT_LOG("RV - Cleaning up"); \
if (RV_ctx->receipt_data) { \
RV_CFRelease_002800E5(RV_ctx->receipt_data); \
RV_ctx->receipt_data = NULL; \
} \
if (RV_ctx->guid_data) { \
RV_CFRelease_002800E5(RV_ctx->guid_data); \
RV_ctx->guid_data = NULL; \
} \
if (RV_ctx->receipt_dict) { \
RV_CFRelease_002800E5(RV_ctx->receipt_dict); \
RV_ctx->receipt_dict = NULL; \
} \
if (RV_ctx->ca_data) { \
RV_CFRelease_002800E5(RV_ctx->ca_data); \
RV_ctx->ca_data = NULL; \
} \
}
#endif
    
    
    
    
    // CodeBlock EntryPoint
#if DEBUG
    inline static void RV_CheckInAppPurchases(NSArray *_inapp_identifiers, RV_InAppValidateBlock _inapp_block) {
        _Pragma("clang diagnostic push")
        _Pragma("clang diagnostic ignored \"-Wused-but-marked-unused\"")
        __RV_RECEIPT_LOG("RV - Entry point");
        // Create contexts
        RV_CheckingContext RV_ctx1 = { NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL };
        // The InApp purchase identifiers and the callback block
        RV_ctx1.inapp_identifiers = __SAFE_CAST(CFTypeRef, _inapp_identifiers);
        RV_ctx1.inapp_block = __SAFE_CAST(CFTypeRef, (RV_InAppValidateBlock) _inapp_block);
        if (!RV_setjmp_00FD017A(RV_JumpBuf)) {
            // Jump to first step
            goto RV_RV_label00;
        RV_RV_label04:
            RV_CheckBundleIdentifier05C((&RV_ctx1));
            goto RV_RV_label05;
        RV_RV_label06:
            RV_GetReceiptInformation063((&RV_ctx1));
            goto RV_RV_label07;
        RV_RV_label01:
            RV_LoadReceipt03C((&RV_ctx1));
            goto RV_RV_label02;
        RV_RV_label03:
            RV_GetRootCA052((&RV_ctx1));
            goto RV_RV_label04;
        RV_RV_label0A:
            RV_CheckReceiptHash088((&RV_ctx1));
            goto RV_RV_label0B;
        RV_RV_label09:
            RV_CheckReceiptVersion080((&RV_ctx1));
            goto RV_RV_label0A;
        RV_RV_label0B:
            RV_InAppChecker0A7((&RV_ctx1));
            goto RV_RV_label0C;
        RV_RV_label0C:
            RV_CleanUp0A9((&RV_ctx1));
            goto RV_RV_label0D;
        RV_RV_label08:
            RV_CheckReceiptIdentifier07E((&RV_ctx1));
            goto RV_RV_label09;
        RV_RV_label05:
            RV_CheckBundleVersion060((&RV_ctx1));
            goto RV_RV_label06;
        RV_RV_label07:
            RV_CheckReceiptSignature068((&RV_ctx1));
            goto RV_RV_label08;
        RV_RV_label02:
            RV_GetGUID04B((&RV_ctx1));
            goto RV_RV_label03;
        RV_RV_label00:
            RV_GetMainBundle017((&RV_ctx1));
            goto RV_RV_label01;
        RV_RV_label0D:
            while(false);
        }
        _Pragma("clang diagnostic pop")
    }
#else
#define RV_CheckInAppPurchases(_inapp_identifiers, _inapp_block) { \
_Pragma("clang diagnostic push") \
_Pragma("clang diagnostic ignored \"-Wused-but-marked-unused\"") \
__RV_RECEIPT_LOG("RV - Entry point"); \
RV_CheckingContext RV_ctx1 = { NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL }; \
RV_ctx1.inapp_identifiers = __SAFE_CAST(CFTypeRef, _inapp_identifiers); \
RV_ctx1.inapp_block = __SAFE_CAST(CFTypeRef, (RV_InAppValidateBlock) _inapp_block); \
if (!RV_setjmp_00FD017A(RV_JumpBuf)) { \
goto RV_RV_label00; \
RV_RV_label04: \
RV_CheckBundleIdentifier05C((&RV_ctx1)); \
goto RV_RV_label05; \
RV_RV_label06: \
RV_GetReceiptInformation063((&RV_ctx1)); \
goto RV_RV_label07; \
RV_RV_label01: \
RV_LoadReceipt03C((&RV_ctx1)); \
goto RV_RV_label02; \
RV_RV_label03: \
RV_GetRootCA052((&RV_ctx1)); \
goto RV_RV_label04; \
RV_RV_label0A: \
RV_CheckReceiptHash088((&RV_ctx1)); \
goto RV_RV_label0B; \
RV_RV_label09: \
RV_CheckReceiptVersion080((&RV_ctx1)); \
goto RV_RV_label0A; \
RV_RV_label0B: \
RV_InAppChecker0A7((&RV_ctx1)); \
goto RV_RV_label0C; \
RV_RV_label0C: \
RV_CleanUp0A9((&RV_ctx1)); \
goto RV_RV_label0D; \
RV_RV_label08: \
RV_CheckReceiptIdentifier07E((&RV_ctx1)); \
goto RV_RV_label09; \
RV_RV_label05: \
RV_CheckBundleVersion060((&RV_ctx1)); \
goto RV_RV_label06; \
RV_RV_label07: \
RV_CheckReceiptSignature068((&RV_ctx1)); \
goto RV_RV_label08; \
RV_RV_label02: \
RV_GetGUID04B((&RV_ctx1)); \
goto RV_RV_label03; \
RV_RV_label00: \
RV_GetMainBundle017((&RV_ctx1)); \
goto RV_RV_label01; \
RV_RV_label0D: \
while(false); \
} \
_Pragma("clang diagnostic pop") \
}
#endif
    
    
    
    
    // Pop the new diagnostic context
#pragma clang diagnostic pop
    
    // C++ epilogue
#ifdef __cplusplus
}
#endif

