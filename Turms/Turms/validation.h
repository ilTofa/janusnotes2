//
// This code was generated by RECEIGEN 3.4.0.0 and will use:
//
// Platform                   : OSX
// CFBundleIdentifier         : it.iltofa.Turms
// CFBundleShortVersionString : 2.0.4
// Prefix                     : RV
// Success Behavior           : CheckInApp
// Failure Behavior           : DoNothing
//
// This generated code has to be linked to OpenSSL (either statically or dynamically)
// Refer to the website for more details and specific cases.
//

// C++ prologue
#ifdef __cplusplus
extern "C" {
#endif
    
    // Headers for general purpose functions
#import <AvailabilityMacros.h>
#import <objc/objc.h>
#import <CoreFoundation/CoreFoundation.h>
#import <Foundation/Foundation.h>
    // Headers for system calls
#import <dlfcn.h>
#import <setjmp.h>
#import <glob.h>
    
    // Headers for bundle security checks
#import <Security/Security.h>
#import <CommonCrypto/CommonDigest.h>
    
    // Headers from OpenSSL
#import <openssl/bio.h>
#import <openssl/err.h>
#import <openssl/objects.h>
#import <openssl/pkcs7.h>
#import <openssl/sha.h>
#import <openssl/x509.h>
    
    // Define this if you are linking a pre-1.0.0 OpenSSL (like the one found on OS X)
#ifdef RECEIGEN_USE_PRE_1_0_0_OPENSSL
#ifndef _STACK
#define _STACK STACK
#endif
#endif
    
    // Headers for network checks
#import <IOKit/IOKitLib.h>
#import <arpa/inet.h>
#import <ifaddrs.h>
#import <net/if.h>
#import <net/if_dl.h>
    
    // Some compilers provide the capability to test if certain attributes are available.
    // This macro provides a compatibility path for other compilers.
#ifndef __has_feature
#define __has_feature(X)    0
#endif
    
    // Define macros that deal with ARC if enable.
#ifndef __SAFE_CAST
#if __has_feature(objc_arc)
#define __SAFE_CAST(T,X)    (__bridge T) X
#define __RETURN_RETAINED   __attribute__((ns_returns_retained))
#else
#define __SAFE_CAST(T,X)    (T) X
#define __RETURN_RETAINED
#endif
#endif
    
    // Define to turn-off debug logs
#ifndef RECEIGEN_QUIET_DEBUG
#define RECEIGEN_QUIET_DEBUG 0
#endif
    
    // Log statement for debugging purpose
#if RECEIGEN_QUIET_DEBUG
#define __RV_RECEIPT_LOG(...)
#elif defined DEBUG
#if __OBJC__
#define __RV_RECEIPT_LOG(...)    NSLog(@__VA_ARGS__)
#else
#define __RV_RECEIPT_LOG(...)    fprintf(stderr, __VA_ARGS__); fprintf(stderr, "\n")
#endif
#else
#define __RV_RECEIPT_LOG(...)
#endif
    
    // Otherwise specified, check the entitlements
#ifndef RECEIGEN_CHECK_ENTITLEMENTS
#define RECEIGEN_CHECK_ENTITLEMENTS 1
#endif
    
    // Function pointer for string decryption
    typedef void (*RV_decrypt)(const char *, char *, int, int);
    
    // Block used when validating InApp purchases.
    typedef void (^RV_InAppValidateBlock)(NSString *identifier, BOOL isPresent, NSDictionary *purchaseInfo);
    
    // Keys for each receipt attribute
    typedef enum _RV_ReceiptAttributeType {
        
        // Bundle identifier
        RV_ReceiptAttributeTypeBundleId = 2,
        // Application version
        RV_ReceiptAttributeTypeBundleVersion = 3,
        // Opaque value
        RV_ReceiptAttributeTypeOpaqueValue = 4,
        // Hash value
        RV_ReceiptAttributeTypeHash = 5,
        // In-app purchase receipt
        RV_ReceiptAttributeTypeInAppPurchase = 17,
        // Original Application Version
        RV_ReceiptAttributeTypeOriginalApplicationVersion = 19,
        // Receipt Expiration Date
        RV_ReceiptAttributeTypeExpirationDate = 21,
        // Quantity
        RV_InAppAttributeTypeQuantity = 1701,
        // Product identifier
        RV_InAppAttributeTypeProductIdentifer = 1702,
        // Transaction identifier
        RV_InAppAttributeTypeTransactionIdentifer = 1703,
        // Purchase date
        RV_InAppAttributeTypePurchaseDate = 1704,
        // Original transaction identifier
        RV_InAppAttributeTypeOriginalTransactionIdentifer = 1705,
        // Original purchase date
        RV_InAppAttributeTypeOriginalPurchaseDate = 1706,
        // Subscription Expiration Date
        RV_InAppAttributeTypeSubscriptionExpirationDate = 1708,
        // Web Order Line Item ID
        RV_InAppAttributeTypeWebOrderLineItemId = 1711,
        // Cancellation Date
        RV_InAppAttributeTypeCancellationDate = 1712,
        
        // Storage key base value
        RV_StoreNone = 2464,
        // Bundle identifier
        RV_StoreReceiptAttributeTypeBundleId = RV_StoreNone + (RV_ReceiptAttributeTypeBundleId << 3),
        RV_StoreReceiptAttributeTypeBundleIdData = RV_StoreNone + (RV_ReceiptAttributeTypeBundleId << 3) + 1,
        // Application version
        RV_StoreReceiptAttributeTypeBundleVersion = RV_StoreNone + (RV_ReceiptAttributeTypeBundleVersion << 3),
        RV_StoreReceiptAttributeTypeBundleVersionData = RV_StoreNone + (RV_ReceiptAttributeTypeBundleId << 3) + 1,
        // Opaque value
        RV_StoreReceiptAttributeTypeOpaqueValue = RV_StoreNone + (RV_ReceiptAttributeTypeOpaqueValue << 3),
        // Hash value
        RV_StoreReceiptAttributeTypeHash = RV_StoreNone + (RV_ReceiptAttributeTypeHash << 3),
        // In-app purchase receipt
        RV_StoreReceiptAttributeTypeInAppPurchase = RV_StoreNone + (RV_ReceiptAttributeTypeInAppPurchase << 3),
        // Original Application Version
        RV_StoreReceiptAttributeTypeOriginalApplicationVersion = RV_StoreNone + (RV_ReceiptAttributeTypeOriginalApplicationVersion << 3),
        // Receipt Expiration Date
        RV_StoreReceiptAttributeTypeExpirationDate = RV_StoreNone + (RV_ReceiptAttributeTypeExpirationDate << 3),
        // Quantity
        RV_StoreInAppAttributeTypeQuantity = RV_StoreNone + (RV_InAppAttributeTypeQuantity << 3),
        // Product identifier
        RV_StoreInAppAttributeTypeProductIdentifer = RV_StoreNone + (RV_InAppAttributeTypeProductIdentifer << 3),
        // Transaction identifier
        RV_StoreInAppAttributeTypeTransactionIdentifer = RV_StoreNone + (RV_InAppAttributeTypeTransactionIdentifer << 3),
        // Purchase date
        RV_StoreInAppAttributeTypePurchaseDate = RV_StoreNone + (RV_InAppAttributeTypePurchaseDate << 3),
        // Original transaction identifier
        RV_StoreInAppAttributeTypeOriginalTransactionIdentifer = RV_StoreNone + (RV_InAppAttributeTypeOriginalTransactionIdentifer << 3),
        // Original purchase date
        RV_StoreInAppAttributeTypeOriginalPurchaseDate = RV_StoreNone + (RV_InAppAttributeTypeOriginalPurchaseDate << 3),
        // Subscription Expiration Date
        RV_StoreInAppAttributeTypeSubscriptionExpirationDate = RV_StoreNone + (RV_InAppAttributeTypeSubscriptionExpirationDate << 3),
        // Web Order Line Item ID
        RV_StoreInAppAttributeTypeWebOrderLineItemId = RV_StoreNone + (RV_InAppAttributeTypeWebOrderLineItemId << 3),
        // Cancellation Date
        RV_StoreInAppAttributeTypeCancellationDate = RV_StoreNone + (RV_InAppAttributeTypeCancellationDate << 3)
        
    } RV_ReceiptAttributeType;
    
    // Constants for Receipt info query
#define RV_RECEIPT_ATTRIBUTETYPE_BUNDLE_ID                        [NSNumber numberWithInt:RV_StoreReceiptAttributeTypeBundleId]
#define RV_RECEIPT_ATTRIBUTETYPE_BUNDLE_VERSION                   [NSNumber numberWithInt:RV_StoreReceiptAttributeTypeBundleVersion]
#define RV_RECEIPT_ATTRIBUTETYPE_ORIGINAL_APPLICATION_VERSION     [NSNumber numberWithInt:RV_StoreReceiptAttributeTypeOriginalApplicationVersion]
#define RV_RECEIPT_ATTRIBUTETYPE_EXPIRATION_DATE                  [NSNumber numberWithInt:RV_StoreReceiptAttributeTypeExpirationDate]
    
    // Constants for InApp info query
#define RV_INAPP_ATTRIBUTETYPE_QUANTITY                           [NSNumber numberWithInt:RV_StoreInAppAttributeTypeQuantity]
#define RV_INAPP_ATTRIBUTETYPE_PRODUCTIDENTIFER                   [NSNumber numberWithInt:RV_StoreInAppAttributeTypeProductIdentifer]
#define RV_INAPP_ATTRIBUTETYPE_TRANSACTIONIDENTIFER               [NSNumber numberWithInt:RV_StoreInAppAttributeTypeTransactionIdentifer]
#define RV_INAPP_ATTRIBUTETYPE_PURCHASEDATE                       [NSNumber numberWithInt:RV_StoreInAppAttributeTypePurchaseDate]
#define RV_INAPP_ATTRIBUTETYPE_ORIGINALTRANSACTIONIDENTIFER       [NSNumber numberWithInt:RV_StoreInAppAttributeTypeOriginalTransactionIdentifer]
#define RV_INAPP_ATTRIBUTETYPE_ORIGINALPURCHASEDATE               [NSNumber numberWithInt:RV_StoreInAppAttributeTypeOriginalPurchaseDate]
#define RV_INAPP_ATTRIBUTETYPE_SUBSCRIPTIONEXPIRATIONDATE         [NSNumber numberWithInt:RV_StoreInAppAttributeTypeSubscriptionExpirationDate]
#define RV_INAPP_ATTRIBUTETYPE_WEBORDERLINEITEMID                 [NSNumber numberWithInt:RV_StoreInAppAttributeTypeWebOrderLineItemId]
#define RV_INAPP_ATTRIBUTETYPE_CANCELLATIONDATE                   [NSNumber numberWithInt:RV_StoreInAppAttributeTypeCancellationDate]
    
    // Shared context for receipt validation
    typedef struct _RV_CheckingContext {
        CFTypeRef receipt_dict;
        CFTypeRef ca_data;
        CFTypeRef dummy0009;
        CFTypeRef guid_data;
        CFTypeRef dummy000C;
        CFTypeRef main_bundle;
        CFTypeRef dummy0003;
        CFTypeRef inapp_identifiers;
        CFTypeRef dummy000B;
        CFTypeRef dummy0006;
        CFTypeRef dummy0000;
        CFTypeRef dummy0002;
        CFTypeRef dummy000D;
        CFTypeRef dummy0008;
        CFTypeRef dummy000A;
        CFTypeRef dummy0004;
        CFTypeRef inapp_block;
        CFTypeRef dummy0007;
        CFTypeRef dummy0005;
        CFTypeRef receipt_data;
        CFTypeRef dummy0001;
    } RV_CheckingContext;
    
    // Shared context for receipt parsing
    typedef struct _RV_ParsingContext {
        CFTypeRef dummy0002;
        struct _RV_ParsingContext * parent;
        CFTypeRef dummy0000;
        const unsigned char * ptr;
        CFTypeRef dummy0005;
        CFTypeRef dummy0001;
        CFTypeRef dummy0004;
        CFTypeRef dummy0003;
        const unsigned char * end;
        CFTypeRef dictionary;
    } RV_ParsingContext;
    
    // Symbol ASN1_get_object
    typedef int (*__RV_ASN1_get_object)(const unsigned char **pp, long *plength, int *ptag, int *pclass, long omax);
    // Symbol ASN1_INTEGER_free
    typedef void (*__RV_ASN1_INTEGER_free)(ASN1_INTEGER *a);
    // Symbol ASN1_INTEGER_get
    typedef long (*__RV_ASN1_INTEGER_get)(const ASN1_INTEGER *a);
    // Symbol ASN1_OBJECT_free
    typedef void (*__RV_ASN1_OBJECT_free)(ASN1_OBJECT *a);
    // Symbol BIO_free
    typedef int (*__RV_BIO_free)(BIO *a);
    // Symbol BIO_new
    typedef BIO *(*__RV_BIO_new)(BIO_METHOD *type);
    // Symbol BIO_s_mem
    typedef BIO_METHOD *(*__RV_BIO_s_mem)(void);
    // Symbol BIO_write
    typedef int (*__RV_BIO_write)(BIO *b, const void *buf, int len);
    // Symbol c2i_ASN1_INTEGER
    typedef ASN1_INTEGER *(*__RV_c2i_ASN1_INTEGER)(ASN1_INTEGER **a,const unsigned char **pp, long length);
    // Symbol CC_SHA1
    typedef unsigned char *(*__RV_CC_SHA1)(const void *data, CC_LONG len, unsigned char *md);
    // Symbol CC_SHA1_Final
    typedef int (*__RV_CC_SHA1_Final)(unsigned char *md, CC_SHA1_CTX *c);
    // Symbol CC_SHA1_Init
    typedef int (*__RV_CC_SHA1_Init)(CC_SHA1_CTX *c);
    // Symbol CC_SHA1_Update
    typedef int (*__RV_CC_SHA1_Update)(CC_SHA1_CTX *c, const void *data, CC_LONG len);
    // Symbol CFAbsoluteTimeGetCurrent
    typedef CFAbsoluteTime (*__RV_CFAbsoluteTimeGetCurrent)();
    // Symbol CFArrayAppendValue
    typedef void (*__RV_CFArrayAppendValue)(CFMutableArrayRef theArray, const void *value);
    // Symbol CFArrayCreateMutable
    typedef CFMutableArrayRef (*__RV_CFArrayCreateMutable)(CFAllocatorRef allocator, CFIndex capacity, const CFArrayCallBacks *callBacks);
    // Symbol CFArrayGetCount
    typedef CFIndex (*__RV_CFArrayGetCount)(CFArrayRef theArray);
    // Symbol CFArrayGetValueAtIndex
    typedef const void *(*__RV_CFArrayGetValueAtIndex)(CFArrayRef theArray, CFIndex idx);
    // Symbol CFBundleCopyBundleURL
    typedef CFURLRef (*__RV_CFBundleCopyBundleURL)(CFBundleRef bundle);
    // Symbol CFBundleGetIdentifier
    typedef CFStringRef (*__RV_CFBundleGetIdentifier)(CFBundleRef bundle);
    // Symbol CFBundleGetMainBundle
    typedef CFBundleRef (*__RV_CFBundleGetMainBundle)();
    // Symbol CFBundleGetValueForInfoDictionaryKey
    typedef CFTypeRef (*__RV_CFBundleGetValueForInfoDictionaryKey)(CFBundleRef bundle, CFStringRef key);
    // Symbol CFBundleUnloadExecutable
    typedef void (*__RV_CFBundleUnloadExecutable)(CFBundleRef bundle);
    // Symbol CFDataAppendBytes
    typedef void (*__RV_CFDataAppendBytes)(CFMutableDataRef theData, const UInt8 *bytes, CFIndex length);
    // Symbol CFDataCreate
    typedef CFDataRef (*__RV_CFDataCreate)(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length);
    // Symbol CFDataCreateMutable
    typedef CFMutableDataRef (*__RV_CFDataCreateMutable)(CFAllocatorRef allocator, CFIndex capacity);
    // Symbol CFDataGetBytePtr
    typedef const UInt8 *(*__RV_CFDataGetBytePtr)(CFDataRef theData);
    // Symbol CFDataGetLength
    typedef CFIndex (*__RV_CFDataGetLength)(CFDataRef theData);
    // Symbol CFDateCompare
    typedef CFComparisonResult (*__RV_CFDateCompare)(CFDateRef theString1, CFDateRef theString2, CFStringCompareFlags compareOptions);
    // Symbol CFDateCreate
    typedef CFDateRef (*__RV_CFDateCreate)(CFAllocatorRef allocator, CFAbsoluteTime at);
    // Symbol CFDateFormatterCreate
    typedef CFDateFormatterRef (*__RV_CFDateFormatterCreate)(CFAllocatorRef allocator, CFLocaleRef locale, CFDateFormatterStyle dateStyle, CFDateFormatterStyle timeStyle);
    // Symbol CFDateFormatterCreateDateFromString
    typedef CFDateRef (*__RV_CFDateFormatterCreateDateFromString)(CFAllocatorRef allocator, CFDateFormatterRef formatter, CFStringRef string, CFRange *rangep);
    // Symbol CFDateFormatterSetFormat
    typedef void (*__RV_CFDateFormatterSetFormat)(CFDateFormatterRef formatter, CFStringRef formatString);
    // Symbol CFDateFormatterSetProperty
    typedef void (*__RV_CFDateFormatterSetProperty)(CFDateFormatterRef formatter, CFStringRef key, CFTypeRef value);
    // Symbol CFDictionaryAddValue
    typedef void (*__RV_CFDictionaryAddValue)(CFMutableDictionaryRef theDict, const void *key, const void *value);
    // Symbol CFDictionaryCreateMutable
    typedef CFMutableDictionaryRef (*__RV_CFDictionaryCreateMutable)(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks);
    // Symbol CFDictionaryGetValue
    typedef const void *(*__RV_CFDictionaryGetValue)(CFDictionaryRef theDict, const void *key);
    // Symbol CFDictionarySetValue
    typedef void (*__RV_CFDictionarySetValue)(CFMutableDictionaryRef theDict, const void *key, const void *value);
    // Symbol CFEqual
    typedef Boolean (*__RV_CFEqual)(CFTypeRef cf1, CFTypeRef cf2);
    // Symbol CFNumberCreate
    typedef CFNumberRef (*__RV_CFNumberCreate)(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr);
    // Symbol CFReadStreamClose
    typedef void (*__RV_CFReadStreamClose)(CFReadStreamRef stream);
    // Symbol CFReadStreamCreateWithFile
    typedef CFReadStreamRef (*__RV_CFReadStreamCreateWithFile)(CFAllocatorRef alloc, CFURLRef fileURL);
    // Symbol CFReadStreamOpen
    typedef Boolean (*__RV_CFReadStreamOpen)(CFReadStreamRef stream);
    // Symbol CFReadStreamRead
    typedef CFIndex (*__RV_CFReadStreamRead)(CFReadStreamRef stream, UInt8 *buffer, CFIndex bufferLength);
    // Symbol CFRelease
    typedef void (*__RV_CFRelease)(CFTypeRef cf);
    // Symbol CFStringCompare
    typedef CFComparisonResult (*__RV_CFStringCompare)(CFStringRef theString1, CFStringRef theString2, CFStringCompareFlags compareOptions);
    // Symbol CFStringCreateWithBytes
    typedef CFStringRef (*__RV_CFStringCreateWithBytes)(CFAllocatorRef alloc, const UInt8 *bytes, CFIndex numBytes, CFStringEncoding encoding, Boolean isExternalRepresentation);
    // Symbol CFStringCreateWithCString
    typedef CFStringRef (*__RV_CFStringCreateWithCString)(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding);
    // Symbol CFStringGetFileSystemRepresentation
    typedef Boolean (*__RV_CFStringGetFileSystemRepresentation)(CFStringRef string, char *buffer, CFIndex maxBufLen);
    // Symbol CFTimeZoneCreateWithTimeIntervalFromGMT
    typedef CFTimeZoneRef (*__RV_CFTimeZoneCreateWithTimeIntervalFromGMT)(CFAllocatorRef allocator, CFTimeInterval ti);
    // Symbol CFURLCreateCopyAppendingPathComponent
    typedef CFURLRef (*__RV_CFURLCreateCopyAppendingPathComponent)(CFAllocatorRef allocator, CFURLRef url, CFStringRef pathComponent, Boolean isDirectory);
    // Symbol CFURLCreateFromFileSystemRepresentation
    typedef CFURLRef (*__RV_CFURLCreateFromFileSystemRepresentation)(CFAllocatorRef allocator, const UInt8 *buffer, CFIndex bufLen, Boolean isDirectory);
    // Symbol CFURLCreateWithFileSystemPathRelativeToBase
    typedef CFURLRef (*__RV_CFURLCreateWithFileSystemPathRelativeToBase)(CFAllocatorRef allocator, CFStringRef filePath, CFURLPathStyle pathStyle, Boolean isDirectory, CFURLRef baseURL);
    // Symbol d2i_PKCS7_bio
    typedef PKCS7 *(*__RV_d2i_PKCS7_bio)(BIO *bp,PKCS7 **p7);
    // Symbol d2i_X509_bio
    typedef X509 *(*__RV_d2i_X509_bio)(BIO *bp,X509 **x509);
    // Symbol dlopen
    typedef void *(*__RV_dlopen)(const char * __path, int __mode);
    // Symbol dlsym
    typedef void *(*__RV_dlsym)(void * __handle, const char * __symbol);
    // Symbol EVP_DigestFinal
    typedef int (*__RV_EVP_DigestFinal)(EVP_MD_CTX *ctx, unsigned char *md, unsigned int *s);
    // Symbol EVP_DigestInit
    typedef int (*__RV_EVP_DigestInit)(EVP_MD_CTX *ctx, const EVP_MD *type);
    // Symbol EVP_DigestUpdate
    typedef int (*__RV_EVP_DigestUpdate)(EVP_MD_CTX *ctx, const void *d, size_t cnt);
    // Symbol EVP_get_digestbyname
    typedef const EVP_MD *(*__RV_EVP_get_digestbyname)(const char *name);
    // Symbol EVP_MD_CTX_init
    typedef void (*__RV_EVP_MD_CTX_init)(EVP_MD_CTX *ctx);
    // Symbol exit
    typedef void (*__RV_exit)(int status);
    // Symbol glob
    typedef int (*__RV_glob)(const char * __restrict, int, int (*)(const char *, int), glob_t * __restrict);
    // Symbol glob_b
    typedef int (*__RV_glob_b)(const char * __restrict, int, int (^)(const char *, int), glob_t * __restrict);
    // Symbol globfree
    typedef void (*__RV_globfree)(glob_t *);
    // Symbol IOBSDNameMatching
    typedef CFMutableDictionaryRef (*__RV_IOBSDNameMatching)(mach_port_t masterPort, uint32_t options, const char * bsdName);
    // Symbol IOIteratorNext
    typedef io_object_t (*__RV_IOIteratorNext)(io_iterator_t iterator);
    // Symbol IOMasterPort
    typedef kern_return_t (*__RV_IOMasterPort)(mach_port_t bootstrapPort, mach_port_t *masterPort);
    // Symbol IOObjectRelease
    typedef kern_return_t (*__RV_IOObjectRelease)(io_object_t object);
    // Symbol IORegistryEntryCreateCFProperty
    typedef CFTypeRef (*__RV_IORegistryEntryCreateCFProperty)(io_registry_entry_t entry, CFStringRef key, CFAllocatorRef allocator, IOOptionBits options);
    // Symbol IORegistryEntryGetParentEntry
    typedef kern_return_t (*__RV_IORegistryEntryGetParentEntry)(io_registry_entry_t entry, const io_name_t plane, io_registry_entry_t * parent);
    // Symbol IOServiceGetMatchingServices
    typedef kern_return_t (*__RV_IOServiceGetMatchingServices)(mach_port_t masterPort, CFDictionaryRef matching, io_iterator_t *existing);
    // Symbol kCFBundleIdentifierKey
    typedef const CFStringRef *__RV_kCFBundleIdentifierKey;
    // Symbol kCFDateFormatterTimeZone
    typedef const CFStringRef *__RV_kCFDateFormatterTimeZone;
    // Symbol kCFTypeArrayCallBacks
    typedef const CFArrayCallBacks *__RV_kCFTypeArrayCallBacks;
    // Symbol kCFTypeDictionaryKeyCallBacks
    typedef const CFDictionaryKeyCallBacks *__RV_kCFTypeDictionaryKeyCallBacks;
    // Symbol kCFTypeDictionaryValueCallBacks
    typedef const CFDictionaryValueCallBacks *__RV_kCFTypeDictionaryValueCallBacks;
    // Symbol kSecClass
    typedef const CFTypeRef *__RV_kSecClass;
    // Symbol kSecClassCertificate
    typedef const CFTypeRef *__RV_kSecClassCertificate;
    // Symbol kSecMatchLimit
    typedef const CFTypeRef *__RV_kSecMatchLimit;
    // Symbol kSecMatchLimitAll
    typedef const CFTypeRef *__RV_kSecMatchLimitAll;
    // Symbol kSecMatchSearchList
    typedef const CFTypeRef *__RV_kSecMatchSearchList;
    // Symbol kSecMatchSubjectContains
    typedef const CFTypeRef *__RV_kSecMatchSubjectContains;
    // Symbol kSecReturnRef
    typedef const CFTypeRef *__RV_kSecReturnRef;
    // Symbol longjmp
    typedef void (*__RV_longjmp)(jmp_buf buf, int ret);
    // Symbol OBJ_txt2obj
    typedef ASN1_OBJECT *(*__RV_OBJ_txt2obj)(const char *s, int no_name);
    // Symbol objc_getClass
    typedef id (*__RV_objc_getClass)(const char *name);
    // Symbol objc_msgSend
    typedef id (*__RV_objc_msgSend)(id theReceiver, SEL theSelector, ...);
    // Symbol OpenSSL_add_all_digests
    typedef void (*__RV_OpenSSL_add_all_digests)();
    // Symbol PKCS7_free
    typedef void (*__RV_PKCS7_free)(PKCS7 *a);
    // Symbol PKCS7_get0_signers
    typedef STACK_OF(X509) *(*__RV_PKCS7_get0_signers)(PKCS7 *p7, STACK_OF(X509) *certs, int flags);
    // Symbol PKCS7_verify
    typedef int (*__RV_PKCS7_verify)(PKCS7 *p7, STACK_OF(X509) *certs, X509_STORE *store, BIO *indata, BIO *out, int flags);
    // Symbol SecCertificateCopyData
    typedef CFDataRef (*__RV_SecCertificateCopyData)(SecCertificateRef certificate);
    // Symbol SecItemCopyMatching
    typedef OSStatus (*__RV_SecItemCopyMatching)(CFDictionaryRef query, CFTypeRef *result);
    // Symbol SecKeychainOpen
    typedef OSStatus (*__RV_SecKeychainOpen)(const char *pathName, SecKeychainRef *keychain);
    // Symbol SecKeychainSearchCopyNext
    typedef OSStatus (*__RV_SecKeychainSearchCopyNext)(SecKeychainSearchRef searchRef, SecKeychainItemRef *itemRef);
    // Symbol SecKeychainSearchCreateFromAttributes
    typedef OSStatus (*__RV_SecKeychainSearchCreateFromAttributes)(CFTypeRef keychainOrArray, SecItemClass itemClass, const SecKeychainAttributeList *attrList, SecKeychainSearchRef *searchRef);
    // Symbol sel_registerName
    typedef SEL (*__RV_sel_registerName)(const char *str);
    // Symbol setjmp
    typedef int (*__RV_setjmp)(jmp_buf buf);
    // Symbol SHA1
    typedef unsigned char *(*__RV_SHA1)(const unsigned char *d, unsigned long n, unsigned char *md);
    // Symbol SHA1_Final
    typedef int (*__RV_SHA1_Final)(unsigned char *md, SHA_CTX *c);
    // Symbol SHA1_Init
    typedef int (*__RV_SHA1_Init)(SHA_CTX *c);
    // Symbol SHA1_Update
    typedef int (*__RV_SHA1_Update)(SHA_CTX *c, const void *data, unsigned long len);
    // Symbol sk_free
    typedef void (*__RV_sk_free)(_STACK *);
    // Symbol sk_num
    typedef int (*__RV_sk_num)(const _STACK *);
    // Symbol sk_value
    typedef void *(*__RV_sk_value)(const _STACK *, int);
    // Symbol strlen
    typedef size_t (*__RV_strlen)(const char *);
    // Symbol strncmp
    typedef int (*__RV_strncmp)(const char *, const char *, size_t);
    // Symbol X509_digest
    typedef int (*__RV_X509_digest)(const X509 *data,const EVP_MD *type,unsigned char *md, unsigned int *len);
    // Symbol X509_free
    typedef void (*__RV_X509_free)(X509 *a);
    // Symbol X509_get_ext_by_OBJ
    typedef int (*__RV_X509_get_ext_by_OBJ)(X509 *x,ASN1_OBJECT *obj,int lastpos);
    // Symbol X509_NAME_get_text_by_NID
    typedef int (*__RV_X509_NAME_get_text_by_NID)(X509_NAME *name, int nid, char *buf,int len);
    // Symbol X509_STORE_add_cert
    typedef int (*__RV_X509_STORE_add_cert)(X509_STORE *ctx, X509 *x);
    // Symbol X509_STORE_free
    typedef void (*__RV_X509_STORE_free)(X509_STORE *v);
    // Symbol X509_STORE_new
    typedef X509_STORE *(*__RV_X509_STORE_new)();
    
    
    // Table for storing strings
    static const char *RV_Strings[600] = {
        // "" / M(None) / S(0) / L(0)
        "\x9d\xc6\xda\x87\x9c\x47\x61\xd3\x24\xd9\x8f\xb2\x78\x64\x14\xfd\x0d\x78\xfc\xeb\x9f\x18\xa6\xcf\x35\x8b\x82\x11\x09\x8b\xf6\xba",
        // "IORegistryEntryCreateCFProperty" / M(Xor3) / S(11) / L(31)
        "\x62\x64\x79\x4e\x4c\x42\x58\x5f\x59\x52\x6e\x45\x5f\x59\x52\x68\x59\x4e\x4a\x5f\x4e\x68\x6d\x7b\x59\x44\x5b\x4e\x59\x5f\x52\x2b",
        // "CFDataGetBytePtr" / M(Xor1) / S(80) / L(16)
        "\x13\x16\x14\x31\x24\x31\x17\x35\x24\x12\x29\x24\x35\x00\x24\x22\x50",
        // "IOMACAddress" / M(Xor2) / S(176) / L(12)
        "\xe9\xef\xed\xe1\xe3\xe1\xc4\xc4\xd2\xc5\xd3\xd3\xa0\x5f\x88\xc6",
        // "Contents" / M(Xor2) / S(226) / L(8)
        "\xb1\x9d\x9c\x86\x97\x9c\x86\x81\xf2\xbd\x97\x2f\x63\xd8\x7a\xca",
        // "CFURLCreateWithFileSystemPathRelativeToBase" / M(Xor3) / S(77) / L(43)
        "\xc2\xc7\xd4\xd3\xcd\xc2\xf3\xe4\xe0\xf5\xe4\xd6\xe8\xf5\xe9\xc7\xe8\xed\xe4\xd2\xf8\xf2\xf5\xe4\xec\xd1\xe0\xf5\xe9\xd3\xe4\xed\xe0\xf5\xe8\xf7\xe4\xd5\xee\xc3\xe0\xf2\xe4\x81\xc2\x49\x0a\x4a\x58\x2a\x50\x5e",
        // "" / M(None) / S(0) / L(0)
        "\x8f\x9f\x4b\x05\x1e\x0f\x1f\x82\x3f\x5e\xc1\x35\xfd\x8a\xef\x40\xd4\x08\x26\x83\x87\xa5\x71\x50\x6e\x10\xfe\xcc\xaf\x06\xe3\x62",
        // "CFDataGetBytePtr" / M(Xor1) / S(53) / L(16)
        "\x76\x73\x71\x54\x41\x54\x72\x50\x41\x77\x4c\x41\x50\x65\x41\x47\x35",
        // "CFDateFormatterCreate" / M(Xor3) / S(248) / L(21)
        "\x4d\x48\x4a\x6f\x7a\x6b\x48\x61\x7c\x63\x6f\x7a\x7a\x6b\x7c\x4d\x7c\x6b\x6f\x7a\x6b\x0e",
        // "EVP_DigestUpdate" / M(Xor1) / S(32) / L(16)
        "\x65\x76\x70\x7f\x64\x49\x47\x45\x53\x54\x75\x50\x44\x41\x54\x45\x20",
        // "CFBundleGetMainBundle" / M(Rot) / S(244) / L(21)
        "\x37\x3a\x36\x69\x62\x58\x60\x59\x3b\x59\x68\x41\x55\x5d\x62\x36\x69\x62\x58\x60\x59\xf4",
        // "setDelegate:" / M(Xor2) / S(229) / L(12)
        "\x86\x90\x81\xb1\x90\x99\x90\x92\x94\x81\x90\xcf\xf5\x8c\x19\x35",
        // "setDelegate:" / M(Xor3) / S(122) / L(12)
        "\xf9\xef\xfe\xce\xef\xe6\xef\xed\xeb\xfe\xef\xb0\x8a\x37\xb3\x2a",
        // "X509_free" / M(Xor2) / S(105) / L(9)
        "\x21\x4c\x49\x40\x26\x1f\x0b\x1c\x1c\x79\x27\x62\x1a\x37\x3f\xb2",
        // "PKCS7_verify" / M(Xor1) / S(115) / L(12)
        "\x23\x38\x30\x20\x44\x2c\x05\x16\x01\x1a\x15\x0a\x73\x65\xb7\xcb",
        // "CFDateFormatterCreateDateFromString" / M(Xor1) / S(73) / L(35)
        "\x0a\x0f\x0d\x28\x3d\x2c\x0f\x26\x3b\x24\x28\x3d\x3d\x2c\x3b\x0a\x3b\x2c\x28\x3d\x2c\x0d\x28\x3d\x2c\x0f\x3b\x26\x24\x1a\x3d\x3b\x20\x27\x2e\x49",
        // "" / M(None) / S(0) / L(0)
        "\x15\xf7\xda\x66\xcb\xec\xb7\xff\x3f\xb8\xb2\xf5\xf9\x56\xb2\x95\x51\xb9\x3d\x97\x56\x04\x49\xa2\x4e\xb2\x86\xf0\xe4\x8d\xc4\xbb",
        // "61:1e:5b:66:2c:59:3a:08:ff:58:d1:4a:e2:24:52:d1:98:df:6c:60" / M(Xor4) / S(191) / L(59)
        "\x8a\x8d\x86\x8d\xd9\x86\x89\xde\x86\x8a\x8a\x86\x8e\xdf\x86\x89\x85\x86\x8f\xdd\x86\x8c\x84\x86\xda\xda\x86\x89\x84\x86\xd8\x8d\x86\x88\xdd\x86\xd9\x8e\x86\x8e\x88\x86\x89\x8e\x86\xd8\x8d\x86\x85\x84\x86\xd8\xda\x86\x8a\xdf\x86\x8a\x8c\xbc\xba\x72\x16\x07\x8d\x2a\x46\x41",
        // "" / M(None) / S(0) / L(0)
        "\x80\x2b\xf9\x30\x1a\xd9\x7c\xeb\x4b\x48\xf7\xd2\x06\xba\x7b\xa3\x5e\x41\x5a\x72\xea\xd1\x17\x2e\x79\xcd\xed\xb5\x6e\xcb\x49\xb9",
        // "" / M(None) / S(0) / L(0)
        "\x76\x5a\x28\xe0\xe7\x9c\xa8\x3f\x36\x6d\x9a\xae\x36\x0e\x9b\x6b\xbe\x5a\x51\x18\x78\x51\x2d\x7d\x5d\xb7\x79\xdc\xad\xe8\xca\xa7",
        // "IOServiceGetMatchingServices" / M(Xor1) / S(50) / L(28)
        "\x7b\x7d\x61\x57\x40\x44\x5b\x51\x57\x75\x57\x46\x7f\x53\x46\x51\x5a\x5b\x5c\x55\x61\x57\x40\x44\x5b\x51\x57\x41\x32\x71\x75\x90\xb6\xea\xc0\x43\x28",
        // "alloc" / M(Rot) / S(174) / L(5)
        "\x0f\x1a\x1a\x1d\x11\xae\xb5\xba\x55\xa1\x26\xda\x99\x20\x89\x03",
        // "SHA1_Update" / M(Xor4) / S(231) / L(11)
        "\x23\x38\x31\x41\x2f\x25\x00\x14\x11\x04\x15\x70\x29\x0d\x71\xad",
        // "RTLD_MAIN_ONLY" / M(Xor2) / S(188) / L(14)
        "\xfe\xf8\xe0\xe8\xf3\xe1\xed\xe5\xe2\xf3\xe3\xe2\xe0\xf5\xac\xf4",
        // "kSecMatchSubjectContains" / M(Rot) / S(234) / L(24)
        "\x55\x3d\x4f\x4d\x37\x4b\x5e\x4d\x52\x3d\x5f\x4c\x54\x4f\x4d\x5e\x2d\x59\x58\x5e\x4b\x53\x58\x5d\xea\xe1\x60\xeb\x33\x27\xcd\xca\x57",
        // "_MASReceipt/receipt" / M(Rot) / S(56) / L(19)
        "\x97\x85\x79\x8b\x8a\x9d\x9b\x9d\xa1\xa8\xac\x67\xaa\x9d\x9b\x9d\xa1\xa8\xac\x38",
        // "CFURLCreateFromFileSystemRepresentation" / M(Rot) / S(124) / L(39)
        "\xbf\xc2\xd1\xce\xc8\xbf\xee\xe1\xdd\xf0\xe1\xc2\xee\xeb\xe9\xc2\xe5\xe8\xe1\xcf\xf5\xef\xf0\xe1\xe9\xce\xe1\xec\xee\xe1\xef\xe1\xea\xf0\xdd\xf0\xe5\xeb\xea\x7c\xe9\xfe\xc8\xde\x77\x46\x26\xf7",
        // "CFAbsoluteTimeGetCurrent" / M(Xor2) / S(108) / L(24)
        "\x0e\x0b\x0c\x2f\x3e\x22\x21\x38\x39\x28\x19\x24\x20\x28\x0a\x28\x39\x0e\x38\x3f\x3f\x28\x23\x39\x4d\xcf\x2f\x71\x36\x90\x2e\xd9\x33",
        // "" / M(None) / S(0) / L(0)
        "\xa5\x23\x5b\x7d\xbd\x1c\x75\xeb\x34\xa8\x78\xe6\xb6\x53\x8c\xf9\xc7\x2d\xdb\x9d\x61\x6a\x45\x88\x2d\x51\x18\x09\x9d\x56\x84\x68",
        // "" / M(None) / S(0) / L(0)
        "\x2f\x33\x4b\x50\xf9\x2b\x35\xe9\x4d\x4e\x27\xaa\x5e\xbb\xba\xc5\x23\xa4\x69\x7c\x60\x12\xe8\x47\xbd\xba\xc3\xfa\x30\x73\x2b\x54",
        // "" / M(None) / S(0) / L(0)
        "\x06\xa3\x49\x09\x07\x07\x82\x04\x19\x59\xf4\xa2\x09\x17\x9e\x44\x4b\x78\x0c\x2e\xf3\x8f\x1f\x86\xca\xe6\xbb\xbc\xa3\x75\x47\x70",
        // "_MASReceipt/receipt" / M(Xor3) / S(64) / L(19)
        "\x0b\x19\x15\x07\x06\x31\x37\x31\x3d\x24\x20\x7b\x26\x31\x37\x31\x3d\x24\x20\x54",
        // "" / M(None) / S(0) / L(0)
        "\x99\xfc\x81\x36\xc6\x43\x6e\xdd\x96\x1e\x04\xe1\xc2\xf9\x36\xdd\xb9\x5b\xf3\xde\x12\x50\x60\x1c\x8c\xe7\xa6\xe0\x1b\x08\xae\x02",
        // "61:1E:5B:66:2C:59:3A:08:FF:58:D1:4A:E2:24:52:D1:98:DF:6C:60" / M(Rot) / S(1) / L(59)
        "\x37\x32\x3b\x32\x46\x3b\x36\x43\x3b\x37\x37\x3b\x33\x44\x3b\x36\x3a\x3b\x34\x42\x3b\x31\x39\x3b\x47\x47\x3b\x36\x39\x3b\x45\x32\x3b\x35\x42\x3b\x46\x33\x3b\x33\x35\x3b\x36\x33\x3b\x45\x32\x3b\x3a\x39\x3b\x45\x47\x3b\x37\x44\x3b\x37\x31\x01\x7d\x7c\x21\x00\x9e\x93\x1b\x76",
        // "CFBundleGetMainBundle" / M(Xor4) / S(43) / L(21)
        "\xf1\xf4\xf0\xc7\xdc\xd6\xde\xd7\xf5\xd7\xc6\xff\xd3\xdb\xdc\xf0\xc7\xdc\xd6\xde\xd7\xb2",
        // "BIO_s_mem" / M(Xor1) / S(152) / L(9)
        "\xda\xd1\xd7\xc7\xeb\xc7\xf5\xfd\xf5\x98\xe9\xea\x28\x41\xde\xe9",
        // "kCFBundleIdentifierKey" / M(Xor4) / S(78) / L(22)
        "\x69\x41\x44\x40\x77\x6c\x66\x6e\x67\x4b\x66\x67\x6c\x76\x6b\x64\x6b\x67\x70\x49\x67\x7b\x02",
        // "CC_SHA1_Init" / M(Xor2) / S(78) / L(12)
        "\x1d\x1d\x01\x0d\x16\x1f\x6f\x01\x17\x30\x37\x2a\x5e\x47\x69\x31",
        // "IOIteratorNext" / M(Xor2) / S(53) / L(14)
        "\x6c\x6a\x6c\x51\x40\x57\x44\x51\x4a\x57\x6b\x40\x5d\x51\x25\xe1",
        // "CFReadStreamRead" / M(Xor4) / S(163) / L(16)
        "\x90\x95\x81\xb6\xb2\xb7\x80\xa7\xa1\xb6\xb2\xbe\x81\xb6\xb2\xb7\xd3",
        // "glob_b" / M(Rot) / S(117) / L(6)
        "\xdc\xe1\xe4\xd7\xd4\xd7\x75\xc7\x26\xac\xaf\xd5\xf1\xbd\x30\xe3",
        // "EVP_DigestFinal" / M(Xor4) / S(72) / L(15)
        "\xc5\xd6\xd0\xdf\xc4\xe9\xe7\xe5\xf3\xf4\xc6\xe9\xee\xe1\xec\x80",
        // "IOObjectRelease" / M(Xor3) / S(196) / L(15)
        "\x9d\x9b\x9b\xb6\xbe\xb1\xb7\xa0\x86\xb1\xb8\xb1\xb5\xa7\xb1\xd4",
        // "strncmp" / M(Xor3) / S(83) / L(7)
        "\x10\x17\x11\x0d\x00\x0e\x13\x63\xe2\x25\x12\x94\x87\xea\x1f\x37",
        // "start" / M(Xor4) / S(104) / L(5)
        "\xf3\xf4\xe1\xf2\xf4\x80\xdc\xc2\x6e\x13\xf5\x0d\xad\xaa\x16\xc7",
        // "CC_SHA1" / M(Xor2) / S(92) / L(7)
        "\x0f\x0f\x13\x1f\x04\x0d\x7d\x4c\x42\x00\x82\xf8\x2a\xf0\x91\xb5",
        // "CFBundleGetValueForInfoDictionaryKey" / M(Xor1) / S(238) / L(36)
        "\xad\xa8\xac\x9b\x80\x8a\x82\x8b\xa9\x8b\x9a\xb8\x8f\x82\x9b\x8b\xa8\x81\x9c\xa7\x80\x88\x81\xaa\x87\x8d\x9a\x87\x81\x80\x8f\x9c\x97\xa5\x8b\x97\xee",
        // "611E5B662C593A08FF58D14AE22452D198DF6C60" / M(Xor4) / S(67) / L(40)
        "\xe5\xe2\xe2\x96\xe6\x91\xe5\xe5\xe1\x90\xe6\xea\xe0\x92\xe3\xeb\x95\x95\xe6\xeb\x97\xe2\xe7\x92\x96\xe1\xe1\xe7\xe6\xe1\x97\xe2\xea\xeb\x97\x95\xe5\x90\xe5\xe3\xd3\xa9\x1d\x2a\xc1\x30\xb8\x40\x68",
        // "" / M(None) / S(0) / L(0)
        "\x52\x79\x90\xb3\x2a\x6e\x7a\x19\x63\xce\xdc\xe9\xda\xba\x10\x80\x50\xf7\xe6\x68\x7a\x4a\xcb\xe1\xdb\x12\x47\xad\x58\xff\x66\x0b",
        // "EVP_MD_CTX_init" / M(Xor4) / S(37) / L(15)
        "\x15\x06\x00\x0f\x1d\x14\x0f\x13\x04\x08\x0f\x39\x3e\x39\x24\x50",
        // "ASN1_INTEGER_get" / M(Rot) / S(59) / L(16)
        "\x7c\x8e\x89\x6c\x9a\x84\x89\x8f\x80\x82\x80\x8d\x9a\xa2\xa0\xaf\x3b",
        // "%02X:" / M(Xor2) / S(193) / L(5)
        "\xf4\xe1\xe3\x89\xeb\xd1\x30\x22\x7c\x65\x51\xc1\x12\xcc\xc2\x0c",
        // "" / M(None) / S(0) / L(0)
        "\x3c\xbb\xf6\x17\x28\xe8\x6e\x6d\xb4\x2c\xad\x91\x49\xd4\x36\x63\x42\x06\x4f\x19\x46\xe0\x16\xad\x0f\xdb\xfe\x99\x98\x75\x2c\x60",
        // "_MASReceipt" / M(Rot) / S(17) / L(11)
        "\x70\x5e\x52\x64\x63\x76\x74\x76\x7a\x81\x85\x11\x06\xc7\xbe\x41",
        // "" / M(None) / S(0) / L(0)
        "\xa9\x96\x5d\x5e\x3f\x5a\xb9\x31\x22\xe4\xa0\xce\xe2\x93\x55\x24\x09\x92\x00\xd7\xa9\x8e\x87\xc2\x95\x84\xca\x7e\x48\xc1\x59\x7a",
        // "kSecClass" / M(Xor1) / S(33) / L(9)
        "\x4a\x72\x44\x42\x62\x4d\x40\x52\x52\x21\x07\xae\xc6\x92\xa4\x10",
        // "" / M(None) / S(0) / L(0)
        "\xb8\x8d\xd9\xd1\x4d\x0f\xb3\xee\xf2\x14\xf3\x96\xd5\x5a\x42\xdc\xaa\xe2\x69\xcc\x79\x39\xa0\x02\xcb\x7d\x21\x34\x65\x10\x71\xc1",
        // "CFDateCreate" / M(Xor1) / S(61) / L(12)
        "\x7e\x7b\x79\x5c\x49\x58\x7e\x4f\x58\x5c\x49\x58\x3d\xc6\x0d\xb0",
        // "kCFBundleIdentifierKey" / M(Xor3) / S(51) / L(22)
        "\x21\x09\x0c\x08\x3f\x24\x2e\x26\x2f\x03\x2e\x2f\x24\x3e\x23\x2c\x23\x2f\x38\x01\x2f\x33\x4a",
        // "BIO_new" / M(Xor1) / S(254) / L(7)
        "\xbc\xb7\xb1\xa1\x90\x9b\x89\xfe\x9b\x2e\xee\x9b\x71\xca\x9e\x78",
        // "ASN1_get_object" / M(Rot) / S(150) / L(15)
        "\xd7\xe9\xe4\xc7\xf5\xfd\xfb\x0a\xf5\x05\xf8\x00\xfb\xf9\x0a\x96",
        // "CFDictionaryGetValue" / M(Xor1) / S(215) / L(20)
        "\x94\x91\x93\xbe\xb4\xa3\xbe\xb8\xb9\xb6\xa5\xae\x90\xb2\xa3\x81\xb6\xbb\xa2\xb2\xd7",
        // "" / M(None) / S(0) / L(0)
        "\x80\xf3\xf7\xa0\x70\xe1\x47\x0a\xf2\x05\x59\xbe\xa8\x6e\xe5\xf4\xbc\xa0\xfb\xb7\x7a\xc3\x3c\x05\x1c\x92\x51\xf6\xde\x07\x84\x05",
        // "sha1" / M(Xor3) / S(157) / L(4)
        "\xde\xc5\xcc\x9c\xad\xc0\x5f\xf9\x23\x6d\xa0\x0d\xde\xdf\x86\xaf",
        // "" / M(None) / S(0) / L(0)
        "\xde\xd7\x2c\x5f\xa1\xd6\xea\x81\xf3\xa3\x47\x52\x4d\xf7\xa6\xdc\xf6\xde\x9a\xa6\xc0\x3d\xe9\xa7\xf6\x7e\xc1\xab\x55\xae\xd9\xc3",
        // "EVP_DigestUpdate" / M(Rot) / S(69) / L(16)
        "\x8a\x9b\x95\xa4\x89\xae\xac\xaa\xb8\xb9\x9a\xb5\xa9\xa6\xb9\xaa\x45",
        // "CFDataCreate" / M(Xor4) / S(95) / L(12)
        "\xb3\xb6\xb4\x91\x84\x91\xb3\x82\x95\x91\x84\x95\xf0\x8b\xee\x8a",
        // "Apple Root CA" / M(Xor3) / S(66) / L(13)
        "\x13\x22\x22\x3e\x37\x72\x00\x3d\x3d\x26\x72\x11\x13\x52\xef\x5e",
        // "CC_SHA1" / M(Xor1) / S(140) / L(7)
        "\xcf\xcf\xd3\xdf\xc4\xcd\xbd\x8c\xfa\xe9\xcd\x11\xf0\x18\x36\xbf",
        // "CFBundleIdentifier" / M(Xor1) / S(129) / L(18)
        "\xc2\xc7\xc3\xf4\xef\xe5\xed\xe4\xc8\xe5\xe4\xef\xf5\xe8\xe7\xe8\xe4\xf3\x81",
        // "." / M(Xor4) / S(156) / L(1)
        "\xee\xc0\x9d\x31\x74\x0d\xe0\x46\x67\xac\xf8\xf5\x17\xb4\xe1\xd5",
        // "SKReceiptRefreshRequest" / M(Xor4) / S(95) / L(23)
        "\xb3\xab\xb2\x85\x83\x85\x89\x90\x94\xb2\x85\x86\x92\x85\x93\x88\xb2\x85\x91\x95\x85\x93\x94\xe0\xc8\x6b\xbc\xe7\x07\x4f\x33\x5f",
        // "IOObjectRelease" / M(Xor3) / S(198) / L(15)
        "\x9f\x99\x99\xb4\xbc\xb3\xb5\xa2\x84\xb3\xba\xb3\xb7\xa5\xb3\xd6",
        // "CFBundleGetMainBundle" / M(Xor1) / S(162) / L(21)
        "\xe1\xe4\xe0\xd7\xcc\xc6\xce\xc7\xe5\xc7\xd6\xef\xc3\xcb\xcc\xe0\xd7\xcc\xc6\xce\xc7\xa2",
        // "BIO_free" / M(Xor4) / S(165) / L(8)
        "\x12\x19\x1f\x0f\x36\x22\x35\x35\x50\x8d\x3f\x3d\x9d\xfa\x8f\x60",
        // "kCFDateFormatterTimeZone" / M(Xor2) / S(73) / L(24)
        "\x03\x2b\x2e\x2c\x09\x1c\x0d\x2e\x07\x1a\x05\x09\x1c\x1c\x0d\x1a\x3c\x01\x05\x0d\x32\x07\x06\x0d\x68\x87\xa4\x23\x53\xce\xda\x63\xc3",
        // "" / M(None) / S(0) / L(0)
        "\x2d\x60\xa4\x33\xa7\xc8\xb9\x35\x7c\x89\x9f\x3d\x0a\x3b\xf4\x53\x4d\x37\x22\x8a\x63\x0a\x64\x21\x7d\x06\xc7\xf9\x1b\xf7\x0b\x4d",
        // "/usr/lib/libSystem.dylib" / M(Xor1) / S(142) / L(24)
        "\xa1\xfb\xfd\xfc\xa1\xe2\xe7\xec\xa1\xe2\xe7\xec\xdd\xf7\xfd\xfa\xeb\xe3\xa0\xea\xf7\xe2\xe7\xec\x8e\x60\x19\x94\x02\x04\x2d\x3f\x8b",
        // "611e5b662c593a08ff58d14ae22452d198df6c60" / M(Xor3) / S(110) / L(40)
        "\xa9\xae\xae\xfa\xaa\xfd\xa9\xa9\xad\xfc\xaa\xa6\xac\xfe\xaf\xa7\xf9\xf9\xaa\xa7\xfb\xae\xab\xfe\xfa\xad\xad\xab\xaa\xad\xfb\xae\xa6\xa7\xfb\xf9\xa9\xfc\xa9\xaf\x9f\x64\xa6\x0d\x4a\x3a\x5f\x14\x94",
        // "kCFTypeDictionaryKeyCallBacks" / M(Xor1) / S(216) / L(29)
        "\xb3\x9b\x9e\x8c\xa1\xa8\xbd\x9c\xb1\xbb\xac\xb1\xb7\xb6\xb9\xaa\xa1\x93\xbd\xa1\x9b\xb9\xb4\xb4\x9a\xb9\xbb\xb3\xab\xd8\x89\xb3\x75\x20\x4b\x66\xfd\x44",
        // "setjmp" / M(Xor2) / S(4) / L(6)
        "\x67\x71\x60\x7e\x79\x64\x14\x0a\xa8\x5b\xd5\xfd\x21\x6c\xd7\xa5",
        // "BIO_free" / M(Xor3) / S(211) / L(8)
        "\xa1\xaa\xac\xbc\x85\x91\x86\x86\xe3\x04\xbb\xa9\x25\xaa\xba\x5b",
        // "/System/Library/Frameworks/IOKit.framework/IOKit" / M(Xor1) / S(191) / L(48)
        "\x90\xec\xc6\xcc\xcb\xda\xd2\x90\xf3\xd6\xdd\xcd\xde\xcd\xc6\x90\xf9\xcd\xde\xd2\xda\xc8\xd0\xcd\xd4\xcc\x90\xf6\xf0\xf4\xd6\xcb\x91\xd9\xcd\xde\xd2\xda\xc8\xd0\xcd\xd4\x90\xf6\xf0\xf4\xd6\xcb\xbf",
        // "sha1" / M(Rot) / S(12) / L(4)
        "\x7f\x74\x6d\x3d\x0c\x60\xe5\x7b\x45\xba\xab\xdb\xc4\x7e\x99\x59",
        // "SecKeychainSearchCreateFromAttributes" / M(Xor1) / S(68) / L(37)
        "\x17\x21\x27\x0f\x21\x3d\x27\x2c\x25\x2d\x2a\x17\x21\x25\x36\x27\x2c\x07\x36\x21\x25\x30\x21\x02\x36\x2b\x29\x05\x30\x30\x36\x2d\x26\x31\x30\x21\x37\x44",
        // "receipt" / M(Xor2) / S(1) / L(7)
        "\x63\x74\x72\x74\x78\x61\x65\x11\x07\x1b\xc0\xa3\xb0\xfb\x28\x4f",
        // "PKCS7_get0_signers" / M(Xor4) / S(211) / L(18)
        "\xf9\xe2\xea\xfa\x9e\xf6\xce\xcc\xdd\x99\xf6\xda\xc0\xce\xc7\xcc\xdb\xda\xa9",
        // "X509_digest" / M(Xor1) / S(175) / L(11)
        "\xf7\x9a\x9f\x96\xf0\xcb\xc6\xc8\xca\xdc\xdb\xaf\x80\xbb\xe8\x3b",
        // "CFDictionaryAddValue" / M(Xor4) / S(111) / L(20)
        "\x58\x5d\x5f\x72\x78\x6f\x72\x74\x75\x7a\x69\x62\x5a\x7f\x7f\x4d\x7a\x77\x6e\x7e\x1b",
        // "CFBundleVersion" / M(Xor4) / S(118) / L(15)
        "\x23\x26\x22\x15\x0e\x04\x0c\x05\x36\x05\x12\x13\x09\x0f\x0e\x60",
        // "" / M(None) / S(0) / L(0)
        "\xe4\x9c\x63\x7a\xf9\x32\x65\x3d\xc0\xb8\x67\xc7\xe4\x4c\x3e\x21\x90\x52\x30\xaa\x10\x78\x98\x4d\x44\xdd\x4e\x17\xd6\x2f\x91\x44",
        // "kCFTypeDictionaryValueCallBacks" / M(Xor2) / S(213) / L(31)
        "\x9e\xb6\xb3\xa1\x8c\x85\x90\xb1\x9c\x96\x81\x9c\x9a\x9b\x94\x87\x8c\xa3\x94\x99\x80\x90\xb6\x94\x99\x99\xb7\x94\x96\x9e\x86\xf5",
        // "EVP_MD_CTX_init" / M(Xor4) / S(33) / L(15)
        "\x55\x46\x40\x4f\x5d\x54\x4f\x53\x44\x48\x4f\x79\x7e\x79\x64\x10",
        // "" / M(None) / S(0) / L(0)
        "\x49\xd2\xed\x1f\xc3\xc7\x64\x60\xc6\xf2\x2d\xdd\xef\x2c\x0b\xe4\x91\x00\xb7\x74\xcc\xea\x44\x41\x68\xf5\x17\x68\x97\xb4\x2b\x36",
        // "SKReceiptRefreshRequest" / M(Rot) / S(16) / L(23)
        "\x63\x5b\x62\x75\x73\x75\x79\x80\x84\x62\x75\x76\x82\x75\x83\x78\x62\x75\x81\x85\x75\x83\x84\x10\xb9\x85\x92\xd6\x30\x85\xf5\x21",
        // "" / M(None) / S(0) / L(0)
        "\x0b\x98\x62\x47\x98\xd5\x58\xad\x9a\xc5\x94\x91\xbf\xa6\xa9\xe8\xc1\x78\x16\x2f\xa5\x34\x74\x96\x27\x7b\x9c\x21\xf0\x70\xf4\xf6",
        // "" / M(None) / S(0) / L(0)
        "\x1a\x1c\x2d\x37\x64\xbb\xbb\x53\x71\x4a\xd6\x4c\x3e\xaa\x5a\xfe\x7f\xe1\x05\xae\xc0\xd0\x48\x8d\x77\x78\xa7\x4f\xb6\x79\xe8\x9e",
        // "d2i_X509_bio" / M(Xor4) / S(155) / L(12)
        "\xd4\x82\xd9\xef\xe8\x85\x80\x89\xef\xd2\xd9\xdf\xb0\xb7\x7a\xc0",
        // "d2i_X509_bio" / M(Xor3) / S(49) / L(12)
        "\x25\x73\x28\x1e\x19\x74\x71\x78\x1e\x23\x28\x2e\x41\xb1\xcb\xf3",
        // "CFDataCreate" / M(Xor1) / S(149) / L(12)
        "\xd6\xd3\xd1\xf4\xe1\xf4\xd6\xe7\xf0\xf4\xe1\xf0\x95\xb4\x3d\xf8",
        // "dlsym" / M(Rot) / S(16) / L(5)
        "\x74\x7c\x83\x89\x7d\x10\x9d\xc0\xd5\xd6\xfa\xe3\x50\xd0\x06\x39",
        // "Contents" / M(Xor2) / S(74) / L(8)
        "\x19\x35\x34\x2e\x3f\x34\x2e\x29\x5a\x29\x92\x87\xf5\xc3\x87\xeb",
        // "" / M(None) / S(0) / L(0)
        "\x9a\xa0\x28\x46\x6b\x96\xac\x10\x52\xe6\xea\x9f\x9e\x27\x0d\x67\x2e\x29\xbd\x26\x7e\x1b\x97\x4e\x1c\x35\x35\x04\xa5\xab\x38\x98",
        // "SecKeychainOpen" / M(Xor4) / S(12) / L(15)
        "\x93\xa5\xa3\x8b\xa5\xb9\xa3\xa8\xa1\xa9\xae\x8f\xb0\xa5\xae\xc0",
        // "" / M(None) / S(0) / L(0)
        "\xfa\xd9\x0a\xab\x78\x62\x8b\x51\x24\xad\x58\xb9\x88\x87\xb6\x19\x48\xab\x01\xf1\xcd\x94\xa4\x17\x2c\x17\x64\xb2\x56\xde\xc2\x8a",
        // "" / M(None) / S(0) / L(0)
        "\x82\xe5\x65\x47\x44\x7e\x0b\x6d\x83\x86\x60\xe8\x82\x87\x11\x83\x57\xe3\x38\x07\x93\x02\xe9\x0e\xf7\xdf\x9d\x71\xb9\xdf\xf2\xea",
        // "" / M(None) / S(0) / L(0)
        "\x32\x6e\x7d\x72\x91\xea\x27\x5e\x3c\x29\x32\x96\x03\xf1\x98\xf3\x61\xc1\x7c\x1b\x6b\xe6\xc1\xb7\x1b\x81\xd1\x46\xbc\x33\x65\x0d",
        // "sk_free" / M(Xor3) / S(25) / L(7)
        "\x5a\x42\x76\x4f\x5b\x4c\x4c\x29\x10\x1a\x71\xec\xfe\xa0\x00\x3b",
        // "" / M(None) / S(0) / L(0)
        "\x1b\x1f\x3e\xe8\x71\x0d\x29\x10\xd5\x2f\x6d\xee\x34\x6f\x72\xf7\x89\x1c\x39\xec\x66\xf7\x8b\x8c\x88\xd2\x8f\x59\xc2\xb1\x10\x14",
        // "CFRelease" / M(Xor2) / S(21) / L(9)
        "\x46\x43\x57\x60\x69\x60\x64\x76\x60\x05\x5e\x05\x73\x16\x40\xc6",
        // "" / M(None) / S(0) / L(0)
        "\x38\x87\xcb\x93\x93\x8b\xb3\xbc\x56\x91\x27\x27\x89\x6d\x52\x84\xe2\xe0\xed\x61\xca\x5c\xfa\xa1\xe3\x0f\x74\xea\x6f\x1a\xfc\x55",
        // "yyyy'-'MM'-'dd'T'HH':'mm':'ss'Z'" / M(Xor2) / S(88) / L(32)
        "\x00\x00\x00\x00\x5e\x54\x5e\x34\x34\x5e\x54\x5e\x1d\x1d\x5e\x2d\x5e\x31\x31\x5e\x43\x5e\x14\x14\x5e\x43\x5e\x0a\x0a\x5e\x23\x5e\x79",
        // "" / M(None) / S(0) / L(0)
        "\xd3\x27\x3b\x9c\xf5\x8c\x5c\x74\x4c\x4a\x42\x7c\xcd\xd3\x05\x1c\xce\xf6\xcb\x50\xe5\x62\xe6\xfb\x7b\x62\x42\xfb\x1c\x2d\xd9\xc7",
        // "kSecMatchLimitAll" / M(Xor2) / S(126) / L(17)
        "\x07\x3f\x09\x0f\x21\x0d\x18\x0f\x04\x20\x05\x01\x05\x18\x2d\x00\x00\x6c",
        // "kSecReturnRef" / M(Xor1) / S(159) / L(13)
        "\xf4\xcc\xfa\xfc\xcd\xfa\xeb\xea\xed\xf1\xcd\xfa\xf9\x9f\xa5\x1c",
        // "EVP_get_digestbyname" / M(Xor4) / S(32) / L(20)
        "\xe5\xf6\xf0\xff\xc7\xc5\xd4\xff\xc4\xc9\xc7\xc5\xd3\xd4\xc2\xd9\xce\xc1\xcd\xc5\xa0",
        // "61:1e:5b:66:2c:59:3a:08:ff:58:d1:4a:e2:24:52:d1:98:df:6c:60" / M(Xor2) / S(5) / L(59)
        "\x77\x70\x7b\x70\x24\x7b\x74\x23\x7b\x77\x77\x7b\x73\x22\x7b\x74\x78\x7b\x72\x20\x7b\x71\x79\x7b\x27\x27\x7b\x74\x79\x7b\x25\x70\x7b\x75\x20\x7b\x24\x73\x7b\x73\x75\x7b\x74\x73\x7b\x25\x70\x7b\x78\x79\x7b\x25\x27\x7b\x77\x22\x7b\x77\x71\x41\xc4\x55\x50\x1b\xb2\x8e\xf3\xc3",
        // "CC_SHA1_Update" / M(Rot) / S(124) / L(14)
        "\xbf\xbf\xdb\xcf\xc4\xbd\xad\xdb\xd1\xec\xe0\xdd\xf0\xe1\x7c\xbe",
        // "" / M(None) / S(0) / L(0)
        "\xf4\x70\x5f\x50\x1a\xf5\x8b\x19\x35\xc2\x3d\xb4\x45\x85\x90\xcc\xf9\xf5\x84\x98\xcb\x0c\x13\x2c\x3d\x27\xd4\xcd\xc5\xe2\x0e\x43",
        // "" / M(None) / S(0) / L(0)
        "\x9d\xa7\x89\x2f\x27\x97\xa1\x1b\x9b\xaf\x87\x5c\x5c\x8e\x3c\x5f\x3e\xbc\xb3\xb9\x15\x3c\x05\xe6\x54\x31\x50\xc0\x3b\xa2\x11\x45",
        // "/System/Library/Frameworks/CoreFoundation.framework/CoreFoundation" / M(Xor3) / S(242) / L(66)
        "\x1a\x66\x4c\x46\x41\x50\x58\x1a\x79\x5c\x57\x47\x54\x47\x4c\x1a\x73\x47\x54\x58\x50\x42\x5a\x47\x5e\x46\x1a\x76\x5a\x47\x50\x73\x5a\x40\x5b\x51\x54\x41\x5c\x5a\x5b\x1b\x53\x47\x54\x58\x50\x42\x5a\x47\x5e\x1a\x76\x5a\x47\x50\x73\x5a\x40\x5b\x51\x54\x41\x5c\x5a\x5b\x35",
        // "dlopen" / M(Xor3) / S(23) / L(6)
        "\x43\x4b\x48\x57\x42\x49\x27\x27\x8d\x2b\x1a\xe2\x6f\xe3\xa8\xd5",
        // "IOServiceGetMatchingServices" / M(Xor3) / S(187) / L(28)
        "\xa9\xaf\xb3\x85\x92\x96\x89\x83\x85\xa7\x85\x94\xad\x81\x94\x83\x88\x89\x8e\x87\xb3\x85\x92\x96\x89\x83\x85\x93\xe0\xe8\x7a\xf8\x08\xa8\x23\x2e\xd1",
        // "sk_num" / M(Rot) / S(240) / L(6)
        "\x63\x5b\x4f\x5e\x65\x5d\xf0\x83\xe5\x67\x1b\x0b\x46\x91\x09\xfc",
        // "CFDateFormatterCreateDateFromString" / M(Xor4) / S(30) / L(35)
        "\x7b\x7e\x7c\x59\x4c\x5d\x7e\x57\x4a\x55\x59\x4c\x4c\x5d\x4a\x7b\x4a\x5d\x59\x4c\x5d\x7c\x59\x4c\x5d\x7e\x4a\x57\x55\x6b\x4c\x4a\x51\x56\x5f\x38",
        // "ASN1_OBJECT_free" / M(Xor2) / S(104) / L(16)
        "\x38\x2a\x37\x48\x26\x36\x3b\x33\x3c\x3a\x2d\x26\x1f\x0b\x1c\x1c\x79",
        // "61:1E:5B:66:2C:59:3A:08:FF:58:D1:4A:E2:24:52:D1:98:DF:6C:60" / M(Xor3) / S(64) / L(59)
        "\xb2\xb5\xbe\xb5\xc1\xbe\xb1\xc6\xbe\xb2\xb2\xbe\xb6\xc7\xbe\xb1\xbd\xbe\xb7\xc5\xbe\xb4\xbc\xbe\xc2\xc2\xbe\xb1\xbc\xbe\xc0\xb5\xbe\xb0\xc5\xbe\xc1\xb6\xbe\xb6\xb0\xbe\xb1\xb6\xbe\xc0\xb5\xbe\xbd\xbc\xbe\xc0\xc2\xbe\xb2\xc7\xbe\xb2\xb4\x84\xbd\xf3\x52\xc2\xa3\xe3\x83\x88",
        // "CFStringGetFileSystemRepresentation" / M(Xor4) / S(246) / L(35)
        "\xdb\xde\xcb\xec\xea\xf1\xf6\xff\xdf\xfd\xec\xde\xf1\xf4\xfd\xcb\xe1\xeb\xec\xfd\xf5\xca\xfd\xe8\xea\xfd\xeb\xfd\xf6\xec\xf9\xec\xf1\xf7\xf6\x98",
        // "" / M(None) / S(0) / L(0)
        "\x09\xcd\xf8\x55\xa3\xf2\x45\xf5\x21\xe9\x2b\x63\x1a\xe6\x0a\xef\xdb\x98\xde\xde\xbd\x6f\x95\x1b\xbc\x56\x43\xe7\x3c\x19\xff\xdf",
        // "BIO_write" / M(Xor4) / S(2) / L(9)
        "\x62\x69\x6f\x7f\x57\x52\x49\x54\x45\x20\x68\x72\x40\xdd\x86\xb5",
        // "CFDataAppendBytes" / M(Xor3) / S(88) / L(17)
        "\x29\x2c\x2e\x0b\x1e\x0b\x2b\x1a\x1a\x0f\x04\x0e\x28\x13\x1e\x0f\x19\x6a",
        // "CFBundleUnloadExecutable" / M(Xor4) / S(0) / L(24)
        "\x43\x46\x42\x75\x6e\x64\x6c\x65\x55\x6e\x6c\x6f\x61\x64\x45\x78\x65\x63\x75\x74\x61\x62\x6c\x65\x00\x00\x1b\x09\xdc\xdb\xb9\x60\xb1",
        // "CFArrayCreateMutable" / M(Xor3) / S(159) / L(20)
        "\xf7\xf2\xf5\xc6\xc6\xd5\xcd\xf7\xc6\xd1\xd5\xc0\xd1\xf9\xc1\xc0\xd5\xd6\xd8\xd1\xb4",
        // "BIO_write" / M(Xor4) / S(216) / L(9)
        "\xc2\xc9\xcf\xdf\xf7\xf2\xe9\xf4\xe5\x80\xc8\x26\x92\xc1\xb5\xb6",
        // "SecKeychainSearchCopyNext" / M(Xor4) / S(151) / L(25)
        "\x5d\x6b\x6d\x45\x6b\x77\x6d\x66\x6f\x67\x60\x5d\x6b\x6f\x7c\x6d\x66\x4d\x61\x7e\x77\x40\x6b\x76\x7a\x0e\x34\x2a\x9f\x32\x8d\x02\xdd\xe1",
        // "" / M(None) / S(0) / L(0)
        "\x78\xa0\x8d\xd9\xeb\x4c\xdc\x2c\xff\x33\xe9\x11\x3d\x3c\x4d\xfd\x4f\xa3\xe5\x82\x61\x1f\xc1\x60\xaf\xae\x2c\x98\x5a\x6d\x84\x2e",
        // "X509_get_ext_by_OBJ" / M(Xor2) / S(130) / L(19)
        "\xce\xa3\xa6\xaf\xc9\xf1\xf3\xe2\xc9\xf3\xee\xe2\xc9\xf4\xef\xc9\xd9\xd4\xdc\x96",
        // "" / M(None) / S(0) / L(0)
        "\x21\x16\x0c\x9c\xfc\x9a\x6c\xb8\xbd\x2d\xd4\x59\x92\x8f\x12\xac\x60\xfa\x9f\xfc\x48\x02\xa5\x02\x6f\x54\x43\x98\x1c\x8e\xfa\x83",
        // "" / M(None) / S(0) / L(0)
        "\x5d\xf2\x94\xf4\x01\x90\x60\x15\xd7\x3c\x73\x6b\xce\xa1\x8f\xe9\xb2\x2a\xe5\xd9\xfe\xc3\xed\xa4\xba\xe3\x93\x9b\x03\xb5\x65\xf6",
        // "" / M(None) / S(0) / L(0)
        "\x4e\xca\xa4\xbe\xc5\x0e\x94\xc0\x98\x34\xe6\x29\xbc\xc2\x68\xa6\x65\xa8\x2a\x82\xd8\xd2\x28\x99\x17\x9b\x8b\xb8\x96\x6f\x2a\x2d",
        // "2.0.4" / M(Rot) / S(197) / L(5)
        "\xf7\xf3\xf5\xf3\xf9\xc5\x47\x27\x5d\xf4\xfd\x58\x3f\x2a\x59\x71",
        // "CFDataCreateMutable" / M(Xor2) / S(154) / L(19)
        "\xcd\xc8\xca\xef\xfa\xef\xcd\xfc\xeb\xef\xfa\xeb\xc3\xfb\xfa\xef\xec\xe2\xeb\x8e",
        // "CFBundleGetIdentifier" / M(Xor4) / S(157) / L(21)
        "\x3d\x38\x3c\x0b\x10\x1a\x12\x1b\x39\x1b\x0a\x37\x1a\x1b\x10\x0a\x17\x18\x17\x1b\x0c\x7e",
        // "kCFTypeDictionaryKeyCallBacks" / M(Xor1) / S(57) / L(29)
        "\x52\x7a\x7f\x6d\x40\x49\x5c\x7d\x50\x5a\x4d\x50\x56\x57\x58\x4b\x40\x72\x5c\x40\x7a\x58\x55\x55\x7b\x58\x5a\x52\x4a\x39\xb3\x1a\xfb\x21\x23\xb7\xaf\xc3",
        // "CFDateFormatterSetProperty" / M(Xor1) / S(232) / L(26)
        "\xab\xae\xac\x89\x9c\x8d\xae\x87\x9a\x85\x89\x9c\x9c\x8d\x9a\xbb\x8d\x9c\xb8\x9a\x87\x98\x8d\x9a\x9c\x91\xe8\xd3\xd3\xaa\xd6\xe3\xcd\x5c\x7f",
        // "CFArrayGetCount" / M(Xor4) / S(74) / L(15)
        "\xe3\xe6\xe1\xd2\xd2\xc1\xd9\xe7\xc5\xd4\xe3\xcf\xd5\xce\xd4\xa0",
        // "CFDictionaryCreateMutable" / M(Xor4) / S(157) / L(25)
        "\x99\x9c\x9e\xb3\xb9\xae\xb3\xb5\xb4\xbb\xa8\xa3\x99\xa8\xbf\xbb\xae\xbf\x97\xaf\xae\xbb\xb8\xb6\xbf\xda\x13\xae\x41\x17\x48\xbf\x41\x9d",
        // "CFBundleGetValueForInfoDictionaryKey" / M(Xor1) / S(159) / L(36)
        "\xdc\xd9\xdd\xea\xf1\xfb\xf3\xfa\xd8\xfa\xeb\xc9\xfe\xf3\xea\xfa\xd9\xf0\xed\xd6\xf1\xf9\xf0\xdb\xf6\xfc\xeb\xf6\xf0\xf1\xfe\xed\xe6\xd4\xfa\xe6\x9f",
        // "" / M(None) / S(0) / L(0)
        "\x75\x46\xb2\x67\xff\x3e\x24\xcd\xb1\xf6\xd7\x79\xd9\xc9\xfa\x8f\x06\x31\x68\xb1\x7b\x51\xaa\xf7\xdb\x0f\x75\x9b\xb3\x4b\xbd\xaa",
        // "IOObjectRelease" / M(Xor3) / S(200) / L(15)
        "\x91\x97\x97\xba\xb2\xbd\xbb\xac\x8a\xbd\xb4\xbd\xb9\xab\xbd\xd8",
        // "receipt" / M(Xor1) / S(11) / L(7)
        "\x79\x6e\x68\x6e\x62\x7b\x7f\x0b\xf3\x8a\x08\x1d\x13\x27\xf5\x19",
        // "CFNumberCreate" / M(Rot) / S(62) / L(14)
        "\x81\x84\x8c\xb3\xab\xa0\xa3\xb0\x81\xb0\xa3\x9f\xb2\xa3\x3e\x11",
        // "Contents/_MASReceipt" / M(Rot) / S(7) / L(20)
        "\x4a\x76\x75\x7b\x6c\x75\x7b\x7a\x36\x66\x54\x48\x5a\x59\x6c\x6a\x6c\x70\x77\x7b\x07",
        // "yyyy'-'MM'-'dd'T'HH':'mm':'ss'Z'" / M(Xor3) / S(203) / L(32)
        "\x95\x95\x95\x95\xcb\xc1\xcb\xa1\xa1\xcb\xc1\xcb\x88\x88\xcb\xb8\xcb\xa4\xa4\xcb\xd6\xcb\x81\x81\xcb\xd6\xcb\x9f\x9f\xcb\xb6\xcb\xec",
        // "EVP_get_digestbyname" / M(Xor2) / S(242) / L(20)
        "\xa2\xb1\xb7\xb8\x80\x82\x93\xb8\x83\x8e\x80\x82\x94\x93\x85\x9e\x89\x86\x8a\x82\xe7",
        // "kSecMatchLimit" / M(Xor1) / S(44) / L(14)
        "\x47\x7f\x49\x4f\x61\x4d\x58\x4f\x44\x60\x45\x41\x45\x58\x2c\xa7",
        // "kSecMatchSubjectContains" / M(Xor3) / S(197) / L(24)
        "\x8d\xb5\x83\x85\xab\x87\x92\x85\x8e\xb5\x93\x84\x8c\x83\x85\x92\xa5\x89\x88\x92\x87\x8f\x88\x95\xe6\x8b\xaa\xe8\x0e\xde\x40\xd2\x5c",
        // "kSecClass" / M(Xor1) / S(39) / L(9)
        "\x4c\x74\x42\x44\x64\x4b\x46\x54\x54\x27\x6d\x70\xd9\x6f\x36\x2f",
        // "dlsym" / M(Xor2) / S(71) / L(5)
        "\x33\x3b\x24\x2e\x3a\x57\x2e\x04\x18\x91\xca\x2a\x17\xa7\x5b\x5f",
        // "" / M(None) / S(0) / L(0)
        "\x1d\xa3\xef\x24\x97\x15\x37\xff\xac\xb8\x77\xa2\x6f\x32\x17\x92\x74\xba\x59\x17\xe2\x76\xf2\x64\xaa\x15\xb5\x42\x8b\xa3\x33\xcc",
        // "SHA1" / M(Xor1) / S(47) / L(4)
        "\x7c\x67\x6e\x1e\x2f\xd6\xd8\x7e\x00\xff\xb1\x80\xf6\xfe\xfa\x5a",
        // "" / M(None) / S(0) / L(0)
        "\x28\x46\xb6\xd2\xf6\x0d\x58\x29\x8d\x80\x26\x8b\x66\x5f\xa6\xef\x99\x99\xd7\x1b\x7f\x8b\x36\xed\x60\x82\xec\xf3\x14\xce\xe6\xf0",
        // "ASN1_get_object" / M(Rot) / S(136) / L(15)
        "\xc9\xdb\xd6\xb9\xe7\xef\xed\xfc\xe7\xf7\xea\xf2\xed\xeb\xfc\x88",
        // "kCFTypeDictionaryValueCallBacks" / M(Xor2) / S(156) / L(31)
        "\xd7\xff\xfa\xe8\xc5\xcc\xd9\xf8\xd5\xdf\xc8\xd5\xd3\xd2\xdd\xce\xc5\xea\xdd\xd0\xc9\xd9\xff\xdd\xd0\xd0\xfe\xdd\xdf\xd7\xcf\xbc",
        // "" / M(None) / S(0) / L(0)
        "\xd7\xa4\x93\x88\x53\x7c\xf5\x69\x99\x26\x44\x8e\x9f\x82\x31\xdb\x46\x89\xa6\xd1\x2e\x0a\xc2\x0f\xff\x61\xce\xee\xb5\xf0\x98\x70",
        // "CFDateFormatterSetFormat" / M(Xor4) / S(35) / L(24)
        "\xc0\xc5\xc7\xe2\xf7\xe6\xc5\xec\xf1\xee\xe2\xf7\xf7\xe6\xf1\xd0\xe6\xf7\xc5\xec\xf1\xee\xe2\xf7\x83\x95\x09\xc2\x35\xd7\x65\x15\x4f",
        // "CFNumberCreate" / M(Xor1) / S(206) / L(14)
        "\x8d\x88\x80\xbb\xa3\xac\xab\xbc\x8d\xbc\xab\xaf\xba\xab\xce\xa0",
        // "611e5b662c593a08ff58d14ae22452d198df6c60" / M(Xor3) / S(21) / L(40)
        "\x70\x77\x77\x23\x73\x24\x70\x70\x74\x25\x73\x7f\x75\x27\x76\x7e\x20\x20\x73\x7e\x22\x77\x72\x27\x23\x74\x74\x72\x73\x74\x22\x77\x7f\x7e\x22\x20\x70\x25\x70\x76\x46\x1f\xeb\xca\x9a\x80\x55\xa5\x2c",
        // "kSecClassCertificate" / M(Xor1) / S(83) / L(20)
        "\x38\x00\x36\x30\x10\x3f\x32\x20\x20\x10\x36\x21\x27\x3a\x35\x3a\x30\x32\x27\x36\x53",
        // "CFBundleUnloadExecutable" / M(Xor2) / S(163) / L(24)
        "\xc1\xc4\xc0\xf7\xec\xe6\xee\xe7\xd7\xec\xee\xed\xe3\xe6\xc7\xfa\xe7\xe1\xf7\xf6\xe3\xe0\xee\xe7\x82\xa1\x28\xc2\xa5\xb2\xed\xd2\x80",
        // "IOBSDNameMatching" / M(Xor2) / S(31) / L(17)
        "\x44\x42\x4f\x5e\x49\x43\x6c\x60\x68\x40\x6c\x79\x6e\x65\x64\x63\x6a\x0d",
        // "CFURLCreateCopyAppendingPathComponent" / M(Xor1) / S(179) / L(37)
        "\xf0\xf5\xe6\xe1\xff\xf0\xc1\xd6\xd2\xc7\xd6\xf0\xdc\xc3\xca\xf2\xc3\xc3\xd6\xdd\xd7\xda\xdd\xd4\xe3\xd2\xc7\xdb\xf0\xdc\xde\xc3\xdc\xdd\xd6\xdd\xc7\xb3",
        // "IOMasterPort" / M(Xor2) / S(195) / L(12)
        "\x9a\x9c\x9e\xb2\xa0\xa7\xb6\xa1\x83\xbc\xa1\xa7\xd3\xb9\x4e\xd2",
        // "" / M(None) / S(0) / L(0)
        "\x86\x4e\x7d\xf7\xa1\xc1\x5a\x40\xbf\xe6\xf7\xd0\x5b\xf6\x51\x56\xea\xc4\x37\x2f\xc1\xa2\xc5\xd1\x6c\x2a\xb8\xee\xb3\xd2\x7b\xf9",
        // "" / M(None) / S(0) / L(0)
        "\x7c\x3d\x5d\x98\xf6\xae\x30\xf2\x4d\xd4\x7e\xe5\x5a\xfa\x4b\xef\x58\xd6\x4c\x67\x09\x81\x89\xa5\x79\xcb\x08\xe1\xb9\xcf\x43\x4f",
        // "CFDataGetLength" / M(Xor4) / S(238) / L(15)
        "\xa3\xa6\xa4\x81\x94\x81\xa7\x85\x94\xac\x85\x8e\x87\x94\x88\xe0",
        // "" / M(None) / S(0) / L(0)
        "\xf0\x0d\x82\xa4\xe8\xa8\x6d\x4b\x3d\x03\x2d\xa5\x96\xbc\x1b\x3c\xb4\x3a\xd9\xec\xbd\xd6\xb1\x0e\x8a\x12\x89\x44\x0f\xbe\x6e\x26",
        // "globfree" / M(Xor4) / S(56) / L(8)
        "\xe7\xec\xef\xe2\xe6\xf2\xe5\xe5\x80\x04\x2d\xf4\x9f\x2d\x2d\xc9",
        // "/System/Library/Frameworks/Security.framework/Security" / M(Xor3) / S(136) / L(54)
        "\x90\xec\xc6\xcc\xcb\xda\xd2\x90\xf3\xd6\xdd\xcd\xde\xcd\xc6\x90\xf9\xcd\xde\xd2\xda\xc8\xd0\xcd\xd4\xcc\x90\xec\xda\xdc\xca\xcd\xd6\xcb\xc6\x91\xd9\xcd\xde\xd2\xda\xc8\xd0\xcd\xd4\x90\xec\xda\xdc\xca\xcd\xd6\xcb\xc6\xbf",
        // "" / M(None) / S(0) / L(0)
        "\x55\xd0\xcd\x68\x94\x91\xba\xae\xa0\xbb\xd8\x40\xee\x09\x32\xcd\x33\xb6\x8e\x49\x72\x70\x70\xfc\x7d\xba\xc3\x11\x30\xb7\x48\xa4",
        // "" / M(None) / S(0) / L(0)
        "\xfb\xe5\x64\xf6\x83\xde\xf5\xfb\x82\x07\x6b\x62\x50\x11\x62\x91\xb2\x26\xfb\xef\x8d\xae\xce\x56\x1c\xd1\x2f\x9d\xf8\x91\x14\x95",
        // "d2i_PKCS7_bio" / M(Xor1) / S(55) / L(13)
        "\x53\x05\x5e\x68\x67\x7c\x74\x64\x00\x68\x55\x5e\x58\x37\x7f\xc4",
        // "CFDictionaryGetValue" / M(Xor1) / S(130) / L(20)
        "\xc1\xc4\xc6\xeb\xe1\xf6\xeb\xed\xec\xe3\xf0\xfb\xc5\xe7\xf6\xd4\xe3\xee\xf7\xe7\x82",
        // "/System/Library/Frameworks/Security.framework/Security" / M(Xor4) / S(184) / L(54)
        "\xa7\xdb\xf1\xfb\xfc\xed\xe5\xa7\xc4\xe1\xea\xfa\xe9\xfa\xf1\xa7\xce\xfa\xe9\xe5\xed\xff\xe7\xfa\xe3\xfb\xa7\xdb\xed\xeb\xfd\xfa\xe1\xfc\xf1\xa6\xee\xfa\xe9\xe5\xed\xff\xe7\xfa\xe3\xa7\xdb\xed\xeb\xfd\xfa\xe1\xfc\xf1\x88",
        // "" / M(None) / S(0) / L(0)
        "\xb8\xdb\xf9\xfb\xaa\xe1\xf9\xfe\x68\x2d\x83\x03\x7f\xf4\x1a\x18\xc0\x7e\x15\xc4\x9e\xc9\x2f\x27\xb6\xf8\x9e\xac\x5a\x74\x38\x3a",
        // "sk_num" / M(Xor2) / S(27) / L(6)
        "\x78\x60\x54\x65\x7e\x66\x0b\x25\x50\x0c\x0a\x86\x88\xe4\xc3\x3d",
        // "%02X" / M(Xor3) / S(134) / L(4)
        "\xb3\xa6\xa4\xce\x96\x48\x4a\x42\xa3\x32\x98\x31\xcd\xe7\xc0\x49",
        // "CFStringCreateWithBytes" / M(Xor2) / S(239) / L(23)
        "\x8c\x89\x9c\xbb\xbd\xa6\xa1\xa8\x8c\xbd\xaa\xae\xbb\xaa\x98\xa6\xbb\xa7\x8d\xb6\xbb\xaa\xbc\xcf\xe1\xcc\x06\xec\x7b\x91\xc3\x5f",
        // "CFBundleCopyBundleURL" / M(Xor2) / S(122) / L(21)
        "\x2f\x2a\x2e\x19\x02\x08\x00\x09\x2f\x03\x1c\x15\x2e\x19\x02\x08\x00\x09\x39\x3e\x20\x6c",
        // "SHA1_Update" / M(Xor1) / S(78) / L(11)
        "\x1d\x06\x0f\x7f\x11\x1b\x3e\x2a\x2f\x3a\x2b\x4e\x60\xf2\x83\x42",
        // "longjmp" / M(Xor2) / S(149) / L(7)
        "\xe9\xea\xeb\xe2\xef\xe8\xf5\x85\x11\x69\xc0\xfc\xc3\x47\xb8\xbb",
        // "" / M(None) / S(0) / L(0)
        "\x8b\x6a\x6f\xdb\x0e\x05\x4f\x7d\xe0\x25\xa1\xb0\x64\x07\x23\x91\xf3\xb9\xad\xd8\x47\x0d\x57\x3f\xa1\xf0\xcf\xfe\x5a\x6b\x2a\x56",
        // "kSecMatchSubjectContains" / M(Xor4) / S(192) / L(24)
        "\xab\x93\xa5\xa3\x8d\xa1\xb4\xa3\xa8\x93\xb5\xa2\xaa\xa5\xa3\xb4\x83\xaf\xae\xb4\xa1\xa9\xae\xb3\xc0\xa1\xc8\x3b\x03\x74\xff\x08\xd7",
        // "CFBundleIdentifier" / M(Xor4) / S(144) / L(18)
        "\xf3\xf6\xf2\xc5\xde\xd4\xdc\xd5\xf9\xd4\xd5\xde\xc4\xd9\xd6\xd9\xd5\xc2\xb0",
        // "CFTimeZoneCreateWithTimeIntervalFromGMT" / M(Rot) / S(214) / L(39)
        "\x19\x1c\x2a\x3f\x43\x3b\x30\x45\x44\x3b\x19\x48\x3b\x37\x4a\x3b\x2d\x3f\x4a\x3e\x2a\x3f\x43\x3b\x1f\x44\x4a\x3b\x48\x4c\x37\x42\x1c\x48\x45\x43\x1d\x23\x2a\xd6\x75\x4d\x86\x28\x45\x3f\x0b\x8a",
        // "" / M(None) / S(0) / L(0)
        "\x1b\x34\xa8\x97\x9a\x7b\x8a\x7f\x3f\x12\x26\xdf\x86\xfb\x3c\x79\x07\xa5\x34\x40\xf3\x3b\x93\x0a\x29\x04\xfe\xad\x73\xcd\x9b\x32",
        // "SecCertificateCopyData" / M(Xor1) / S(152) / L(22)
        "\xcb\xfd\xfb\xdb\xfd\xea\xec\xf1\xfe\xf1\xfb\xf9\xec\xfd\xdb\xf7\xe8\xe1\xdc\xf9\xec\xf9\x98",
        // "" / M(None) / S(0) / L(0)
        "\xd4\xa0\xa3\xb5\x5d\xac\x3d\x03\x33\x40\xd2\x88\x34\x5d\x19\x39\x4c\x8a\x3e\x5c\xb7\x13\xdb\x23\x38\x35\xdc\xd8\xba\x37\x40\xe8",
        // "kCFTypeDictionaryKeyCallBacks" / M(Xor2) / S(4) / L(29)
        "\x49\x61\x64\x76\x5b\x52\x47\x66\x4b\x41\x56\x4b\x4d\x4c\x43\x50\x5b\x69\x47\x5b\x61\x43\x4e\x4e\x60\x43\x41\x49\x51\x22\xfd\x43\x61\x68\x69\x2c\xc0\x1b",
        // "CFStringCreateWithCString" / M(Rot) / S(216) / L(25)
        "\x1b\x1e\x2b\x4c\x4a\x41\x46\x3f\x1b\x4a\x3d\x39\x4c\x3d\x2f\x41\x4c\x40\x1b\x2b\x4c\x4a\x41\x46\x3f\xd8\xe0\x7f\x88\xb2\x94\x31\x41\x63",
        // "" / M(None) / S(0) / L(0)
        "\x7e\x24\x81\xf6\xf6\x45\x5f\x1c\x57\xa6\xb0\x9b\xe5\x95\x5d\xfb\x5d\x8c\xc7\x86\xa3\xdb\x3c\x66\x16\x96\x5d\x95\xab\xec\xd4\xf0",
        // "CFReadStreamCreateWithFile" / M(Xor2) / S(248) / L(26)
        "\x98\x9d\x89\xbe\xba\xbf\x88\xaf\xa9\xbe\xba\xb6\x98\xa9\xbe\xba\xaf\xbe\x8c\xb2\xaf\xb3\x9d\xb2\xb7\xbe\xdb\x80\xf3\xf8\x5f\x3a\xec\x4d\x01",
        // "SHA1_Init" / M(Xor4) / S(115) / L(9)
        "\x63\x78\x71\x01\x6f\x79\x5e\x59\x44\x30\x55\x42\xa2\xdf\xfa\xc5",
        // "/usr/lib/libobjc.dylib" / M(Xor3) / S(31) / L(22)
        "\x19\x43\x45\x44\x19\x5a\x5f\x54\x19\x5a\x5f\x54\x59\x54\x5c\x55\x18\x52\x4f\x5a\x5f\x54\x36",
        // "" / M(None) / S(0) / L(0)
        "\x9a\x0c\x2d\x86\xc1\xed\x46\xcf\xe4\x40\xe4\x00\x83\xc2\x1d\x22\x4f\xe0\x46\x63\xea\xae\xf1\xa0\x01\x85\x32\xd8\x6d\x72\x27\x42",
        // "RTLD_MAIN_ONLY" / M(Xor3) / S(114) / L(14)
        "\xd0\xd6\xce\xc6\xdd\xcf\xc3\xcb\xcc\xdd\xcd\xcc\xce\xdb\x82\x9c",
        // "kSecMatchSearchList" / M(Xor4) / S(237) / L(19)
        "\xef\xd7\xe1\xe7\xc9\xe5\xf0\xe7\xec\xd7\xe1\xe5\xf6\xe7\xec\xc8\xed\xf7\xf0\x84",
        // "exit" / M(Xor1) / S(148) / L(4)
        "\xf1\xec\xfd\xe0\x94\x0e\x96\xdc\x7e\x82\x05\xf4\x53\xa9\x68\xa7",
        // "sk_value" / M(Xor3) / S(80) / L(8)
        "\x13\x0b\x3f\x16\x01\x0c\x15\x05\x60\x99\x30\xa7\xe9\x8f\xde\x57",
        // "" / M(None) / S(0) / L(0)
        "\x17\xa5\x61\x83\x80\x20\x0f\x48\x42\x3d\xba\xd2\x74\xea\xd9\x51\x8b\xe9\x9d\x55\xc0\x81\x05\x61\x87\x8b\xa7\x47\x4a\x65\xf7\x2c",
        // "SecKeychainSearchCreateFromAttributes" / M(Rot) / S(147) / L(37)
        "\xe6\xf8\xf6\xde\xf8\x0c\xf6\xfb\xf4\xfc\x01\xe6\xf8\xf4\x05\xf6\xfb\xd6\x05\xf8\xf4\x07\xf8\xd9\x05\x02\x00\xd4\x07\x07\x05\xfc\xf5\x08\x07\xf8\x06\x93",
        // "X509_digest" / M(Xor1) / S(115) / L(11)
        "\x2b\x46\x43\x4a\x2c\x17\x1a\x14\x16\x00\x07\x73\x9a\xc0\x84\xd7",
        // "strncmp" / M(Xor1) / S(38) / L(7)
        "\x55\x52\x54\x48\x45\x4b\x56\x26\xc3\x7e\x43\xa0\xf9\xc6\xa1\xef",
        // "IOMACAddress" / M(Xor4) / S(172) / L(12)
        "\x89\x8f\x8d\x81\x83\x81\xa4\xa4\xb2\xa5\xb3\xb3\xc0\x9f\x6b\xaa",
        // "SKReceiptRefreshRequest" / M(Rot) / S(250) / L(23)
        "\x4d\x45\x4c\x5f\x5d\x5f\x63\x6a\x6e\x4c\x5f\x60\x6c\x5f\x6d\x62\x4c\x5f\x6b\x6f\x5f\x6d\x6e\xfa\x68\x59\x71\x63\xbc\x19\x4b\x28",
        // "%02X" / M(Xor1) / S(183) / L(4)
        "\x92\x87\x85\xef\xb7\xc8\xa0\x8d\x1e\xd0\x83\x66\x25\x7d\x86\xb5",
        // "" / M(None) / S(0) / L(0)
        "\x4b\x09\x8b\xd0\x36\x20\x06\x10\x93\xb5\x64\x9b\x43\x45\x57\xdf\x23\x61\xed\x9f\xe3\xbd\x1c\xb6\x79\xb0\xb4\xc0\x1b\x61\xbe\x0d",
        // "EVP_MD_CTX_init" / M(Rot) / S(185) / L(15)
        "\xfe\x0f\x09\x18\x06\xfd\x18\xfc\x0d\x11\x18\x22\x27\x22\x2d\xb9",
        // "SecKeychainSearchCopyNext" / M(Rot) / S(45) / L(25)
        "\x80\x92\x90\x78\x92\xa6\x90\x95\x8e\x96\x9b\x80\x92\x8e\x9f\x90\x95\x70\x9c\x9d\xa6\x7b\x92\xa5\xa1\x2d\x79\x27\xdc\xfa\xd3\x74\x86\x42",
        // "SecKeychainOpen" / M(Xor3) / S(61) / L(15)
        "\x1e\x28\x2e\x06\x28\x34\x2e\x25\x2c\x24\x23\x02\x3d\x28\x23\x4d",
        // "glob" / M(Xor4) / S(174) / L(4)
        "\x87\x8c\x8f\x82\xe0\x4e\xaa\x2b\xe2\x2f\xe4\x4b\xaa\xbe\xf4\x4e",
        // "IORegistryEntryCreateCFProperty" / M(Xor1) / S(184) / L(31)
        "\xf1\xf7\xea\xdd\xdf\xd1\xcb\xcc\xca\xc1\xfd\xd6\xcc\xca\xc1\xfb\xca\xdd\xd9\xcc\xdd\xfb\xfe\xe8\xca\xd7\xc8\xdd\xca\xcc\xc1\xb8",
        // "receipt" / M(Xor3) / S(136) / L(7)
        "\xea\xfd\xfb\xfd\xf1\xe8\xec\x98\xac\x66\xa9\xb5\xed\x98\x59\xde",
        // "SecItemCopyMatching" / M(Rot) / S(137) / L(19)
        "\xdc\xee\xec\xd2\xfd\xee\xf6\xcc\xf8\xf9\x02\xd6\xea\xfd\xec\xf1\xf2\xf7\xf0\x89",
        // "" / M(None) / S(0) / L(0)
        "\xc4\x48\x2e\xb6\x75\x0a\x54\xdc\x34\x49\x2c\x95\x5b\xb0\x91\xce\x43\x18\x7e\xfc\x96\xac\x91\x56\xa4\x99\x1e\x19\x66\x98\x6e\x81",
        // "CFBundleShortVersionString" / M(Rot) / S(10) / L(26)
        "\x4d\x50\x4c\x7f\x78\x6e\x76\x6f\x5d\x72\x79\x7c\x7e\x60\x6f\x7c\x7d\x73\x79\x78\x5d\x7e\x7c\x73\x78\x71\x0a\x07\xcd\xe4\x41\x0f\x0a\x05\xd5",
        // "" / M(None) / S(0) / L(0)
        "\xac\x08\xd6\x50\x3c\xc7\x2c\xcf\x0b\x36\x12\x6e\xf9\xd7\x36\xc5\x3e\xd8\xea\xcd\x0f\xc2\x9c\x8a\xd1\x49\x25\x5d\x67\xcd\x1c\xd2",
        // "" / M(None) / S(0) / L(0)
        "\x6c\xf3\xb3\x20\x24\xd9\xcb\x8e\xf1\x54\xb4\x96\x0d\x6c\xda\x69\x9b\xf0\x8b\x3b\xff\xdb\xa8\xae\x3c\x78\x7b\x96\x84\xc9\x1f\x05",
        // "" / M(None) / S(0) / L(0)
        "\xc3\xde\x18\x17\xed\x3b\x1f\x7d\x74\x84\xf7\xef\x88\x5a\xa5\x54\x4c\xe0\xcc\xcd\x83\xc1\xd4\x9f\x6f\xb5\xb2\x08\x2f\xf7\x05\x71",
        // "IOIteratorNext" / M(Xor1) / S(141) / L(14)
        "\xc4\xc2\xc4\xf9\xe8\xff\xec\xf9\xe2\xff\xc3\xe8\xf5\xf9\x8d\xf6",
        // "CFEqual" / M(Rot) / S(9) / L(7)
        "\x4c\x4f\x4e\x7a\x7e\x6a\x75\x09\x61\x56\xf5\xdf\x1c\xe6\xdc\xb7",
        // "SHA1_Update" / M(Rot) / S(196) / L(11)
        "\x17\x0c\x05\xf5\x23\x19\x34\x28\x25\x38\x29\xc4\x56\x7e\xbe\xd0",
        // "CFArrayAppendValue" / M(Xor2) / S(202) / L(18)
        "\x9a\x9f\x98\xab\xab\xb8\xa0\x98\xa9\xa9\xbc\xb7\xbd\x8f\xb8\xb5\xac\xbc\xd9",
        // "EVP_get_digestbyname" / M(Xor2) / S(38) / L(20)
        "\x76\x65\x63\x6c\x54\x56\x47\x6c\x57\x5a\x54\x56\x40\x47\x51\x4a\x5d\x52\x5e\x56\x33",
        // "globfree" / M(Xor2) / S(201) / L(8)
        "\xbe\xb5\xb6\xbb\xbf\xab\xbc\xbc\xd9\x15\xde\x5d\x3d\xdf\x0b\x52",
        // "IORegistryEntryGetParentEntry" / M(Xor4) / S(0) / L(29)
        "\x49\x4f\x52\x65\x67\x69\x73\x74\x72\x79\x45\x6e\x74\x72\x79\x47\x65\x74\x50\x61\x72\x65\x6e\x74\x45\x6e\x74\x72\x79\x00\x9e\x74\xea\x92\x09\xc9\xe2\xa8",
        // "1.2.840.113635.100.6.11.1" / M(Xor4) / S(23) / L(25)
        "\x3f\x20\x3c\x20\x36\x3a\x3e\x20\x3f\x3f\x3d\x38\x3d\x3b\x20\x3f\x3e\x3e\x20\x38\x20\x3f\x3f\x20\x3f\x0e\x96\x44\x8b\x44\xa2\xe1\xd5\x0b",
        // "strlen" / M(Rot) / S(150) / L(6)
        "\x09\x0a\x08\x02\xfb\x04\x96\x0f\xfe\x65\xd7\xe4\xd0\x6d\x38\xae",
        // "CFArrayGetCount" / M(Xor4) / S(71) / L(15)
        "\x33\x36\x31\x02\x02\x11\x09\x37\x15\x04\x33\x1f\x05\x1e\x04\x70",
        // "" / M(None) / S(0) / L(0)
        "\x59\xef\x48\x9c\x4a\xdf\xf6\x6b\xc6\x0f\x48\xd4\xa5\x61\xc7\x23\xd4\x4c\x25\xa5\x15\x54\xe2\x8a\xd4\x88\xe7\xfa\xc6\x97\x9b\xa8",
        // "" / M(None) / S(0) / L(0)
        "\xe8\x1c\xc2\xb0\x61\x13\x7a\xcc\x5e\x41\x6a\xb5\x82\xab\xec\x77\x21\x69\xd4\x23\x0c\xc6\x8c\x70\x7a\xf9\x53\x13\xa4\xf7\x27\xf1",
        // "" / M(None) / S(0) / L(0)
        "\x19\xf7\x96\x11\x28\x42\x31\xa8\x54\xe7\xb0\xeb\xa3\x34\x36\x6f\x1b\xa2\xf4\xaa\x3c\x90\x08\xd7\x9e\xc4\x34\x96\xf4\xe1\x1d\xcd",
        // "" / M(None) / S(0) / L(0)
        "\xe8\xfc\x7b\x99\x26\x62\x23\xa3\xc4\x3f\x3e\x84\xe6\x39\x12\xf6\xe5\xa4\x94\x19\x73\x03\x79\x32\x1b\x52\x3b\x3b\xee\x6d\x62\x1b",
        // "Contents/_MASReceipt/receipt" / M(Xor1) / S(208) / L(28)
        "\x93\xbf\xbe\xa4\xb5\xbe\xa4\xa3\xff\x8f\x9d\x91\x83\x82\xb5\xb3\xb5\xb9\xa0\xa4\xff\xa2\xb5\xb3\xb5\xb9\xa0\xa4\xd0\x4f\x47\x1e\xb7\x61\x30\xbf\x3a",
        // "" / M(None) / S(0) / L(0)
        "\x4c\xcc\x91\x07\x0b\x7a\x05\x25\x8a\x3f\x4b\x5e\x8e\x01\x70\x04\x20\x18\xf7\xad\x45\xbc\x36\x17\x68\x25\x51\x6b\x31\x56\x28\x55",
        // "PKCS7_get0_signers" / M(Xor3) / S(237) / L(18)
        "\x50\x4b\x43\x53\x37\x5f\x67\x65\x74\x30\x5f\x73\x69\x67\x6e\x65\x72\x73\x00",
        // "CFURLCreateFromFileSystemRepresentation" / M(Xor2) / S(14) / L(39)
        "\x7d\x78\x6b\x6c\x72\x7d\x4c\x5b\x5f\x4a\x5b\x78\x4c\x51\x53\x78\x57\x52\x5b\x6d\x47\x4d\x4a\x5b\x53\x6c\x5b\x4e\x4c\x5b\x4d\x5b\x50\x4a\x5f\x4a\x57\x51\x50\x3e\xaf\xa7\x05\x20\xf1\x72\xa7\xf4",
        // "X509_STORE_free" / M(Xor2) / S(17) / L(15)
        "\x59\x34\x31\x38\x5e\x52\x55\x4e\x53\x44\x5e\x67\x73\x64\x64\x01",
        // "CC_SHA1_Final" / M(Xor1) / S(255) / L(13)
        "\xbc\xbc\xa0\xac\xb7\xbe\xce\xa0\xb9\x96\x91\x9e\x93\xff\xc8\x0f",
        // "CFDictionaryCreateMutable" / M(Xor2) / S(155) / L(25)
        "\xfa\xff\xfd\xd0\xda\xcd\xd0\xd6\xd7\xd8\xcb\xc0\xfa\xcb\xdc\xd8\xcd\xdc\xf4\xcc\xcd\xd8\xdb\xd5\xdc\xb9\x67\x8e\x7e\x3e\xcc\x3c\x21\xdf",
        // "CFReadStreamRead" / M(Rot) / S(14) / L(16)
        "\x51\x54\x60\x73\x6f\x72\x61\x82\x80\x73\x6f\x7b\x60\x73\x6f\x72\x0e",
        // "CFDateCreate" / M(Xor4) / S(56) / L(12)
        "\xc3\xc6\xc4\xe1\xf4\xe5\xc3\xf2\xe5\xe1\xf4\xe5\x80\xe1\x94\x28",
        // "EVP_DigestUpdate" / M(Xor2) / S(238) / L(16)
        "\xba\xa9\xaf\xa0\xbb\x96\x98\x9a\x8c\x8b\xaa\x8f\x9b\x9e\x8b\x9a\xff",
        // "CFArrayCreateMutable" / M(Xor2) / S(255) / L(20)
        "\xa9\xac\xab\x98\x98\x8b\x93\xa9\x98\x8f\x8b\x9e\x8f\xa7\x9f\x9e\x8b\x88\x86\x8f\xea",
        // "" / M(None) / S(0) / L(0)
        "\xd7\x1c\x3d\x2f\x4a\x34\xb8\xe8\xc8\xf5\xab\xb3\x9d\x6c\x1a\xde\x12\x70\xa0\x83\xb5\x24\x45\x3d\x28\x38\xb1\xdb\xb4\x1f\xc3\x3a",
        // "CFReadStreamOpen" / M(Xor2) / S(155) / L(16)
        "\xc9\xcc\xd8\xef\xeb\xee\xd9\xfe\xf8\xef\xeb\xe7\xc5\xfa\xef\xe4\x8a",
        // "objc_getClass" / M(Xor4) / S(30) / L(13)
        "\x8f\x82\x8a\x83\xbf\x87\x85\x94\xa3\x8c\x81\x93\x93\xe0\xec\x7d",
        // "yyyy'-'MM'-'dd'T'HH':'mm':'ss'Z'" / M(Xor1) / S(36) / L(32)
        "\x5d\x5d\x5d\x5d\x03\x09\x03\x69\x69\x03\x09\x03\x40\x40\x03\x70\x03\x6c\x6c\x03\x1e\x03\x49\x49\x03\x1e\x03\x57\x57\x03\x7e\x03\x24",
        // "CFDataCreateMutable" / M(Xor3) / S(18) / L(19)
        "\x65\x60\x62\x47\x52\x47\x65\x54\x43\x47\x52\x43\x6b\x53\x52\x47\x44\x4a\x43\x26",
        // "IOMasterPort" / M(Xor1) / S(2) / L(12)
        "\x4b\x4d\x4f\x63\x71\x76\x67\x70\x52\x6d\x70\x76\x02\xd6\x46\xf9",
        // "CFBundleGetIdentifier" / M(Xor1) / S(41) / L(21)
        "\x6a\x6f\x6b\x5c\x47\x4d\x45\x4c\x6e\x4c\x5d\x60\x4d\x4c\x47\x5d\x40\x4f\x40\x4c\x5b\x29",
        // "d2i_PKCS7_bio" / M(Xor2) / S(55) / L(13)
        "\x43\x15\x4e\x78\x77\x6c\x64\x74\x10\x78\x45\x4e\x48\x27\xb7\x60",
        // "Contents/_MASReceipt" / M(Xor4) / S(245) / L(20)
        "\x5a\x76\x77\x6d\x7c\x77\x6d\x6a\x36\x46\x54\x58\x4a\x4b\x7c\x7a\x7c\x70\x69\x6d\x19",
        // "strncmp" / M(Xor2) / S(217) / L(7)
        "\xba\xbd\xbb\xa7\xaa\xa4\xb9\xc9\xca\x07\x7a\xfa\xe8\x81\x69\x97",
        // "" / M(None) / S(0) / L(0)
        "\x6a\x6c\xdf\x84\x66\x11\x06\xea\x60\xff\x93\x3b\x79\x5c\x9d\xa8\xd5\x53\xf8\xb8\x85\xde\xa0\xdd\x09\xe8\x8c\xfe\xb0\xdc\x80\xa3",
        // "sk_value" / M(Xor2) / S(135) / L(8)
        "\xe4\xfc\xc8\xe1\xf6\xfb\xe2\xf2\x97\xf7\x1b\x00\x1f\x62\xe4\x10",
        // "IORegistryEntryGetParentEntry" / M(Xor4) / S(120) / L(29)
        "\x99\x9f\x82\xb5\xb7\xb9\xa3\xa4\xa2\xa9\x95\xbe\xa4\xa2\xa9\x97\xb5\xa4\x80\xb1\xa2\xb5\xbe\xa4\x95\xbe\xa4\xa2\xa9\xd0\xd1\xb7\xbb\x6a\xf6\x9d\xa4\x09",
        // "_MASReceipt" / M(Xor2) / S(139) / L(11)
        "\xc4\xd6\xda\xc8\xc9\xfe\xf8\xfe\xf2\xeb\xef\x9b\xbf\x79\x10\x9f",
        // "glob" / M(Xor4) / S(251) / L(4)
        "\xd7\xdc\xdf\xd2\xb0\xbd\xe2\x26\xc5\x8a\x18\x09\x33\xbc\x28\x44",
        // "sel_registerName" / M(Xor4) / S(210) / L(16)
        "\x81\x97\x9e\xad\x80\x97\x95\x9b\x81\x86\x97\x80\xbc\x93\x9f\x97\xf2",
        // "CFAbsoluteTimeGetCurrent" / M(Rot) / S(235) / L(24)
        "\x2e\x31\x2c\x4d\x5e\x5a\x57\x60\x5f\x50\x3f\x54\x58\x50\x32\x50\x5f\x2e\x60\x5d\x5d\x50\x59\x5f\xeb\x26\xc7\x81\x65\x22\x1c\xc5\x3d",
        // "dlopen" / M(Xor2) / S(114) / L(6)
        "\x06\x0e\x0d\x12\x07\x0c\x62\x36\x49\x9b\x4e\x3d\xa7\x0c\x0c\x73",
        // "_MASReceipt" / M(Xor2) / S(125) / L(11)
        "\x32\x20\x2c\x3e\x3f\x08\x0e\x08\x04\x1d\x19\x6d\xea\x48\x11\x4d",
        // "ASN1_get_object" / M(Xor3) / S(88) / L(15)
        "\x29\x3b\x26\x59\x37\x0f\x0d\x1c\x37\x07\x0a\x02\x0d\x0b\x1c\x68",
        // "" / M(None) / S(0) / L(0)
        "\x8a\x01\xbf\xa7\x90\x92\xa3\x25\x34\x72\x75\xd2\x9e\xf6\x7c\xfa\x7a\x38\x5a\x5e\x56\x9e\x21\x5f\x8e\xdf\xb8\xca\xd1\x96\x05\x72",
        // "%02x" / M(Xor1) / S(145) / L(4)
        "\xb4\xa1\xa3\xe9\x91\x41\x63\x08\x72\xd8\x5e\x9b\x56\x8c\x66\x1d",
        // "" / M(None) / S(0) / L(0)
        "\x0b\xb3\xb0\x6e\x81\x35\x67\x0f\x80\x9f\x21\x2d\x34\xed\xe1\xfb\x64\x88\xcf\xc9\xf9\xc2\xd5\x4d\x59\xc6\x39\x21\xfe\xc9\x2e\x76",
        // "CFRelease" / M(Xor3) / S(136) / L(9)
        "\xdb\xde\xca\xfd\xf4\xfd\xf9\xeb\xfd\x98\x41\x23\xb2\x6b\xc7\xb6",
        // "" / M(None) / S(0) / L(0)
        "\xae\x53\x5a\x12\xfc\x58\x77\xae\x1e\xf0\xc4\x84\x52\x6c\x83\xf7\x54\x6a\x6f\xc0\x02\x3f\xee\xf5\xed\x62\x9b\x59\x84\xf0\xf3\x3c",
        // "CFDateFormatterSetProperty" / M(Xor4) / S(46) / L(26)
        "\x09\x0c\x0e\x2b\x3e\x2f\x0c\x25\x38\x27\x2b\x3e\x3e\x2f\x38\x19\x2f\x3e\x1a\x38\x25\x3a\x2f\x38\x3e\x33\x4a\xd4\x29\xf9\x75\x3c\x06\x1f\x6b",
        // "" / M(None) / S(0) / L(0)
        "\x5d\x74\x0c\x9e\x3c\x8a\x1f\x3e\x25\x36\x95\xdd\xcd\x36\x64\xe9\x28\x90\x1a\xaa\x97\xf9\xdf\x3e\x8e\xc9\x04\xe4\x4c\x91\x1d\x1e",
        // "OpenSSL_add_all_digests" / M(Xor3) / S(235) / L(23)
        "\x44\x7b\x6e\x65\x58\x58\x47\x54\x6a\x6f\x6f\x54\x6a\x67\x67\x54\x6f\x62\x6c\x6e\x78\x7f\x78\x0b\x6d\x09\xc6\x33\x10\x7a\xa5\xcb",
        // "" / M(None) / S(0) / L(0)
        "\xf7\xc1\xb0\xe1\xed\xf9\xe9\x41\x21\xf7\x72\x32\xa7\xc0\xa8\xeb\x3e\x7a\x49\x92\x26\x72\x6c\x6a\x0b\x2f\x8c\xfe\x0c\xf7\xfe\x91",
        // "CFTimeZoneCreateWithTimeIntervalFromGMT" / M(Xor3) / S(231) / L(39)
        "\x54\x51\x43\x7e\x7a\x72\x4d\x78\x79\x72\x54\x65\x72\x76\x63\x72\x40\x7e\x63\x7f\x43\x7e\x7a\x72\x5e\x79\x63\x72\x65\x61\x76\x7b\x51\x65\x78\x7a\x50\x5a\x43\x17\x66\x08\xa1\x19\x8b\x73\x1b\xfa",
        // "CFReadStreamClose" / M(Xor3) / S(87) / L(17)
        "\x2a\x2f\x3b\x0c\x08\x0d\x3a\x1d\x1b\x0c\x08\x04\x2a\x05\x06\x1a\x0c\x69",
        // "%02x:" / M(Xor2) / S(182) / L(5)
        "\x83\x96\x94\xde\x9c\xa6\x21\xd0\xc8\x6e\x92\x45\xa5\xb5\x51\x41",
        // "" / M(None) / S(0) / L(0)
        "\x4c\xdb\x5f\x1d\x2c\x7f\x47\xeb\xb5\x71\xf1\xbd\x60\x73\xc7\x4e\xe2\xb3\x07\x1b\x03\xe4\x32\x49\x66\x47\x3c\x12\xb5\x09\xb5\x39",
        // "sk_free" / M(Xor1) / S(112) / L(7)
        "\x03\x1b\x2f\x16\x02\x15\x15\x70\xab\x9f\x47\x13\x8b\xbf\xbe\xcb",
        // "CFReadStreamOpen" / M(Xor3) / S(93) / L(16)
        "\x2d\x28\x3c\x0b\x0f\x0a\x3d\x1a\x1c\x0b\x0f\x03\x21\x1e\x0b\x00\x6e",
        // "CFDataAppendBytes" / M(Xor2) / S(99) / L(17)
        "\x32\x37\x35\x10\x05\x10\x30\x01\x01\x14\x1f\x15\x33\x08\x05\x14\x02\x71",
        // "SecCertificateCopyData" / M(Rot) / S(232) / L(22)
        "\x3b\x4d\x4b\x2b\x4d\x5a\x5c\x51\x4e\x51\x4b\x49\x5c\x4d\x2b\x57\x58\x61\x2c\x49\x5c\x49\xe8",
        // "CFReadStreamRead" / M(Xor3) / S(207) / L(16)
        "\xa3\xa6\xb2\x85\x81\x84\xb3\x94\x92\x85\x81\x8d\xb2\x85\x81\x84\xe0",
        // "X509_get_ext_by_OBJ" / M(Xor1) / S(202) / L(19)
        "\x92\xff\xfa\xf3\x95\xad\xaf\xbe\x95\xaf\xb2\xbe\x95\xa8\xb3\x95\x85\x88\x80\xca",
        // "CFStringCreateWithCString" / M(Xor4) / S(172) / L(25)
        "\x9b\x9e\x8b\xac\xaa\xb1\xb6\xbf\x9b\xaa\xbd\xb9\xac\xbd\x8f\xb1\xac\xb0\x9b\x8b\xac\xaa\xb1\xb6\xbf\xd8\x38\xbf\x08\xc6\x1f\x42\x53\x62",
        // "" / M(None) / S(0) / L(0)
        "\x80\x92\x0a\xb4\x1a\x83\xbf\x36\xf9\x13\xe6\x03\xc0\x27\x82\x41\xbb\x9d\x82\x20\xd3\x1d\xe8\xbb\x7f\xfc\x3c\xd7\xc5\x28\xd3\xe2",
        // "CFDateFormatterSetFormat" / M(Xor2) / S(24) / L(24)
        "\x7a\x7f\x7d\x58\x4d\x5c\x7f\x56\x4b\x54\x58\x4d\x4d\x5c\x4b\x6a\x5c\x4d\x7f\x56\x4b\x54\x58\x4d\x39\x94\x89\xe2\x03\x7e\xfc\x5e\x7a",
        // "CFReadStreamClose" / M(Xor4) / S(102) / L(17)
        "\x6f\x6a\x7e\x49\x4d\x48\x7f\x58\x5e\x49\x4d\x41\x6f\x40\x43\x5f\x49\x2c",
        // "init" / M(Xor4) / S(143) / L(4)
        "\x99\x9e\x99\x84\xf0\x2b\x7e\xa7\x78\xe6\xa9\xb7\x5d\x73\x16\xb6",
        // "X509_NAME_get_text_by_NID" / M(Xor3) / S(111) / L(25)
        "\xc9\xa4\xa1\xa8\xce\xdf\xd0\xdc\xd4\xce\xf6\xf4\xe5\xce\xe5\xf4\xe9\xe5\xce\xf3\xe8\xce\xdf\xd8\xd5\x91\xf2\xb2\x7a\xc7\x61\x53\x29\xa2",
        // "X509_digest" / M(Rot) / S(143) / L(11)
        "\xe7\xc4\xbf\xc8\xee\xf3\xf8\xf6\xf4\x02\x03\x8f\x06\x0b\x0f\x80",
        // "SHA1_Final" / M(Xor4) / S(169) / L(10)
        "\xc3\xd8\xd1\xa1\xcf\xd6\xf9\xfe\xf1\xfc\x90\x7e\x0f\xc6\xc8\x11",
        // "" / M(None) / S(0) / L(0)
        "\xce\xbf\x13\x51\x8b\x83\xdc\xd1\x4c\x14\x31\x2c\xd7\x02\xb4\x32\xe6\xb8\x48\xb1\x4b\xcf\xfa\x23\x24\x1b\xcf\x85\x0e\xc2\x5e\x62",
        // "%02X:" / M(Xor4) / S(33) / L(5)
        "\x35\x20\x22\x48\x2a\x10\x98\xea\x66\xa6\xc0\xf2\xdb\x1a\x89\x39",
        // "CFStringCreateWithCString" / M(Xor2) / S(206) / L(25)
        "\xaf\xaa\xbf\x98\x9e\x85\x82\x8b\xaf\x9e\x89\x8d\x98\x89\xbb\x85\x98\x84\xaf\xbf\x98\x9e\x85\x82\x8b\xec\xfc\x25\x52\xec\x98\x51\x7b\xa1",
        // "CFStringCreateWithBytes" / M(Xor3) / S(56) / L(23)
        "\x1b\x1e\x0b\x2c\x2a\x31\x36\x3f\x1b\x2a\x3d\x39\x2c\x3d\x0f\x31\x2c\x30\x1a\x21\x2c\x3d\x2b\x58\x31\x45\xd2\xe5\x7c\x35\x0d\x46",
        // "Contents" / M(Xor3) / S(145) / L(8)
        "\xe2\xce\xcf\xd5\xc4\xcf\xd5\xd2\xa1\x6f\xe2\x34\x0b\xe3\xa1\xc8",
        // "kSecReturnRef" / M(Xor2) / S(55) / L(13)
        "\x4c\x74\x42\x44\x75\x42\x53\x52\x55\x49\x75\x42\x41\x27\xdb\x73",
        // "" / M(None) / S(0) / L(0)
        "\x14\xe1\xa7\xf2\xc3\x4a\x2b\xdd\xd9\xa4\x68\x5e\x63\x41\x17\x9d\x4c\x9a\xbd\x13\xe8\x76\xb3\xc3\x79\xe0\xcb\x33\xdd\x68\x68\x0c",
        // "" / M(None) / S(0) / L(0)
        "\x5a\x77\x7e\x7f\x60\x5a\xc9\xb0\xe2\x33\x46\x85\x9e\xfb\xaf\xa8\xcf\xe2\x77\xe5\x65\x61\x95\x07\x03\x94\x71\x79\x92\x50\x26\x5b",
        // "CFDateFormatterCreate" / M(Xor1) / S(236) / L(21)
        "\xaf\xaa\xa8\x8d\x98\x89\xaa\x83\x9e\x81\x8d\x98\x98\x89\x9e\xaf\x9e\x89\x8d\x98\x89\xec",
        // "/System/Library/Frameworks/IOKit.framework/IOKit" / M(Xor1) / S(20) / L(48)
        "\x3b\x47\x6d\x67\x60\x71\x79\x3b\x58\x7d\x76\x66\x75\x66\x6d\x3b\x52\x66\x75\x79\x71\x63\x7b\x66\x7f\x67\x3b\x5d\x5b\x5f\x7d\x60\x3a\x72\x66\x75\x79\x71\x63\x7b\x66\x7f\x3b\x5d\x5b\x5f\x7d\x60\x14",
        // "CFDictionaryCreateMutable" / M(Xor4) / S(115) / L(25)
        "\x05\x00\x02\x2f\x25\x32\x2f\x29\x28\x27\x34\x3f\x05\x34\x23\x27\x32\x23\x0b\x33\x32\x27\x24\x2a\x23\x46\x65\x73\xd3\x26\x38\xb8\xa4\x7e",
        // "kCFBundleIdentifierKey" / M(Xor1) / S(126) / L(22)
        "\x15\x3d\x38\x3c\x0b\x10\x1a\x12\x1b\x37\x1a\x1b\x10\x0a\x17\x18\x17\x1b\x0c\x35\x1b\x07\x7e",
        // "" / M(None) / S(0) / L(0)
        "\xb3\x2e\xa5\x72\xa7\x88\x72\x75\x27\x93\x88\xb9\x84\x29\xbe\x35\x24\x19\xd9\xc6\x70\x06\x74\x30\x20\x12\x46\x4c\xcd\x76\xc0\xd5",
        // "glob" / M(Xor4) / S(176) / L(4)
        "\x67\x6c\x6f\x62\x00\x18\x03\x98\x24\x5b\x04\xbc\x10\xfb\x62\x85",
        // "" / M(None) / S(0) / L(0)
        "\x54\x15\x61\x96\x22\x1d\xf2\xd8\x24\x91\x22\xe9\x16\xaa\x4c\xef\x7a\x73\x3e\xc4\x79\x2c\x67\x90\xef\x0c\x1b\x26\x9a\xc2\xbe\xb1",
        // "kCFTypeArrayCallBacks" / M(Xor2) / S(14) / L(21)
        "\x73\x5b\x5e\x4c\x61\x68\x7d\x59\x6a\x6a\x79\x61\x5b\x79\x74\x74\x5a\x79\x7b\x73\x6b\x18",
        // "start" / M(Xor3) / S(232) / L(5)
        "\x8b\x8c\x99\x8a\x8c\xf8\x1b\xf8\xc2\x2f\x67\x95\x95\xda\x58\x4f",
        // "" / M(None) / S(0) / L(0)
        "\xe6\x05\x67\x74\xc6\x29\xd4\xfe\x3e\xbc\x50\xea\x66\xd4\x77\x57\xc1\x87\x1b\x1d\x4c\x57\xa4\xb7\x35\xf7\x24\x94\x72\xed\xbb\x95",
        // "kCFDateFormatterTimeZone" / M(Xor3) / S(165) / L(24)
        "\xad\x85\x80\x82\xa7\xb2\xa3\x80\xa9\xb4\xab\xa7\xb2\xb2\xa3\xb4\x92\xaf\xab\xa3\x9c\xa9\xa8\xa3\xc6\xb8\xf4\x6e\xde\x89\x03\xab\xf8",
        // "SecItemCopyMatching" / M(Xor3) / S(139) / L(19)
        "\xcc\xfa\xfc\xd6\xeb\xfa\xf2\xdc\xf0\xef\xe6\xd2\xfe\xeb\xfc\xf7\xf6\xf1\xf8\x9f",
        // "EVP_DigestInit" / M(Xor3) / S(26) / L(14)
        "\x6f\x7c\x7a\x75\x6e\x43\x4d\x4f\x59\x5e\x63\x44\x43\x5e\x2a\x46",
        // "CFArrayAppendValue" / M(Xor4) / S(159) / L(18)
        "\x8e\x8b\x8c\xbf\xbf\xac\xb4\x8c\xbd\xbd\xa8\xa3\xa9\x9b\xac\xa1\xb8\xa8\xcd",
        // "glob_b" / M(Xor4) / S(53) / L(6)
        "\x37\x3c\x3f\x32\x0f\x32\x50\x1d\x89\x2c\xb0\x80\xb4\x08\xb2\x63",
        // "CFDictionarySetValue" / M(Xor1) / S(89) / L(20)
        "\x1a\x1f\x1d\x30\x3a\x2d\x30\x36\x37\x38\x2b\x20\x0a\x3c\x2d\x0f\x38\x35\x2c\x3c\x59",
        // "61:1e:5b:66:2c:59:3a:08:ff:58:d1:4a:e2:24:52:d1:98:df:6c:60" / M(Xor2) / S(99) / L(59)
        "\x11\x16\x1d\x16\x42\x1d\x12\x45\x1d\x11\x11\x1d\x15\x44\x1d\x12\x1e\x1d\x14\x46\x1d\x17\x1f\x1d\x41\x41\x1d\x12\x1f\x1d\x43\x16\x1d\x13\x46\x1d\x42\x15\x1d\x15\x13\x1d\x12\x15\x1d\x43\x16\x1d\x1e\x1f\x1d\x43\x41\x1d\x11\x44\x1d\x11\x17\x27\x25\x60\xe2\x63\x46\xa2\x18\x7e",
        // "%02x" / M(Rot) / S(14) / L(4)
        "\x33\x3e\x40\x86\x0e\x34\xa8\xd9\x92\x04\xf9\x7d\x4b\x32\xe5\xc7",
        // "/usr/lib/libSystem.dylib" / M(Rot) / S(254) / L(24)
        "\x2d\x73\x71\x70\x2d\x6a\x67\x60\x2d\x6a\x67\x60\x51\x77\x71\x72\x63\x6b\x2c\x62\x77\x6a\x67\x60\xfe\xbf\x38\x36\x44\xc7\xdb\x41\x4e",
        // "" / M(None) / S(0) / L(0)
        "\x6e\xcc\x71\x68\x9e\x29\xa7\x42\x37\x09\x2d\xe6\x17\xc6\x9d\x25\x13\x2a\x51\x84\x94\xc0\x71\xa2\xee\x2a\x2c\x74\x1a\xd0\x52\x3b",
        // "globfree" / M(Xor2) / S(129) / L(8)
        "\xf6\xfd\xfe\xf3\xf7\xe3\xf4\xf4\x91\x5e\xf8\x5d\xb3\xba\x17\x82",
        // "start" / M(Xor2) / S(7) / L(5)
        "\x64\x63\x76\x65\x63\x17\xee\xb5\x42\x63\x48\x55\x63\x60\xf9\x56",
        // "" / M(None) / S(0) / L(0)
        "\xc5\xa0\x0c\xfe\x95\x8b\x14\xac\x6c\x8e\x15\xc7\xcf\x74\x04\x51\x74\xed\xb7\x0d\xdf\xc0\xf4\xae\x73\x8d\x6a\xd7\xdd\x0b\x42\x84",
        // "" / M(None) / S(0) / L(0)
        "\x4a\x68\xab\x49\xb8\xb4\x71\xe0\xec\x18\xb4\x60\x62\x65\x13\xb4\xcf\xf0\xb8\x48\xbb\xb3\x30\x69\x08\x01\x2d\x6a\x32\xf4\xa7\xf4",
        // "CFDataGetLength" / M(Xor2) / S(117) / L(15)
        "\x26\x23\x21\x04\x11\x04\x22\x00\x11\x29\x00\x0b\x02\x11\x0d\x65",
        // "" / M(None) / S(0) / L(0)
        "\x03\x3c\x34\xd8\xca\x00\xf0\x6b\xe0\xba\x3d\x7f\xda\x19\x15\x36\xa7\xb5\x62\x81\x5f\x6e\x6b\xc6\x56\xcd\x3f\xef\x11\x78\x0d\x6d",
        // "" / M(None) / S(0) / L(0)
        "\xa9\x2d\x42\x5e\x27\x3e\xe2\x25\xb0\x41\x2b\x83\xf2\x08\x9a\x5e\x85\x2c\xa9\x4b\x80\x89\x6c\x7e\x2b\x99\xc4\xb5\x9f\x04\x6f\xa8",
        // "dlsym" / M(Xor4) / S(8) / L(5)
        "\xe4\xec\xf3\xf9\xed\x80\x2b\x3b\x4c\xa9\xef\xe1\x08\xb0\x16\x4b",
        // "CFURLCreateWithFileSystemPathRelativeToBase" / M(Xor3) / S(103) / L(43)
        "\xd8\xdd\xce\xc9\xd7\xd8\xe9\xfe\xfa\xef\xfe\xcc\xf2\xef\xf3\xdd\xf2\xf7\xfe\xc8\xe2\xe8\xef\xfe\xf6\xcb\xfa\xef\xf3\xc9\xfe\xf7\xfa\xef\xf2\xed\xfe\xcf\xf4\xd9\xfa\xe8\xfe\x9b\x32\x49\x7d\xd7\x51\xbc\x5c\xf0",
        // "" / M(None) / S(0) / L(0)
        "\x90\xba\x59\x80\x23\x23\x66\x29\x28\xf4\x05\xd8\xfa\x35\xf7\x96\x27\xb3\x9f\x4d\x6f\x54\x57\x97\xdb\x09\xdf\x62\xa2\x28\x19\xfc",
        // "" / M(None) / S(0) / L(0)
        "\xf7\xb1\xb7\x14\x70\x41\x7a\x5d\x57\x65\x0a\x04\x45\x47\x18\x67\x18\xe1\x48\x9e\x51\x0f\xd6\x38\x6a\xbf\x64\xf6\x63\x92\xc5\x67",
        // "CFStringCompare" / M(Xor3) / S(114) / L(15)
        "\xc1\xc4\xd1\xf6\xf0\xeb\xec\xe5\xc1\xed\xef\xf2\xe3\xf0\xe7\x82",
        // "IORegistryEntryCreateCFProperty" / M(Xor1) / S(205) / L(31)
        "\x84\x82\x9f\xa8\xaa\xa4\xbe\xb9\xbf\xb4\x88\xa3\xb9\xbf\xb4\x8e\xbf\xa8\xac\xb9\xa8\x8e\x8b\x9d\xbf\xa2\xbd\xa8\xbf\xb9\xb4\xcd",
        // "CFDictionaryAddValue" / M(Xor3) / S(28) / L(20)
        "\x72\x77\x75\x58\x52\x45\x58\x5e\x5f\x50\x43\x48\x70\x55\x55\x67\x50\x5d\x44\x54\x31",
        // "CC_SHA1_Update" / M(Xor4) / S(107) / L(14)
        "\xf3\xf3\xef\xe3\xf8\xf1\x81\xef\xe5\xc0\xd4\xd1\xc4\xd5\xb0\x89",
        // "CFEqual" / M(Rot) / S(125) / L(7)
        "\xc0\xc3\xc2\xee\xf2\xde\xe9\x7d\xd9\x23\xcb\x09\x71\x30\x0f\xfc",
        // "CFNumberCreate" / M(Xor4) / S(127) / L(14)
        "\xb3\xb6\xbe\x85\x9d\x92\x95\x82\xb3\x82\x95\x91\x84\x95\xf0\x58",
        // "" / M(None) / S(0) / L(0)
        "\xa4\xec\x9f\x09\x10\xe5\x41\xdd\x33\xe4\x0f\xa0\x87\xd6\x3e\x04\xcb\x47\x8f\x2d\x70\xfb\x40\x0d\x4c\x89\x63\x92\xd5\x86\xc5\x38",
        // "it.iltofa.Turms" / M(Xor3) / S(12) / L(15)
        "\x75\x68\x32\x75\x70\x68\x73\x7a\x7d\x32\x48\x69\x6e\x71\x6f\x1c",
        // "CFReadStreamCreateWithFile" / M(Xor1) / S(248) / L(26)
        "\xbb\xbe\xaa\x9d\x99\x9c\xab\x8c\x8a\x9d\x99\x95\xbb\x8a\x9d\x99\x8c\x9d\xaf\x91\x8c\x90\xbe\x91\x94\x9d\xf8\x77\xf1\x68\x40\x9a\x4e\x2b\xf5",
        // "Apple Root CA" / M(Xor2) / S(145) / L(13)
        "\xc0\xf1\xf1\xed\xe4\xa1\xd3\xee\xee\xf5\xa1\xc2\xc0\x81\xd1\x73",
        // "CFArrayGetValueAtIndex" / M(Xor4) / S(120) / L(22)
        "\x8b\x8e\x89\xba\xba\xa9\xb1\x8f\xad\xbc\x9e\xa9\xa4\xbd\xad\x89\xbc\x81\xa6\xac\xad\xb0\xc8",
        // "CFStringGetFileSystemRepresentation" / M(Xor3) / S(38) / L(35)
        "\x09\x0c\x19\x3e\x38\x23\x24\x2d\x0d\x2f\x3e\x0c\x23\x26\x2f\x19\x33\x39\x3e\x2f\x27\x18\x2f\x3a\x38\x2f\x39\x2f\x24\x3e\x2b\x3e\x23\x25\x24\x4a",
        // "BIO_free" / M(Xor1) / S(33) / L(8)
        "\x63\x68\x6e\x7e\x47\x53\x44\x44\x21\x46\xd3\xf1\x77\x9b\x1e\x4f",
        // "kCFTypeArrayCallBacks" / M(Xor1) / S(25) / L(21)
        "\x72\x5a\x5f\x4d\x60\x69\x7c\x58\x6b\x6b\x78\x60\x5a\x78\x75\x75\x5b\x78\x7a\x72\x6a\x19",
        // "." / M(Xor4) / S(73) / L(1)
        "\xbe\x90\x28\x97\x40\x75\x17\x84\x01\xc5\x57\xc8\x99\x17\xc0\x1d",
        // "init" / M(Xor1) / S(203) / L(4)
        "\xa2\xa5\xa2\xbf\xcb\xc4\xd7\x85\x04\xcb\x57\x67\xaa\x83\x98\x88",
        // "CFDateFormatterSetFormat" / M(Xor3) / S(248) / L(24)
        "\x5a\x5f\x5d\x78\x6d\x7c\x5f\x76\x6b\x74\x78\x6d\x6d\x7c\x6b\x4a\x7c\x6d\x5f\x76\x6b\x74\x78\x6d\x19\x68\x6b\xcb\x1d\xc9\xd4\x82\x14",
        // "CFArrayGetValueAtIndex" / M(Xor1) / S(125) / L(22)
        "\x3e\x3b\x3c\x0f\x0f\x1c\x04\x3a\x18\x09\x2b\x1c\x11\x08\x18\x3c\x09\x34\x13\x19\x18\x05\x7d",
        // "OpenSSL_add_all_digests" / M(Rot) / S(99) / L(23)
        "\xb2\xd3\xc8\xd1\xb6\xb6\xaf\xc2\xc4\xc7\xc7\xc2\xc4\xcf\xcf\xc2\xc7\xcc\xca\xc8\xd6\xd7\xd6\x63\xef\x5f\x50\xa3\x80\x41\x52\xc2",
        // "OpenSSL_add_all_digests" / M(Rot) / S(236) / L(23)
        "\x3b\x5c\x51\x5a\x3f\x3f\x38\x4b\x4d\x50\x50\x4b\x4d\x58\x58\x4b\x50\x55\x53\x51\x5f\x60\x5f\xec\x4d\xbb\x2e\xde\xd6\xff\x57\x38",
        // "/System/Library/Frameworks/Security.framework/Security" / M(Rot) / S(174) / L(54)
        "\xdd\x01\x27\x21\x22\x13\x1b\xdd\xfa\x17\x10\x20\x0f\x20\x27\xdd\xf4\x20\x0f\x1b\x13\x25\x1d\x20\x19\x21\xdd\x01\x13\x11\x23\x20\x17\x22\x27\xdc\x14\x20\x0f\x1b\x13\x25\x1d\x20\x19\xdd\x01\x13\x11\x23\x20\x17\x22\x27\xae",
        // "X509_free" / M(Xor3) / S(176) / L(9)
        "\x98\xf5\xf0\xf9\x9f\xa6\xb2\xa5\xa5\xc0\x94\x39\xb1\xb8\xc9\x5f",
        // "en0" / M(Xor3) / S(179) / L(3)
        "\xa6\xad\xf3\xc3\xa7\x34\xca\x2b\x7c\xd6\x06\xa4\x26\xd6\x10\x85",
        // "" / M(None) / S(0) / L(0)
        "\x26\xa4\x8b\x14\x2c\x22\x08\x56\x43\xf1\x44\x89\xfb\x19\x90\x0c\x0c\x7e\x6f\x10\x92\x07\x8f\xbe\x27\x40\x1b\x35\x00\xbe\x2b\x3d",
        // "kCFTypeArrayCallBacks" / M(Xor2) / S(132) / L(21)
        "\xf9\xd1\xd4\xc6\xeb\xe2\xf7\xd3\xe0\xe0\xf3\xeb\xd1\xf3\xfe\xfe\xd0\xf3\xf1\xf9\xe1\x92",
        // "" / M(None) / S(0) / L(0)
        "\xb8\x88\x9f\xf3\x7d\xd4\x85\x62\x00\xfd\xeb\xd9\xdf\xda\x28\x8f\x2d\x21\xfe\x8d\x78\xe5\xae\xd9\xc7\xbb\x61\x75\x13\x79\xcf\xc6",
        // "PKCS7_get0_signers" / M(Xor2) / S(240) / L(18)
        "\xb3\xa8\xa0\xb0\xd4\xbc\x84\x86\x97\xd3\xbc\x90\x8a\x84\x8d\x86\x91\x90\xe3",
        // "" / M(None) / S(0) / L(0)
        "\x6c\x2b\x87\xed\xbc\x69\xf6\x4f\x58\x1f\x42\x24\xce\xd0\x61\x94\xb9\x07\x90\x47\xb3\xde\x1f\x38\x5f\x8f\xf6\xcd\x32\xbd\xf2\xc0",
        // "" / M(None) / S(0) / L(0)
        "\x11\x8d\x96\x3f\x0c\x24\x9c\x5f\x99\x79\x53\xaa\xcd\x35\xc9\x0e\x09\xc5\x26\xd4\x00\x85\xb6\x0c\x2a\xa7\xf2\xf2\x78\xbc\xd6\xb9",
        // "1.2.840.113635.100.6.11.1" / M(Xor3) / S(207) / L(25)
        "\xc0\xdf\xc3\xdf\xc9\xc5\xc1\xdf\xc0\xc0\xc2\xc7\xc2\xc4\xdf\xc0\xc1\xc1\xdf\xc7\xdf\xc0\xc0\xdf\xc0\xf1\x69\xac\xa9\x49\xb7\xec\xbb\xae",
        // "longjmp" / M(Xor4) / S(138) / L(7)
        "\xcc\xcf\xce\xc7\xca\xcd\xd0\xa0\xc3\x99\x6e\xc1\x02\xdd\x91\xa6",
        // "en0" / M(Rot) / S(11) / L(3)
        "\x70\x79\x3b\x0b\x94\xf3\xef\xb6\xa2\x98\xfc\x5b\xe0\xee\x00\xd4",
        // "kSecMatchLimit" / M(Xor3) / S(109) / L(14)
        "\x16\x2e\x18\x1e\x30\x1c\x09\x1e\x15\x31\x14\x10\x14\x09\x7d\x36",
        // "" / M(None) / S(0) / L(0)
        "\xf9\x5d\xc5\xf3\x93\x31\x6c\xce\x58\x22\x65\xd0\x09\xda\x27\x0c\x2e\x2c\xf1\x5a\x4b\x67\x07\x17\xe7\x39\x4c\x7e\x41\x93\x26\xde",
        // "" / M(None) / S(0) / L(0)
        "\x14\x9d\x10\x59\x08\x23\x7c\x02\x1e\x86\xd6\x0a\x27\x5e\x76\x16\xb1\x91\x3a\x9d\x82\x7a\x96\x88\x7d\x7d\x18\x54\x22\xd5\x29\x93",
        // "ASN1_INTEGER_get" / M(Rot) / S(44) / L(16)
        "\x6d\x7f\x7a\x5d\x8b\x75\x7a\x80\x71\x73\x71\x7e\x8b\x93\x91\xa0\x2c",
        // "" / M(None) / S(0) / L(0)
        "\x37\x78\xd9\xed\xa4\xac\x11\x34\xb1\xb7\x76\x57\xa5\x8d\x4f\x75\x31\xa9\xd5\x46\x56\x50\xa5\xee\xd8\x47\x4e\xcb\x4b\x29\xe4\xe0",
        // "" / M(None) / S(0) / L(0)
        "\x6a\xdc\x62\xd5\x16\xb5\xc0\xf4\xf1\x93\x9c\x10\xa4\x0d\xf6\xaf\x58\x74\xff\x0e\x81\xc1\x02\x16\xa2\xfa\x4e\xd5\x17\x88\x84\x65",
        // "dlopen" / M(Xor4) / S(10) / L(6)
        "\xc4\xcc\xcf\xd0\xc5\xce\xa0\x4a\xc1\xf7\x18\x07\x63\x2f\x56\xbf",
        // "BIO_s_mem" / M(Xor4) / S(201) / L(9)
        "\xd2\xd9\xdf\xcf\xe3\xcf\xfd\xf5\xfd\x90\xa0\xe0\xa1\x48\xde\xe0",
        // "OBJ_txt2obj" / M(Rot) / S(47) / L(11)
        "\x7e\x71\x79\x8e\xa3\xa7\xa3\x61\x9e\x91\x99\x2f\x1c\x67\xdb\xd1",
        // "c2i_ASN1_INTEGER" / M(Rot) / S(200) / L(16)
        "\x2b\xfa\x31\x27\x09\x1b\x16\xf9\x27\x11\x16\x1c\x0d\x0f\x0d\x1a\xc8",
        // "EVP_DigestFinal" / M(Xor3) / S(143) / L(15)
        "\xda\xc9\xcf\xc0\xdb\xf6\xf8\xfa\xec\xeb\xd9\xf6\xf1\xfe\xf3\x9f",
        // "611e5b662c593a08ff58d14ae22452d198df6c60" / M(Xor4) / S(53) / L(40)
        "\x13\x14\x14\x40\x10\x47\x13\x13\x17\x46\x10\x1c\x16\x44\x15\x1d\x43\x43\x10\x1d\x41\x14\x11\x44\x40\x17\x17\x11\x10\x17\x41\x14\x1c\x1d\x41\x43\x13\x46\x13\x15\x25\x2c\x16\x95\xf7\xc7\xa0\xdc\xe9",
        // "CFDateCompare" / M(Xor3) / S(198) / L(13)
        "\x95\x90\x92\xb7\xa2\xb3\x95\xb9\xbb\xa6\xb7\xa4\xb3\xd6\xab\xf8",
        // "CFArrayAppendValue" / M(Rot) / S(157) / L(18)
        "\xe0\xe3\xde\x0f\x0f\xfe\x16\xde\x0d\x0d\x02\x0b\x01\xf3\xfe\x09\x12\x02\x9d",
        // "" / M(None) / S(0) / L(0)
        "\x7e\x8c\x6d\x6d\xae\xe5\xb6\x46\x59\xa6\x3b\x9a\x2e\x3c\x05\x5b\x9a\xf4\x9e\x76\x18\xdf\xb5\xe9\x73\x15\x1a\x2c\x33\x18\x14\xce",
        // "SHA1_Final" / M(Xor4) / S(9) / L(10)
        "\xc3\xd8\xd1\xa1\xcf\xd6\xf9\xfe\xf1\xfc\x90\x0a\xf7\xee\x61\x2b",
        // "ASN1_INTEGER_free" / M(Xor4) / S(23) / L(17)
        "\xdf\xcd\xd0\xaf\xc1\xd7\xd0\xca\xdb\xd9\xdb\xcc\xc1\xf8\xec\xfb\xfb\x9e",
        // "CFBundleGetIdentifier" / M(Rot) / S(128) / L(21)
        "\xc3\xc6\xc2\xf5\xee\xe4\xec\xe5\xc7\xe5\xf4\xc9\xe4\xe5\xee\xf4\xe9\xe6\xe9\xe5\xf2\x80",
        // "it.iltofa.Turms" / M(Xor1) / S(134) / L(15)
        "\xef\xf2\xa8\xef\xea\xf2\xe9\xe0\xe7\xa8\xd2\xf3\xf4\xeb\xf5\x86",
        // "Contents/_MASReceipt/receipt" / M(Xor3) / S(101) / L(28)
        "\xc9\xe5\xe4\xfe\xef\xe4\xfe\xf9\xa5\xd5\xc7\xcb\xd9\xd8\xef\xe9\xef\xe3\xfa\xfe\xa5\xf8\xef\xe9\xef\xe3\xfa\xfe\x8a\x9d\x1e\x11\x26\xd4\x28\x06\x59",
        // "d2i_X509_bio" / M(Xor1) / S(34) / L(12)
        "\x46\x10\x4b\x7d\x7a\x17\x12\x1b\x7d\x40\x4b\x4d\x22\x8a\x72\xd1",
        // "611E5B662C593A08FF58D14AE22452D198DF6C60" / M(Xor2) / S(3) / L(40)
        "\x04\x03\x03\x77\x07\x70\x04\x04\x00\x71\x07\x0b\x01\x73\x02\x0a\x74\x74\x07\x0a\x76\x03\x06\x73\x77\x00\x00\x06\x07\x00\x76\x03\x0b\x0a\x76\x74\x04\x71\x04\x02\x32\x33\x58\x2b\xbf\x3f\x72\x50\x3f",
        // "%02x:" / M(Xor4) / S(58) / L(5)
        "\x85\x90\x92\xd8\x9a\xa0\x7f\xa3\xea\x89\x83\xd8\xc7\x4a\x3b\xe4",
        // "ASN1_INTEGER_free" / M(Rot) / S(27) / L(17)
        "\x5c\x6e\x69\x4c\x7a\x64\x69\x6f\x60\x62\x60\x6d\x7a\x81\x8d\x80\x80\x1b",
        // "CC_SHA1_Final" / M(Rot) / S(223) / L(13)
        "\x22\x22\x3e\x32\x27\x20\x10\x3e\x25\x48\x4d\x40\x4b\xdf\x9b\xd8",
        // "kSecMatchLimit" / M(Rot) / S(166) / L(14)
        "\x11\xf9\x0b\x09\xf3\x07\x1a\x09\x0e\xf2\x0f\x13\x0f\x1a\xa6\x54",
        // "CFArrayGetValueAtIndex" / M(Xor3) / S(32) / L(22)
        "\x74\x71\x76\x45\x45\x56\x4e\x70\x52\x43\x61\x56\x5b\x42\x52\x76\x43\x7e\x59\x53\x52\x4f\x37",
        // "X509_STORE_free" / M(Rot) / S(91) / L(15)
        "\xb3\x90\x8b\x94\xba\xae\xaf\xaa\xad\xa0\xba\xc1\xcd\xc0\xc0\x5b",
        // "longjmp" / M(Xor4) / S(63) / L(7)
        "\x9c\x9f\x9e\x97\x9a\x9d\x80\xf0\x44\x28\x15\xc0\x76\x6d\x17\x84",
        // "CC_SHA1_Final" / M(Xor3) / S(14) / L(13)
        "\x5d\x5d\x41\x4d\x56\x5f\x2f\x41\x58\x77\x70\x7f\x72\x1e\x94\xeb",
        // "objc_msgSend" / M(Xor2) / S(53) / L(12)
        "\x4a\x47\x4f\x46\x7a\x48\x56\x42\x76\x40\x4b\x41\x25\xf4\x47\x00",
        // "kSecClass" / M(Xor1) / S(195) / L(9)
        "\xa8\x90\xa6\xa0\x80\xaf\xa2\xb0\xb0\xc3\x07\x83\x50\x3c\x7b\xeb",
        // "CFBundleGetValueForInfoDictionaryKey" / M(Rot) / S(59) / L(36)
        "\x7e\x81\x7d\xb0\xa9\x9f\xa7\xa0\x82\xa0\xaf\x91\x9c\xa7\xb0\xa0\x81\xaa\xad\x84\xa9\xa1\xaa\x7f\xa4\x9e\xaf\xa4\xaa\xa9\x9c\xad\xb4\x86\xa0\xb4\x3b",
        // "CFStringCreateWithBytes" / M(Rot) / S(96) / L(23)
        "\xa3\xa6\xb3\xd4\xd2\xc9\xce\xc7\xa3\xd2\xc5\xc1\xd4\xc5\xb7\xc9\xd4\xc8\xa2\xd9\xd4\xc5\xd3\x60\xa8\x74\x7c\x5b\x54\xc4\xeb\x63",
        // "" / M(None) / S(0) / L(0)
        "\xe9\x94\x2e\xc1\x67\x65\xd2\x81\xc2\x9b\xa7\x83\xf2\x7e\x85\xbd\x62\x13\xce\xa3\xc6\xb9\x7e\xc8\x0b\x44\x1c\x2b\xf1\x8d\xf1\xc0",
        // "/usr/lib/libSystem.dylib" / M(Xor4) / S(8) / L(24)
        "\x27\x7d\x7b\x7a\x27\x64\x61\x6a\x27\x64\x61\x6a\x5b\x71\x7b\x7c\x6d\x65\x26\x6c\x71\x64\x61\x6a\x08\x4b\x8a\x61\x87\xf3\x50\xe8\x5b",
        // "objc_getClass" / M(Rot) / S(49) / L(13)
        "\xa0\x93\x9b\x94\x90\x98\x96\xa5\x74\x9d\x92\xa4\xa4\x31\xbf\x30",
        // "CFDateFormatterCreate" / M(Xor4) / S(205) / L(21)
        "\xdd\xd8\xda\xff\xea\xfb\xd8\xf1\xec\xf3\xff\xea\xea\xfb\xec\xdd\xec\xfb\xff\xea\xfb\x9e",
        // "CFBundleShortVersionString" / M(Xor2) / S(110) / L(26)
        "\x0e\x0b\x0f\x38\x23\x29\x21\x28\x1e\x25\x22\x3f\x39\x1b\x28\x3f\x3e\x24\x22\x23\x1e\x39\x3f\x24\x23\x2a\x4d\x4b\x49\x87\xb6\x3a\x92\x16\x91",
        // "CFDictionarySetValue" / M(Xor1) / S(207) / L(20)
        "\x8c\x89\x8b\xa6\xac\xbb\xa6\xa0\xa1\xae\xbd\xb6\x9c\xaa\xbb\x99\xae\xa3\xba\xaa\xcf",
        // "exit" / M(Xor2) / S(220) / L(4)
        "\xa9\xb4\xa5\xb8\xcc\x67\x8b\x44\x97\xd5\x29\xb8\x43\x86\x97\x14",
        // "X509_STORE_new" / M(Xor2) / S(208) / L(14)
        "\x98\xf5\xf0\xf9\x9f\x93\x94\x8f\x92\x85\x9f\xae\xa5\xb7\xc0\x8e",
        // "BIO_new" / M(Xor3) / S(57) / L(7)
        "\x0b\x00\x06\x16\x27\x2c\x3e\x49\xa4\x0a\xea\xd5\xf1\x28\x43\x2a",
        // "SHA1_Init" / M(Xor1) / S(130) / L(9)
        "\xd1\xca\xc3\xb3\xdd\xcb\xec\xeb\xf6\x82\xfd\xca\x3d\x93\x61\xff",
        // "X509_STORE_add_cert" / M(Xor3) / S(180) / L(19)
        "\x90\xfd\xf8\xf1\x97\x9b\x9c\x87\x9a\x8d\x97\xa9\xac\xac\x97\xab\xad\xba\xbc\xc8",
        // "" / M(None) / S(0) / L(0)
        "\x10\x71\xb0\x91\x93\x00\x6a\x31\xe2\x5c\x07\xe5\x1a\xc4\x79\xa4\x9a\x0c\xe9\x99\x80\x89\x58\x05\x3b\xa4\x22\xe8\x1c\x3c\x7a\x08",
        // "kSecReturnRef" / M(Rot) / S(94) / L(13)
        "\xc9\xb1\xc3\xc1\xb0\xc3\xd2\xd3\xd0\xcc\xb0\xc3\xc4\x5e\x12\x24",
        // "" / M(None) / S(0) / L(0)
        "\xf5\x10\x50\x52\xc9\xb0\x68\xd2\xbc\xbf\x98\x4e\x1e\x62\x3d\x55\x07\x6a\x65\xfc\xe7\x28\x83\x54\x2e\x92\xc2\x26\x77\x62\x91\x41",
        // "X509_STORE_new" / M(Xor3) / S(245) / L(14)
        "\x5d\x30\x35\x3c\x5a\x56\x51\x4a\x57\x40\x5a\x6b\x60\x72\x05\x55",
        // "kSecClassCertificate" / M(Xor2) / S(221) / L(20)
        "\xa3\x9b\xad\xab\x8b\xa4\xa9\xbb\xbb\x8b\xad\xba\xbc\xa1\xae\xa1\xab\xa9\xbc\xad\xc8",
        // "" / M(None) / S(0) / L(0)
        "\xf3\x73\xed\x5f\x09\x19\xd1\x39\x84\xbd\xa5\xfc\x9c\xc1\x3b\xb5\xfa\x4c\xb2\xbd\x2c\xbb\x26\x01\xae\x38\xca\x2f\xbe\xba\x57\x73",
        // "CFDataCreateMutable" / M(Xor1) / S(39) / L(19)
        "\x64\x61\x63\x46\x53\x46\x64\x55\x42\x46\x53\x42\x6a\x52\x53\x46\x45\x4b\x42\x27",
        // "SecCertificateCopyData" / M(Xor1) / S(29) / L(22)
        "\x4e\x78\x7e\x5e\x78\x6f\x69\x74\x7b\x74\x7e\x7c\x69\x78\x5e\x72\x6d\x64\x59\x7c\x69\x7c\x1d",
        // "" / M(None) / S(0) / L(0)
        "\xb2\xd9\xf6\xe6\xfd\xb1\xa0\x55\x4d\x44\x3f\xec\x93\xfe\xf1\x80\xc2\x14\xef\x95\xf4\xa8\xc2\x6a\xc9\x3d\x06\x11\x81\xa2\xae\xdd",
        // "" / M(None) / S(0) / L(0)
        "\x1e\x59\xd3\x4e\xd6\x6f\xa9\x47\xb9\x82\x11\x50\xa3\x61\x94\x54\x83\x30\x30\x18\xb1\xf2\x6a\x30\xd5\xc3\x2f\x00\x21\xd6\xe1\x8e",
        // "" / M(None) / S(0) / L(0)
        "\x53\x52\x0a\xfe\x37\x00\x55\xd7\x19\x10\xd7\xcf\xe9\x66\x60\xdd\x59\x28\x0b\xd0\xce\x53\x8a\x75\xbf\xb7\x4b\x4b\x3a\xf1\x65\xb1",
        // "setjmp" / M(Xor1) / S(103) / L(6)
        "\x14\x02\x13\x0d\x0a\x17\x67\x2f\xf6\x47\xc0\x26\x57\xb2\xfe\xa0",
        // "BIO_s_mem" / M(Xor3) / S(244) / L(9)
        "\x46\x4d\x4b\x5b\x77\x5b\x69\x61\x69\x04\x98\x00\xaa\x3e\xd3\x92",
        // "X509_STORE_free" / M(Xor3) / S(109) / L(15)
        "\x25\x48\x4d\x44\x22\x2e\x29\x32\x2f\x38\x22\x1b\x0f\x18\x18\x7d",
        // "CFReadStreamClose" / M(Xor3) / S(80) / L(17)
        "\x21\x24\x30\x07\x03\x06\x31\x16\x10\x07\x03\x0f\x21\x0e\x0d\x11\x07\x62",
        // "kSecClassCertificate" / M(Xor1) / S(45) / L(20)
        "\x46\x7e\x48\x4e\x6e\x41\x4c\x5e\x5e\x6e\x48\x5f\x59\x44\x4b\x44\x4e\x4c\x59\x48\x2d",
        // "ASN1_OBJECT_free" / M(Rot) / S(177) / L(16)
        "\xf2\x04\xff\xe2\x10\x00\xf3\xfb\xf6\xf4\x05\x10\x17\x23\x16\x16\xb1",
        // "IOBSDNameMatching" / M(Xor1) / S(214) / L(17)
        "\x9f\x99\x94\x85\x92\x98\xb7\xbb\xb3\x9b\xb7\xa2\xb5\xbe\xbf\xb8\xb1\xd6",
        // "CFDataCreate" / M(Xor3) / S(76) / L(12)
        "\x1f\x1a\x18\x3d\x28\x3d\x1f\x2e\x39\x3d\x28\x39\x5c\x14\x3e\xd0",
        // "sha1" / M(Xor1) / S(181) / L(4)
        "\xc6\xdd\xd4\x84\xb5\x82\x24\x02\xb7\x0f\xb5\xca\x9c\xa4\x5a\xe1",
        // "SecKeychainOpen" / M(Xor4) / S(142) / L(15)
        "\xb3\x85\x83\xab\x85\x99\x83\x88\x81\x89\x8e\xaf\x90\x85\x8e\xe0",
        // "/System/Library/Frameworks/CoreFoundation.framework/CoreFoundation" / M(Rot) / S(193) / L(66)
        "\xf0\x14\x3a\x34\x35\x26\x2e\xf0\x0d\x2a\x23\x33\x22\x33\x3a\xf0\x07\x33\x22\x2e\x26\x38\x30\x33\x2c\x34\xf0\x04\x30\x33\x26\x07\x30\x36\x2f\x25\x22\x35\x2a\x30\x2f\xef\x27\x33\x22\x2e\x26\x38\x30\x33\x2c\xf0\x04\x30\x33\x26\x07\x30\x36\x2f\x25\x22\x35\x2a\x30\x2f\xc1",
        // "CFURLCreateCopyAppendingPathComponent" / M(Xor1) / S(58) / L(37)
        "\x79\x7c\x6f\x68\x76\x79\x48\x5f\x5b\x4e\x5f\x79\x55\x4a\x43\x7b\x4a\x4a\x5f\x54\x5e\x53\x54\x5d\x6a\x5b\x4e\x52\x79\x55\x57\x4a\x55\x54\x5f\x54\x4e\x3a",
        // "CFAbsoluteTimeGetCurrent" / M(Xor1) / S(216) / L(24)
        "\x9b\x9e\x99\xba\xab\xb7\xb4\xad\xac\xbd\x8c\xb1\xb5\xbd\x9f\xbd\xac\x9b\xad\xaa\xaa\xbd\xb6\xac\xd8\x81\xfe\x27\xce\xe9\x7b\x3f\x0f",
        // "/usr/lib/libobjc.dylib" / M(Xor1) / S(39) / L(22)
        "\x08\x52\x54\x55\x08\x4b\x4e\x45\x08\x4b\x4e\x45\x48\x45\x4d\x44\x09\x43\x5e\x4b\x4e\x45\x27",
        // "" / M(None) / S(0) / L(0)
        "\x3a\x9e\xec\x92\x25\x64\x00\xed\xa9\xd3\xa7\x2c\x7e\x7e\x7a\xdb\xa7\x77\x01\x01\x92\x1f\x7a\xc3\x93\x52\xf0\x75\x1f\x17\xbf\xf7",
        // "SHA1" / M(Xor3) / S(78) / L(4)
        "\x0d\x16\x1f\x6f\x5e\xa9\x93\xa2\x46\xe4\x0d\x9e\x37\x28\x28\x79",
        // "" / M(None) / S(0) / L(0)
        "\xaa\x7d\xf5\x9c\xbd\x2e\xe7\x1a\xad\x4a\xc7\x1b\xff\x10\xe8\x03\x4c\xc7\xde\xb8\x3e\x33\x38\x2b\xbb\x88\x4a\x55\x10\xc0\xb9\xfe",
        // "SecItemCopyMatching" / M(Xor2) / S(89) / L(19)
        "\x1e\x28\x2e\x04\x39\x28\x20\x0e\x22\x3d\x34\x00\x2c\x39\x2e\x25\x24\x23\x2a\x4d",
        // "" / M(None) / S(0) / L(0)
        "\x53\xa4\x92\x29\x29\x7b\x13\x69\xc0\xf0\x08\x0f\xc6\x90\x2e\x01\x54\x53\x13\x49\xd0\x82\xcd\x72\x54\xab\x85\xf3\xcb\x75\xc5\xd4",
        // "" / M(None) / S(0) / L(0)
        "\xf8\xb6\xb3\x75\x6f\xb4\x75\x30\x3a\x2c\xcb\x23\x59\x95\x15\x0b\x04\x11\xf5\x12\x1d\xd3\x47\xaa\xcb\x27\xb2\xf7\x8b\xfd\xce\x90",
        // "611E5B662C593A08FF58D14AE22452D198DF6C60" / M(Rot) / S(162) / L(40)
        "\xd8\xd3\xd3\xe7\xd7\xe4\xd8\xd8\xd4\xe5\xd7\xdb\xd5\xe3\xd2\xda\xe8\xe8\xd7\xda\xe6\xd3\xd6\xe3\xe7\xd4\xd4\xd6\xd7\xd4\xe6\xd3\xdb\xda\xe6\xe8\xd8\xe5\xd8\xd2\xa2\x4d\x62\xf1\x48\x15\x88\xef\x33",
        // "CFDictionaryGetValue" / M(Xor4) / S(224) / L(20)
        "\x23\x26\x24\x09\x03\x14\x09\x0f\x0e\x01\x12\x19\x27\x05\x14\x36\x01\x0c\x15\x05\x60",
        // "strlen" / M(Xor3) / S(175) / L(6)
        "\xcc\xcb\xcd\xd3\xda\xd1\xbf\x3b\x6e\xb1\xd0\xe4\xd6\xc6\x12\x3e",
        // "alloc" / M(Xor3) / S(44) / L(5)
        "\x5d\x50\x50\x53\x5f\x3c\x45\x03\x15\x0d\x59\xf6\xdf\xb9\xd6\xcb",
        // "kSecMatchLimitAll" / M(Xor2) / S(181) / L(17)
        "\xcc\xf4\xc2\xc4\xea\xc6\xd3\xc4\xcf\xeb\xce\xca\xce\xd3\xe6\xcb\xcb\xa7",
        // "/System/Library/Frameworks/IOKit.framework/IOKit" / M(Xor2) / S(138) / L(48)
        "\x94\xe8\xc2\xc8\xcf\xde\xd6\x94\xf7\xd2\xd9\xc9\xda\xc9\xc2\x94\xfd\xc9\xda\xd6\xde\xcc\xd4\xc9\xd0\xc8\x94\xf2\xf4\xf0\xd2\xcf\x95\xdd\xc9\xda\xd6\xde\xcc\xd4\xc9\xd0\x94\xf2\xf4\xf0\xd2\xcf\xbb",
        // "%02X:" / M(Rot) / S(157) / L(5)
        "\xc2\xcd\xcf\xf5\xd7\x9d\xc0\x6e\xa3\xd8\x15\x94\x44\xad\xfa\x5c",
        // "" / M(None) / S(0) / L(0)
        "\xbd\x39\xd9\xff\xb7\x8e\x1f\x92\x49\x1d\x76\xa2\xbe\x50\x11\x47\x5b\xfb\xa1\xf3\xd3\x21\x78\x92\x62\xa5\x04\x8b\xd7\x27\x1c\x4e",
        // "PKCS7_free" / M(Xor2) / S(51) / L(10)
        "\x73\x68\x60\x70\x14\x7c\x45\x51\x46\x46\x23\x9e\xf5\xb6\xe3\x55",
        // "X509_NAME_get_text_by_NID" / M(Xor2) / S(52) / L(25)
        "\x4e\x23\x26\x2f\x49\x58\x57\x5b\x53\x49\x71\x73\x62\x49\x62\x73\x6e\x62\x49\x74\x6f\x49\x58\x5f\x52\x16\x90\x7f\x12\xc3\xfc\xba\x90\x75",
        // "" / M(None) / S(0) / L(0)
        "\x45\x23\xe9\x45\xcb\x0d\x6c\x73\x04\xd8\xe5\x6d\xda\x32\xe1\x78\xea\x67\x54\x91\x96\xe5\x9d\x1b\x24\xe3\x61\x00\x33\x5a\x47\x27",
        // "" / M(None) / S(0) / L(0)
        "\x5d\xf4\xfd\x58\x3f\x2a\x59\x71\x61\x14\x9d\x31\x74\x0d\xe0\x46\x67\xac\xf8\xf5\x17\xb4\xe1\xd5\xc3\xbe\xc7\x45\xe7\x72\xbf\xf9",
        // "CC_SHA1_Update" / M(Xor3) / S(144) / L(14)
        "\xe3\xe3\xff\xf3\xe8\xe1\x91\xff\xf5\xd0\xc4\xc1\xd4\xc5\xa0\xf0",
        // "CFDictionaryAddValue" / M(Xor2) / S(12) / L(20)
        "\x5a\x5f\x5d\x70\x7a\x6d\x70\x76\x77\x78\x6b\x60\x58\x7d\x7d\x4f\x78\x75\x6c\x7c\x19",
        // "" / M(None) / S(0) / L(0)
        "\x9c\x40\xa1\x9c\xf3\xe5\x63\x14\x0d\xb8\x98\x89\xec\xc8\xa0\x8d\x1e\xd0\x83\x66\x25\x7d\x86\xb5\xa5\x94\xbe\xc4\x11\x31\x0b\xce",
        // "CFStringGetFileSystemRepresentation" / M(Xor4) / S(46) / L(35)
        "\x3b\x3e\x2b\x0c\x0a\x11\x16\x1f\x3f\x1d\x0c\x3e\x11\x14\x1d\x2b\x01\x0b\x0c\x1d\x15\x2a\x1d\x08\x0a\x1d\x0b\x1d\x16\x0c\x19\x0c\x11\x17\x16\x78",
        // "ASN1_INTEGER_get" / M(Xor3) / S(120) / L(16)
        "\xc8\xda\xc7\xb8\xd6\xc0\xc7\xdd\xcc\xce\xcc\xdb\xd6\xee\xec\xfd\x89",
        // "sk_free" / M(Rot) / S(35) / L(7)
        "\x96\x8e\x82\x89\x95\x88\x88\x23\x64\x1f\xf8\xf1\xea\x1d\xcf\x11",
        // "IOBSDNameMatching" / M(Xor3) / S(68) / L(17)
        "\x1f\x19\x14\x05\x12\x18\x37\x3b\x33\x1b\x37\x22\x35\x3e\x3f\x38\x31\x56",
        // "CC_SHA1_Init" / M(Xor2) / S(147) / L(12)
        "\xc0\xc0\xdc\xd0\xcb\xc2\xb2\xdc\xca\xed\xea\xf7\x83\x03\xe1\x61",
        // "ASN1_INTEGER_free" / M(Rot) / S(220) / L(17)
        "\x1d\x2f\x2a\x0d\x3b\x25\x2a\x30\x21\x23\x21\x2e\x3b\x42\x4e\x41\x41\xdc",
        // "/usr/lib/libobjc.dylib" / M(Xor1) / S(228) / L(22)
        "\xcb\x91\x97\x96\xcb\x88\x8d\x86\xcb\x88\x8d\x86\x8b\x86\x8e\x87\xca\x80\x9d\x88\x8d\x86\xe4",
        // "61:1E:5B:66:2C:59:3A:08:FF:58:D1:4A:E2:24:52:D1:98:DF:6C:60" / M(Rot) / S(35) / L(59)
        "\x59\x54\x5d\x54\x68\x5d\x58\x65\x5d\x59\x59\x5d\x55\x66\x5d\x58\x5c\x5d\x56\x64\x5d\x53\x5b\x5d\x69\x69\x5d\x58\x5b\x5d\x67\x54\x5d\x57\x64\x5d\x68\x55\x5d\x55\x57\x5d\x58\x55\x5d\x67\x54\x5d\x5c\x5b\x5d\x67\x69\x5d\x59\x66\x5d\x59\x53\x23\x09\xd4\x23\x9f\x06\xbb\x40\x62",
        // "PKCS7_verify" / M(Xor2) / S(160) / L(12)
        "\xe0\xfb\xf3\xe3\x87\xef\xc6\xd5\xc2\xd9\xd6\xc9\xb0\x9e\xd6\xd5",
        // "X509_NAME_get_text_by_NID" / M(Rot) / S(154) / L(25)
        "\xf2\xcf\xca\xd3\xf9\xe8\xdb\xe7\xdf\xf9\x01\xff\x0e\xf9\x0e\xff\x12\x0e\xf9\xfc\x13\xf9\xe8\xe3\xde\x9a\xf7\xfa\xd0\xec\x0e\x27\x7d\xd6",
        // "/System/Library/Keychains/SystemRootCertificates.keychain" / M(Xor2) / S(96) / L(57)
        "\x0d\x71\x5b\x51\x56\x47\x4f\x0d\x6e\x4b\x40\x50\x43\x50\x5b\x0d\x69\x47\x5b\x41\x4a\x43\x4b\x4c\x51\x0d\x71\x5b\x51\x56\x47\x4f\x70\x4d\x4d\x56\x61\x47\x50\x56\x4b\x44\x4b\x41\x43\x56\x47\x51\x0c\x49\x47\x5b\x41\x4a\x43\x4b\x4c\x22\x26\xe6\xbf\xef\x96\x7b\x08\xae",
        // "objc_msgSend" / M(Xor2) / S(29) / L(12)
        "\x62\x6f\x67\x6e\x52\x60\x7e\x6a\x5e\x68\x63\x69\x0d\xe4\x43\x3f",
        // "BIO_new" / M(Xor3) / S(23) / L(7)
        "\x65\x6e\x68\x78\x49\x42\x50\x27\x9d\x5e\x67\xf9\x75\xc4\xd9\x30",
        // "X509_STORE_new" / M(Xor3) / S(149) / L(14)
        "\xfd\x90\x95\x9c\xfa\xf6\xf1\xea\xf7\xe0\xfa\xcb\xc0\xd2\xa5\xf3",
        // "" / M(None) / S(0) / L(0)
        "\xe0\x35\x63\xe7\x3b\x31\x85\xd1\x63\x2c\xb6\x32\x68\xf6\x30\x22\x7c\x65\x51\xc1\x12\xcc\xc2\x0c\x1b\xe3\xd7\xca\x0b\x20\xc8\xc6",
        // "CFBundleCopyBundleURL" / M(Xor2) / S(171) / L(21)
        "\xfe\xfb\xff\xc8\xd3\xd9\xd1\xd8\xfe\xd2\xcd\xc4\xff\xc8\xd3\xd9\xd1\xd8\xe8\xef\xf1\xbd",
        // "" / M(None) / S(0) / L(0)
        "\xf4\x8d\x58\x47\x55\x48\x0f\xd2\x09\xcb\xc8\x00\x40\xce\xc9\x5f\x00\x8f\x5a\xcf\x58\xfb\x25\xe3\x9a\x4a\x69\x59\x79\x32\xe1\x4a",
        // "X509_get_ext_by_OBJ" / M(Rot) / S(102) / L(19)
        "\xbe\x9b\x96\x9f\xc5\xcd\xcb\xda\xc5\xcb\xde\xda\xc5\xc8\xdf\xc5\xb5\xa8\xb0\x66",
        // "sk_value" / M(Rot) / S(134) / L(8)
        "\xf9\xf1\xe5\xfc\xe7\xf2\xfb\xeb\x86\x5e\xec\x5d\xbe\x83\x11\x2b",
        // "" / M(None) / S(0) / L(0)
        "\xdd\xc5\xe1\xe1\xbc\x80\xa9\x53\x70\xbf\x1b\x83\xa6\xed\x5f\xcf\xe6\xcb\x60\xa1\xf1\x7e\xf7\xaa\xfb\x9e\x35\x5e\x5f\x49\xb0\x77",
        // "setjmp" / M(Rot) / S(27) / L(6)
        "\x8e\x80\x8f\x85\x88\x8b\x1b\x15\x2f\x37\x72\x41\x52\x1d\x9f\x5a",
        // "Apple Root CA" / M(Xor4) / S(71) / L(13)
        "\x31\x00\x00\x1c\x15\x50\x22\x1f\x1f\x04\x50\x33\x31\x70\x7e\x6d",
        // "it.iltofa.Turms" / M(Rot) / S(211) / L(15)
        "\x3c\x47\x01\x3c\x3f\x47\x42\x39\x34\x01\x27\x48\x45\x40\x46\xd3",
        // "init" / M(Xor3) / S(72) / L(4)
        "\x31\x36\x31\x2c\x58\x92\x88\x7c\x49\x10\xce\x0a\xf2\x6f\xf4\x18",
        // "IORegistryEntryGetParentEntry" / M(Xor2) / S(57) / L(29)
        "\x56\x50\x4d\x7a\x78\x76\x6c\x6b\x6d\x66\x5a\x71\x6b\x6d\x66\x58\x7a\x6b\x4f\x7e\x6d\x7a\x71\x6b\x5a\x71\x6b\x6d\x66\x1f\x3b\x7f\xc2\xe8\x4d\x87\x0d\x99",
        // "" / M(None) / S(0) / L(0)
        "\x5b\xe0\xae\xef\xe7\x6d\xf3\xd9\x06\xc7\xbe\x41\xf4\xa8\xa0\x5e\x5a\x29\x3a\x8d\xc1\xa5\x49\xa5\x8b\xfe\x9e\xc6\x6e\xd4\x6b\xfc",
        // "SHA1_Final" / M(Rot) / S(92) / L(10)
        "\xaf\xa4\x9d\x8d\xbb\xa2\xc5\xca\xbd\xc8\x5c\xa3\x90\x5f\x4e\xc3",
        // "kSecMatchSearchList" / M(Xor4) / S(204) / L(19)
        "\x9b\xa3\x95\x93\xbd\x91\x84\x93\x98\xa3\x95\x91\x82\x93\x98\xbc\x99\x83\x84\xf0",
        // "" / M(None) / S(0) / L(0)
        "\x0c\x4c\x86\x0e\x7d\xc2\xab\x5d\x5b\x53\x84\xa9\x15\x3a\xbb\xdd\x59\x9e\xd5\xed\xa1\x87\xfd\x17\xcf\x34\x96\x44\x8b\x44\xa2\xe1",
        // "" / M(None) / S(0) / L(0)
        "\x76\x05\x0b\xd5\x79\xd3\x47\xc3\x4b\xcf\x0d\xed\x2c\x50\xe1\xa1\xa4\xff\xaf\xf9\x6e\x1d\x67\xb3\x56\x35\xa8\x6f\x73\x6b\x0a\xc8",
        // "1.2.840.113635.100.6.11.1" / M(Xor3) / S(95) / L(25)
        "\xb0\xaf\xb3\xaf\xb9\xb5\xb1\xaf\xb0\xb0\xb2\xb7\xb2\xb4\xaf\xb0\xb1\xb1\xaf\xb7\xaf\xb0\xb0\xaf\xb0\x81\xf4\x98\x4e\x1a\x2e\xaa\x98\x81",
        // "IOIteratorNext" / M(Xor4) / S(129) / L(14)
        "\x59\x5f\x59\x64\x75\x62\x71\x64\x7f\x62\x5e\x75\x68\x64\x10\xc6",
        // "PKCS7_free" / M(Rot) / S(216) / L(10)
        "\x28\x23\x1b\x2b\x0f\x37\x3e\x4a\x3d\x3d\xd8\x84\xfc\x3f\x57\xe1",
        // "%02x" / M(Xor2) / S(245) / L(4)
        "\xc0\xd5\xd7\x9d\xe5\x72\xbf\xf9\x9c\x40\xa1\x9c\xf3\xe5\x63\x14",
        // "CFBundleVersion" / M(Xor1) / S(184) / L(15)
        "\xfb\xfe\xfa\xcd\xd6\xdc\xd4\xdd\xee\xdd\xca\xcb\xd1\xd7\xd6\xb8",
        // "IOMasterPort" / M(Xor3) / S(180) / L(12)
        "\x8d\x8b\x89\xa5\xb7\xb0\xa1\xb6\x94\xab\xb6\xb0\xc4\x6c\x95\x81",
        // "CFBundleShortVersionString" / M(Xor2) / S(215) / L(26)
        "\xb7\xb2\xb6\x81\x9a\x90\x98\x91\xa7\x9c\x9b\x86\x80\xa2\x91\x86\x87\x9d\x9b\x9a\xa7\x80\x86\x9d\x9a\x93\xf4\xfc\x78\x76\x9b\xe3\x87\xdb\x38",
        // "CFTimeZoneCreateWithTimeIntervalFromGMT" / M(Rot) / S(56) / L(39)
        "\x7b\x7e\x8c\xa1\xa5\x9d\x92\xa7\xa6\x9d\x7b\xaa\x9d\x99\xac\x9d\x8f\xa1\xac\xa0\x8c\xa1\xa5\x9d\x81\xa6\xac\x9d\xaa\xae\x99\xa4\x7e\xaa\xa7\xa5\x7f\x85\x8c\x38\xa3\xdf\xf4\x0c\x30\x08\x2e\xda",
        // "" / M(None) / S(0) / L(0)
        "\x20\xac\xde\xfb\xcb\x6a\x35\x63\x4d\xae\xb5\xe9\x1e\x4a\x78\x1b\xd8\x85\x53\xb3\x1d\x5f\x6c\x73\x41\x5c\x85\x1d\x6a\x1c\x45\x46",
        // "" / M(None) / S(0) / L(0)
        "\xc4\x55\x50\x1b\xb2\x8e\xf3\xc3\x3a\x68\x21\x2b\xcb\xf0\x05\x06\x8f\x32\xef\xd2\xa0\xdd\xe4\x32\xd1\x99\x98\x3e\x08\x57\x45\xc4",
        // "kCFDateFormatterTimeZone" / M(Xor1) / S(188) / L(24)
        "\xd7\xff\xfa\xf8\xdd\xc8\xd9\xfa\xd3\xce\xd1\xdd\xc8\xc8\xd9\xce\xe8\xd5\xd1\xd9\xe6\xd3\xd2\xd9\xbc\xd7\x63\x04\xeb\x73\xb6\x36\xba",
        // "IOServiceGetMatchingServices" / M(Xor1) / S(174) / L(28)
        "\xe7\xe1\xfd\xcb\xdc\xd8\xc7\xcd\xcb\xe9\xcb\xda\xe3\xcf\xda\xcd\xc6\xc7\xc0\xc9\xfd\xcb\xdc\xd8\xc7\xcd\xcb\xdd\xae\xc4\x16\xaf\x60\x66\xb1\xbe\x20",
        // "" / M(None) / S(0) / L(0)
        "\xe3\xfb\x25\x31\x40\x53\x0e\x39\xa8\xa1\x1f\x95\x52\x50\x0a\xdd\x65\x06\x20\x52\xfe\x3b\x56\x56\xa9\xd2\x2d\x89\x89\xf5\xa9\xce",
        // "CFBundleVersion" / M(Xor4) / S(222) / L(15)
        "\xa3\xa6\xa2\x95\x8e\x84\x8c\x85\xb6\x85\x92\x93\x89\x8f\x8e\xe0",
        // "CFDateCompare" / M(Xor4) / S(240) / L(13)
        "\x43\x46\x44\x61\x74\x65\x43\x6f\x6d\x70\x61\x72\x65\x00\x61\x22",
        // "BIO_write" / M(Xor4) / S(153) / L(9)
        "\xd2\xd9\xdf\xcf\xe7\xe2\xf9\xe4\xf5\x90\x4a\x94\x40\x67\xa4\x51",
        // "CFDictionarySetValue" / M(Xor2) / S(218) / L(20)
        "\x8c\x89\x8b\xa6\xac\xbb\xa6\xa0\xa1\xae\xbd\xb6\x9c\xaa\xbb\x99\xae\xa3\xba\xaa\xcf",
        // "" / M(None) / S(0) / L(0)
        "\x50\x1e\x15\x73\x09\xd4\x23\x9f\x06\xbb\x40\x62\x3a\x19\xc0\x0b\x18\xe7\xa4\x7e\xc3\x54\xe1\x97\x6a\x45\x83\x87\x2b\x79\xb3\x7b",
        // "/System/Library/Keychains/SystemRootCertificates.keychain" / M(Xor4) / S(41) / L(57)
        "\xbd\xc1\xeb\xe1\xe6\xf7\xff\xbd\xde\xfb\xf0\xe0\xf3\xe0\xeb\xbd\xd9\xf7\xeb\xf1\xfa\xf3\xfb\xfc\xe1\xbd\xc1\xeb\xe1\xe6\xf7\xff\xc0\xfd\xfd\xe6\xd1\xf7\xe0\xe6\xfb\xf4\xfb\xf1\xf3\xe6\xf7\xe1\xbc\xf9\xf7\xeb\xf1\xfa\xf3\xfb\xfc\x92\x60\xa1\xf1\x7e\xf7\xaa\x5e\x35",
        // "" / M(None) / S(0) / L(0)
        "\xc4\xd0\xa4\x70\x19\xc8\xb7\x7f\xf0\x82\xb3\x40\xaa\x0a\x60\xcc\xb4\x31\x53\x4a\x9f\x1f\xeb\xca\x9a\x80\x55\xa5\x31\x67\xfc\x2c",
        // "" / M(None) / S(0) / L(0)
        "\x9b\x33\x9f\x86\x3b\xa8\x07\xb9\x13\x65\x12\xe6\xdc\x0d\xd4\xe8\x86\xa3\xbf\xa7\x17\xc2\xd7\xe1\x57\x8c\xf8\x81\x34\x48\xfd\xff",
        // "" / M(None) / S(0) / L(0)
        "\x65\xd2\xa5\x04\x01\xd3\x9b\x7a\xb3\x4d\x62\xf1\x48\x15\x88\xef\x37\x0f\x4e\x33\xaa\xdb\x02\xf6\x76\xc1\xd1\x8e\x51\x50\xe7\x23",
        // "SHA1_Init" / M(Xor1) / S(130) / L(9)
        "\xd1\xca\xc3\xb3\xdd\xcb\xec\xeb\xf6\x82\xd1\xd6\x3c\x23\xc6\x1c",
        // "OBJ_txt2obj" / M(Xor2) / S(82) / L(11)
        "\x0d\x00\x08\x1d\x36\x3a\x36\x70\x2d\x20\x28\x42\xa1\x86\xbd\xd2",
        // "CFBundleUnloadExecutable" / M(Xor3) / S(226) / L(24)
        "\x40\x45\x41\x76\x6d\x67\x6f\x66\x56\x6d\x6f\x6c\x62\x67\x46\x7b\x66\x60\x76\x77\x62\x61\x6f\x66\x03\x93\x08\x4f\x03\xd7\x37\x22\xf8",
        // "" / M(None) / S(0) / L(0)
        "\x37\xe5\xfc\x12\x25\xf1\xb3\xd0\x12\x80\x35\x27\xdb\x51\xd0\x35\x7d\xec\xef\x5e\x06\xb2\x2a\x30\xc7\x77\xd0\x9c\xb6\xcb\x86\x6d",
        // "objc_msgSend" / M(Xor3) / S(135) / L(12)
        "\xf8\xf5\xfd\xf4\xc8\xfa\xe4\xf0\xc4\xf2\xf9\xf3\x97\xba\xe7\x2f",
        // "CFArrayGetCount" / M(Xor2) / S(77) / L(15)
        "\x1e\x1b\x1c\x2f\x2f\x3c\x24\x1a\x38\x29\x1e\x32\x28\x33\x29\x5d",
        // "CFDateCompare" / M(Xor3) / S(16) / L(13)
        "\x63\x66\x64\x41\x54\x45\x63\x4f\x4d\x50\x41\x52\x45\x20\xb5\x22",
        // "sel_registerName" / M(Rot) / S(20) / L(16)
        "\x87\x79\x80\x73\x86\x79\x7b\x7d\x87\x88\x79\x86\x62\x75\x81\x79\x14",
        // "exit" / M(Rot) / S(172) / L(4)
        "\x11\x24\x15\x20\xac\x9f\x94\xeb\x33\x7f\x15\x0e\xe2\xa1\x65\xd1",
        // "" / M(None) / S(0) / L(0)
        "\xf5\xdb\x01\xac\xef\x2c\x94\xf9\x9a\x59\xb1\x1e\x17\x0e\x67\x50\xe3\x7a\xb9\xc4\x3f\xcc\x7c\x57\x46\x93\x2e\xcb\x3b\xba\x53\xcf",
        // "kSecMatchSearchList" / M(Xor4) / S(159) / L(19)
        "\x07\x3f\x09\x0f\x21\x0d\x18\x0f\x04\x3f\x09\x0d\x1e\x0f\x04\x20\x05\x1f\x18\x6c",
        // "c2i_ASN1_INTEGER" / M(Xor2) / S(78) / L(16)
        "\x3c\x6d\x36\x00\x1e\x0c\x11\x6e\x00\x16\x11\x0b\x1a\x18\x1a\x0d\x5f",
        // "CC_SHA1_Init" / M(Xor2) / S(228) / L(12)
        "\xb7\xb7\xab\xa7\xbc\xb5\xc5\xab\xbd\x9a\x9d\x80\xf4\xc6\x4b\x9a",
        // "EVP_DigestInit" / M(Xor1) / S(125) / L(14)
        "\x38\x2b\x2d\x22\x39\x14\x1a\x18\x0e\x09\x34\x13\x14\x09\x7d\xed",
        // "CFDateFormatterCreateDateFromString" / M(Xor2) / S(109) / L(35)
        "\x0a\x0f\x0d\x28\x3d\x2c\x0f\x26\x3b\x24\x28\x3d\x3d\x2c\x3b\x0a\x3b\x2c\x28\x3d\x2c\x0d\x28\x3d\x2c\x0f\x3b\x26\x24\x1a\x3d\x3b\x20\x27\x2e\x49",
        // "" / M(None) / S(0) / L(0)
        "\x64\xf7\x10\x07\xcd\xe4\x41\x0f\xbd\xd5\x05\x0a\x7c\x09\xb1\x11\x72\xae\xe1\x21\xf3\xb6\xdb\x85\x63\xc0\x58\x33\x8f\x63\x88\xee",
        // "CFRelease" / M(Xor3) / S(208) / L(9)
        "\xa3\xa6\xb2\x85\x8c\x85\x81\x93\x85\xe0\x3e\xde\x5d\x73\x31\xfa",
        // "." / M(Xor4) / S(100) / L(1)
        "\x6e\x40\x54\xd6\x20\xd5\x51\x87\xcd\xa9\x15\xf3\x6c\x71\xd3\x74",
        // "strlen" / M(Xor1) / S(42) / L(6)
        "\x59\x5e\x58\x46\x4f\x44\x2a\x81\xbc\xe6\xc9\x3e\x42\x54\x52\x8e",
        // "CFURLCreateFromFileSystemRepresentation" / M(Rot) / S(228) / L(39)
        "\x27\x2a\x39\x36\x30\x27\x56\x49\x45\x58\x49\x2a\x56\x53\x51\x2a\x4d\x50\x49\x37\x5d\x57\x58\x49\x51\x36\x49\x54\x56\x49\x57\x49\x52\x58\x45\x58\x4d\x53\x52\xe4\x6d\x2c\xa6\x7d\xf3\xc7\x8f\x47",
        // "CFBundleIdentifier" / M(Xor3) / S(53) / L(18)
        "\x0b\x0e\x0a\x3d\x26\x2c\x24\x2d\x01\x2c\x2d\x26\x3c\x21\x2e\x21\x2d\x3a\x48",
        // "CFStringCompare" / M(Xor4) / S(153) / L(15)
        "\xd3\xd6\xc3\xe4\xe2\xf9\xfe\xf7\xd3\xff\xfd\xe0\xf1\xe2\xf5\x90",
        // "ASN1_OBJECT_free" / M(Xor4) / S(247) / L(16)
        "\x26\x34\x29\x56\x38\x28\x25\x2d\x22\x24\x33\x38\x01\x15\x02\x02\x67",
        // "CFStringCompare" / M(Xor2) / S(118) / L(15)
        "\x25\x20\x35\x12\x14\x0f\x08\x01\x25\x09\x0b\x16\x07\x14\x03\x66",
        // "c2i_ASN1_INTEGER" / M(Xor4) / S(205) / L(16)
        "\xfe\xaf\xf4\xc2\xdc\xce\xd3\xac\xc2\xd4\xd3\xc9\xd8\xda\xd8\xcf\x9d",
        // "CFDataGetBytePtr" / M(Xor3) / S(94) / L(16)
        "\x2c\x29\x2b\x0e\x1b\x0e\x28\x0a\x1b\x2d\x16\x1b\x0a\x3f\x1b\x1d\x6f",
        // "CFURLCreateWithFileSystemPathRelativeToBase" / M(Xor2) / S(209) / L(43)
        "\xa6\xa3\xb0\xb7\xa9\xa6\x97\x80\x84\x91\x80\xb2\x8c\x91\x8d\xa3\x8c\x89\x80\xb6\x9c\x96\x91\x80\x88\xb5\x84\x91\x8d\xb7\x80\x89\x84\x91\x8c\x93\x80\xb1\x8a\xa7\x84\x96\x80\xe5\x8c\x6b\xce\xf0\x0a\x3b\x9a\xab",
        // "%02X" / M(Xor1) / S(118) / L(4)
        "\x53\x46\x44\x2e\x76\xd8\x2d\x77\x89\x8b\xd1\xf7\xfd\x32\x1f\x7e",
        // "_MASReceipt/receipt" / M(Xor3) / S(182) / L(19)
        "\x95\x87\x8b\x99\x98\xaf\xa9\xaf\xa3\xba\xbe\xe5\xb8\xaf\xa9\xaf\xa3\xba\xbe\xca",
        // "RTLD_MAIN_ONLY" / M(Xor2) / S(28) / L(14)
        "\x5e\x58\x40\x48\x53\x41\x4d\x45\x42\x53\x43\x42\x40\x55\x0c\x68",
        // "%02x:" / M(Xor3) / S(219) / L(5)
        "\xce\xdb\xd9\x93\xd1\xeb\x0b\xce\xe0\x35\x63\xe7\x3b\x31\x85\xd1",
        // "objc_getClass" / M(Xor2) / S(186) / L(13)
        "\xc5\xc8\xc0\xc9\xf5\xcd\xcf\xde\xe9\xc6\xcb\xd9\xd9\xaa\x81\x5d",
        // "OBJ_txt2obj" / M(Rot) / S(92) / L(11)
        "\xab\x9e\xa6\xbb\xd0\xd4\xd0\x8e\xcb\xbe\xc6\x5c\x91\xe6\x17\x8d",
        // "" / M(None) / S(0) / L(0)
        "\x80\xe3\x94\xe7\x2d\x29\x92\x87\xf5\xc3\x87\xeb\x2f\x15\xb4\x73\xda\x8d\x02\xbd\x8d\xf0\xdc\x74\xbc\x28\xda\x0d\xb7\x11\x5e\x06",
        // "glob_b" / M(Xor4) / S(158) / L(6)
        "\x87\x8c\x8f\x82\xbf\x82\xe0\x72\xad\xf1\x6b\x38\x08\xf0\x5b\xd5",
        // "" / M(None) / S(0) / L(0)
        "\xd4\xe7\x06\x4d\xc1\xde\xf9\xa9\x80\x5e\xc0\xa2\x48\xcc\x2a\xfb\x85\xc9\xef\xbb\xf7\xab\x60\xe7\x25\x3a\x46\x6f\x10\x68\xe1\x99",
        // "setDelegate:" / M(Xor1) / S(131) / L(12)
        "\xf0\xe6\xf7\xc7\xe6\xef\xe6\xe4\xe2\xf7\xe6\xb9\x83\xd9\x59\xc9",
        // "sk_num" / M(Rot) / S(127) / L(6)
        "\xf2\xea\xde\xed\xf4\xec\x7f\xde\x7e\x5a\x79\xcf\xc2\xa2\xb0\x36",
        // "CC_SHA1" / M(Xor3) / S(8) / L(7)
        "\x5b\x5b\x47\x4b\x50\x59\x29\x18\xf7\x0a\x54\x71\xbf\x72\xc3\x48",
        // "Contents/_MASReceipt" / M(Xor2) / S(101) / L(20)
        "\x33\x1f\x1e\x04\x15\x1e\x04\x03\x5f\x2f\x3d\x31\x23\x22\x15\x13\x15\x19\x00\x04\x70",
        // "" / M(None) / S(0) / L(0)
        "\xbb\x9d\x1e\x11\x26\xd4\x28\x06\xaf\x15\x1a\x59\x6d\x8e\xa1\x71\x94\xf3\xef\xb6\xa2\x98\xfc\x5b\xe0\xee\x00\xd4\x37\xb3\x4e\xb8",
        // "" / M(None) / S(0) / L(0)
        "\xb9\x2b\x7e\xa7\x78\xe6\xa9\xb7\x5d\x73\x16\xb6\xef\x12\x95\xd4\x14\x62\x1f\x1c\x1d\xc4\xc2\x28\x62\x9f\x6b\xaa\x6f\x4a\x53\x70",
        // "CFReadStreamOpen" / M(Rot) / S(79) / L(16)
        "\x92\x95\xa1\xb4\xb0\xb3\xa2\xc3\xc1\xb4\xb0\xbc\x9e\xbf\xb4\xbd\x4f",
        // "d2i_PKCS7_bio" / M(Xor2) / S(10) / L(13)
        "\x7e\x28\x73\x45\x4a\x51\x59\x49\x2d\x45\x78\x73\x75\x1a\xe0\xdc",
        // "" / M(None) / S(0) / L(0)
        "\x61\x33\xff\x8b\x07\x1b\xc0\xa3\xb0\xfb\x28\x4f\x3f\xeb\x42\xac\x1b\x7a\x36\x6f\x6f\x15\x90\xe4\x71\x8c\x19\x35\xe4\xe9\x41\x6d",
        // "" / M(None) / S(0) / L(0)
        "\x09\x60\xe5\x7b\x45\xba\xab\xdb\xc4\x7e\x99\x59\x86\x21\x52\x87\xdb\x8b\x4a\xf8\x74\xa8\x7d\x6d\xa7\xab\x3b\x6e\xee\x9b\x0e\x50",
        // "kSecMatchLimitAll" / M(Xor1) / S(45) / L(17)
        "\x46\x7e\x48\x4e\x60\x4c\x59\x4e\x45\x61\x44\x40\x44\x59\x6c\x41\x41\x2d",
        // "Contents/_MASReceipt/receipt" / M(Xor3) / S(231) / L(28)
        "\x4f\x63\x62\x78\x69\x62\x78\x7f\x23\x53\x41\x4d\x5f\x5e\x69\x6f\x69\x65\x7c\x78\x23\x7e\x69\x6f\x69\x65\x7c\x78\x0c\x9c\xed\xc1\x37\x5d\x61\x57\xf5",
        // "IOMACAddress" / M(Xor3) / S(37) / L(12)
        "\x7c\x7a\x78\x74\x76\x74\x51\x51\x47\x50\x46\x46\x35\x9b\xc9\x68",
        // "X509_STORE_add_cert" / M(Xor2) / S(84) / L(19)
        "\x18\x75\x70\x79\x1f\x13\x14\x0f\x12\x05\x1f\x21\x24\x24\x1f\x23\x25\x32\x34\x40",
        // "" / M(None) / S(0) / L(0)
        "\x45\x55\x0f\x5d\xb9\x85\x92\xd6\x30\x85\xf5\x21\x4b\xef\xc4\x4c\x29\xcd\xdc\xc2\x6e\x13\xf5\x0d\xad\xaa\x16\xc7\x25\xa6\xd3\x95",
        // "EVP_DigestInit" / M(Rot) / S(182) / L(14)
        "\xfb\x0c\x06\x15\xfa\x1f\x1d\x1b\x29\x2a\xff\x24\x1f\x2a\xb6\x3d",
        // "X509_STORE_add_cert" / M(Xor4) / S(221) / L(19)
        "\x1c\x71\x74\x7d\x1b\x17\x10\x0b\x16\x01\x1b\x25\x20\x20\x1b\x27\x21\x36\x30\x44",
        // "CFDateCreate" / M(Xor3) / S(25) / L(12)
        "\x6a\x6f\x6d\x48\x5d\x4c\x6a\x5b\x4c\x48\x5d\x4c\x29\x6c\x40\x84",
        // "" / M(None) / S(0) / L(0)
        "\xb5\x34\xdf\x62\x1b\x84\x25\x69\xe6\x5d\xbd\xfe\x5a\x2b\xe0\x2a\x5d\xec\xfa\x74\x19\x1e\x37\xc0\xa8\x3e\x43\xa5\xeb\x9f\xbd\x21",
        // "kCFTypeDictionaryValueCallBacks" / M(Xor3) / S(206) / L(31)
        "\x85\xad\xa8\xba\x97\x9e\x8b\xaa\x87\x8d\x9a\x87\x81\x80\x8f\x9c\x97\xb8\x8f\x82\x9b\x8b\xad\x8f\x82\x82\xac\x8f\x8d\x85\x9d\xee",
        // "sel_registerName" / M(Xor3) / S(246) / L(16)
        "\x74\x62\x6b\x58\x75\x62\x60\x6e\x74\x73\x62\x75\x49\x66\x6a\x62\x07",
        // "" / M(None) / S(0) / L(0)
        "\x27\x8f\xfc\xaa\x19\xf9\x5b\xcc\x13\x0a\x0d\x97\xfd\x59\x2c\xf4\xef\xc9\xae\x68\x7a\xdc\x8a\x35\xa7\x58\x94\x33\x69\xd5\x34\x0e",
        // "" / M(None) / S(0) / L(0)
        "\x57\x48\x50\xcb\xaf\x5d\x08\xda\x4f\x85\xed\xc3\x88\x97\xf1\x9c\x4d\xa5\x1b\xa6\x36\x34\x05\x8e\x7f\x5d\x0a\x7e\x80\x45\xdf\x51",
        // "CFURLCreateCopyAppendingPathComponent" / M(Xor2) / S(212) / L(37)
        "\xb1\xb4\xa7\xa0\xbe\xb1\x80\x97\x93\x86\x97\xb1\x9d\x82\x8b\xb3\x82\x82\x97\x9c\x96\x9b\x9c\x95\xa2\x93\x86\x9a\xb1\x9d\x9f\x82\x9d\x9c\x97\x9c\x86\xf2",
        // "CFEqual" / M(Xor2) / S(32) / L(7)
        "\x73\x76\x75\x41\x45\x51\x5c\x30\xe1\x39\xf3\x53\x14\xe5\xc7\x5d",
        // "" / M(None) / S(0) / L(0)
        "\xec\x4f\x8f\xf0\xac\x4a\x68\xe5\x2b\x13\x8c\xce\xc5\x2b\x40\x9b\x6a\x7c\x25\x68\xef\xc7\xcf\x19\x22\xaa\x70\x4f\xf9\xa8\xff\x2d",
        // "/System/Library/Frameworks/CoreFoundation.framework/CoreFoundation" / M(Xor1) / S(92) / L(66)
        "\x73\x0f\x25\x2f\x28\x39\x31\x73\x10\x35\x3e\x2e\x3d\x2e\x25\x73\x1a\x2e\x3d\x31\x39\x2b\x33\x2e\x37\x2f\x73\x1f\x33\x2e\x39\x1a\x33\x29\x32\x38\x3d\x28\x35\x33\x32\x72\x3a\x2e\x3d\x31\x39\x2b\x33\x2e\x37\x73\x1f\x33\x2e\x39\x1a\x33\x29\x32\x38\x3d\x28\x35\x33\x32\x5c",
        // "SecKeychainSearchCopyNext" / M(Xor4) / S(189) / L(25)
        "\x49\x7f\x79\x51\x7f\x63\x79\x72\x7b\x73\x74\x49\x7f\x7b\x68\x79\x72\x59\x75\x6a\x63\x54\x7f\x62\x6e\x1a\xb3\xeb\x77\x42\xc4\xd9\x24\xd2",
        // "PKCS7_free" / M(Rot) / S(255) / L(10)
        "\x4f\x4a\x42\x52\x36\x5e\x65\x71\x64\x64\xff\x67\x2e\x83\x91\xa0",
        // "2.0.4" / M(Rot) / S(89) / L(5)
        "\x8b\x87\x89\x87\x8d\x59\xac\x51\xac\x8c\xf1\x58\x2f\x8c\xbb\x00",
        // "SHA1" / M(Xor1) / S(27) / L(4)
        "\x48\x53\x5a\x2a\x1b\x9c\xc4\x36\x77\xe1\x3e\xff\xff\xb3\x0a\x1d",
        // "CFReadStreamCreateWithFile" / M(Xor4) / S(200) / L(26)
        "\x1b\x1e\x0a\x3d\x39\x3c\x0b\x2c\x2a\x3d\x39\x35\x1b\x2a\x3d\x39\x2c\x3d\x0f\x31\x2c\x30\x1e\x31\x34\x3d\x58\xa0\x82\x9b\x67\x14\xd6\xf6\xd8",
        // "CFDataGetLength" / M(Xor4) / S(232) / L(15)
        "\xc3\xc6\xc4\xe1\xf4\xe1\xc7\xe5\xf4\xcc\xe5\xee\xe7\xf4\xe8\x80",
        // "" / M(None) / S(0) / L(0)
        "\xcd\x04\xac\x2b\x39\x89\x37\x1f\xd3\x3a\x36\xa1\xd3\x75\xa2\x87\xab\xd5\x62\xc6\x3d\x04\x7a\x9e\x5e\xea\x36\x0d\x93\x70\x3f\xd6",
        // "X509_free" / M(Rot) / S(120) / L(9)
        "\xd0\xad\xa8\xb1\xd7\xde\xea\xdd\xdd\x78\xa4\xc5\x16\x5f\x39\x5e",
        // "" / M(None) / S(0) / L(0)
        "\x7b\xec\xfc\xd0\x58\x46\xd3\xf1\x77\x9b\x1e\x4f\x02\xba\x7d\x95\x01\x02\xa6\x15\x9d\x5e\x67\xf9\x75\xc4\xd9\x30\x82\x27\x5f\x7d",
        // "CFBundleCopyBundleURL" / M(Xor3) / S(205) / L(21)
        "\xa0\xa5\xa1\x96\x8d\x87\x8f\x86\xa0\x8c\x93\x9a\xa1\x96\x8d\x87\x8f\x86\xb6\xb1\xaf\xe3",
        // "EVP_DigestFinal" / M(Rot) / S(56) / L(15)
        "\x7d\x8e\x88\x97\x7c\xa1\x9f\x9d\xab\xac\x7e\xa1\xa6\x99\xa4\x38",
        // "CFDateFormatterSetProperty" / M(Xor4) / S(241) / L(26)
        "\xb0\xb5\xb7\x92\x87\x96\xb5\x9c\x81\x9e\x92\x87\x87\x96\x81\xa0\x96\x87\xa3\x81\x9c\x83\x96\x81\x87\x8a\xf3\x25\x5f\xe5\x89\x99\x2b\xbb\x6c",
        // "2.0.4" / M(Xor1) / S(167) / L(5)
        "\x95\x89\x97\x89\x93\xa7\x47\x3a\x68\x2e\xbe\x10\x5b\x1d\x7a\x5d",
        // "" / M(None) / S(0) / L(0)
        "\x3f\x09\x67\xd0\x89\x8a\xe9\xea\x28\x41\xde\xe9\xb9\x43\x01\x7c\x76\xa8\xaa\x48\x86\xc8\x68\x72\x40\xdd\x86\xb5\xab\x8f\x97\x22",
        // "CFDataAppendBytes" / M(Xor1) / S(13) / L(17)
        "\x4e\x4b\x49\x6c\x79\x6c\x4c\x7d\x7d\x68\x63\x69\x4f\x74\x79\x68\x7e\x0d",
        // "en0" / M(Xor2) / S(142) / L(3)
        "\xfb\xf0\xae\x9e\xe7\xbe\xf2\xd6\x9b\x8e\x74\x9d\x89\x3a\xdc\xb6",
        // "/System/Library/Keychains/SystemRootCertificates.keychain" / M(Xor4) / S(72) / L(57)
        "\xbf\xc3\xe9\xe3\xe4\xf5\xfd\xbf\xdc\xf9\xf2\xe2\xf1\xe2\xe9\xbf\xdb\xf5\xe9\xf3\xf8\xf1\xf9\xfe\xe3\xbf\xc3\xe9\xe3\xe4\xf5\xfd\xc2\xff\xff\xe4\xd3\xf5\xe2\xe4\xf9\xf6\xf9\xf3\xf1\xe4\xf5\xe3\xbe\xfb\xf5\xe9\xf3\xf8\xf1\xf9\xfe\x90\xc9\x26\x6f\x6b\x14\x3e\x7f\xd4",
        // "SecKeychainSearchCreateFromAttributes" / M(Xor4) / S(209) / L(37)
        "\x55\x63\x65\x4d\x63\x7f\x65\x6e\x67\x6f\x68\x55\x63\x67\x74\x65\x6e\x45\x74\x63\x67\x72\x63\x40\x74\x69\x6b\x47\x72\x72\x74\x6f\x64\x73\x72\x63\x75\x06",
        // "PKCS7_verify" / M(Rot) / S(170) / L(12)
        "\xfa\xf5\xed\xfd\xe1\x09\x20\x0f\x1c\x13\x10\x23\xaa\x5b\x3c\x5d",
        // "" / M(None) / S(0) / L(0)
        "\x86\xd0\xc8\xda\xed\x9d\x8d\x96\xc1\x5d\x16\x9b\x36\xd1\xaa\xa3\x54\x0e\x0f\x28\xe6\x1c\x3a\xf4\x82\x06\xa3\x13\xfb\x07\xa3\x75",
        // "alloc" / M(Xor4) / S(70) / L(5)
        "\x01\x0c\x0c\x0f\x03\x60\xd1\x8e\x51\x50\xe7\x23\x37\xe5\xfc\x12",
        // "CFArrayCreateMutable" / M(Xor3) / S(2) / L(20)
        "\x54\x51\x56\x65\x65\x76\x6e\x54\x65\x72\x76\x63\x72\x5a\x62\x63\x76\x75\x7b\x72\x17",
    };
    
    // Table for storing pointers
    static void *RV_Pointers[600] = {
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) EVP_DigestUpdate),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) X509_free),
        ((void *) PKCS7_verify),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) SHA1_Update),
        ((void *) RTLD_MAIN_ONLY),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) BIO_s_mem),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) glob_b),
        ((void *) EVP_DigestFinal),
        ((void *) NULL),
        ((void *) strncmp),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) EVP_MD_CTX_init),
        ((void *) ASN1_INTEGER_get),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) BIO_new),
        ((void *) ASN1_get_object),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) EVP_DigestUpdate),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) BIO_free),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) BIO_free),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) PKCS7_get0_signers),
        ((void *) X509_digest),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) EVP_MD_CTX_init),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) d2i_X509_bio),
        ((void *) d2i_X509_bio),
        ((void *) NULL),
        ((void *) dlsym),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) sk_free),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) EVP_get_digestbyname),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) dlopen),
        ((void *) NULL),
        ((void *) sk_num),
        ((void *) NULL),
        ((void *) ASN1_OBJECT_free),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) BIO_write),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) BIO_write),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) X509_get_ext_by_OBJ),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) EVP_get_digestbyname),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) dlsym),
        ((void *) NULL),
        ((void *) SHA1),
        ((void *) NULL),
        ((void *) ASN1_get_object),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) globfree),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) d2i_PKCS7_bio),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) sk_num),
        ((void *) NULL),
        ((void *) CFStringCreateWithBytes),
        ((void *) NULL),
        ((void *) SHA1_Update),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) CFStringCreateWithCString),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) SHA1_Init),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) RTLD_MAIN_ONLY),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) sk_value),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) X509_digest),
        ((void *) strncmp),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) EVP_MD_CTX_init),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) glob),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) SHA1_Update),
        ((void *) NULL),
        ((void *) EVP_get_digestbyname),
        ((void *) globfree),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) strlen),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) PKCS7_get0_signers),
        ((void *) NULL),
        ((void *) X509_STORE_free),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) EVP_DigestUpdate),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) d2i_PKCS7_bio),
        ((void *) NULL),
        ((void *) strncmp),
        ((void *) NULL),
        ((void *) sk_value),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) glob),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) dlopen),
        ((void *) NULL),
        ((void *) ASN1_get_object),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) OpenSSL_add_all_digests),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) sk_free),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) X509_get_ext_by_OBJ),
        ((void *) CFStringCreateWithCString),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) X509_NAME_get_text_by_NID),
        ((void *) X509_digest),
        ((void *) SHA1_Final),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) CFStringCreateWithCString),
        ((void *) CFStringCreateWithBytes),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) glob),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) EVP_DigestInit),
        ((void *) NULL),
        ((void *) glob_b),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) globfree),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) dlsym),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) BIO_free),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) OpenSSL_add_all_digests),
        ((void *) OpenSSL_add_all_digests),
        ((void *) NULL),
        ((void *) X509_free),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) PKCS7_get0_signers),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) ASN1_INTEGER_get),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) dlopen),
        ((void *) BIO_s_mem),
        ((void *) OBJ_txt2obj),
        ((void *) c2i_ASN1_INTEGER),
        ((void *) EVP_DigestFinal),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) SHA1_Final),
        ((void *) ASN1_INTEGER_free),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) d2i_X509_bio),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) ASN1_INTEGER_free),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) X509_STORE_free),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) CFStringCreateWithBytes),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) X509_STORE_new),
        ((void *) BIO_new),
        ((void *) SHA1_Init),
        ((void *) X509_STORE_add_cert),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) X509_STORE_new),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) BIO_s_mem),
        ((void *) X509_STORE_free),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) ASN1_OBJECT_free),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) SHA1),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) strlen),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) PKCS7_free),
        ((void *) X509_NAME_get_text_by_NID),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) ASN1_INTEGER_get),
        ((void *) sk_free),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) ASN1_INTEGER_free),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) PKCS7_verify),
        ((void *) X509_NAME_get_text_by_NID),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) BIO_new),
        ((void *) X509_STORE_new),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) X509_get_ext_by_OBJ),
        ((void *) sk_value),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) SHA1_Final),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) PKCS7_free),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) BIO_write),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) SHA1_Init),
        ((void *) OBJ_txt2obj),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) c2i_ASN1_INTEGER),
        ((void *) NULL),
        ((void *) EVP_DigestInit),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) strlen),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) ASN1_OBJECT_free),
        ((void *) NULL),
        ((void *) c2i_ASN1_INTEGER),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) RTLD_MAIN_ONLY),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) OBJ_txt2obj),
        ((void *) NULL),
        ((void *) glob_b),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) sk_num),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) d2i_PKCS7_bio),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) X509_STORE_add_cert),
        ((void *) NULL),
        ((void *) EVP_DigestInit),
        ((void *) X509_STORE_add_cert),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) PKCS7_free),
        ((void *) NULL),
        ((void *) SHA1),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) X509_free),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) EVP_DigestFinal),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) PKCS7_verify),
        ((void *) NULL),
        ((void *) NULL),
        ((void *) NULL),
    };
    
    // Push a new diagnostic context
#pragma clang diagnostic push
    // When getting primary MAC address, an effectless alignment requirement increase is reported
#pragma clang diagnostic ignored "-Wcast-align"
    // In RELEASE mode, static variable are inlined but their declaration are not removed
#pragma clang diagnostic ignored "-Wunused"
    // In DEBUG mode, static variable are not inlined
#pragma clang diagnostic ignored "-Wused-but-marked-unused"
    
    // Global variables
    static int RV_WMMHMOOBUQFF __unused;
    static int RV_KTRJFJGPPLRX __unused;
    static int RV_QUIXUTRFSICK __unused;
    static int RV_VTXCSSATBWHZ __unused;
    static int RV_KOAYLIMVVISI __unused;
    static int RV_CYBMMHWQOVIS __unused;
    static int RV_XGBSZTSUAXCV __unused;
    static int RV_VQVXYNIGLORS __unused;
    
    
    // The long jump buffer
    static jmp_buf RV_JumpBuf __unused;
    
#define RV_ASN1_get_object_022000A2 ((__RV_ASN1_get_object) RV_LookupFunction015(RV_ObfuscationFunction007, 544, 28, 16, RV_ObfuscationFunction003, 162, 136, 16))
#define RV_ASN1_INTEGER_free_00CD0184 ((__RV_ASN1_INTEGER_free) RV_LookupFunction015(RV_ObfuscationFunction00A, 205, 114, 16, RV_ObfuscationFunction00C, 388, 23, 18))
#define RV_ASN1_INTEGER_get_00CD0177 ((__RV_ASN1_INTEGER_get) RV_LookupFunction015(RV_ObfuscationFunction00A, 205, 114, 16, RV_ObfuscationFunction004, 375, 44, 17))
#define RV_ASN1_OBJECT_free_0017007D ((__RV_ASN1_OBJECT_free) RV_LookupFunction015(RV_ObfuscationFunction008, 23, 188, 16, RV_ObfuscationFunction007, 125, 104, 17))
#define RV_BIO_free_0017004A ((__RV_BIO_free) RV_LookupFunction015(RV_ObfuscationFunction008, 23, 188, 16, RV_ObfuscationFunction00B, 74, 165, 16))
#define RV_BIO_free_00170051 ((__RV_BIO_free) RV_LookupFunction015(RV_ObfuscationFunction008, 23, 188, 16, RV_ObfuscationFunction00A, 81, 211, 16))
#define RV_BIO_new_001701DB ((__RV_BIO_new) RV_LookupFunction015(RV_ObfuscationFunction008, 23, 188, 16, RV_ObfuscationFunction00A, 475, 23, 16))
#define RV_BIO_new_0220003B ((__RV_BIO_new) RV_LookupFunction015(RV_ObfuscationFunction007, 544, 28, 16, RV_ObfuscationFunction006, 59, 254, 16))
#define RV_BIO_s_mem_0220017B ((__RV_BIO_s_mem) RV_LookupFunction015(RV_ObfuscationFunction007, 544, 28, 16, RV_ObfuscationFunction00B, 379, 201, 16))
#define RV_BIO_s_mem_022001AD ((__RV_BIO_s_mem) RV_LookupFunction015(RV_ObfuscationFunction007, 544, 28, 16, RV_ObfuscationFunction00A, 429, 244, 16))
#define RV_BIO_write_00CD0081 ((__RV_BIO_write) RV_LookupFunction015(RV_ObfuscationFunction00A, 205, 114, 16, RV_ObfuscationFunction00C, 129, 2, 16))
#define RV_BIO_write_00CD01FC ((__RV_BIO_write) RV_LookupFunction015(RV_ObfuscationFunction00A, 205, 114, 16, RV_ObfuscationFunction00B, 508, 153, 16))
#define RV_c2i_ASN1_INTEGER_0017020E ((__RV_c2i_ASN1_INTEGER) RV_LookupFunction015(RV_ObfuscationFunction008, 23, 188, 16, RV_ObfuscationFunction008, 526, 78, 17))
#define RV_CFArrayAppendValue_007800E8 ((__RV_CFArrayAppendValue) RV_LookupFunction015(RV_ObfuscationFunction00A, 120, 242, 67, RV_ObfuscationFunction008, 232, 202, 19))
#define RV_CFArrayAppendValue_02410142 ((__RV_CFArrayAppendValue) RV_LookupFunction015(RV_ObfuscationFunction006, 577, 92, 67, RV_ObfuscationFunction00C, 322, 159, 19))
#define RV_CFArrayCreateMutable_01B600FD ((__RV_CFArrayCreateMutable) RV_LookupFunction015(RV_ObfuscationFunction004, 438, 193, 67, RV_ObfuscationFunction008, 253, 255, 21))
#define RV_CFBundleGetMainBundle_0241000A ((__RV_CFBundleGetMainBundle) RV_LookupFunction015(RV_ObfuscationFunction006, 577, 92, 67, RV_ObfuscationFunction004, 10, 244, 22))
#define RV_CFBundleUnloadExecutable_007800A9 ((__RV_CFBundleUnloadExecutable) RV_LookupFunction015(RV_ObfuscationFunction00A, 120, 242, 67, RV_ObfuscationFunction008, 169, 163, 33))
#define RV_CFDataAppendBytes_00780082 ((__RV_CFDataAppendBytes) RV_LookupFunction015(RV_ObfuscationFunction00A, 120, 242, 67, RV_ObfuscationFunction00A, 130, 88, 18))
#define RV_CFDataAppendBytes_02410082 ((__RV_CFDataAppendBytes) RV_LookupFunction015(RV_ObfuscationFunction006, 577, 92, 67, RV_ObfuscationFunction00A, 130, 88, 18))
#define RV_CFDataCreateMutable_0078008D ((__RV_CFDataCreateMutable) RV_LookupFunction015(RV_ObfuscationFunction00A, 120, 242, 67, RV_ObfuscationFunction008, 141, 154, 20))
#define RV_CFDataCreateMutable_01B601A7 ((__RV_CFDataCreateMutable) RV_LookupFunction015(RV_ObfuscationFunction004, 438, 193, 67, RV_ObfuscationFunction006, 423, 39, 20))
#define RV_CFDataGetBytePtr_00780007 ((__RV_CFDataGetBytePtr) RV_LookupFunction015(RV_ObfuscationFunction00A, 120, 242, 67, RV_ObfuscationFunction006, 7, 53, 17))
#define RV_CFDataGetBytePtr_0241021C ((__RV_CFDataGetBytePtr) RV_LookupFunction015(RV_ObfuscationFunction006, 577, 92, 67, RV_ObfuscationFunction009, 540, 94, 17))
#define RV_CFDateFormatterCreate_02410135 ((__RV_CFDateFormatterCreate) RV_LookupFunction015(RV_ObfuscationFunction006, 577, 92, 67, RV_ObfuscationFunction006, 309, 236, 22))
#define RV_CFDictionaryAddValue_024101CD ((__RV_CFDictionaryAddValue) RV_LookupFunction015(RV_ObfuscationFunction006, 577, 92, 67, RV_ObfuscationFunction008, 461, 12, 21))
#define RV_CFDictionaryCreateMutable_01B60092 ((__RV_CFDictionaryCreateMutable) RV_LookupFunction015(RV_ObfuscationFunction004, 438, 193, 67, RV_ObfuscationFunction00B, 146, 157, 34))
#define RV_CFDictionarySetValue_01B601FD ((__RV_CFDictionarySetValue) RV_LookupFunction015(RV_ObfuscationFunction004, 438, 193, 67, RV_ObfuscationFunction007, 509, 218, 21))
#define RV_CFEqual_0078023F ((__RV_CFEqual) RV_LookupFunction015(RV_ObfuscationFunction00A, 120, 242, 67, RV_ObfuscationFunction007, 575, 32, 16))
#define RV_CFNumberCreate_00780097 ((__RV_CFNumberCreate) RV_LookupFunction015(RV_ObfuscationFunction00A, 120, 242, 67, RV_ObfuscationFunction004, 151, 62, 16))
#define RV_CFNumberCreate_00780159 ((__RV_CFNumberCreate) RV_LookupFunction015(RV_ObfuscationFunction00A, 120, 242, 67, RV_ObfuscationFunction00B, 345, 127, 16))
#define RV_CFReadStreamRead_01B600FA ((__RV_CFReadStreamRead) RV_LookupFunction015(RV_ObfuscationFunction004, 438, 193, 67, RV_ObfuscationFunction003, 250, 14, 17))
#define RV_CFReadStreamRead_024100FA ((__RV_CFReadStreamRead) RV_LookupFunction015(RV_ObfuscationFunction006, 577, 92, 67, RV_ObfuscationFunction003, 250, 14, 17))
#define RV_CFRelease_0078006D ((__RV_CFRelease) RV_LookupFunction015(RV_ObfuscationFunction00A, 120, 242, 67, RV_ObfuscationFunction008, 109, 21, 16))
#define RV_CFRelease_00780115 ((__RV_CFRelease) RV_LookupFunction015(RV_ObfuscationFunction00A, 120, 242, 67, RV_ObfuscationFunction009, 277, 136, 16))
#define RV_CFRelease_00780213 ((__RV_CFRelease) RV_LookupFunction015(RV_ObfuscationFunction00A, 120, 242, 67, RV_ObfuscationFunction00A, 531, 208, 16))
#define RV_CFRelease_01B6006D ((__RV_CFRelease) RV_LookupFunction015(RV_ObfuscationFunction004, 438, 193, 67, RV_ObfuscationFunction008, 109, 21, 16))
#define RV_CFRelease_01B60115 ((__RV_CFRelease) RV_LookupFunction015(RV_ObfuscationFunction004, 438, 193, 67, RV_ObfuscationFunction009, 277, 136, 16))
#define RV_CFRelease_01B60213 ((__RV_CFRelease) RV_LookupFunction015(RV_ObfuscationFunction004, 438, 193, 67, RV_ObfuscationFunction00A, 531, 208, 16))
#define RV_CFRelease_0241006D ((__RV_CFRelease) RV_LookupFunction015(RV_ObfuscationFunction006, 577, 92, 67, RV_ObfuscationFunction008, 109, 21, 16))
#define RV_CFRelease_02410115 ((__RV_CFRelease) RV_LookupFunction015(RV_ObfuscationFunction006, 577, 92, 67, RV_ObfuscationFunction009, 277, 136, 16))
#define RV_CFRelease_02410213 ((__RV_CFRelease) RV_LookupFunction015(RV_ObfuscationFunction006, 577, 92, 67, RV_ObfuscationFunction00A, 531, 208, 16))
#define RV_CFTimeZoneCreateWithTimeIntervalFromGMT_007801F4 ((__RV_CFTimeZoneCreateWithTimeIntervalFromGMT) RV_LookupFunction015(RV_ObfuscationFunction00A, 120, 242, 67, RV_ObfuscationFunction003, 500, 56, 48))
#define RV_CFURLCreateWithFileSystemPathRelativeToBase_0078021D ((__RV_CFURLCreateWithFileSystemPathRelativeToBase) RV_LookupFunction015(RV_ObfuscationFunction00A, 120, 242, 67, RV_ObfuscationFunction008, 541, 209, 52))
#define RV_CFURLCreateWithFileSystemPathRelativeToBase_01B6021D ((__RV_CFURLCreateWithFileSystemPathRelativeToBase) RV_LookupFunction015(RV_ObfuscationFunction004, 438, 193, 67, RV_ObfuscationFunction008, 541, 209, 52))
#define RV_d2i_PKCS7_bio_0017022E ((__RV_d2i_PKCS7_bio) RV_LookupFunction015(RV_ObfuscationFunction008, 23, 188, 16, RV_ObfuscationFunction008, 558, 10, 16))
#define RV_d2i_PKCS7_bio_00CD022E ((__RV_d2i_PKCS7_bio) RV_LookupFunction015(RV_ObfuscationFunction00A, 205, 114, 16, RV_ObfuscationFunction008, 558, 10, 16))
#define RV_d2i_X509_bio_00170061 ((__RV_d2i_X509_bio) RV_LookupFunction015(RV_ObfuscationFunction008, 23, 188, 16, RV_ObfuscationFunction00B, 97, 155, 16))
#define RV_EVP_DigestFinal_0017017E ((__RV_EVP_DigestFinal) RV_LookupFunction015(RV_ObfuscationFunction008, 23, 188, 16, RV_ObfuscationFunction00A, 382, 143, 16))
#define RV_EVP_DigestInit_00170236 ((__RV_EVP_DigestInit) RV_LookupFunction015(RV_ObfuscationFunction008, 23, 188, 16, RV_ObfuscationFunction003, 566, 182, 16))
#define RV_EVP_DigestUpdate_00CD0009 ((__RV_EVP_DigestUpdate) RV_LookupFunction015(RV_ObfuscationFunction00A, 205, 114, 16, RV_ObfuscationFunction005, 9, 32, 17))
#define RV_EVP_get_digestbyname_00CD00E9 ((__RV_EVP_get_digestbyname) RV_LookupFunction015(RV_ObfuscationFunction00A, 205, 114, 16, RV_ObfuscationFunction008, 233, 38, 21))
#define RV_EVP_MD_CTX_init_00CD0031 ((__RV_EVP_MD_CTX_init) RV_LookupFunction015(RV_ObfuscationFunction00A, 205, 114, 16, RV_ObfuscationFunction00C, 49, 37, 16))
#define RV_exit_004D00CF ((__RV_exit) RV_LookupFunction015(RV_ObfuscationFunction006, 77, 142, 33, RV_ObfuscationFunction006, 207, 148, 16))
#define RV_exit_004D019C ((__RV_exit) RV_LookupFunction015(RV_ObfuscationFunction006, 77, 142, 33, RV_ObfuscationFunction008, 412, 220, 16))
#define RV_exit_004D020B ((__RV_exit) RV_LookupFunction015(RV_ObfuscationFunction006, 77, 142, 33, RV_ObfuscationFunction003, 523, 172, 16))
#define RV_exit_014700CF ((__RV_exit) RV_LookupFunction015(RV_ObfuscationFunction004, 327, 254, 33, RV_ObfuscationFunction006, 207, 148, 16))
#define RV_exit_0147019C ((__RV_exit) RV_LookupFunction015(RV_ObfuscationFunction004, 327, 254, 33, RV_ObfuscationFunction008, 412, 220, 16))
#define RV_exit_0147020B ((__RV_exit) RV_LookupFunction015(RV_ObfuscationFunction004, 327, 254, 33, RV_ObfuscationFunction003, 523, 172, 16))
#define RV_exit_019700CF ((__RV_exit) RV_LookupFunction015(RV_ObfuscationFunction00B, 407, 8, 33, RV_ObfuscationFunction006, 207, 148, 16))
#define RV_exit_0197019C ((__RV_exit) RV_LookupFunction015(RV_ObfuscationFunction00B, 407, 8, 33, RV_ObfuscationFunction008, 412, 220, 16))
#define RV_exit_0197020B ((__RV_exit) RV_LookupFunction015(RV_ObfuscationFunction00B, 407, 8, 33, RV_ObfuscationFunction003, 523, 172, 16))
#define RV_WMMHMOOBUQFF_007800BC ((__RV_CFBundleCopyBundleURL) RV_LookupFunction015(RV_ObfuscationFunction00A, 120, 242, 67, RV_ObfuscationFunction008, RV_WMMHMOOBUQFF, 122, 22))
#define RV_WMMHMOOBUQFF_00780137 ((__RV_CFDictionaryCreateMutable) RV_LookupFunction015(RV_ObfuscationFunction00A, 120, 242, 67, RV_ObfuscationFunction00B, RV_WMMHMOOBUQFF, 115, 34))
#define RV_WMMHMOOBUQFF_00780181 ((__RV_CFArrayAppendValue) RV_LookupFunction015(RV_ObfuscationFunction00A, 120, 242, 67, RV_ObfuscationFunction004, RV_WMMHMOOBUQFF, 157, 19))
#define RV_WMMHMOOBUQFF_013600AC ((__RV_IOMasterPort) RV_LookupFunction015(RV_ObfuscationFunction005, 310, 20, 49, RV_ObfuscationFunction008, RV_WMMHMOOBUQFF, 195, 16))
#define RV_WMMHMOOBUQFF_01B600A6 ((__RV_CFNumberCreate) RV_LookupFunction015(RV_ObfuscationFunction004, 438, 193, 67, RV_ObfuscationFunction005, RV_WMMHMOOBUQFF, 206, 16))
#define RV_WMMHMOOBUQFF_02410082 ((__RV_CFDataAppendBytes) RV_LookupFunction015(RV_ObfuscationFunction006, 577, 92, 67, RV_ObfuscationFunction00A, RV_WMMHMOOBUQFF, 88, 18))
#define RV_WMMHMOOBUQFF_02410165 ((__RV_CFArrayGetValueAtIndex) RV_LookupFunction015(RV_ObfuscationFunction006, 577, 92, 67, RV_ObfuscationFunction006, RV_WMMHMOOBUQFF, 125, 23))
#define RV_WMMHMOOBUQFF_02410180 ((__RV_CFDateCompare) RV_LookupFunction015(RV_ObfuscationFunction006, 577, 92, 67, RV_ObfuscationFunction00A, RV_WMMHMOOBUQFF, 198, 16))
#define RV_WMMHMOOBUQFF_02410218 ((__RV_CFStringCompare) RV_LookupFunction015(RV_ObfuscationFunction006, 577, 92, 67, RV_ObfuscationFunction00C, RV_WMMHMOOBUQFF, 153, 16))
#define RV_KTRJFJGPPLRX_0078003D ((__RV_CFDictionaryGetValue) RV_LookupFunction015(RV_ObfuscationFunction00A, 120, 242, 67, RV_ObfuscationFunction006, RV_KTRJFJGPPLRX, 215, 21))
#define RV_KTRJFJGPPLRX_00B70253 ((__RV_SecKeychainSearchCreateFromAttributes) RV_LookupFunction015(RV_ObfuscationFunction00B, 183, 184, 55, RV_ObfuscationFunction00C, RV_KTRJFJGPPLRX, 209, 38))
#define RV_KTRJFJGPPLRX_01B60039 ((__RV_CFDateCreate) RV_LookupFunction015(RV_ObfuscationFunction004, 438, 193, 67, RV_ObfuscationFunction005, RV_KTRJFJGPPLRX, 61, 16))
#define RV_KTRJFJGPPLRX_01B60042 ((__RV_CFDataCreate) RV_LookupFunction015(RV_ObfuscationFunction004, 438, 193, 67, RV_ObfuscationFunction00B, RV_KTRJFJGPPLRX, 95, 16))
#define RV_KTRJFJGPPLRX_01B600B6 ((__RV_CFDictionaryGetValue) RV_LookupFunction015(RV_ObfuscationFunction004, 438, 193, 67, RV_ObfuscationFunction006, RV_KTRJFJGPPLRX, 130, 21))
#define RV_KTRJFJGPPLRX_024100F6 ((__RV_CFURLCreateFromFileSystemRepresentation) RV_LookupFunction015(RV_ObfuscationFunction006, 577, 92, 67, RV_ObfuscationFunction008, RV_KTRJFJGPPLRX, 14, 48))
#define RV_QUIXUTRFSICK_004D0044 ((__RV_CC_SHA1) RV_LookupFunction015(RV_ObfuscationFunction006, 77, 142, 33, RV_ObfuscationFunction006, RV_QUIXUTRFSICK, 140, 16))
#define RV_QUIXUTRFSICK_00780120 ((__RV_CFReadStreamOpen) RV_LookupFunction015(RV_ObfuscationFunction00A, 120, 242, 67, RV_ObfuscationFunction00A, RV_QUIXUTRFSICK, 93, 17))
#define RV_QUIXUTRFSICK_0078018E ((__RV_CFArrayGetValueAtIndex) RV_LookupFunction015(RV_ObfuscationFunction00A, 120, 242, 67, RV_ObfuscationFunction00A, RV_QUIXUTRFSICK, 32, 23))
#define RV_QUIXUTRFSICK_01B60097 ((__RV_CFNumberCreate) RV_LookupFunction015(RV_ObfuscationFunction004, 438, 193, 67, RV_ObfuscationFunction004, RV_QUIXUTRFSICK, 62, 16))
#define RV_QUIXUTRFSICK_01B60104 ((__RV_CFBundleGetIdentifier) RV_LookupFunction015(RV_ObfuscationFunction004, 438, 193, 67, RV_ObfuscationFunction005, RV_QUIXUTRFSICK, 41, 22))
#define RV_QUIXUTRFSICK_024100AF ((__RV_CFDataGetLength) RV_LookupFunction015(RV_ObfuscationFunction006, 577, 92, 67, RV_ObfuscationFunction00C, RV_QUIXUTRFSICK, 238, 16))
#define RV_QUIXUTRFSICK_024101C1 ((__RV_CFDictionaryGetValue) RV_LookupFunction015(RV_ObfuscationFunction006, 577, 92, 67, RV_ObfuscationFunction00C, RV_QUIXUTRFSICK, 224, 21))
#define RV_QUIXUTRFSICK_0241021A ((__RV_CFStringCompare) RV_LookupFunction015(RV_ObfuscationFunction006, 577, 92, 67, RV_ObfuscationFunction008, RV_QUIXUTRFSICK, 118, 16))
#define RV_VTXCSSATBWHZ_0078007C ((__RV_CFDateFormatterCreateDateFromString) RV_LookupFunction015(RV_ObfuscationFunction00A, 120, 242, 67, RV_ObfuscationFunction00C, RV_VTXCSSATBWHZ, 30, 36))
#define RV_VTXCSSATBWHZ_007801AF ((__RV_CFReadStreamClose) RV_LookupFunction015(RV_ObfuscationFunction00A, 120, 242, 67, RV_ObfuscationFunction009, RV_VTXCSSATBWHZ, 80, 18))
#define RV_VTXCSSATBWHZ_01C50014 ((__RV_IOServiceGetMatchingServices) RV_LookupFunction015(RV_ObfuscationFunction008, 453, 138, 49, RV_ObfuscationFunction005, RV_VTXCSSATBWHZ, 50, 37))
#define RV_VTXCSSATBWHZ_02410058 ((__RV_CFDictionaryAddValue) RV_LookupFunction015(RV_ObfuscationFunction006, 577, 92, 67, RV_ObfuscationFunction00C, RV_VTXCSSATBWHZ, 111, 21))
#define RV_VTXCSSATBWHZ_024100B6 ((__RV_CFDictionaryGetValue) RV_LookupFunction015(RV_ObfuscationFunction006, 577, 92, 67, RV_ObfuscationFunction006, RV_VTXCSSATBWHZ, 130, 21))
#define RV_VTXCSSATBWHZ_024101B3 ((__RV_CFDataCreate) RV_LookupFunction015(RV_ObfuscationFunction006, 577, 92, 67, RV_ObfuscationFunction00A, RV_VTXCSSATBWHZ, 76, 16))
#define RV_KOAYLIMVVISI_007800EE ((__RV_CFArrayGetCount) RV_LookupFunction015(RV_ObfuscationFunction00A, 120, 242, 67, RV_ObfuscationFunction00C, RV_KOAYLIMVVISI, 71, 16))
#define RV_KOAYLIMVVISI_00780194 ((__RV_CFBundleGetValueForInfoDictionaryKey) RV_LookupFunction015(RV_ObfuscationFunction00A, 120, 242, 67, RV_ObfuscationFunction003, RV_KOAYLIMVVISI, 59, 37))
#define RV_KOAYLIMVVISI_0078021C ((__RV_CFDataGetBytePtr) RV_LookupFunction015(RV_ObfuscationFunction00A, 120, 242, 67, RV_ObfuscationFunction009, RV_KOAYLIMVVISI, 94, 17))
#define RV_KOAYLIMVVISI_016800DA ((__RV_SecKeychainSearchCopyNext) RV_LookupFunction015(RV_ObfuscationFunction004, 360, 174, 55, RV_ObfuscationFunction004, RV_KOAYLIMVVISI, 45, 34))
#define RV_KOAYLIMVVISI_019701D3 ((__RV_CC_SHA1_Init) RV_LookupFunction015(RV_ObfuscationFunction00B, 407, 8, 33, RV_ObfuscationFunction008, RV_KOAYLIMVVISI, 147, 16))
#define RV_KOAYLIMVVISI_01B600C9 ((__RV_CFReadStreamCreateWithFile) RV_LookupFunction015(RV_ObfuscationFunction004, 438, 193, 67, RV_ObfuscationFunction008, RV_KOAYLIMVVISI, 248, 35))
#define RV_KOAYLIMVVISI_01B60121 ((__RV_CFDataAppendBytes) RV_LookupFunction015(RV_ObfuscationFunction004, 438, 193, 67, RV_ObfuscationFunction007, RV_KOAYLIMVVISI, 99, 18))
#define RV_KOAYLIMVVISI_01C500AA ((__RV_IOBSDNameMatching) RV_LookupFunction015(RV_ObfuscationFunction008, 453, 138, 49, RV_ObfuscationFunction007, RV_KOAYLIMVVISI, 31, 18))
#define RV_CYBMMHWQOVIS_004D01CC ((__RV_CC_SHA1_Update) RV_LookupFunction015(RV_ObfuscationFunction006, 77, 142, 33, RV_ObfuscationFunction00A, RV_CYBMMHWQOVIS, 144, 16))
#define RV_CYBMMHWQOVIS_007801C1 ((__RV_CFDictionaryGetValue) RV_LookupFunction015(RV_ObfuscationFunction00A, 120, 242, 67, RV_ObfuscationFunction00C, RV_CYBMMHWQOVIS, 224, 21))
#define RV_CYBMMHWQOVIS_00B201B5 ((__RV_SecKeychainOpen) RV_LookupFunction015(RV_ObfuscationFunction00A, 178, 136, 55, RV_ObfuscationFunction00C, RV_CYBMMHWQOVIS, 142, 16))
#define RV_CYBMMHWQOVIS_01C50155 ((__RV_IORegistryEntryCreateCFProperty) RV_LookupFunction015(RV_ObfuscationFunction008, 453, 138, 49, RV_ObfuscationFunction006, RV_CYBMMHWQOVIS, 205, 32))
#define RV_CYBMMHWQOVIS_02410097 ((__RV_CFNumberCreate) RV_LookupFunction015(RV_ObfuscationFunction006, 577, 92, 67, RV_ObfuscationFunction004, RV_CYBMMHWQOVIS, 62, 16))
#define RV_CYBMMHWQOVIS_024100AF ((__RV_CFDataGetLength) RV_LookupFunction015(RV_ObfuscationFunction006, 577, 92, 67, RV_ObfuscationFunction00C, RV_CYBMMHWQOVIS, 238, 16))
#define RV_CYBMMHWQOVIS_0241015F ((__RV_CFStringGetFileSystemRepresentation) RV_LookupFunction015(RV_ObfuscationFunction006, 577, 92, 67, RV_ObfuscationFunction00A, RV_CYBMMHWQOVIS, 38, 36))
#define RV_XGBSZTSUAXCV_00780091 ((__RV_CFArrayGetCount) RV_LookupFunction015(RV_ObfuscationFunction00A, 120, 242, 67, RV_ObfuscationFunction00B, RV_XGBSZTSUAXCV, 74, 16))
#define RV_XGBSZTSUAXCV_00780097 ((__RV_CFNumberCreate) RV_LookupFunction015(RV_ObfuscationFunction00A, 120, 242, 67, RV_ObfuscationFunction004, RV_XGBSZTSUAXCV, 62, 16))
#define RV_XGBSZTSUAXCV_007800B6 ((__RV_CFDictionaryGetValue) RV_LookupFunction015(RV_ObfuscationFunction00A, 120, 242, 67, RV_ObfuscationFunction006, RV_XGBSZTSUAXCV, 130, 21))
#define RV_XGBSZTSUAXCV_00780194 ((__RV_CFBundleGetValueForInfoDictionaryKey) RV_LookupFunction015(RV_ObfuscationFunction00A, 120, 242, 67, RV_ObfuscationFunction003, RV_XGBSZTSUAXCV, 59, 37))
#define RV_XGBSZTSUAXCV_00780218 ((__RV_CFStringCompare) RV_LookupFunction015(RV_ObfuscationFunction00A, 120, 242, 67, RV_ObfuscationFunction00C, RV_XGBSZTSUAXCV, 153, 16))
#define RV_XGBSZTSUAXCV_00780247 ((__RV_CFDataGetLength) RV_LookupFunction015(RV_ObfuscationFunction00A, 120, 242, 67, RV_ObfuscationFunction00C, RV_XGBSZTSUAXCV, 232, 16))
#define RV_XGBSZTSUAXCV_01B60102 ((__RV_CFDataCreateMutable) RV_LookupFunction015(RV_ObfuscationFunction004, 438, 193, 67, RV_ObfuscationFunction00A, RV_XGBSZTSUAXCV, 18, 20))
#define RV_XGBSZTSUAXCV_01C500EB ((__RV_IORegistryEntryGetParentEntry) RV_LookupFunction015(RV_ObfuscationFunction008, 453, 138, 49, RV_ObfuscationFunction00C, RV_XGBSZTSUAXCV, 0, 38))
#define RV_XGBSZTSUAXCV_024100A5 ((__RV_CFDateFormatterSetFormat) RV_LookupFunction015(RV_ObfuscationFunction006, 577, 92, 67, RV_ObfuscationFunction00C, RV_XGBSZTSUAXCV, 35, 33))
#define RV_VQVXYNIGLORS_004D00F8 ((__RV_CC_SHA1_Final) RV_LookupFunction015(RV_ObfuscationFunction006, 77, 142, 33, RV_ObfuscationFunction006, RV_VQVXYNIGLORS, 255, 16))
#define RV_VQVXYNIGLORS_005200E5 ((__RV_IOIteratorNext) RV_LookupFunction015(RV_ObfuscationFunction006, 82, 191, 49, RV_ObfuscationFunction005, RV_VQVXYNIGLORS, 141, 16))
#define RV_VQVXYNIGLORS_007800AB ((__RV_CFURLCreateCopyAppendingPathComponent) RV_LookupFunction015(RV_ObfuscationFunction00A, 120, 242, 67, RV_ObfuscationFunction005, RV_VQVXYNIGLORS, 179, 38))
#define RV_VQVXYNIGLORS_0078010E ((__RV_CFAbsoluteTimeGetCurrent) RV_LookupFunction015(RV_ObfuscationFunction00A, 120, 242, 67, RV_ObfuscationFunction003, RV_VQVXYNIGLORS, 235, 33))
#define RV_VQVXYNIGLORS_00780154 ((__RV_CFStringCompare) RV_LookupFunction015(RV_ObfuscationFunction00A, 120, 242, 67, RV_ObfuscationFunction00A, RV_VQVXYNIGLORS, 114, 16))
#define RV_VQVXYNIGLORS_0078021A ((__RV_CFStringCompare) RV_LookupFunction015(RV_ObfuscationFunction00A, 120, 242, 67, RV_ObfuscationFunction008, RV_VQVXYNIGLORS, 118, 16))
#define RV_VQVXYNIGLORS_01B6024D ((__RV_CFDateFormatterSetProperty) RV_LookupFunction015(RV_ObfuscationFunction004, 438, 193, 67, RV_ObfuscationFunction00B, RV_VQVXYNIGLORS, 241, 35))
#define RV_VQVXYNIGLORS_02410257 ((__RV_CFArrayCreateMutable) RV_LookupFunction015(RV_ObfuscationFunction006, 577, 92, 67, RV_ObfuscationFunction009, RV_VQVXYNIGLORS, 2, 21))
#define RV_IOObjectRelease_00520048 ((__RV_IOObjectRelease) RV_LookupFunction015(RV_ObfuscationFunction006, 82, 191, 49, RV_ObfuscationFunction00A, 72, 198, 16))
#define RV_kCFBundleIdentifierKey_02410138 ((__RV_kCFBundleIdentifierKey) RV_LookupFunction015(RV_ObfuscationFunction006, 577, 92, 67, RV_ObfuscationFunction005, 312, 126, 23))
#define RV_kCFDateFormatterTimeZone_007801F7 ((__RV_kCFDateFormatterTimeZone) RV_LookupFunction015(RV_ObfuscationFunction00A, 120, 242, 67, RV_ObfuscationFunction005, 503, 188, 33))
#define RV_kCFTypeArrayCallBacks_0241013C ((__RV_kCFTypeArrayCallBacks) RV_LookupFunction015(RV_ObfuscationFunction006, 577, 92, 67, RV_ObfuscationFunction008, 316, 14, 22))
#define RV_kCFTypeArrayCallBacks_02410161 ((__RV_kCFTypeArrayCallBacks) RV_LookupFunction015(RV_ObfuscationFunction006, 577, 92, 67, RV_ObfuscationFunction006, 353, 25, 22))
#define RV_kCFTypeDictionaryKeyCallBacks_01B6004F ((__RV_kCFTypeDictionaryKeyCallBacks) RV_LookupFunction015(RV_ObfuscationFunction004, 438, 193, 67, RV_ObfuscationFunction005, 79, 216, 38))
#define RV_kCFTypeDictionaryKeyCallBacks_01B6008F ((__RV_kCFTypeDictionaryKeyCallBacks) RV_LookupFunction015(RV_ObfuscationFunction004, 438, 193, 67, RV_ObfuscationFunction005, 143, 57, 38))
#define RV_kCFTypeDictionaryKeyCallBacks_024100C6 ((__RV_kCFTypeDictionaryKeyCallBacks) RV_LookupFunction015(RV_ObfuscationFunction006, 577, 92, 67, RV_ObfuscationFunction008, 198, 4, 38))
#define RV_kCFTypeDictionaryValueCallBacks_0078023A ((__RV_kCFTypeDictionaryValueCallBacks) RV_LookupFunction015(RV_ObfuscationFunction00A, 120, 242, 67, RV_ObfuscationFunction00A, 570, 206, 32))
#define RV_kCFTypeDictionaryValueCallBacks_01B6005B ((__RV_kCFTypeDictionaryValueCallBacks) RV_LookupFunction015(RV_ObfuscationFunction004, 438, 193, 67, RV_ObfuscationFunction007, 91, 213, 32))
#define RV_kCFTypeDictionaryValueCallBacks_0241005B ((__RV_kCFTypeDictionaryValueCallBacks) RV_LookupFunction015(RV_ObfuscationFunction006, 577, 92, 67, RV_ObfuscationFunction007, 91, 213, 32))
#define RV_kSecClass_00B20037 ((__RV_kSecClass) RV_LookupFunction015(RV_ObfuscationFunction00A, 178, 136, 55, RV_ObfuscationFunction005, 55, 33, 16))
#define RV_kSecClass_0168009D ((__RV_kSecClass) RV_LookupFunction015(RV_ObfuscationFunction004, 360, 174, 55, RV_ObfuscationFunction006, 157, 39, 16))
#define RV_kSecClassCertificate_00B700A8 ((__RV_kSecClassCertificate) RV_LookupFunction015(RV_ObfuscationFunction00B, 183, 184, 55, RV_ObfuscationFunction006, 168, 83, 21))
#define RV_kSecClassCertificate_00B701B0 ((__RV_kSecClassCertificate) RV_LookupFunction015(RV_ObfuscationFunction00B, 183, 184, 55, RV_ObfuscationFunction005, 432, 45, 21))
#define RV_kSecMatchLimit_00B2009B ((__RV_kSecMatchLimit) RV_LookupFunction015(RV_ObfuscationFunction00A, 178, 136, 55, RV_ObfuscationFunction005, 155, 44, 16))
#define RV_kSecMatchLimit_00B70174 ((__RV_kSecMatchLimit) RV_LookupFunction015(RV_ObfuscationFunction00B, 183, 184, 55, RV_ObfuscationFunction00A, 372, 109, 16))
#define RV_kSecMatchLimitAll_00B20071 ((__RV_kSecMatchLimitAll) RV_LookupFunction015(RV_ObfuscationFunction00A, 178, 136, 55, RV_ObfuscationFunction008, 113, 126, 18))
#define RV_kSecMatchLimitAll_01680071 ((__RV_kSecMatchLimitAll) RV_LookupFunction015(RV_ObfuscationFunction004, 360, 174, 55, RV_ObfuscationFunction008, 113, 126, 18))
#define RV_kSecMatchSearchList_016800CE ((__RV_kSecMatchSearchList) RV_LookupFunction015(RV_ObfuscationFunction004, 360, 174, 55, RV_ObfuscationFunction00B, 206, 237, 20))
#define RV_kSecMatchSubjectContains_00B20018 ((__RV_kSecMatchSubjectContains) RV_LookupFunction015(RV_ObfuscationFunction00A, 178, 136, 55, RV_ObfuscationFunction003, 24, 234, 33))
#define RV_kSecMatchSubjectContains_01680018 ((__RV_kSecMatchSubjectContains) RV_LookupFunction015(RV_ObfuscationFunction004, 360, 174, 55, RV_ObfuscationFunction003, 24, 234, 33))
#define RV_kSecReturnRef_00B20072 ((__RV_kSecReturnRef) RV_LookupFunction015(RV_ObfuscationFunction00A, 178, 136, 55, RV_ObfuscationFunction005, 114, 159, 16))
#define RV_kSecReturnRef_016801A2 ((__RV_kSecReturnRef) RV_LookupFunction015(RV_ObfuscationFunction004, 360, 174, 55, RV_ObfuscationFunction004, 418, 94, 16))
#define RV_longjmp_004D00BE ((__RV_longjmp) RV_LookupFunction015(RV_ObfuscationFunction006, 77, 142, 33, RV_ObfuscationFunction007, 190, 149, 16))
#define RV_longjmp_004D0172 ((__RV_longjmp) RV_LookupFunction015(RV_ObfuscationFunction006, 77, 142, 33, RV_ObfuscationFunction00B, 370, 138, 16))
#define RV_longjmp_014700BE ((__RV_longjmp) RV_LookupFunction015(RV_ObfuscationFunction004, 327, 254, 33, RV_ObfuscationFunction007, 190, 149, 16))
#define RV_longjmp_01470190 ((__RV_longjmp) RV_LookupFunction015(RV_ObfuscationFunction004, 327, 254, 33, RV_ObfuscationFunction00C, 400, 63, 16))
#define RV_longjmp_019700BE ((__RV_longjmp) RV_LookupFunction015(RV_ObfuscationFunction00B, 407, 8, 33, RV_ObfuscationFunction007, 190, 149, 16))
#define RV_longjmp_01970172 ((__RV_longjmp) RV_LookupFunction015(RV_ObfuscationFunction00B, 407, 8, 33, RV_ObfuscationFunction00B, 370, 138, 16))
#define RV_longjmp_01970190 ((__RV_longjmp) RV_LookupFunction015(RV_ObfuscationFunction00B, 407, 8, 33, RV_ObfuscationFunction00C, 400, 63, 16))
#define RV_OBJ_txt2obj_0017017C ((__RV_OBJ_txt2obj) RV_LookupFunction015(RV_ObfuscationFunction008, 23, 188, 16, RV_ObfuscationFunction003, 380, 47, 16))
#define RV_objc_getClass_00CB0198 ((__RV_objc_getClass) RV_LookupFunction015(RV_ObfuscationFunction009, 203, 31, 23, RV_ObfuscationFunction003, 408, 49, 16))
#define RV_objc_getClass_00CB0222 ((__RV_objc_getClass) RV_LookupFunction015(RV_ObfuscationFunction009, 203, 31, 23, RV_ObfuscationFunction008, 546, 186, 16))
#define RV_objc_getClass_01B90100 ((__RV_objc_getClass) RV_LookupFunction015(RV_ObfuscationFunction005, 441, 39, 23, RV_ObfuscationFunction00C, 256, 30, 16))
#define RV_objc_getClass_01B90198 ((__RV_objc_getClass) RV_LookupFunction015(RV_ObfuscationFunction005, 441, 39, 23, RV_ObfuscationFunction003, 408, 49, 16))
#define RV_objc_getClass_01B90222 ((__RV_objc_getClass) RV_LookupFunction015(RV_ObfuscationFunction005, 441, 39, 23, RV_ObfuscationFunction008, 546, 186, 16))
#define RV_objc_getClass_01D50222 ((__RV_objc_getClass) RV_LookupFunction015(RV_ObfuscationFunction005, 469, 228, 23, RV_ObfuscationFunction008, 546, 186, 16))
#define RV_objc_msgSend_00CB0192 ((__RV_objc_msgSend) RV_LookupFunction015(RV_ObfuscationFunction009, 203, 31, 23, RV_ObfuscationFunction008, 402, 53, 16))
#define RV_objc_msgSend_00CB01DA ((__RV_objc_msgSend) RV_LookupFunction015(RV_ObfuscationFunction009, 203, 31, 23, RV_ObfuscationFunction008, 474, 29, 16))
#define RV_objc_msgSend_00CB0207 ((__RV_objc_msgSend) RV_LookupFunction015(RV_ObfuscationFunction009, 203, 31, 23, RV_ObfuscationFunction00A, 519, 135, 16))
#define RV_objc_msgSend_01B90192 ((__RV_objc_msgSend) RV_LookupFunction015(RV_ObfuscationFunction005, 441, 39, 23, RV_ObfuscationFunction008, 402, 53, 16))
#define RV_objc_msgSend_01B90207 ((__RV_objc_msgSend) RV_LookupFunction015(RV_ObfuscationFunction005, 441, 39, 23, RV_ObfuscationFunction00A, 519, 135, 16))
#define RV_objc_msgSend_01D50192 ((__RV_objc_msgSend) RV_LookupFunction015(RV_ObfuscationFunction005, 469, 228, 23, RV_ObfuscationFunction008, 402, 53, 16))
#define RV_objc_msgSend_01D501DA ((__RV_objc_msgSend) RV_LookupFunction015(RV_ObfuscationFunction005, 469, 228, 23, RV_ObfuscationFunction008, 474, 29, 16))
#define RV_objc_msgSend_01D50207 ((__RV_objc_msgSend) RV_LookupFunction015(RV_ObfuscationFunction005, 469, 228, 23, RV_ObfuscationFunction00A, 519, 135, 16))
#define RV_OpenSSL_add_all_digests_00170119 ((__RV_OpenSSL_add_all_digests) RV_LookupFunction015(RV_ObfuscationFunction008, 23, 188, 16, RV_ObfuscationFunction009, 281, 235, 32))
#define RV_OpenSSL_add_all_digests_00CD0166 ((__RV_OpenSSL_add_all_digests) RV_LookupFunction015(RV_ObfuscationFunction00A, 205, 114, 16, RV_ObfuscationFunction004, 358, 99, 32))
#define RV_PKCS7_free_00170243 ((__RV_PKCS7_free) RV_LookupFunction015(RV_ObfuscationFunction008, 23, 188, 16, RV_ObfuscationFunction003, 579, 255, 16))
#define RV_PKCS7_free_02200243 ((__RV_PKCS7_free) RV_LookupFunction015(RV_ObfuscationFunction007, 544, 28, 16, RV_ObfuscationFunction003, 579, 255, 16))
#define RV_PKCS7_get0_signers_00170056 ((__RV_PKCS7_get0_signers) RV_LookupFunction015(RV_ObfuscationFunction008, 23, 188, 16, RV_ObfuscationFunction00C, 86, 211, 19))
#define RV_PKCS7_verify_00CD000E ((__RV_PKCS7_verify) RV_LookupFunction015(RV_ObfuscationFunction00A, 205, 114, 16, RV_ObfuscationFunction006, 14, 115, 16))
#define RV_SecCertificateCopyData_016800C4 ((__RV_SecCertificateCopyData) RV_LookupFunction015(RV_ObfuscationFunction004, 360, 174, 55, RV_ObfuscationFunction006, 196, 152, 23))
#define RV_SecCertificateCopyData_01680122 ((__RV_SecCertificateCopyData) RV_LookupFunction015(RV_ObfuscationFunction004, 360, 174, 55, RV_ObfuscationFunction003, 290, 232, 23))
#define RV_SecItemCopyMatching_00B700DF ((__RV_SecItemCopyMatching) RV_LookupFunction015(RV_ObfuscationFunction00B, 183, 184, 55, RV_ObfuscationFunction004, 223, 137, 20))
#define RV_SecItemCopyMatching_00B701BD ((__RV_SecItemCopyMatching) RV_LookupFunction015(RV_ObfuscationFunction00B, 183, 184, 55, RV_ObfuscationFunction007, 445, 89, 20))
#define RV_sel_registerName_00CB010D ((__RV_sel_registerName) RV_LookupFunction015(RV_ObfuscationFunction009, 203, 31, 23, RV_ObfuscationFunction00C, 269, 210, 17))
#define RV_sel_registerName_00CB020A ((__RV_sel_registerName) RV_LookupFunction015(RV_ObfuscationFunction009, 203, 31, 23, RV_ObfuscationFunction004, 522, 20, 17))
#define RV_sel_registerName_00CB023B ((__RV_sel_registerName) RV_LookupFunction015(RV_ObfuscationFunction009, 203, 31, 23, RV_ObfuscationFunction00A, 571, 246, 17))
#define RV_sel_registerName_01B9010D ((__RV_sel_registerName) RV_LookupFunction015(RV_ObfuscationFunction005, 441, 39, 23, RV_ObfuscationFunction00C, 269, 210, 17))
#define RV_sel_registerName_01B9020A ((__RV_sel_registerName) RV_LookupFunction015(RV_ObfuscationFunction005, 441, 39, 23, RV_ObfuscationFunction004, 522, 20, 17))
#define RV_sel_registerName_01D5020A ((__RV_sel_registerName) RV_LookupFunction015(RV_ObfuscationFunction005, 469, 228, 23, RV_ObfuscationFunction004, 522, 20, 17))
#define RV_sel_registerName_01D5023B ((__RV_sel_registerName) RV_LookupFunction015(RV_ObfuscationFunction005, 469, 228, 23, RV_ObfuscationFunction00A, 571, 246, 17))
#define RV_setjmp_01470050 ((__RV_setjmp) RV_LookupFunction015(RV_ObfuscationFunction004, 327, 254, 33, RV_ObfuscationFunction007, 80, 4, 16))
#define RV_SHA1_02200245 ((__RV_SHA1) RV_LookupFunction015(RV_ObfuscationFunction007, 544, 28, 16, RV_ObfuscationFunction006, 581, 27, 16))
#define RV_SHA1_Final_0017012C ((__RV_SHA1_Final) RV_LookupFunction015(RV_ObfuscationFunction008, 23, 188, 16, RV_ObfuscationFunction00C, 300, 169, 16))
#define RV_SHA1_Init_00CD019F ((__RV_SHA1_Init) RV_LookupFunction015(RV_ObfuscationFunction00A, 205, 114, 16, RV_ObfuscationFunction006, 415, 130, 16))
#define RV_SHA1_Update_00CD0016 ((__RV_SHA1_Update) RV_LookupFunction015(RV_ObfuscationFunction00A, 205, 114, 16, RV_ObfuscationFunction00C, 22, 231, 16))
#define RV_sk_free_001701D1 ((__RV_sk_free) RV_LookupFunction015(RV_ObfuscationFunction008, 23, 188, 16, RV_ObfuscationFunction004, 465, 35, 16))
#define RV_sk_num_022000B9 ((__RV_sk_num) RV_LookupFunction015(RV_ObfuscationFunction007, 544, 28, 16, RV_ObfuscationFunction008, 185, 27, 16))
#define RV_sk_value_001701E1 ((__RV_sk_value) RV_LookupFunction015(RV_ObfuscationFunction008, 23, 188, 16, RV_ObfuscationFunction003, 481, 134, 16))
#define RV_X509_digest_00CD00D3 ((__RV_X509_digest) RV_LookupFunction015(RV_ObfuscationFunction00A, 205, 114, 16, RV_ObfuscationFunction005, 211, 115, 16))
#define RV_X509_free_0220000D ((__RV_X509_free) RV_LookupFunction015(RV_ObfuscationFunction007, 544, 28, 16, RV_ObfuscationFunction007, 13, 105, 16))
#define RV_X509_get_ext_by_OBJ_02200124 ((__RV_X509_get_ext_by_OBJ) RV_LookupFunction015(RV_ObfuscationFunction007, 544, 28, 16, RV_ObfuscationFunction005, 292, 202, 20))
#define RV_X509_NAME_get_text_by_NID_001701D8 ((__RV_X509_NAME_get_text_by_NID) RV_LookupFunction015(RV_ObfuscationFunction008, 23, 188, 16, RV_ObfuscationFunction003, 472, 154, 34))
#define RV_X509_STORE_add_cert_00CD0234 ((__RV_X509_STORE_add_cert) RV_LookupFunction015(RV_ObfuscationFunction00A, 205, 114, 16, RV_ObfuscationFunction007, 564, 84, 20))
#define RV_X509_STORE_free_00CD00F7 ((__RV_X509_STORE_free) RV_LookupFunction015(RV_ObfuscationFunction00A, 205, 114, 16, RV_ObfuscationFunction008, 247, 17, 16))
#define RV_X509_STORE_new_00CD019D ((__RV_X509_STORE_new) RV_LookupFunction015(RV_ObfuscationFunction00A, 205, 114, 16, RV_ObfuscationFunction008, 413, 208, 16))
    
    
    // CodeBlock ObfuscationFunction / M(Rot)
    inline static void RV_ObfuscationFunction003(const char *RV_p1, char *RV_p2, int RV_p3, int RV_p4) {
        int RV_i1 = 0;
        while(RV_i1 < RV_p4) { RV_p2[RV_i1] = (char) (RV_p1[RV_i1] - RV_p3); RV_i1++; }
    }
    
    __RETURN_RETAINED inline static CFStringRef RV_ObfuscationFunction003CF(const char *RV_p1, int RV_p3, int RV_p4) {
        char RV_tmp1[600];
        char *RV_tmp2 = RV_tmp1;
        RV_ObfuscationFunction003(RV_p1, RV_tmp1, RV_p3, RV_p4);
        while(*RV_tmp2) { RV_tmp2++; }
        CFStringRef RV_str1 = ((__RV_CFStringCreateWithBytes) RV_Pointers[405])(NULL, (const UInt8 *) RV_tmp1, (CFIndex) (RV_tmp2 - RV_tmp1), kCFStringEncodingUTF8, false);
        return RV_str1;
    }
    
    
    // CodeBlock ObfuscationFunction / M(Rot)
    inline static void RV_ObfuscationFunction004(const char *RV_p1, char *RV_p2, int RV_p3, int RV_p4) {
        int RV_i1 = 0;
        while(RV_i1 < RV_p4) { RV_p2[RV_i1] = (char) (RV_p1[RV_i1] - RV_p3); RV_i1++; }
    }
    
    __RETURN_RETAINED inline static CFStringRef RV_ObfuscationFunction004CF(const char *RV_p1, int RV_p3, int RV_p4) {
        char RV_tmp1[600];
        RV_ObfuscationFunction004(RV_p1, RV_tmp1, RV_p3, RV_p4);
        CFStringRef RV_str1 = ((__RV_CFStringCreateWithCString) RV_Pointers[303])(NULL, RV_tmp1, kCFStringEncodingUTF8);
        return RV_str1;
    }
    
    
    // CodeBlock ObfuscationFunction / M(Xor1)
    inline static void RV_ObfuscationFunction005(const char *RV_p1, char *RV_p2, int RV_p3, int RV_p4) {
        int RV_i1 = 0;
        while(RV_i1 < RV_p4) { RV_p2[RV_i1] = RV_p1[RV_i1] ^ (char) RV_p3; RV_i1++; }
    }
    
    __RETURN_RETAINED inline static CFStringRef RV_ObfuscationFunction005CF(const char *RV_p1, int RV_p3, int RV_p4) {
        char RV_tmp1[600];
        char *RV_tmp2 = RV_tmp1;
        RV_ObfuscationFunction005(RV_p1, RV_tmp1, RV_p3, RV_p4);
        while(*RV_tmp2) { RV_tmp2++; }
        CFStringRef RV_str1 = ((__RV_CFStringCreateWithBytes) RV_Pointers[187])(NULL, (const UInt8 *) RV_tmp1, (CFIndex) (RV_tmp2 - RV_tmp1), kCFStringEncodingUTF8, false);
        return RV_str1;
    }
    
    
    // CodeBlock ObfuscationFunction / M(Xor1)
    inline static void RV_ObfuscationFunction006(const char *RV_p1, char *RV_p2, int RV_p3, int RV_p4) {
        int RV_i1 = 0;
        while(RV_i1 < RV_p4) { RV_p2[RV_i1] = RV_p1[RV_i1] ^ (char) RV_p3; RV_i1++; }
    }
    
    __RETURN_RETAINED inline static CFStringRef RV_ObfuscationFunction006CF(const char *RV_p1, int RV_p3, int RV_p4) {
        char RV_tmp1[600];
        RV_ObfuscationFunction006(RV_p1, RV_tmp1, RV_p3, RV_p4);
        CFStringRef RV_str1 = ((__RV_CFStringCreateWithCString) RV_Pointers[199])(NULL, RV_tmp1, kCFStringEncodingUTF8);
        return RV_str1;
    }
    
    
    // CodeBlock ObfuscationFunction / M(Xor2)
    inline static void RV_ObfuscationFunction007(const char *RV_p1, char *RV_p2, int RV_p3, int RV_p4) {
        int RV_i1 = 0;
        while(RV_i1 < RV_p4) { RV_p2[RV_i1] = (char) (RV_p1[RV_i1] ^ RV_p3 ^ RV_p4); RV_i1++; }
    }
    
    __RETURN_RETAINED inline static CFStringRef RV_ObfuscationFunction007CF(const char *RV_p1, int RV_p3, int RV_p4) {
        char RV_tmp1[600];
        char *RV_tmp2 = RV_tmp1;
        RV_ObfuscationFunction007(RV_p1, RV_tmp1, RV_p3, RV_p4);
        while(*RV_tmp2) { RV_tmp2++; }
        CFStringRef RV_str1 = ((__RV_CFStringCreateWithBytes) RV_Pointers[304])(NULL, (const UInt8 *) RV_tmp1, (CFIndex) (RV_tmp2 - RV_tmp1), kCFStringEncodingUTF8, false);
        return RV_str1;
    }
    
    
    // CodeBlock ObfuscationFunction / M(Xor2)
    inline static void RV_ObfuscationFunction008(const char *RV_p1, char *RV_p2, int RV_p3, int RV_p4) {
        int RV_i1 = 0;
        while(RV_i1 < RV_p4) { RV_p2[RV_i1] = (char) (RV_p1[RV_i1] ^ RV_p3 ^ RV_p4); RV_i1++; }
    }
    
    __RETURN_RETAINED inline static CFStringRef RV_ObfuscationFunction008CF(const char *RV_p1, int RV_p3, int RV_p4) {
        char RV_tmp1[600];
        RV_ObfuscationFunction008(RV_p1, RV_tmp1, RV_p3, RV_p4);
        CFStringRef RV_str1 = ((__RV_CFStringCreateWithCString) RV_Pointers[303])(NULL, RV_tmp1, kCFStringEncodingUTF8);
        return RV_str1;
    }
    
    
    // CodeBlock ObfuscationFunction / M(Xor3)
    inline static void RV_ObfuscationFunction009(const char *RV_p1, char *RV_p2, int RV_p3, int RV_p4) {
        int RV_i1 = 0;
        while(RV_i1 < RV_p4) { RV_p2[RV_i1] = (char) (RV_p1[RV_i1] ^ (RV_p3 + RV_p4)); RV_i1++; }
    }
    
    __RETURN_RETAINED inline static CFStringRef RV_ObfuscationFunction009CF(const char *RV_p1, int RV_p3, int RV_p4) {
        char RV_tmp1[600];
        char *RV_tmp2 = RV_tmp1;
        RV_ObfuscationFunction009(RV_p1, RV_tmp1, RV_p3, RV_p4);
        while(*RV_tmp2) { RV_tmp2++; }
        CFStringRef RV_str1 = ((__RV_CFStringCreateWithBytes) RV_Pointers[405])(NULL, (const UInt8 *) RV_tmp1, (CFIndex) (RV_tmp2 - RV_tmp1), kCFStringEncodingUTF8, false);
        return RV_str1;
    }
    
    
    // CodeBlock ObfuscationFunction / M(Xor3)
    inline static void RV_ObfuscationFunction00A(const char *RV_p1, char *RV_p2, int RV_p3, int RV_p4) {
        int RV_i1 = 0;
        while(RV_i1 < RV_p4) { RV_p2[RV_i1] = (char) (RV_p1[RV_i1] ^ (RV_p3 + RV_p4)); RV_i1++; }
    }
    
    __RETURN_RETAINED inline static CFStringRef RV_ObfuscationFunction00ACF(const char *RV_p1, int RV_p3, int RV_p4) {
        char RV_tmp1[600];
        RV_ObfuscationFunction00A(RV_p1, RV_tmp1, RV_p3, RV_p4);
        CFStringRef RV_str1 = ((__RV_CFStringCreateWithCString) RV_Pointers[303])(NULL, RV_tmp1, kCFStringEncodingUTF8);
        return RV_str1;
    }
    
    
    // CodeBlock ObfuscationFunction / M(Xor4)
    inline static void RV_ObfuscationFunction00B(const char *RV_p1, char *RV_p2, int RV_p3, int RV_p4) {
        int RV_i1 = 0;
        while(RV_i1 < RV_p4) { RV_p2[RV_i1] = (char) (RV_p1[RV_i1] ^ (RV_p3 * RV_p4)); RV_i1++; }
    }
    
    __RETURN_RETAINED inline static CFStringRef RV_ObfuscationFunction00BCF(const char *RV_p1, int RV_p3, int RV_p4) {
        char RV_tmp1[600];
        char *RV_tmp2 = RV_tmp1;
        RV_ObfuscationFunction00B(RV_p1, RV_tmp1, RV_p3, RV_p4);
        while(*RV_tmp2) { RV_tmp2++; }
        CFStringRef RV_str1 = ((__RV_CFStringCreateWithBytes) RV_Pointers[405])(NULL, (const UInt8 *) RV_tmp1, (CFIndex) (RV_tmp2 - RV_tmp1), kCFStringEncodingUTF8, false);
        return RV_str1;
    }
    
    
    // CodeBlock ObfuscationFunction / M(Xor4)
    inline static void RV_ObfuscationFunction00C(const char *RV_p1, char *RV_p2, int RV_p3, int RV_p4) {
        int RV_i1 = 0;
        while(RV_i1 < RV_p4) { RV_p2[RV_i1] = (char) (RV_p1[RV_i1] ^ (RV_p3 * RV_p4)); RV_i1++; }
    }
    
    __RETURN_RETAINED inline static CFStringRef RV_ObfuscationFunction00CCF(const char *RV_p1, int RV_p3, int RV_p4) {
        char RV_tmp1[600];
        RV_ObfuscationFunction00C(RV_p1, RV_tmp1, RV_p3, RV_p4);
        CFStringRef RV_str1 = ((__RV_CFStringCreateWithCString) RV_Pointers[293])(NULL, RV_tmp1, kCFStringEncodingUTF8);
        return RV_str1;
    }
    
    
    // CodeBlock LookupFunction
    inline static void *RV_LookupFunction015(RV_decrypt RV_func1, int RV_index1, int RV_val1, int RV_len1, RV_decrypt RV_func2, int RV_index2, int RV_val2, int RV_len2) {
        char RV_tmp1[600], RV_tmp2[600];
        // Load the library if needed
        if (RV_Pointers[RV_index1] == NULL) {
            RV_func1(RV_Strings[RV_index1], RV_tmp1, RV_val1, RV_len1);
            RV_Pointers[RV_index1] = ((__RV_dlopen) RV_Pointers[121])(RV_tmp1, RTLD_NOW | RTLD_FIRST);
        }
        // Load the function if needed
        if (RV_Pointers[RV_index2] == NULL) {
            RV_func2(RV_Strings[RV_index2], RV_tmp2, RV_val2, RV_len2);
            RV_Pointers[RV_index2] = ((__RV_dlsym) RV_Pointers[100])(RV_Pointers[RV_index1], RV_tmp2);
        }
        return RV_Pointers[RV_index2];
    }
    
    
    
    
    // CodeBlock GetMainBundle
#ifdef DEBUG
    inline static void RV_GetMainBundle016(RV_CheckingContext *RV_ctx) {
        __RV_RECEIPT_LOG("RV - Retrieving main bundle");
        // Retrieve the main bundle
        RV_ctx->main_bundle = RV_CFBundleGetMainBundle_0241000A();
        if (!RV_ctx->main_bundle) {
            // Dead code
            RV_CFRelease_0241006D(RV_ctx->main_bundle);
            RV_CFBundleUnloadExecutable_007800A9((CFBundleRef) RV_ctx->main_bundle);
        }
        // Global variables computation
        // Set to 188
        RV_WMMHMOOBUQFF = 188;
        // Set to 246
        RV_KTRJFJGPPLRX = 246;
        // Set to 288
        RV_QUIXUTRFSICK = 288;
        // Set to 431
        RV_VTXCSSATBWHZ = 431;
        // Set to 201
        RV_KOAYLIMVVISI = 201;
        // Set to 351
        RV_CYBMMHWQOVIS = 351;
        // Set to 258
        RV_XGBSZTSUAXCV = 258;
        // Set to 171
        RV_VQVXYNIGLORS = 171;
    }
#else
#define RV_GetMainBundle016(RV_ctx) { \
__RV_RECEIPT_LOG("RV - Retrieving main bundle"); \
RV_ctx->main_bundle = RV_CFBundleGetMainBundle_0241000A(); \
if (!RV_ctx->main_bundle) { \
RV_CFRelease_0241006D(RV_ctx->main_bundle); \
RV_CFBundleUnloadExecutable_007800A9((CFBundleRef) RV_ctx->main_bundle); \
} \
RV_WMMHMOOBUQFF = 188; \
RV_KTRJFJGPPLRX = 246; \
RV_QUIXUTRFSICK = 288; \
RV_VTXCSSATBWHZ = 431; \
RV_KOAYLIMVVISI = 201; \
RV_CYBMMHWQOVIS = 351; \
RV_XGBSZTSUAXCV = 258; \
RV_VQVXYNIGLORS = 171; \
}
#endif
    
    
    // CodeBlock LoadReceipt
#ifndef RECEIGEN_EXTERNAL_RECEIPT
#ifdef DEBUG
    inline static void RV_LoadReceipt03F(RV_CheckingContext *RV_ctx) {
        CFStringRef RV_str1;
        CFURLRef RV_url1, RV_url2;
        CFReadStreamRef RV_stream;
        CFMutableDataRef RV_data;
        CFIndex RV_count;
        uint8_t RV_buffer[600];
        __RV_RECEIPT_LOG("RV - Loading receipt");
        // Compute the path to the receipt
        RV_url1 = RV_WMMHMOOBUQFF_007800BC((CFBundleRef) RV_ctx->main_bundle);
        RV_str1 = RV_ObfuscationFunction008CF((RV_Strings[4]), 226, 16);
        RV_url2 = RV_VQVXYNIGLORS_007800AB(NULL, RV_url1, RV_str1, true);
        RV_CFRelease_0078006D(RV_str1);
        RV_CFRelease_0078006D(RV_url1);
        RV_str1 = RV_ObfuscationFunction00ACF((RV_Strings[543]), 182, 20);
        RV_url1 = RV_VQVXYNIGLORS_007800AB(NULL, RV_url2, RV_str1, true);
        RV_CFRelease_0078006D(RV_str1);
        RV_CFRelease_0078006D(RV_url2);
        RV_url2 = RV_url1;
        RV_url1 = NULL;
        // Create a stream from the receipt file
        RV_stream = RV_KOAYLIMVVISI_01B600C9(kCFAllocatorDefault, RV_url2);
        if (RV_stream == NULL || !RV_QUIXUTRFSICK_00780120(RV_stream)) {
            __RV_RECEIPT_LOG("RV - Error while opening receipt");
            __RV_RECEIPT_LOG("RV - Doing nothing...");
            RV_longjmp_014700BE(RV_JumpBuf, 1);
            // Dead code
            RV_CFRelease_0078006D(RV_url1);
            RV_CFRelease_0078006D(RV_str1);
            RV_CFRelease_0078006D(RV_url1);
            goto RV_LoadReceipt03F_RV_bail;
        }
        // Create the data object that will contains receipt data
        RV_data = RV_XGBSZTSUAXCV_01B60102(kCFAllocatorDefault, 0);
        // Read the receipt by chunks
        do {
            RV_count = RV_CFReadStreamRead_01B600FA(RV_stream, &RV_buffer[0], 600);
            if (RV_count > 0) {
                RV_CFDataAppendBytes_02410082(RV_data, RV_buffer, RV_count);
            }
        } while (RV_count > 0);
        // Close the stream
        RV_VTXCSSATBWHZ_007801AF(RV_stream);
        if (RV_ctx->receipt_data) RV_CFRelease_0078006D(RV_ctx->receipt_data);
        RV_ctx->receipt_data = RV_data;
        // Global variables computation
        // From 188 to 172
        RV_WMMHMOOBUQFF += 156; RV_WMMHMOOBUQFF /= 2;
        // From 431 to 20
        RV_VTXCSSATBWHZ += 29; RV_VTXCSSATBWHZ /= 23;
        // From 201 to 170
        RV_KOAYLIMVVISI += 139; RV_KOAYLIMVVISI /= 2;
        // Set to 341
        RV_CYBMMHWQOVIS = 341;
        // From 258 to 235
        RV_XGBSZTSUAXCV += 212; RV_XGBSZTSUAXCV /= 2;
        // From 171 to 229
        RV_VQVXYNIGLORS -= 95; RV_VQVXYNIGLORS *= 3; RV_VQVXYNIGLORS += 1;
    RV_LoadReceipt03F_RV_bail:
        if (RV_stream) RV_CFRelease_0078006D(RV_stream);
        RV_CFRelease_0078006D(RV_url2);
    }
#else
#define RV_LoadReceipt03F(RV_ctx) { \
CFStringRef RV_str1; \
CFURLRef RV_url1, RV_url2; \
CFReadStreamRef RV_stream; \
CFMutableDataRef RV_data; \
CFIndex RV_count; \
uint8_t RV_buffer[600]; \
__RV_RECEIPT_LOG("RV - Loading receipt"); \
RV_url1 = RV_WMMHMOOBUQFF_007800BC((CFBundleRef) RV_ctx->main_bundle); \
RV_str1 = RV_ObfuscationFunction008CF((RV_Strings[4]), 226, 16); \
RV_url2 = RV_VQVXYNIGLORS_007800AB(NULL, RV_url1, RV_str1, true); \
RV_CFRelease_0078006D(RV_str1); \
RV_CFRelease_0078006D(RV_url1); \
RV_str1 = RV_ObfuscationFunction00ACF((RV_Strings[543]), 182, 20); \
RV_url1 = RV_VQVXYNIGLORS_007800AB(NULL, RV_url2, RV_str1, true); \
RV_CFRelease_0078006D(RV_str1); \
RV_CFRelease_0078006D(RV_url2); \
RV_url2 = RV_url1; \
RV_url1 = NULL; \
RV_stream = RV_KOAYLIMVVISI_01B600C9(kCFAllocatorDefault, RV_url2); \
if (RV_stream == NULL || !RV_QUIXUTRFSICK_00780120(RV_stream)) { \
__RV_RECEIPT_LOG("RV - Error while opening receipt"); \
__RV_RECEIPT_LOG("RV - Doing nothing..."); \
RV_longjmp_014700BE(RV_JumpBuf, 1); \
RV_CFRelease_0078006D(RV_url1); \
RV_CFRelease_0078006D(RV_str1); \
RV_CFRelease_0078006D(RV_url1); \
goto RV_LoadReceipt03F_RV_bail; \
} \
RV_data = RV_XGBSZTSUAXCV_01B60102(kCFAllocatorDefault, 0); \
do { \
RV_count = RV_CFReadStreamRead_01B600FA(RV_stream, &RV_buffer[0], 600); \
if (RV_count > 0) { \
RV_CFDataAppendBytes_02410082(RV_data, RV_buffer, RV_count); \
} \
} while (RV_count > 0); \
RV_VTXCSSATBWHZ_007801AF(RV_stream); \
if (RV_ctx->receipt_data) RV_CFRelease_0078006D(RV_ctx->receipt_data); \
RV_ctx->receipt_data = RV_data; \
RV_WMMHMOOBUQFF += 156; RV_WMMHMOOBUQFF /= 2;  \
RV_VTXCSSATBWHZ += 29; RV_VTXCSSATBWHZ /= 23;  \
RV_KOAYLIMVVISI += 139; RV_KOAYLIMVVISI /= 2;  \
RV_CYBMMHWQOVIS = 341; \
RV_XGBSZTSUAXCV += 212; RV_XGBSZTSUAXCV /= 2;  \
RV_VQVXYNIGLORS -= 95; RV_VQVXYNIGLORS *= 3; RV_VQVXYNIGLORS += 1;  \
RV_LoadReceipt03F_RV_bail: \
if (RV_stream) RV_CFRelease_0078006D(RV_stream);     \
RV_CFRelease_0078006D(RV_url2); \
}
#endif
#endif
    
#ifdef RECEIGEN_EXTERNAL_RECEIPT
#ifdef DEBUG
    inline static void RV_LoadReceipt03F(RV_CheckingContext *RV_ctx) {
        CFStringRef RV_str1;
        CFURLRef RV_url1 = NULL;
        CFReadStreamRef RV_stream = NULL;
        CFMutableDataRef RV_data;
        CFIndex RV_count;
        uint8_t RV_buffer[600];
        char RV_path[PATH_MAX];
        int RV_status;
        glob_t RV_glob_buffer;
        char *RV_expanded_path;
        RV_str1 = RV_ObfuscationFunction00CCF((RV_Strings[532]), 100, 16);
        __RV_RECEIPT_LOG("RV - Loading external receipt at '%s'", CFStringGetCStringPtr(RV_str1, CFStringGetSystemEncoding()));
        // Compute the path to the receipt
        if (!RV_CYBMMHWQOVIS_0241015F(RV_str1, RV_path, PATH_MAX)) {
            __RV_RECEIPT_LOG("RV - Cannot convert receipt path");
            __RV_RECEIPT_LOG("RV - Doing nothing...");
            RV_longjmp_01970190(RV_JumpBuf, 1);
            // Dead code
            goto RV_LoadReceipt03F_RV_bail;
        }
        RV_status = ((__RV_glob_b) RV_Pointers[323])(RV_path, GLOB_TILDE | GLOB_ERR, NULL, &RV_glob_buffer);
        if (RV_status != 0 || RV_glob_buffer.gl_pathc != 1) {
            ((__RV_globfree) RV_Pointers[329])(&RV_glob_buffer);
            __RV_RECEIPT_LOG("RV - Error while globbing receipt path");
            __RV_RECEIPT_LOG("RV - Doing nothing...");
            RV_longjmp_01970190(RV_JumpBuf, 1);
            // Dead code
            RV_CFRelease_02410213(RV_url1);
            RV_CFRelease_02410213(RV_str1);
            RV_CFRelease_02410213(RV_url1);
            goto RV_LoadReceipt03F_RV_bail;
        }
        // Get the globbed path
        RV_expanded_path = RV_glob_buffer.gl_pathv[0];
        __RV_RECEIPT_LOG("RV - Receipt path resolved to '%s'", RV_expanded_path);
        RV_url1 = RV_KTRJFJGPPLRX_024100F6(kCFAllocatorDefault, (const UInt8 *) RV_expanded_path, (CFIndex) ((__RV_strlen) RV_Pointers[237])(RV_expanded_path), false);
        ((__RV_globfree) RV_Pointers[329])(&RV_glob_buffer);
        // Create a stream from the receipt file
        RV_stream = RV_KOAYLIMVVISI_01B600C9(kCFAllocatorDefault, RV_url1);
        if (RV_stream == NULL || !RV_QUIXUTRFSICK_00780120(RV_stream)) {
            __RV_RECEIPT_LOG("RV - Error while opening receipt");
            __RV_RECEIPT_LOG("RV - Doing nothing...");
            RV_longjmp_01970190(RV_JumpBuf, 1);
            // Dead code
            RV_CFRelease_02410213(RV_url1);
            RV_CFRelease_02410213(RV_str1);
            RV_CFRelease_02410213(RV_url1);
            goto RV_LoadReceipt03F_RV_bail;
        }
        // Create the data object that will contains receipt data
        RV_data = RV_XGBSZTSUAXCV_01B60102(kCFAllocatorDefault, 0);
        // Read the receipt by chunks
        do {
            RV_count = RV_CFReadStreamRead_024100FA(RV_stream, &RV_buffer[0], 600);
            if (RV_count > 0) {
                RV_CFDataAppendBytes_00780082(RV_data, RV_buffer, RV_count);
            }
        } while (RV_count > 0);
        // Close the stream
        RV_VTXCSSATBWHZ_007801AF(RV_stream);
        if (RV_ctx->receipt_data) RV_CFRelease_02410213(RV_ctx->receipt_data);
        RV_ctx->receipt_data = RV_data;
        // Global variables computation
        // From 188 to 172
        RV_WMMHMOOBUQFF += 156; RV_WMMHMOOBUQFF /= 2;
        // From 431 to 20
        RV_VTXCSSATBWHZ += 29; RV_VTXCSSATBWHZ /= 23;
        // From 201 to 170
        RV_KOAYLIMVVISI += 139; RV_KOAYLIMVVISI /= 2;
        // Set to 341
        RV_CYBMMHWQOVIS = 341;
        // From 258 to 235
        RV_XGBSZTSUAXCV += 212; RV_XGBSZTSUAXCV /= 2;
        // From 171 to 229
        RV_VQVXYNIGLORS -= 95; RV_VQVXYNIGLORS *= 3; RV_VQVXYNIGLORS += 1;
    RV_LoadReceipt03F_RV_bail:
        if (RV_stream) RV_CFRelease_02410213(RV_stream);
        RV_CFRelease_02410213(RV_str1);
        if (RV_url1) RV_CFRelease_02410213(RV_url1);
    }
#else
#define RV_LoadReceipt03F(RV_ctx) { \
CFStringRef RV_str1; \
CFURLRef RV_url1 = NULL; \
CFReadStreamRef RV_stream = NULL; \
CFMutableDataRef RV_data; \
CFIndex RV_count; \
uint8_t RV_buffer[600]; \
char RV_path[PATH_MAX]; \
int RV_status; \
glob_t RV_glob_buffer; \
char *RV_expanded_path; \
RV_str1 = RV_ObfuscationFunction00CCF((RV_Strings[532]), 100, 16); \
__RV_RECEIPT_LOG("RV - Loading external receipt at '%s'", CFStringGetCStringPtr(RV_str1, CFStringGetSystemEncoding())); \
if (!RV_CYBMMHWQOVIS_0241015F(RV_str1, RV_path, PATH_MAX)) { \
__RV_RECEIPT_LOG("RV - Cannot convert receipt path"); \
__RV_RECEIPT_LOG("RV - Doing nothing..."); \
RV_longjmp_01970190(RV_JumpBuf, 1); \
goto RV_LoadReceipt03F_RV_bail; \
} \
RV_status = ((__RV_glob_b) RV_Pointers[323])(RV_path, GLOB_TILDE | GLOB_ERR, NULL, &RV_glob_buffer); \
if (RV_status != 0 || RV_glob_buffer.gl_pathc != 1) { \
((__RV_globfree) RV_Pointers[329])(&RV_glob_buffer); \
__RV_RECEIPT_LOG("RV - Error while globbing receipt path"); \
__RV_RECEIPT_LOG("RV - Doing nothing..."); \
RV_longjmp_01970190(RV_JumpBuf, 1); \
RV_CFRelease_02410213(RV_url1); \
RV_CFRelease_02410213(RV_str1); \
RV_CFRelease_02410213(RV_url1); \
goto RV_LoadReceipt03F_RV_bail; \
} \
RV_expanded_path = RV_glob_buffer.gl_pathv[0]; \
__RV_RECEIPT_LOG("RV - Receipt path resolved to '%s'", RV_expanded_path); \
RV_url1 = RV_KTRJFJGPPLRX_024100F6(kCFAllocatorDefault, (const UInt8 *) RV_expanded_path, (CFIndex) ((__RV_strlen) RV_Pointers[237])(RV_expanded_path), false); \
((__RV_globfree) RV_Pointers[329])(&RV_glob_buffer); \
RV_stream = RV_KOAYLIMVVISI_01B600C9(kCFAllocatorDefault, RV_url1); \
if (RV_stream == NULL || !RV_QUIXUTRFSICK_00780120(RV_stream)) { \
__RV_RECEIPT_LOG("RV - Error while opening receipt"); \
__RV_RECEIPT_LOG("RV - Doing nothing..."); \
RV_longjmp_01970190(RV_JumpBuf, 1); \
RV_CFRelease_02410213(RV_url1); \
RV_CFRelease_02410213(RV_str1); \
RV_CFRelease_02410213(RV_url1); \
goto RV_LoadReceipt03F_RV_bail; \
} \
RV_data = RV_XGBSZTSUAXCV_01B60102(kCFAllocatorDefault, 0); \
do { \
RV_count = RV_CFReadStreamRead_024100FA(RV_stream, &RV_buffer[0], 600); \
if (RV_count > 0) { \
RV_CFDataAppendBytes_00780082(RV_data, RV_buffer, RV_count); \
} \
} while (RV_count > 0); \
RV_VTXCSSATBWHZ_007801AF(RV_stream); \
if (RV_ctx->receipt_data) RV_CFRelease_02410213(RV_ctx->receipt_data); \
RV_ctx->receipt_data = RV_data; \
RV_WMMHMOOBUQFF += 156; RV_WMMHMOOBUQFF /= 2;  \
RV_VTXCSSATBWHZ += 29; RV_VTXCSSATBWHZ /= 23;  \
RV_KOAYLIMVVISI += 139; RV_KOAYLIMVVISI /= 2;  \
RV_CYBMMHWQOVIS = 341; \
RV_XGBSZTSUAXCV += 212; RV_XGBSZTSUAXCV /= 2;  \
RV_VQVXYNIGLORS -= 95; RV_VQVXYNIGLORS *= 3; RV_VQVXYNIGLORS += 1;  \
RV_LoadReceipt03F_RV_bail: \
if (RV_stream) RV_CFRelease_02410213(RV_stream);     \
RV_CFRelease_02410213(RV_str1); \
if (RV_url1) RV_CFRelease_02410213(RV_url1); \
}
#endif
#endif
    
    
    // CodeBlock GetGUID
#ifdef DEBUG
    inline static void RV_GetGUID048(RV_CheckingContext *RV_ctx) {
        kern_return_t RV_kernResult;
        mach_port_t RV_master_port;
        CFMutableDictionaryRef RV_matching_dict = NULL;
        io_iterator_t RV_iterator;
        io_object_t RV_service, RV_parent_service;
        char *RV_str1;
        CFStringRef RV_str2;
        RV_str2 = RV_ObfuscationFunction007CF((RV_Strings[3]), 176, 16);
        __RV_RECEIPT_LOG("RV - Getting MAC address");
        // Open a MACH port
        RV_kernResult = RV_WMMHMOOBUQFF_013600AC(MACH_PORT_NULL, &RV_master_port);
        if (RV_kernResult != KERN_SUCCESS) {
            // Dead code
            RV_CFRelease_02410115(RV_matching_dict);
            RV_CFRelease_02410115(RV_str2);
            RV_CFRelease_02410115(RV_matching_dict);
            goto RV_GetGUID048_RV_bail;
        }
        // Create a search for primary interface
        char RV_str1_[600];
        RV_ObfuscationFunction00A((RV_Strings[362]), RV_str1_, 179, 16);
        RV_str1 = RV_str1_;
        RV_matching_dict = RV_KOAYLIMVVISI_01C500AA(RV_master_port, 0, RV_str1);
        if (!RV_matching_dict) {
            // Dead code
            RV_CFRelease_02410115(RV_str2);
            RV_CFRelease_02410115(RV_matching_dict);
            RV_CFRelease_02410115(RV_str2);
            goto RV_GetGUID048_RV_bail;
        }
        // Perform the search
        RV_kernResult = RV_VTXCSSATBWHZ_01C50014(RV_master_port, RV_matching_dict, &RV_iterator);
        if (RV_kernResult != KERN_SUCCESS) {
            // Dead code
            RV_CFRelease_02410115(RV_str2);
            RV_CFRelease_02410115(RV_matching_dict);
            RV_CFRelease_02410115(RV_str2);
            goto RV_GetGUID048_RV_bail;
        }
        // Iterate over the result
        while((RV_service = RV_VQVXYNIGLORS_005200E5(RV_iterator)) != 0) {
            RV_kernResult = RV_XGBSZTSUAXCV_01C500EB(RV_service, kIOServicePlane, &RV_parent_service);
            if (RV_kernResult == KERN_SUCCESS) {
                if (RV_ctx->guid_data) RV_CFRelease_02410115(RV_ctx->guid_data);
                RV_ctx->guid_data = (CFDataRef) RV_CYBMMHWQOVIS_01C50155(RV_parent_service, RV_str2, NULL, 0);
                RV_IOObjectRelease_00520048(RV_parent_service);
            }
            RV_IOObjectRelease_00520048(RV_iterator);
            RV_IOObjectRelease_00520048(RV_service);
        }
        // Global variables computation
        // From 172 to 311
        RV_WMMHMOOBUQFF -= 69; RV_WMMHMOOBUQFF *= 3; RV_WMMHMOOBUQFF += 2;
        // From 246 to 595
        RV_KTRJFJGPPLRX -= 98; RV_KTRJFJGPPLRX *= 4; RV_KTRJFJGPPLRX += 3;
        // From 288 to 398
        RV_QUIXUTRFSICK -= 156; RV_QUIXUTRFSICK *= 3; RV_QUIXUTRFSICK += 2;
        // From 20 to 88
        RV_VTXCSSATBWHZ -= 6; RV_VTXCSSATBWHZ *= 6; RV_VTXCSSATBWHZ += 4;
        // From 170 to 218
        RV_KOAYLIMVVISI -= 98; RV_KOAYLIMVVISI *= 3; RV_KOAYLIMVVISI += 2;
        // From 341 to 437
        RV_CYBMMHWQOVIS -= 196; RV_CYBMMHWQOVIS *= 3; RV_CYBMMHWQOVIS += 2;
        // From 235 to 145
        RV_XGBSZTSUAXCV += 200; RV_XGBSZTSUAXCV /= 3;
        // From 229 to 599
        RV_VQVXYNIGLORS -= 80; RV_VQVXYNIGLORS *= 4; RV_VQVXYNIGLORS += 3;
    RV_GetGUID048_RV_bail:
        RV_CFRelease_02410115(RV_str2);
    }
#else
#define RV_GetGUID048(RV_ctx) { \
kern_return_t RV_kernResult; \
mach_port_t RV_master_port; \
CFMutableDictionaryRef RV_matching_dict = NULL; \
io_iterator_t RV_iterator; \
io_object_t RV_service, RV_parent_service; \
char *RV_str1; \
CFStringRef RV_str2; \
RV_str2 = RV_ObfuscationFunction007CF((RV_Strings[3]), 176, 16);  \
__RV_RECEIPT_LOG("RV - Getting MAC address"); \
RV_kernResult = RV_WMMHMOOBUQFF_013600AC(MACH_PORT_NULL, &RV_master_port); \
if (RV_kernResult != KERN_SUCCESS) { \
RV_CFRelease_02410115(RV_matching_dict); \
RV_CFRelease_02410115(RV_str2); \
RV_CFRelease_02410115(RV_matching_dict); \
goto RV_GetGUID048_RV_bail; \
} \
char RV_str1_[600]; \
RV_ObfuscationFunction00A((RV_Strings[362]), RV_str1_, 179, 16); \
RV_str1 = RV_str1_; \
RV_matching_dict = RV_KOAYLIMVVISI_01C500AA(RV_master_port, 0, RV_str1); \
if (!RV_matching_dict) { \
RV_CFRelease_02410115(RV_str2); \
RV_CFRelease_02410115(RV_matching_dict); \
RV_CFRelease_02410115(RV_str2); \
goto RV_GetGUID048_RV_bail; \
} \
RV_kernResult = RV_VTXCSSATBWHZ_01C50014(RV_master_port, RV_matching_dict, &RV_iterator); \
if (RV_kernResult != KERN_SUCCESS) { \
RV_CFRelease_02410115(RV_str2); \
RV_CFRelease_02410115(RV_matching_dict); \
RV_CFRelease_02410115(RV_str2); \
goto RV_GetGUID048_RV_bail; \
} \
while((RV_service = RV_VQVXYNIGLORS_005200E5(RV_iterator)) != 0) { \
RV_kernResult = RV_XGBSZTSUAXCV_01C500EB(RV_service, kIOServicePlane, &RV_parent_service); \
if (RV_kernResult == KERN_SUCCESS) { \
if (RV_ctx->guid_data) RV_CFRelease_02410115(RV_ctx->guid_data); \
RV_ctx->guid_data = (CFDataRef) RV_CYBMMHWQOVIS_01C50155(RV_parent_service, RV_str2, NULL, 0); \
RV_IOObjectRelease_00520048(RV_parent_service); \
} \
RV_IOObjectRelease_00520048(RV_iterator); \
RV_IOObjectRelease_00520048(RV_service); \
} \
RV_WMMHMOOBUQFF -= 69; RV_WMMHMOOBUQFF *= 3; RV_WMMHMOOBUQFF += 2;  \
RV_KTRJFJGPPLRX -= 98; RV_KTRJFJGPPLRX *= 4; RV_KTRJFJGPPLRX += 3;  \
RV_QUIXUTRFSICK -= 156; RV_QUIXUTRFSICK *= 3; RV_QUIXUTRFSICK += 2;  \
RV_VTXCSSATBWHZ -= 6; RV_VTXCSSATBWHZ *= 6; RV_VTXCSSATBWHZ += 4;  \
RV_KOAYLIMVVISI -= 98; RV_KOAYLIMVVISI *= 3; RV_KOAYLIMVVISI += 2;  \
RV_CYBMMHWQOVIS -= 196; RV_CYBMMHWQOVIS *= 3; RV_CYBMMHWQOVIS += 2;  \
RV_XGBSZTSUAXCV += 200; RV_XGBSZTSUAXCV /= 3;  \
RV_VQVXYNIGLORS -= 80; RV_VQVXYNIGLORS *= 4; RV_VQVXYNIGLORS += 3;  \
RV_GetGUID048_RV_bail: \
RV_CFRelease_02410115(RV_str2); \
}
#endif
    
    
    // CodeBlock GetRootCA
#if MAC_OS_X_VERSION_MIN_REQUIRED > MAC_OS_X_VERSION_10_6
#ifdef DEBUG
    inline static void RV_GetRootCA050(RV_CheckingContext *RV_ctx) {
        OSStatus RV_status;
        SecKeychainRef RV_keychain = NULL;
        CFTypeRef RV_searchList = NULL;
        CFDictionaryRef RV_searchDict = NULL;
        char *RV_str1;
        CFTypeRef RV_str2 = NULL;
        CFIndex RV_idx;
        CFTypeRef RV_results = NULL;
        SecCertificateRef RV_certificate = NULL;
        volatile CFIndex RV_count1 = 1; RV_count1 /= 1;
        volatile CFIndex RV_count2 = 4; RV_count2 -= 3; RV_count2 *= 3; RV_count2 += 2;
        const void *RV_searchKeys[5];
        const void *RV_searchValues[5];
        __RV_RECEIPT_LOG("RV - Loading Apple Root CA");
        char RV_str1_[600];
        RV_ObfuscationFunction00B((RV_Strings[594]), RV_str1_, 72, 66);
        RV_str1 = RV_str1_;
        RV_status = RV_CYBMMHWQOVIS_00B201B5(RV_str1, &RV_keychain);
        if (RV_status != errSecSuccess) {
            __RV_RECEIPT_LOG("RV - Doing nothing...");
            RV_longjmp_004D00BE(RV_JumpBuf, 1);
            // Dead code
            // TODO
            goto RV_GetRootCA050_RV_bail;
        }
        // Create a search list within the system Keychain
        RV_searchList = CFArrayCreate(kCFAllocatorDefault, (const void **)&RV_keychain, RV_count1, RV_kCFTypeArrayCallBacks_02410161);
        // Create the criteria dictionary to find the Apple Root CA certificate
        RV_str2 = RV_ObfuscationFunction00ACF((RV_Strings[67]), 66, 16);
        RV_searchKeys[0] = *RV_kSecClass_00B20037;
        RV_searchValues[0] = *RV_kSecClassCertificate_00B700A8;
        RV_searchKeys[1] = *RV_kSecMatchSearchList_016800CE;
        RV_searchValues[1] = RV_searchList;
        RV_searchKeys[2] = *RV_kSecMatchSubjectContains_00B20018;
        RV_searchValues[2] = RV_str2;
        RV_searchKeys[3] = *RV_kSecMatchLimit_00B2009B;
        RV_searchValues[3] = *RV_kSecMatchLimitAll_00B20071;
        RV_searchKeys[4] = *RV_kSecReturnRef_00B20072;
        RV_searchValues[4] = kCFBooleanTrue;
        RV_searchDict = RV_WMMHMOOBUQFF_00780137(kCFAllocatorDefault, RV_count2, RV_kCFTypeDictionaryKeyCallBacks_01B6008F, RV_kCFTypeDictionaryValueCallBacks_01B6005B);
        while(RV_count2-- > 0) {
            RV_VTXCSSATBWHZ_02410058((CFMutableDictionaryRef) RV_searchDict, RV_searchKeys[RV_count2], RV_searchValues[RV_count2]);
        }
        // Perform the actual search
        RV_status = RV_SecItemCopyMatching_00B700DF(RV_searchDict, &RV_results);
        if (RV_status != errSecSuccess) {
            __RV_RECEIPT_LOG("RV - Doing nothing...");
            RV_longjmp_004D00BE(RV_JumpBuf, 1);
            // Dead code
            // TODO
            goto RV_GetRootCA050_RV_bail;
        }
        // Iterate over the results and copy the certificate data
        for(RV_idx = 0; RV_idx < RV_XGBSZTSUAXCV_00780091((CFArrayRef) RV_results); RV_idx++) {
            RV_certificate = (SecCertificateRef) RV_QUIXUTRFSICK_0078018E((CFArrayRef) RV_results, RV_idx);
            if (RV_ctx->ca_data) RV_CFRelease_01B6006D(RV_ctx->ca_data);
            RV_ctx->ca_data = RV_SecCertificateCopyData_016800C4(RV_certificate);
        }
        // Global variables computation
        // From 398 to 260
        RV_QUIXUTRFSICK += 382; RV_QUIXUTRFSICK /= 3;
        // From 218 to 404
        RV_KOAYLIMVVISI -= 84; RV_KOAYLIMVVISI *= 3; RV_KOAYLIMVVISI += 2;
        // From 145 to 536
        RV_XGBSZTSUAXCV -= 38; RV_XGBSZTSUAXCV *= 5; RV_XGBSZTSUAXCV += 1;
    RV_GetRootCA050_RV_bail:
        if (RV_str2) RV_CFRelease_01B6006D(RV_str2);
        if (RV_results) RV_CFRelease_01B6006D(RV_results);
        if (RV_searchDict) RV_CFRelease_01B6006D(RV_searchDict);
        if (RV_searchList) RV_CFRelease_01B6006D(RV_searchList);
        if (RV_keychain) RV_CFRelease_01B6006D(RV_keychain);
    }
#else
#define RV_GetRootCA050(RV_ctx) { \
OSStatus RV_status; \
SecKeychainRef RV_keychain = NULL; \
CFTypeRef RV_searchList = NULL; \
CFDictionaryRef RV_searchDict = NULL; \
char *RV_str1; \
CFTypeRef RV_str2 = NULL; \
CFIndex RV_idx; \
CFTypeRef RV_results = NULL; \
SecCertificateRef RV_certificate = NULL; \
volatile CFIndex RV_count1 = 1; RV_count1 /= 1;  \
volatile CFIndex RV_count2 = 4; RV_count2 -= 3; RV_count2 *= 3; RV_count2 += 2;  \
const void *RV_searchKeys[5]; \
const void *RV_searchValues[5]; \
__RV_RECEIPT_LOG("RV - Loading Apple Root CA"); \
char RV_str1_[600]; \
RV_ObfuscationFunction00B((RV_Strings[594]), RV_str1_, 72, 66); \
RV_str1 = RV_str1_; \
RV_status = RV_CYBMMHWQOVIS_00B201B5(RV_str1, &RV_keychain); \
if (RV_status != errSecSuccess) { \
__RV_RECEIPT_LOG("RV - Doing nothing..."); \
RV_longjmp_004D00BE(RV_JumpBuf, 1); \
goto RV_GetRootCA050_RV_bail; \
} \
RV_searchList = CFArrayCreate(kCFAllocatorDefault, (const void **)&RV_keychain, RV_count1, RV_kCFTypeArrayCallBacks_02410161); \
RV_str2 = RV_ObfuscationFunction00ACF((RV_Strings[67]), 66, 16); \
RV_searchKeys[0] = *RV_kSecClass_00B20037; \
RV_searchValues[0] = *RV_kSecClassCertificate_00B700A8; \
RV_searchKeys[1] = *RV_kSecMatchSearchList_016800CE; \
RV_searchValues[1] = RV_searchList; \
RV_searchKeys[2] = *RV_kSecMatchSubjectContains_00B20018; \
RV_searchValues[2] = RV_str2; \
RV_searchKeys[3] = *RV_kSecMatchLimit_00B2009B; \
RV_searchValues[3] = *RV_kSecMatchLimitAll_00B20071; \
RV_searchKeys[4] = *RV_kSecReturnRef_00B20072; \
RV_searchValues[4] = kCFBooleanTrue; \
RV_searchDict = RV_WMMHMOOBUQFF_00780137(kCFAllocatorDefault, RV_count2, RV_kCFTypeDictionaryKeyCallBacks_01B6008F, RV_kCFTypeDictionaryValueCallBacks_01B6005B); \
while(RV_count2-- > 0) { \
RV_VTXCSSATBWHZ_02410058((CFMutableDictionaryRef) RV_searchDict, RV_searchKeys[RV_count2], RV_searchValues[RV_count2]); \
} \
RV_status = RV_SecItemCopyMatching_00B700DF(RV_searchDict, &RV_results); \
if (RV_status != errSecSuccess) { \
__RV_RECEIPT_LOG("RV - Doing nothing..."); \
RV_longjmp_004D00BE(RV_JumpBuf, 1); \
goto RV_GetRootCA050_RV_bail; \
} \
for(RV_idx = 0; RV_idx < RV_XGBSZTSUAXCV_00780091((CFArrayRef) RV_results); RV_idx++) { \
RV_certificate = (SecCertificateRef) RV_QUIXUTRFSICK_0078018E((CFArrayRef) RV_results, RV_idx); \
if (RV_ctx->ca_data) RV_CFRelease_01B6006D(RV_ctx->ca_data); \
RV_ctx->ca_data = RV_SecCertificateCopyData_016800C4(RV_certificate); \
} \
RV_QUIXUTRFSICK += 382; RV_QUIXUTRFSICK /= 3;  \
RV_KOAYLIMVVISI -= 84; RV_KOAYLIMVVISI *= 3; RV_KOAYLIMVVISI += 2;  \
RV_XGBSZTSUAXCV -= 38; RV_XGBSZTSUAXCV *= 5; RV_XGBSZTSUAXCV += 1;  \
RV_GetRootCA050_RV_bail: \
if (RV_str2) RV_CFRelease_01B6006D(RV_str2); \
if (RV_results) RV_CFRelease_01B6006D(RV_results); \
if (RV_searchDict) RV_CFRelease_01B6006D(RV_searchDict); \
if (RV_searchList) RV_CFRelease_01B6006D(RV_searchList); \
if (RV_keychain) RV_CFRelease_01B6006D(RV_keychain); \
}
#endif
#endif
    
#if MAC_OS_X_VERSION_MIN_REQUIRED == MAC_OS_X_VERSION_10_6
#ifdef DEBUG
    inline static void RV_GetRootCA050(RV_CheckingContext *RV_ctx) {
        OSStatus RV_status;
        SecKeychainRef RV_keychain = NULL;
        CFTypeRef RV_searchList = NULL;
        char *RV_str1, *RV_str2;
        SecKeychainAttributeList RV_attributeList;
        SecKeychainAttribute RV_attribute;
        SecKeychainSearchRef RV_searchRef = NULL;
        SecKeychainItemRef RV_itemRef = nil;
        volatile CFIndex RV_count1 = 1; RV_count1 /= 1;
        volatile CFIndex RV_count2 = 3; RV_count2 -= 2; RV_count2 *= 3; RV_count2 += 2;
        volatile CFIndex RV_count3 = 4; RV_count3 -= 2; RV_count3 *= 5; RV_count3 += 3;
        __RV_RECEIPT_LOG("RV - Loading Apple Root CA");
        char RV_str1_[600];
        RV_ObfuscationFunction00B((RV_Strings[511]), RV_str1_, 41, 66);
        RV_str1 = RV_str1_;
        RV_status = RV_CYBMMHWQOVIS_00B201B5(RV_str1, &RV_keychain);
        if (RV_status != errSecSuccess) {
            __RV_RECEIPT_LOG("RV - Doing nothing...");
            RV_longjmp_004D0172(RV_JumpBuf, 1);
            // Dead code
            goto RV_GetRootCA050_RV_bail;
        }
        // Create a search list within the system Keychain
        RV_searchList = CFArrayCreate(kCFAllocatorDefault, (const void **)&RV_keychain, RV_count1, RV_kCFTypeArrayCallBacks_0241013C);
        // Create the criteria dictionary to find the Apple Root CA certificate
        char RV_str2_[600];
        RV_ObfuscationFunction00B((RV_Strings[484]), RV_str2_, 71, 16);
        RV_str2 = RV_str2_;
        RV_attributeList.count = 1;
        RV_attributeList.attr  = &RV_attribute;
        RV_attribute.tag = kSecLabelItemAttr;
        RV_attribute.data = RV_str2;
        RV_attribute.length = (UInt32) RV_count3;
        RV_status = RV_KTRJFJGPPLRX_00B70253(RV_searchList, kSecCertificateItemClass, &RV_attributeList, &RV_searchRef);
        if (RV_status != errSecSuccess) {
            __RV_RECEIPT_LOG("RV - Doing nothing...");
            RV_longjmp_004D0172(RV_JumpBuf, 1);
            // Dead code
            goto RV_GetRootCA050_RV_bail;
        }
        // Iterate over the results and copy the certificate data
        while(RV_KOAYLIMVVISI_016800DA(RV_searchRef, &RV_itemRef) == noErr) {
            if (RV_ctx->ca_data) RV_CFRelease_00780213(RV_ctx->ca_data);
            RV_ctx->ca_data = RV_SecCertificateCopyData_01680122((SecCertificateRef) RV_itemRef);
        }
        // Global variables computation
        // From 398 to 260
        RV_QUIXUTRFSICK += 382; RV_QUIXUTRFSICK /= 3;
        // From 218 to 404
        RV_KOAYLIMVVISI -= 84; RV_KOAYLIMVVISI *= 3; RV_KOAYLIMVVISI += 2;
        // From 145 to 536
        RV_XGBSZTSUAXCV -= 38; RV_XGBSZTSUAXCV *= 5; RV_XGBSZTSUAXCV += 1;
    RV_GetRootCA050_RV_bail:
        if (RV_itemRef) RV_CFRelease_00780213(RV_itemRef);
        if (RV_searchRef) RV_CFRelease_00780213(RV_searchRef);
        if (RV_searchList) RV_CFRelease_00780213(RV_searchList);
        if (RV_keychain) RV_CFRelease_00780213(RV_keychain);
    }
#else
#define RV_GetRootCA050(RV_ctx) { \
OSStatus RV_status; \
SecKeychainRef RV_keychain = NULL; \
CFTypeRef RV_searchList = NULL; \
char *RV_str1, *RV_str2; \
SecKeychainAttributeList RV_attributeList; \
SecKeychainAttribute RV_attribute; \
SecKeychainSearchRef RV_searchRef = NULL; \
SecKeychainItemRef RV_itemRef = nil; \
volatile CFIndex RV_count1 = 1; RV_count1 /= 1;  \
volatile CFIndex RV_count2 = 3; RV_count2 -= 2; RV_count2 *= 3; RV_count2 += 2;  \
volatile CFIndex RV_count3 = 4; RV_count3 -= 2; RV_count3 *= 5; RV_count3 += 3;  \
__RV_RECEIPT_LOG("RV - Loading Apple Root CA"); \
char RV_str1_[600]; \
RV_ObfuscationFunction00B((RV_Strings[511]), RV_str1_, 41, 66); \
RV_str1 = RV_str1_; \
RV_status = RV_CYBMMHWQOVIS_00B201B5(RV_str1, &RV_keychain); \
if (RV_status != errSecSuccess) { \
__RV_RECEIPT_LOG("RV - Doing nothing..."); \
RV_longjmp_004D0172(RV_JumpBuf, 1); \
goto RV_GetRootCA050_RV_bail; \
} \
RV_searchList = CFArrayCreate(kCFAllocatorDefault, (const void **)&RV_keychain, RV_count1, RV_kCFTypeArrayCallBacks_0241013C); \
char RV_str2_[600]; \
RV_ObfuscationFunction00B((RV_Strings[484]), RV_str2_, 71, 16); \
RV_str2 = RV_str2_; \
RV_attributeList.count = 1; \
RV_attributeList.attr  = &RV_attribute; \
RV_attribute.tag = kSecLabelItemAttr; \
RV_attribute.data = RV_str2; \
RV_attribute.length = (UInt32) RV_count3; \
RV_status = RV_KTRJFJGPPLRX_00B70253(RV_searchList, kSecCertificateItemClass, &RV_attributeList, &RV_searchRef); \
if (RV_status != errSecSuccess) { \
__RV_RECEIPT_LOG("RV - Doing nothing..."); \
RV_longjmp_004D0172(RV_JumpBuf, 1); \
goto RV_GetRootCA050_RV_bail; \
} \
while(RV_KOAYLIMVVISI_016800DA(RV_searchRef, &RV_itemRef) == noErr) { \
if (RV_ctx->ca_data) RV_CFRelease_00780213(RV_ctx->ca_data); \
RV_ctx->ca_data = RV_SecCertificateCopyData_01680122((SecCertificateRef) RV_itemRef); \
} \
RV_QUIXUTRFSICK += 382; RV_QUIXUTRFSICK /= 3;  \
RV_KOAYLIMVVISI -= 84; RV_KOAYLIMVVISI *= 3; RV_KOAYLIMVVISI += 2;  \
RV_XGBSZTSUAXCV -= 38; RV_XGBSZTSUAXCV *= 5; RV_XGBSZTSUAXCV += 1;  \
RV_GetRootCA050_RV_bail: \
if (RV_itemRef) RV_CFRelease_00780213(RV_itemRef); \
if (RV_searchRef) RV_CFRelease_00780213(RV_searchRef); \
if (RV_searchList) RV_CFRelease_00780213(RV_searchList); \
if (RV_keychain) RV_CFRelease_00780213(RV_keychain); \
}
#endif
#endif
    
    
    // CodeBlock CheckBundleIdentifier
#ifdef DEBUG
    inline static void RV_CheckBundleIdentifier05B(RV_CheckingContext *RV_ctx) {
        CFStringRef RV_str1 = RV_ObfuscationFunction00ACF((RV_Strings[347]), 12, 16);
        __RV_RECEIPT_LOG("RV - Checking bundle identifier");
        CFStringRef RV_str2 = RV_QUIXUTRFSICK_01B60104((CFBundleRef) RV_ctx->main_bundle);
        if (RV_XGBSZTSUAXCV_00780218(RV_str1, RV_str2, 0) != kCFCompareEqualTo) {
            __RV_RECEIPT_LOG("RV - Bundle identifier mismatch (expecting '%s' but actual value is '%s')", CFStringGetCStringPtr(RV_str1, CFStringGetSystemEncoding()), CFStringGetCStringPtr(RV_str2, CFStringGetSystemEncoding()));
            __RV_RECEIPT_LOG("RV - Doing nothing...");
            RV_longjmp_01470190(RV_JumpBuf, 1);
            // Dead code
            RV_CFRelease_01B60213(RV_str2);
            RV_CFRelease_01B60213(RV_str2);
        }
        // Global variables computation
        // From 311 to 536
        RV_WMMHMOOBUQFF -= 133; RV_WMMHMOOBUQFF *= 3; RV_WMMHMOOBUQFF += 2;
        // Set to 404
        RV_XGBSZTSUAXCV = 404;
        RV_CFRelease_01B60213(RV_str1);
    }
#else
#define RV_CheckBundleIdentifier05B(RV_ctx) { \
CFStringRef RV_str1 = RV_ObfuscationFunction00ACF((RV_Strings[347]), 12, 16); \
__RV_RECEIPT_LOG("RV - Checking bundle identifier"); \
CFStringRef RV_str2 = RV_QUIXUTRFSICK_01B60104((CFBundleRef) RV_ctx->main_bundle); \
if (RV_XGBSZTSUAXCV_00780218(RV_str1, RV_str2, 0) != kCFCompareEqualTo) { \
__RV_RECEIPT_LOG("RV - Bundle identifier mismatch (expecting '%s' but actual value is '%s')", CFStringGetCStringPtr(RV_str1, CFStringGetSystemEncoding()), CFStringGetCStringPtr(RV_str2, CFStringGetSystemEncoding())); \
__RV_RECEIPT_LOG("RV - Doing nothing..."); \
RV_longjmp_01470190(RV_JumpBuf, 1); \
RV_CFRelease_01B60213(RV_str2); \
RV_CFRelease_01B60213(RV_str2); \
} \
RV_WMMHMOOBUQFF -= 133; RV_WMMHMOOBUQFF *= 3; RV_WMMHMOOBUQFF += 2;  \
RV_XGBSZTSUAXCV = 404; \
RV_CFRelease_01B60213(RV_str1); \
}
#endif
    
    
    // CodeBlock CheckBundleVersion
#ifdef DEBUG
    inline static void RV_CheckBundleVersion05F(RV_CheckingContext *RV_ctx) {
        __RV_RECEIPT_LOG("RV - Checking bundle version");
        CFStringRef RV_str1 = RV_ObfuscationFunction004CF((RV_Strings[580]), 89, 16);
        CFStringRef RV_str2 = RV_ObfuscationFunction008CF((RV_Strings[410]), 110, 35);
        CFStringRef RV_str3 = (CFStringRef) RV_XGBSZTSUAXCV_00780194((CFBundleRef) RV_ctx->main_bundle, RV_str2);
        if (RV_WMMHMOOBUQFF_02410218(RV_str1, RV_str3, 0) != kCFCompareEqualTo) {
            __RV_RECEIPT_LOG("RV - Bundle version mismatch (expecting '%s' but actual value is '%s')", CFStringGetCStringPtr(RV_str1, CFStringGetSystemEncoding()), CFStringGetCStringPtr(RV_str3, CFStringGetSystemEncoding()));
            __RV_RECEIPT_LOG("RV - Doing nothing...");
            RV_longjmp_01970172(RV_JumpBuf, 1);
            // Dead code
            RV_CFRelease_00780213(RV_str2);
            RV_CFRelease_00780213(RV_str1);
            RV_CFRelease_00780213(RV_str2);
        }
        // Global variables computation
        // From 536 to 385
        RV_WMMHMOOBUQFF += 234; RV_WMMHMOOBUQFF /= 2;
        // From 595 to 66
        RV_KTRJFJGPPLRX += 131; RV_KTRJFJGPPLRX /= 11;
        // From 260 to 449
        RV_QUIXUTRFSICK -= 111; RV_QUIXUTRFSICK *= 3; RV_QUIXUTRFSICK += 2;
        // From 88 to 124
        RV_VTXCSSATBWHZ -= 47; RV_VTXCSSATBWHZ *= 3; RV_VTXCSSATBWHZ += 1;
        // From 404 to 289
        RV_KOAYLIMVVISI += 174; RV_KOAYLIMVVISI /= 2;
        // From 437 to 175
        RV_CYBMMHWQOVIS += 263; RV_CYBMMHWQOVIS /= 4;
        // From 404 to 165
        RV_XGBSZTSUAXCV += 256; RV_XGBSZTSUAXCV /= 4;
        // From 599 to 589
        RV_VQVXYNIGLORS += 579; RV_VQVXYNIGLORS /= 2;
        RV_CFRelease_00780213(RV_str2);
        RV_CFRelease_00780213(RV_str1);
    }
#else
#define RV_CheckBundleVersion05F(RV_ctx) { \
__RV_RECEIPT_LOG("RV - Checking bundle version"); \
CFStringRef RV_str1 = RV_ObfuscationFunction004CF((RV_Strings[580]), 89, 16); \
CFStringRef RV_str2 = RV_ObfuscationFunction008CF((RV_Strings[410]), 110, 35); \
CFStringRef RV_str3 = (CFStringRef) RV_XGBSZTSUAXCV_00780194((CFBundleRef) RV_ctx->main_bundle, RV_str2); \
if (RV_WMMHMOOBUQFF_02410218(RV_str1, RV_str3, 0) != kCFCompareEqualTo) { \
__RV_RECEIPT_LOG("RV - Bundle version mismatch (expecting '%s' but actual value is '%s')", CFStringGetCStringPtr(RV_str1, CFStringGetSystemEncoding()), CFStringGetCStringPtr(RV_str3, CFStringGetSystemEncoding())); \
__RV_RECEIPT_LOG("RV - Doing nothing..."); \
RV_longjmp_01970172(RV_JumpBuf, 1); \
RV_CFRelease_00780213(RV_str2); \
RV_CFRelease_00780213(RV_str1); \
RV_CFRelease_00780213(RV_str2); \
} \
RV_WMMHMOOBUQFF += 234; RV_WMMHMOOBUQFF /= 2;  \
RV_KTRJFJGPPLRX += 131; RV_KTRJFJGPPLRX /= 11;  \
RV_QUIXUTRFSICK -= 111; RV_QUIXUTRFSICK *= 3; RV_QUIXUTRFSICK += 2;  \
RV_VTXCSSATBWHZ -= 47; RV_VTXCSSATBWHZ *= 3; RV_VTXCSSATBWHZ += 1;  \
RV_KOAYLIMVVISI += 174; RV_KOAYLIMVVISI /= 2;  \
RV_CYBMMHWQOVIS += 263; RV_CYBMMHWQOVIS /= 4;  \
RV_XGBSZTSUAXCV += 256; RV_XGBSZTSUAXCV /= 4;  \
RV_VQVXYNIGLORS += 579; RV_VQVXYNIGLORS /= 2;  \
RV_CFRelease_00780213(RV_str2); \
RV_CFRelease_00780213(RV_str1); \
}
#endif
    
    
    // CodeBlock GetReceiptInformation
#ifdef DEBUG
    inline static void RV_GetReceiptInformation062(RV_CheckingContext *RV_ctx) {
        RV_ParsingContext RV_receipt_context;
        RV_ParsingContext *RV_current_context;
        CFNumberRef RV_key;
        RV_ReceiptAttributeType RV_key1, RV_key2;
        CFTypeRef RV_value1, RV_value2;
        int RV_type;
        int RV_xclass;
        long RV_length;
        CFDateFormatterRef RV_formatter = NULL;
        CFTimeZoneRef RV_tz = NULL;
        BIO *RV_bio_p7;
        PKCS7 *RV_pkcs7;
        ASN1_OCTET_STRING *RV_contentRV_content;
        ASN1_INTEGER *RV_value;
        const unsigned char *RV_seq_end;
        long RV_attr_type;
        long RV_attr_version;
        int RV_str_type;
        long RV_str_length;
        const unsigned char *RV_str_ptr;
        RV_ParsingContext RV_inapp_context;
        long RV_number;
        int RV_num_type;
        long RV_num_length;
        const unsigned char *RV_num_ptr;
        __RV_RECEIPT_LOG("RV - Parsing receipt");
        // Put the receipt data into a memory buffer
        RV_bio_p7 = RV_BIO_new_0220003B(RV_BIO_s_mem_0220017B());
        RV_BIO_write_00CD01FC(RV_bio_p7, (void *) RV_CFDataGetBytePtr_00780007((CFDataRef) RV_ctx->receipt_data), (int) RV_CYBMMHWQOVIS_024100AF((CFDataRef) RV_ctx->receipt_data));
        RV_pkcs7 = RV_d2i_PKCS7_bio_0017022E(RV_bio_p7, NULL);
        if (!RV_pkcs7) {
            __RV_RECEIPT_LOG("RV - Doing nothing...");
            RV_longjmp_004D0172(RV_JumpBuf, 1);
            // Dead code
            RV_ctx->receipt_data = NULL;
            goto RV_GetReceiptInformation062_RV_bail;
        }
        if (!PKCS7_type_is_signed(RV_pkcs7)) {
            __RV_RECEIPT_LOG("RV - Doing nothing...");
            RV_longjmp_004D0172(RV_JumpBuf, 1);
            // Dead code
            RV_ctx->receipt_data = NULL;
            goto RV_GetReceiptInformation062_RV_bail;
        }
        if (!PKCS7_type_is_data(RV_pkcs7->d.sign->contents)) {
            __RV_RECEIPT_LOG("RV - Doing nothing...");
            RV_longjmp_004D0172(RV_JumpBuf, 1);
            // Dead code
            RV_ctx->receipt_data = NULL;
            goto RV_GetReceiptInformation062_RV_bail;
        }
        // Create a formatter to parse ISO-3339 dates
        RV_formatter = RV_CFDateFormatterCreate_02410135(NULL, NULL, kCFDateFormatterNoStyle, kCFDateFormatterNoStyle);
        RV_value1 = RV_ObfuscationFunction007CF((RV_Strings[111]), 88, 33);
        RV_XGBSZTSUAXCV_024100A5(RV_formatter, (CFStringRef) RV_value1);
        RV_CFRelease_01B60213(RV_value1);
        RV_tz = RV_CFTimeZoneCreateWithTimeIntervalFromGMT_007801F4(NULL, 0.0);
        RV_VQVXYNIGLORS_01B6024D(RV_formatter, *RV_kCFDateFormatterTimeZone_007801F7, RV_tz);
        RV_CFRelease_01B60213(RV_tz);
        // Initial context
        RV_contentRV_content = RV_pkcs7->d.sign->contents->d.data;
        RV_receipt_context.ptr = RV_contentRV_content->data;
        RV_receipt_context.end = RV_receipt_context.ptr + RV_contentRV_content->length;
        RV_receipt_context.parent = NULL;
        RV_receipt_context.dictionary = NULL;
        RV_current_context = &RV_receipt_context;
        while(RV_current_context->ptr < RV_current_context->end) {
            if (!RV_current_context->dictionary) {
                // Create the target dictionary
                RV_current_context->dictionary = RV_CFDictionaryCreateMutable_01B60092(kCFAllocatorDefault, (CFIndex) 600, RV_kCFTypeDictionaryKeyCallBacks_01B6004F, RV_kCFTypeDictionaryValueCallBacks_0078023A);
                // Decode payload from ASN.1
                RV_ASN1_get_object_022000A2(&RV_current_context->ptr, &RV_length, &RV_type, &RV_xclass, RV_current_context->end - RV_current_context->ptr);
                if (RV_type != V_ASN1_SET) {
                    __RV_RECEIPT_LOG("RV - Doing nothing...");
                    RV_longjmp_004D0172(RV_JumpBuf, 1);
                    goto RV_GetReceiptInformation062_RV_bail;
                }
            }
            // Iterate over attributes
            while(RV_current_context->ptr < RV_current_context->end) {
                // Parse attribute sequence
                RV_ASN1_get_object_022000A2(&RV_current_context->ptr, &RV_length, &RV_type, &RV_xclass, RV_current_context->end - RV_current_context->ptr);
                if (RV_type != V_ASN1_SEQUENCE) {
                    __RV_RECEIPT_LOG("RV - Doing nothing...");
                    RV_longjmp_004D0172(RV_JumpBuf, 1);
                    goto RV_GetReceiptInformation062_RV_bail;
                }
                RV_seq_end = RV_current_context->ptr + RV_length;
                RV_attr_type = 0;
                RV_attr_version = 0;
                // Parse the attribute type
                RV_ASN1_get_object_022000A2(&RV_current_context->ptr, &RV_length, &RV_type, &RV_xclass, RV_current_context->end - RV_current_context->ptr);
                if (RV_type != V_ASN1_INTEGER) {
                    __RV_RECEIPT_LOG("RV - Doing nothing...");
                    RV_longjmp_004D0172(RV_JumpBuf, 1);
                    goto RV_GetReceiptInformation062_RV_bail;
                }
                RV_value = RV_c2i_ASN1_INTEGER_0017020E(NULL, &RV_current_context->ptr, RV_length);
                RV_attr_type = RV_ASN1_INTEGER_get_00CD0177(RV_value);
                RV_ASN1_INTEGER_free_00CD0184(RV_value);
                // Parse the attribute version
                RV_ASN1_get_object_022000A2(&RV_current_context->ptr, &RV_length, &RV_type, &RV_xclass, RV_current_context->end - RV_current_context->ptr);
                if (RV_type != V_ASN1_INTEGER) {
                    __RV_RECEIPT_LOG("RV - Doing nothing...");
                    RV_longjmp_004D0172(RV_JumpBuf, 1);
                    goto RV_GetReceiptInformation062_RV_bail;
                }
                RV_value = RV_c2i_ASN1_INTEGER_0017020E(NULL, &RV_current_context->ptr, RV_length);
                RV_attr_version = RV_ASN1_INTEGER_get_00CD0177(RV_value);
                RV_ASN1_INTEGER_free_00CD0184(RV_value);
                // Check the attribute value
                RV_ASN1_get_object_022000A2(&RV_current_context->ptr, &RV_length, &RV_type, &RV_xclass, RV_current_context->end - RV_current_context->ptr);
                if (RV_type != V_ASN1_OCTET_STRING) {
                    __RV_RECEIPT_LOG("RV - Doing nothing...");
                    RV_longjmp_004D0172(RV_JumpBuf, 1);
                    goto RV_GetReceiptInformation062_RV_bail;
                }
                RV_key1 = (RV_ReceiptAttributeType) (RV_StoreNone + (RV_attr_type << 3));
                RV_key2 = (RV_ReceiptAttributeType) (RV_StoreNone + (RV_attr_type << 3) + 1);
                RV_value1 = NULL;
                RV_value2 = NULL;
                __RV_RECEIPT_LOG("RV - Parsing receipt - Found attribute %s%ld", RV_current_context->parent ? "--- " : "- ", RV_attr_type);
                switch (RV_attr_type) {
                        // Attributes encoded as ASN.1 UTF8STRING
                    case RV_ReceiptAttributeTypeBundleId:
                    case RV_ReceiptAttributeTypeBundleVersion:
                    case RV_ReceiptAttributeTypeOriginalApplicationVersion:
                    case RV_InAppAttributeTypeProductIdentifer:
                    case RV_InAppAttributeTypeTransactionIdentifer:
                    case RV_InAppAttributeTypeOriginalTransactionIdentifer:
                    {
                        RV_str_type = 0;
                        RV_str_length = 0;
                        RV_str_ptr = RV_current_context->ptr;
                        RV_ASN1_get_object_022000A2(&RV_str_ptr, &RV_str_length, &RV_str_type, &RV_xclass, RV_seq_end - RV_str_ptr);
                        if (RV_str_type != V_ASN1_UTF8STRING) {
                            __RV_RECEIPT_LOG("RV - Doing nothing...");
                            RV_longjmp_004D0172(RV_JumpBuf, 1);
                            goto RV_GetReceiptInformation062_RV_bail;
                        }
                        RV_value1 = ((__RV_CFStringCreateWithBytes) RV_Pointers[187])(NULL, (const UInt8 *) RV_str_ptr, (CFIndex) RV_str_length, kCFStringEncodingUTF8, false);
                        RV_value2 = RV_KTRJFJGPPLRX_01B60042(NULL, (const UInt8 *) RV_current_context->ptr, (CFIndex) RV_length);
                        __RV_RECEIPT_LOG("RV - Parsing receipt -       attribute %s%ld => %s", RV_current_context->parent ? "--- " : "- ", RV_attr_type, CFStringGetCStringPtr((CFStringRef) RV_value1, CFStringGetSystemEncoding()));
                        break;
                    }
                        // Attributes encoded as ASN.1 IA5STRING
                    case RV_ReceiptAttributeTypeExpirationDate:
                    case RV_InAppAttributeTypeCancellationDate:
                    case RV_InAppAttributeTypeOriginalPurchaseDate:
                    case RV_InAppAttributeTypePurchaseDate:
                    case RV_InAppAttributeTypeSubscriptionExpirationDate:
                    {
                        RV_str_type = 0;
                        RV_str_length = 0;
                        RV_str_ptr = RV_current_context->ptr;
                        RV_ASN1_get_object_022000A2(&RV_str_ptr, &RV_str_length, &RV_str_type, &RV_xclass, RV_seq_end - RV_str_ptr);
                        if (RV_str_type != V_ASN1_IA5STRING) {
                            __RV_RECEIPT_LOG("RV - Doing nothing...");
                            RV_longjmp_004D0172(RV_JumpBuf, 1);
                            goto RV_GetReceiptInformation062_RV_bail;
                        }
                        RV_value2 = ((__RV_CFStringCreateWithBytes) RV_Pointers[187])(NULL, (const UInt8 *) RV_str_ptr, (CFIndex) RV_str_length, kCFStringEncodingASCII, false);
                        RV_value1 = RV_VTXCSSATBWHZ_0078007C(NULL, RV_formatter, (CFStringRef) RV_value2, NULL);
                        __RV_RECEIPT_LOG("RV - Parsing receipt -       attribute %s%ld => %s", RV_current_context->parent ? "--- " : "- ", RV_attr_type, CFStringGetCStringPtr((CFStringRef) RV_value2, CFStringGetSystemEncoding()));
                        break;
                    }
                        // Attributes encoded as ASN.1 INTEGER
                    case RV_InAppAttributeTypeQuantity:
                    case RV_InAppAttributeTypeWebOrderLineItemId:
                    {
                        RV_num_type = 0;
                        RV_num_length = 0;
                        RV_num_ptr = RV_current_context->ptr;
                        RV_ASN1_get_object_022000A2(&RV_num_ptr, &RV_num_length, &RV_num_type, &RV_xclass, RV_seq_end - RV_num_ptr);
                        if (RV_num_type != V_ASN1_INTEGER) {
                            __RV_RECEIPT_LOG("RV - Doing nothing...");
                            RV_longjmp_004D0172(RV_JumpBuf, 1);
                            goto RV_GetReceiptInformation062_RV_bail;
                        }
                        RV_value = RV_c2i_ASN1_INTEGER_0017020E(NULL, &RV_num_ptr, RV_num_length);
                        RV_number = RV_ASN1_INTEGER_get_00CD0177(RV_value);
                        RV_ASN1_INTEGER_free_00CD0184(RV_value);
                        RV_value1 = RV_CFNumberCreate_00780097(NULL, kCFNumberLongType, &RV_number);
                        __RV_RECEIPT_LOG("RV - Parsing receipt -       attribute %s%ld => %ld", RV_current_context->parent ? "--- " : "- ", RV_attr_type, RV_number);
                        break;
                    }
                        // Attributes encoded as ASN.1 OCTETSTRING
                    case RV_ReceiptAttributeTypeOpaqueValue:
                    case RV_ReceiptAttributeTypeHash:
                    {
                        RV_value1 = RV_KTRJFJGPPLRX_01B60042(NULL, (const UInt8 *) RV_current_context->ptr, (CFIndex) RV_length);
                        __RV_RECEIPT_LOG("RV - Parsing receipt -       attribute %s%ld => [%lu bytes]", RV_current_context->parent ? "--- " : "- ", RV_attr_type, RV_CYBMMHWQOVIS_024100AF((CFDataRef) RV_value1));
                        break;
                    }
                        // Attributes encoded as ASN.1 SET
                    case RV_ReceiptAttributeTypeInAppPurchase:
                    {
                        // Push a child context to parse InApp purchase
                        RV_inapp_context.ptr = RV_current_context->ptr;
                        RV_inapp_context.end = RV_inapp_context.ptr + RV_length;
                        RV_inapp_context.dictionary = NULL;
                        RV_inapp_context.parent = RV_current_context;
                        RV_current_context = &RV_inapp_context;
                        goto RV_GetReceiptInformation062_RV_key;
                    }
                    default:
                        break;
                }
                if (RV_value1) {
                    RV_key = RV_CFNumberCreate_00780097(NULL, kCFNumberIntType, &RV_key1);
                    RV_CFDictionaryAddValue_024101CD((CFMutableDictionaryRef) RV_current_context->dictionary, RV_key, RV_value1);
                    RV_CFRelease_01B60213(RV_key);
                    RV_CFRelease_01B60213(RV_value1);
                }
                if (RV_value2) {
                    RV_key = RV_CFNumberCreate_00780097(NULL, kCFNumberIntType, &RV_key2);
                    RV_CFDictionaryAddValue_024101CD((CFMutableDictionaryRef) RV_current_context->dictionary, RV_key, RV_value2);
                    RV_CFRelease_01B60213(RV_key);
                    RV_CFRelease_01B60213(RV_value2);
                }
                // Move past the attribute
                RV_current_context->ptr += RV_length;
            }
        RV_GetReceiptInformation062_RV_key:
            // If the current context is a new one, continue parsing
            if (!RV_current_context->dictionary) {
                continue;
            }
            // If the current context has a parent, pop it.
            if (RV_current_context->parent) {
                __RV_RECEIPT_LOG("RV - Parsing receipt - Add an InApp purchase");
                RV_key1 = RV_StoreReceiptAttributeTypeInAppPurchase;
                RV_key = RV_CFNumberCreate_00780097(NULL, kCFNumberIntType, &RV_key1);
                RV_value1 = RV_QUIXUTRFSICK_024101C1((CFDictionaryRef) RV_current_context->parent->dictionary, RV_key);
                if (!RV_value1) {
                    RV_value1 = RV_CFArrayCreateMutable_01B600FD(kCFAllocatorDefault, 0, RV_kCFTypeArrayCallBacks_0241013C);
                    RV_CFDictionarySetValue_01B601FD((CFMutableDictionaryRef) RV_current_context->parent->dictionary, RV_key, RV_value1);
                    RV_CFRelease_01B60213(RV_value1);
                }
                RV_WMMHMOOBUQFF_00780181((CFMutableArrayRef) RV_value1, RV_current_context->dictionary);
                RV_CFRelease_01B60213(RV_current_context->dictionary);
                RV_CFRelease_01B60213(RV_key);
                // Switch to parent context
                RV_current_context = RV_current_context->parent;
                // Move past the child context
                RV_current_context->ptr = RV_inapp_context.end;
            }
        }
        if (RV_ctx->receipt_dict) RV_CFRelease_01B60213(RV_ctx->receipt_dict);
        RV_ctx->receipt_dict = RV_receipt_context.dictionary;
        // Global variables computation
        // From 449 to 175
        RV_QUIXUTRFSICK += 251; RV_QUIXUTRFSICK /= 4;
        // From 289 to 540
        RV_KOAYLIMVVISI -= 109; RV_KOAYLIMVVISI *= 3;
    RV_GetReceiptInformation062_RV_bail:
        if (RV_pkcs7) RV_PKCS7_free_00170243(RV_pkcs7);
        if (RV_bio_p7) RV_BIO_free_0017004A(RV_bio_p7);
        if (RV_formatter) RV_CFRelease_01B60213(RV_formatter);
    }
#else
#define RV_GetReceiptInformation062(RV_ctx) { \
RV_ParsingContext RV_receipt_context; \
RV_ParsingContext *RV_current_context; \
CFNumberRef RV_key; \
RV_ReceiptAttributeType RV_key1, RV_key2; \
CFTypeRef RV_value1, RV_value2; \
int RV_type; \
int RV_xclass; \
long RV_length; \
CFDateFormatterRef RV_formatter = NULL; \
CFTimeZoneRef RV_tz = NULL; \
BIO *RV_bio_p7; \
PKCS7 *RV_pkcs7; \
ASN1_OCTET_STRING *RV_contentRV_content; \
ASN1_INTEGER *RV_value; \
const unsigned char *RV_seq_end; \
long RV_attr_type; \
long RV_attr_version; \
int RV_str_type; \
long RV_str_length; \
const unsigned char *RV_str_ptr; \
RV_ParsingContext RV_inapp_context; \
long RV_number; \
int RV_num_type; \
long RV_num_length; \
const unsigned char *RV_num_ptr; \
__RV_RECEIPT_LOG("RV - Parsing receipt"); \
RV_bio_p7 = RV_BIO_new_0220003B(RV_BIO_s_mem_0220017B()); \
RV_BIO_write_00CD01FC(RV_bio_p7, (void *) RV_CFDataGetBytePtr_00780007((CFDataRef) RV_ctx->receipt_data), (int) RV_CYBMMHWQOVIS_024100AF((CFDataRef) RV_ctx->receipt_data)); \
RV_pkcs7 = RV_d2i_PKCS7_bio_0017022E(RV_bio_p7, NULL); \
if (!RV_pkcs7) { \
__RV_RECEIPT_LOG("RV - Doing nothing..."); \
RV_longjmp_004D0172(RV_JumpBuf, 1); \
RV_ctx->receipt_data = NULL; \
goto RV_GetReceiptInformation062_RV_bail; \
} \
if (!PKCS7_type_is_signed(RV_pkcs7)) { \
__RV_RECEIPT_LOG("RV - Doing nothing..."); \
RV_longjmp_004D0172(RV_JumpBuf, 1); \
RV_ctx->receipt_data = NULL; \
goto RV_GetReceiptInformation062_RV_bail; \
} \
if (!PKCS7_type_is_data(RV_pkcs7->d.sign->contents)) { \
__RV_RECEIPT_LOG("RV - Doing nothing..."); \
RV_longjmp_004D0172(RV_JumpBuf, 1); \
RV_ctx->receipt_data = NULL; \
goto RV_GetReceiptInformation062_RV_bail; \
} \
RV_formatter = RV_CFDateFormatterCreate_02410135(NULL, NULL, kCFDateFormatterNoStyle, kCFDateFormatterNoStyle); \
RV_value1 = RV_ObfuscationFunction007CF((RV_Strings[111]), 88, 33); \
RV_XGBSZTSUAXCV_024100A5(RV_formatter, (CFStringRef) RV_value1); \
RV_CFRelease_01B60213(RV_value1); \
RV_tz = RV_CFTimeZoneCreateWithTimeIntervalFromGMT_007801F4(NULL, 0.0); \
RV_VQVXYNIGLORS_01B6024D(RV_formatter, *RV_kCFDateFormatterTimeZone_007801F7, RV_tz); \
RV_CFRelease_01B60213(RV_tz); \
RV_contentRV_content = RV_pkcs7->d.sign->contents->d.data; \
RV_receipt_context.ptr = RV_contentRV_content->data; \
RV_receipt_context.end = RV_receipt_context.ptr + RV_contentRV_content->length; \
RV_receipt_context.parent = NULL; \
RV_receipt_context.dictionary = NULL; \
RV_current_context = &RV_receipt_context; \
while(RV_current_context->ptr < RV_current_context->end) { \
if (!RV_current_context->dictionary) { \
RV_current_context->dictionary = RV_CFDictionaryCreateMutable_01B60092(kCFAllocatorDefault, (CFIndex) 600, RV_kCFTypeDictionaryKeyCallBacks_01B6004F, RV_kCFTypeDictionaryValueCallBacks_0078023A); \
RV_ASN1_get_object_022000A2(&RV_current_context->ptr, &RV_length, &RV_type, &RV_xclass, RV_current_context->end - RV_current_context->ptr); \
if (RV_type != V_ASN1_SET) { \
__RV_RECEIPT_LOG("RV - Doing nothing..."); \
RV_longjmp_004D0172(RV_JumpBuf, 1); \
goto RV_GetReceiptInformation062_RV_bail; \
} \
} \
while(RV_current_context->ptr < RV_current_context->end) { \
RV_ASN1_get_object_022000A2(&RV_current_context->ptr, &RV_length, &RV_type, &RV_xclass, RV_current_context->end - RV_current_context->ptr); \
if (RV_type != V_ASN1_SEQUENCE) { \
__RV_RECEIPT_LOG("RV - Doing nothing..."); \
RV_longjmp_004D0172(RV_JumpBuf, 1); \
goto RV_GetReceiptInformation062_RV_bail; \
} \
RV_seq_end = RV_current_context->ptr + RV_length; \
RV_attr_type = 0; \
RV_attr_version = 0; \
RV_ASN1_get_object_022000A2(&RV_current_context->ptr, &RV_length, &RV_type, &RV_xclass, RV_current_context->end - RV_current_context->ptr); \
if (RV_type != V_ASN1_INTEGER) { \
__RV_RECEIPT_LOG("RV - Doing nothing..."); \
RV_longjmp_004D0172(RV_JumpBuf, 1); \
goto RV_GetReceiptInformation062_RV_bail; \
} \
RV_value = RV_c2i_ASN1_INTEGER_0017020E(NULL, &RV_current_context->ptr, RV_length); \
RV_attr_type = RV_ASN1_INTEGER_get_00CD0177(RV_value); \
RV_ASN1_INTEGER_free_00CD0184(RV_value); \
RV_ASN1_get_object_022000A2(&RV_current_context->ptr, &RV_length, &RV_type, &RV_xclass, RV_current_context->end - RV_current_context->ptr); \
if (RV_type != V_ASN1_INTEGER) { \
__RV_RECEIPT_LOG("RV - Doing nothing..."); \
RV_longjmp_004D0172(RV_JumpBuf, 1); \
goto RV_GetReceiptInformation062_RV_bail; \
} \
RV_value = RV_c2i_ASN1_INTEGER_0017020E(NULL, &RV_current_context->ptr, RV_length); \
RV_attr_version = RV_ASN1_INTEGER_get_00CD0177(RV_value); \
RV_ASN1_INTEGER_free_00CD0184(RV_value); \
RV_ASN1_get_object_022000A2(&RV_current_context->ptr, &RV_length, &RV_type, &RV_xclass, RV_current_context->end - RV_current_context->ptr); \
if (RV_type != V_ASN1_OCTET_STRING) { \
__RV_RECEIPT_LOG("RV - Doing nothing..."); \
RV_longjmp_004D0172(RV_JumpBuf, 1); \
goto RV_GetReceiptInformation062_RV_bail; \
} \
RV_key1 = (RV_ReceiptAttributeType) (RV_StoreNone + (RV_attr_type << 3)); \
RV_key2 = (RV_ReceiptAttributeType) (RV_StoreNone + (RV_attr_type << 3) + 1); \
RV_value1 = NULL; \
RV_value2 = NULL; \
__RV_RECEIPT_LOG("RV - Parsing receipt - Found attribute %s%ld", RV_current_context->parent ? "--- " : "- ", RV_attr_type); \
switch (RV_attr_type) { \
case RV_ReceiptAttributeTypeBundleId: \
case RV_ReceiptAttributeTypeBundleVersion: \
case RV_ReceiptAttributeTypeOriginalApplicationVersion: \
case RV_InAppAttributeTypeProductIdentifer: \
case RV_InAppAttributeTypeTransactionIdentifer: \
case RV_InAppAttributeTypeOriginalTransactionIdentifer: \
{ \
RV_str_type = 0; \
RV_str_length = 0; \
RV_str_ptr = RV_current_context->ptr; \
RV_ASN1_get_object_022000A2(&RV_str_ptr, &RV_str_length, &RV_str_type, &RV_xclass, RV_seq_end - RV_str_ptr); \
if (RV_str_type != V_ASN1_UTF8STRING) { \
__RV_RECEIPT_LOG("RV - Doing nothing..."); \
RV_longjmp_004D0172(RV_JumpBuf, 1); \
goto RV_GetReceiptInformation062_RV_bail; \
} \
RV_value1 = ((__RV_CFStringCreateWithBytes) RV_Pointers[187])(NULL, (const UInt8 *) RV_str_ptr, (CFIndex) RV_str_length, kCFStringEncodingUTF8, false); \
RV_value2 = RV_KTRJFJGPPLRX_01B60042(NULL, (const UInt8 *) RV_current_context->ptr, (CFIndex) RV_length); \
__RV_RECEIPT_LOG("RV - Parsing receipt -       attribute %s%ld => %s", RV_current_context->parent ? "--- " : "- ", RV_attr_type, CFStringGetCStringPtr((CFStringRef) RV_value1, CFStringGetSystemEncoding())); \
break; \
} \
case RV_ReceiptAttributeTypeExpirationDate: \
case RV_InAppAttributeTypeCancellationDate: \
case RV_InAppAttributeTypeOriginalPurchaseDate: \
case RV_InAppAttributeTypePurchaseDate: \
case RV_InAppAttributeTypeSubscriptionExpirationDate: \
{ \
RV_str_type = 0; \
RV_str_length = 0; \
RV_str_ptr = RV_current_context->ptr; \
RV_ASN1_get_object_022000A2(&RV_str_ptr, &RV_str_length, &RV_str_type, &RV_xclass, RV_seq_end - RV_str_ptr); \
if (RV_str_type != V_ASN1_IA5STRING) { \
__RV_RECEIPT_LOG("RV - Doing nothing..."); \
RV_longjmp_004D0172(RV_JumpBuf, 1); \
goto RV_GetReceiptInformation062_RV_bail; \
} \
RV_value2 = ((__RV_CFStringCreateWithBytes) RV_Pointers[187])(NULL, (const UInt8 *) RV_str_ptr, (CFIndex) RV_str_length, kCFStringEncodingASCII, false); \
RV_value1 = RV_VTXCSSATBWHZ_0078007C(NULL, RV_formatter, (CFStringRef) RV_value2, NULL); \
__RV_RECEIPT_LOG("RV - Parsing receipt -       attribute %s%ld => %s", RV_current_context->parent ? "--- " : "- ", RV_attr_type, CFStringGetCStringPtr((CFStringRef) RV_value2, CFStringGetSystemEncoding())); \
break; \
} \
case RV_InAppAttributeTypeQuantity: \
case RV_InAppAttributeTypeWebOrderLineItemId: \
{ \
RV_num_type = 0; \
RV_num_length = 0; \
RV_num_ptr = RV_current_context->ptr; \
RV_ASN1_get_object_022000A2(&RV_num_ptr, &RV_num_length, &RV_num_type, &RV_xclass, RV_seq_end - RV_num_ptr); \
if (RV_num_type != V_ASN1_INTEGER) { \
__RV_RECEIPT_LOG("RV - Doing nothing..."); \
RV_longjmp_004D0172(RV_JumpBuf, 1); \
goto RV_GetReceiptInformation062_RV_bail; \
} \
RV_value = RV_c2i_ASN1_INTEGER_0017020E(NULL, &RV_num_ptr, RV_num_length); \
RV_number = RV_ASN1_INTEGER_get_00CD0177(RV_value); \
RV_ASN1_INTEGER_free_00CD0184(RV_value); \
RV_value1 = RV_CFNumberCreate_00780097(NULL, kCFNumberLongType, &RV_number); \
__RV_RECEIPT_LOG("RV - Parsing receipt -       attribute %s%ld => %ld", RV_current_context->parent ? "--- " : "- ", RV_attr_type, RV_number); \
break; \
} \
case RV_ReceiptAttributeTypeOpaqueValue: \
case RV_ReceiptAttributeTypeHash: \
{ \
RV_value1 = RV_KTRJFJGPPLRX_01B60042(NULL, (const UInt8 *) RV_current_context->ptr, (CFIndex) RV_length); \
__RV_RECEIPT_LOG("RV - Parsing receipt -       attribute %s%ld => [%lu bytes]", RV_current_context->parent ? "--- " : "- ", RV_attr_type, RV_CYBMMHWQOVIS_024100AF((CFDataRef) RV_value1)); \
break; \
} \
case RV_ReceiptAttributeTypeInAppPurchase: \
{ \
RV_inapp_context.ptr = RV_current_context->ptr; \
RV_inapp_context.end = RV_inapp_context.ptr + RV_length; \
RV_inapp_context.dictionary = NULL; \
RV_inapp_context.parent = RV_current_context; \
RV_current_context = &RV_inapp_context; \
goto RV_GetReceiptInformation062_RV_key; \
} \
default: \
break; \
} \
if (RV_value1) { \
RV_key = RV_CFNumberCreate_00780097(NULL, kCFNumberIntType, &RV_key1); \
RV_CFDictionaryAddValue_024101CD((CFMutableDictionaryRef) RV_current_context->dictionary, RV_key, RV_value1); \
RV_CFRelease_01B60213(RV_key); \
RV_CFRelease_01B60213(RV_value1); \
} \
if (RV_value2) { \
RV_key = RV_CFNumberCreate_00780097(NULL, kCFNumberIntType, &RV_key2); \
RV_CFDictionaryAddValue_024101CD((CFMutableDictionaryRef) RV_current_context->dictionary, RV_key, RV_value2); \
RV_CFRelease_01B60213(RV_key); \
RV_CFRelease_01B60213(RV_value2); \
} \
RV_current_context->ptr += RV_length; \
} \
RV_GetReceiptInformation062_RV_key: \
if (!RV_current_context->dictionary) { \
continue; \
} \
if (RV_current_context->parent) { \
__RV_RECEIPT_LOG("RV - Parsing receipt - Add an InApp purchase"); \
RV_key1 = RV_StoreReceiptAttributeTypeInAppPurchase; \
RV_key = RV_CFNumberCreate_00780097(NULL, kCFNumberIntType, &RV_key1); \
RV_value1 = RV_QUIXUTRFSICK_024101C1((CFDictionaryRef) RV_current_context->parent->dictionary, RV_key); \
if (!RV_value1) { \
RV_value1 = RV_CFArrayCreateMutable_01B600FD(kCFAllocatorDefault, 0, RV_kCFTypeArrayCallBacks_0241013C); \
RV_CFDictionarySetValue_01B601FD((CFMutableDictionaryRef) RV_current_context->parent->dictionary, RV_key, RV_value1); \
RV_CFRelease_01B60213(RV_value1); \
} \
RV_WMMHMOOBUQFF_00780181((CFMutableArrayRef) RV_value1, RV_current_context->dictionary); \
RV_CFRelease_01B60213(RV_current_context->dictionary); \
RV_CFRelease_01B60213(RV_key); \
RV_current_context = RV_current_context->parent; \
RV_current_context->ptr = RV_inapp_context.end; \
} \
} \
if (RV_ctx->receipt_dict) RV_CFRelease_01B60213(RV_ctx->receipt_dict); \
RV_ctx->receipt_dict = RV_receipt_context.dictionary; \
RV_QUIXUTRFSICK += 251; RV_QUIXUTRFSICK /= 4;  \
RV_KOAYLIMVVISI -= 109; RV_KOAYLIMVVISI *= 3;  \
RV_GetReceiptInformation062_RV_bail: \
if (RV_pkcs7) RV_PKCS7_free_00170243(RV_pkcs7); \
if (RV_bio_p7) RV_BIO_free_0017004A(RV_bio_p7); \
if (RV_formatter) RV_CFRelease_01B60213(RV_formatter); \
}
#endif
    
    
    // CodeBlock CheckReceiptSignature
#ifdef DEBUG
    inline static void RV_CheckReceiptSignature07D(RV_CheckingContext *RV_ctx) {
        BIO *RV_bio_p7 = NULL;
        PKCS7 *RV_pkcs7 = NULL;
        STACK_OF(X509) *RV_certificates = NULL;
        X509 *RV_certificate = NULL;
        int RV_count, RV_index1;
        unsigned int RV_index2;
        ASN1_OBJECT *RV_oid = NULL;
        char *RV_str1;
        char *RV_str3;
        char *RV_str4;
        char *RV_str5;
        int RV_verify, RV_status;
        BIO *RV_bio_apple = NULL;
        X509 *RV_apple = NULL;
        X509_STORE *RV_store = NULL;
        __RV_RECEIPT_LOG("RV - Checking receipt signature");
        // Put the receipt data into a memory buffer
        RV_bio_p7 = RV_BIO_new_001701DB(RV_BIO_s_mem_022001AD());
        RV_BIO_write_00CD0081(RV_bio_p7, (void *) RV_KOAYLIMVVISI_0078021C((CFDataRef) RV_ctx->receipt_data), (int) RV_QUIXUTRFSICK_024100AF((CFDataRef) RV_ctx->receipt_data));
        RV_pkcs7 = RV_d2i_PKCS7_bio_00CD022E(RV_bio_p7, NULL);
        if (!RV_pkcs7) {
            __RV_RECEIPT_LOG("RV - Doing nothing...");
            RV_longjmp_01470190(RV_JumpBuf, 1);
            RV_ctx->receipt_dict = NULL;
            goto RV_CheckReceiptSignature07D_RV_bail;
        }
        if (!PKCS7_type_is_signed(RV_pkcs7)) {
            __RV_RECEIPT_LOG("RV - Doing nothing...");
            RV_longjmp_01470190(RV_JumpBuf, 1);
            RV_ctx->receipt_dict = NULL;
            goto RV_CheckReceiptSignature07D_RV_bail;
        }
        if (!PKCS7_type_is_data(RV_pkcs7->d.sign->contents)) {
            __RV_RECEIPT_LOG("RV - Doing nothing...");
            RV_longjmp_01470190(RV_JumpBuf, 1);
            RV_ctx->receipt_dict = NULL;
            goto RV_CheckReceiptSignature07D_RV_bail;
        }
        RV_OpenSSL_add_all_digests_00CD0166();
        // If the Apple Root CA certificate has been loaded, then check the receipt against it.
        if (RV_ctx->ca_data) {
            RV_bio_apple = RV_BIO_new_001701DB(RV_BIO_s_mem_022001AD());
            RV_BIO_write_00CD0081(RV_bio_apple, (void *) RV_KOAYLIMVVISI_0078021C((CFDataRef) RV_ctx->ca_data), (int) RV_QUIXUTRFSICK_024100AF((CFDataRef) RV_ctx->ca_data));
            RV_apple = RV_d2i_X509_bio_00170061(RV_bio_apple, NULL);
            if (!RV_apple) {
                __RV_RECEIPT_LOG("RV - Doing nothing...");
                RV_longjmp_01470190(RV_JumpBuf, 1);
                goto RV_CheckReceiptSignature07D_RV_bail;
            }
            RV_store = RV_X509_STORE_new_00CD019D();
            RV_X509_STORE_add_cert_00CD0234(RV_store, RV_apple);
            // Check that the PKCS7_verify function is not tampered with
            // Check that the PKCS7 content is signed by the Apple Root CA certificate
            RV_verify = RV_PKCS7_verify_00CD000E(RV_pkcs7, NULL, RV_store, NULL, NULL, 0) * 2464;
            if (RV_verify != 2464) {
                __RV_RECEIPT_LOG("RV - Doing nothing...");
                RV_longjmp_01470190(RV_JumpBuf, 1);
                goto RV_CheckReceiptSignature07D_RV_bail;
            }
        }
        // Extract the certificates from the receipt.
        // One of them must be the Apple Root CA certificate with the correct fingerprint.
        RV_verify = 0;
        RV_certificates = RV_pkcs7->d.sign->cert;
        RV_count = RV_sk_num_022000B9((const _STACK *) RV_certificates);
        for(RV_index1 = 0; RV_index1 < RV_count; RV_index1++) {
            RV_certificate = (X509 *) RV_sk_value_001701E1((const _STACK *) RV_certificates, RV_index1);
            char RV_common_name[600];
            // Check that the X509_NAME_get_text_by_NID function is not tampered with
            // Retrieve the common name
            RV_status = RV_X509_NAME_get_text_by_NID_001701D8(RV_certificate->cert_info->subject, NID_commonName, RV_common_name, 600);
            if (RV_status <= 0) {
                __RV_RECEIPT_LOG("RV - Doing nothing...");
                RV_longjmp_01470190(RV_JumpBuf, 1);
                goto RV_CheckReceiptSignature07D_RV_bail;
            }
            volatile unsigned int RV_digest_length = 5; RV_digest_length -= 2; RV_digest_length *= 6; RV_digest_length += 2;
            const EVP_MD *RV_digester = EVP_sha1();
            unsigned char RV_digest[EVP_MAX_MD_SIZE];
            unsigned int RV_len = 0;
            // Check that the X509_digest function is not tampered with
            RV_status = RV_X509_digest_00CD00D3(NULL, NULL, NULL, &RV_len) * 2464;
            if (RV_status == 2464 || RV_len > 0) {
                __RV_RECEIPT_LOG("RV - Doing nothing...");
                RV_longjmp_01470190(RV_JumpBuf, 1);
                goto RV_CheckReceiptSignature07D_RV_bail;
            }
            RV_status = RV_X509_digest_00CD00D3(RV_certificate, RV_digester, RV_digest, &RV_len) * 2464;
            if (RV_status != 2464 || RV_len != RV_digest_length) {
                __RV_RECEIPT_LOG("RV - Doing nothing...");
                RV_longjmp_01470190(RV_JumpBuf, 1);
                goto RV_CheckReceiptSignature07D_RV_bail;
            }
            char RV_fingerprint[600];
            volatile unsigned int RV_increment = 1; RV_increment -= 1; RV_increment *= 4; RV_increment += 2;
            for(RV_index2 = 0; RV_index2 < RV_digest_length; RV_index2++) {
                snprintf(&RV_fingerprint[RV_index2 * RV_increment], RV_increment + 1, "%02X", RV_digest[RV_index2]);
            }
            char RV_str3_[600];
            RV_ObfuscationFunction007((RV_Strings[393]), RV_str3_, 3, 49);
            RV_str3 = RV_str3_;
            // Check the common name and the fingerprint
            char RV_str1_[600];
            RV_ObfuscationFunction00A((RV_Strings[67]), RV_str1_, 66, 16);
            RV_str1 = RV_str1_;
            volatile size_t RV_num = 9; RV_num -= 5; RV_num *= 3; RV_num += 1;
            if (((__RV_strncmp) RV_Pointers[263])(RV_common_name, RV_str1, RV_num) == 0 && ((__RV_strncmp) RV_Pointers[263])(RV_fingerprint, RV_str3, RV_digest_length * RV_increment - 1) == 0) {
                RV_verify = 2464;
                break;
            }
        }
        // Check that the last selected certificate is right one.
        if (RV_certificate == NULL || RV_verify != 2464) {
            __RV_RECEIPT_LOG("RV - Doing nothing...");
            RV_longjmp_01470190(RV_JumpBuf, 1);
            goto RV_CheckReceiptSignature07D_RV_bail;
        }
        // Check that the X509_get_ext_by_OBJ function is not tampered with
        char RV_str4_[600];
        RV_ObfuscationFunction00B((RV_Strings[236]), RV_str4_, 23, 34);
        RV_str4 = RV_str4_;
        RV_oid = RV_OBJ_txt2obj_0017017C(RV_str4, 0);
        RV_verify = RV_X509_get_ext_by_OBJ_02200124(RV_certificate, RV_oid, 0);
        RV_ASN1_OBJECT_free_0017007D(RV_oid);
        if (RV_verify >= 0) {
            __RV_RECEIPT_LOG("RV - Doing nothing...");
            RV_longjmp_01470190(RV_JumpBuf, 1);
            goto RV_CheckReceiptSignature07D_RV_bail;
        }
        // Extract the signer certificate from the receipt
        // The certificate must have the extension OID "1.2.840.113635.100.6.11.1"
        char RV_str5_[600];
        RV_ObfuscationFunction00A((RV_Strings[369]), RV_str5_, 207, 34);
        RV_str5 = RV_str5_;
        RV_certificates = RV_PKCS7_get0_signers_00170056(RV_pkcs7, NULL, 0);
        RV_count = RV_sk_num_022000B9((const _STACK *) RV_certificates);
        for(RV_index1 = 0; RV_index1 < RV_count; RV_index1++) {
            RV_certificate = (X509 *) RV_sk_value_001701E1((const _STACK *) RV_certificates, RV_index1);
            RV_oid = RV_OBJ_txt2obj_0017017C(RV_str5, 0);
            RV_verify = RV_X509_get_ext_by_OBJ_02200124(RV_certificate, RV_oid, 0);
            RV_ASN1_OBJECT_free_0017007D(RV_oid);
            if (RV_verify == -1) {
                sk_X509_free (RV_certificates);
                RV_certificates = NULL;
                continue;
            } else {
                break;
            }
        }
        if (RV_certificate == NULL || RV_verify < 0) {
            __RV_RECEIPT_LOG("RV - Doing nothing...");
            RV_longjmp_01470190(RV_JumpBuf, 1);
            goto RV_CheckReceiptSignature07D_RV_bail;
        }
        // Global variables computation
        // From 385 to 166
        RV_WMMHMOOBUQFF += 279; RV_WMMHMOOBUQFF /= 4;
        // From 124 to 182
        RV_VTXCSSATBWHZ -= 64; RV_VTXCSSATBWHZ *= 3; RV_VTXCSSATBWHZ += 2;
        // From 589 to 340
        RV_VQVXYNIGLORS += 431; RV_VQVXYNIGLORS /= 3;
    RV_CheckReceiptSignature07D_RV_bail:
        if (RV_bio_p7) RV_BIO_free_00170051(RV_bio_p7);
        if (RV_pkcs7) RV_PKCS7_free_02200243(RV_pkcs7);
        if (RV_certificates) sk_X509_free (RV_certificates);
        if (RV_apple) RV_X509_free_0220000D(RV_apple);
        if (RV_bio_apple) RV_BIO_free_00170051(RV_bio_apple);
        if (RV_store) RV_X509_STORE_free_00CD00F7(RV_store);
    }
#else
#define RV_CheckReceiptSignature07D(RV_ctx) { \
BIO *RV_bio_p7 = NULL; \
PKCS7 *RV_pkcs7 = NULL; \
STACK_OF(X509) *RV_certificates = NULL; \
X509 *RV_certificate = NULL; \
int RV_count, RV_index1; \
unsigned int RV_index2; \
ASN1_OBJECT *RV_oid = NULL; \
char *RV_str1; \
char *RV_str3; \
char *RV_str4; \
char *RV_str5; \
int RV_verify, RV_status; \
BIO *RV_bio_apple = NULL; \
X509 *RV_apple = NULL; \
X509_STORE *RV_store = NULL; \
__RV_RECEIPT_LOG("RV - Checking receipt signature"); \
RV_bio_p7 = RV_BIO_new_001701DB(RV_BIO_s_mem_022001AD()); \
RV_BIO_write_00CD0081(RV_bio_p7, (void *) RV_KOAYLIMVVISI_0078021C((CFDataRef) RV_ctx->receipt_data), (int) RV_QUIXUTRFSICK_024100AF((CFDataRef) RV_ctx->receipt_data)); \
RV_pkcs7 = RV_d2i_PKCS7_bio_00CD022E(RV_bio_p7, NULL); \
if (!RV_pkcs7) { \
__RV_RECEIPT_LOG("RV - Doing nothing..."); \
RV_longjmp_01470190(RV_JumpBuf, 1); \
RV_ctx->receipt_dict = NULL; \
goto RV_CheckReceiptSignature07D_RV_bail; \
} \
if (!PKCS7_type_is_signed(RV_pkcs7)) { \
__RV_RECEIPT_LOG("RV - Doing nothing..."); \
RV_longjmp_01470190(RV_JumpBuf, 1); \
RV_ctx->receipt_dict = NULL; \
goto RV_CheckReceiptSignature07D_RV_bail; \
} \
if (!PKCS7_type_is_data(RV_pkcs7->d.sign->contents)) { \
__RV_RECEIPT_LOG("RV - Doing nothing..."); \
RV_longjmp_01470190(RV_JumpBuf, 1); \
RV_ctx->receipt_dict = NULL; \
goto RV_CheckReceiptSignature07D_RV_bail; \
} \
RV_OpenSSL_add_all_digests_00CD0166(); \
if (RV_ctx->ca_data) { \
RV_bio_apple = RV_BIO_new_001701DB(RV_BIO_s_mem_022001AD()); \
RV_BIO_write_00CD0081(RV_bio_apple, (void *) RV_KOAYLIMVVISI_0078021C((CFDataRef) RV_ctx->ca_data), (int) RV_QUIXUTRFSICK_024100AF((CFDataRef) RV_ctx->ca_data)); \
RV_apple = RV_d2i_X509_bio_00170061(RV_bio_apple, NULL); \
if (!RV_apple) { \
__RV_RECEIPT_LOG("RV - Doing nothing..."); \
RV_longjmp_01470190(RV_JumpBuf, 1); \
goto RV_CheckReceiptSignature07D_RV_bail; \
} \
RV_store = RV_X509_STORE_new_00CD019D(); \
RV_X509_STORE_add_cert_00CD0234(RV_store, RV_apple); \
RV_verify = RV_PKCS7_verify_00CD000E(RV_pkcs7, NULL, RV_store, NULL, NULL, 0) * 2464; \
if (RV_verify != 2464) { \
__RV_RECEIPT_LOG("RV - Doing nothing..."); \
RV_longjmp_01470190(RV_JumpBuf, 1); \
goto RV_CheckReceiptSignature07D_RV_bail; \
} \
} \
RV_verify = 0; \
RV_certificates = RV_pkcs7->d.sign->cert; \
RV_count = RV_sk_num_022000B9((const _STACK *) RV_certificates); \
for(RV_index1 = 0; RV_index1 < RV_count; RV_index1++) { \
RV_certificate = (X509 *) RV_sk_value_001701E1((const _STACK *) RV_certificates, RV_index1); \
char RV_common_name[600]; \
RV_status = RV_X509_NAME_get_text_by_NID_001701D8(RV_certificate->cert_info->subject, NID_commonName, RV_common_name, 600); \
if (RV_status <= 0) { \
__RV_RECEIPT_LOG("RV - Doing nothing..."); \
RV_longjmp_01470190(RV_JumpBuf, 1); \
goto RV_CheckReceiptSignature07D_RV_bail; \
} \
volatile unsigned int RV_digest_length = 5; RV_digest_length -= 2; RV_digest_length *= 6; RV_digest_length += 2;  \
const EVP_MD *RV_digester = EVP_sha1(); \
unsigned char RV_digest[EVP_MAX_MD_SIZE]; \
unsigned int RV_len = 0; \
RV_status = RV_X509_digest_00CD00D3(NULL, NULL, NULL, &RV_len) * 2464; \
if (RV_status == 2464 || RV_len > 0) { \
__RV_RECEIPT_LOG("RV - Doing nothing..."); \
RV_longjmp_01470190(RV_JumpBuf, 1); \
goto RV_CheckReceiptSignature07D_RV_bail; \
} \
RV_status = RV_X509_digest_00CD00D3(RV_certificate, RV_digester, RV_digest, &RV_len) * 2464; \
if (RV_status != 2464 || RV_len != RV_digest_length) { \
__RV_RECEIPT_LOG("RV - Doing nothing..."); \
RV_longjmp_01470190(RV_JumpBuf, 1); \
goto RV_CheckReceiptSignature07D_RV_bail; \
} \
char RV_fingerprint[600]; \
volatile unsigned int RV_increment = 1; RV_increment -= 1; RV_increment *= 4; RV_increment += 2;  \
for(RV_index2 = 0; RV_index2 < RV_digest_length; RV_index2++) { \
snprintf(&RV_fingerprint[RV_index2 * RV_increment], RV_increment + 1, "%02X", RV_digest[RV_index2]); \
} \
char RV_str3_[600]; \
RV_ObfuscationFunction007((RV_Strings[393]), RV_str3_, 3, 49); \
RV_str3 = RV_str3_; \
char RV_str1_[600]; \
RV_ObfuscationFunction00A((RV_Strings[67]), RV_str1_, 66, 16); \
RV_str1 = RV_str1_; \
volatile size_t RV_num = 9; RV_num -= 5; RV_num *= 3; RV_num += 1;  \
if (((__RV_strncmp) RV_Pointers[263])(RV_common_name, RV_str1, RV_num) == 0 && ((__RV_strncmp) RV_Pointers[263])(RV_fingerprint, RV_str3, RV_digest_length * RV_increment - 1) == 0) { \
RV_verify = 2464; \
break; \
} \
} \
if (RV_certificate == NULL || RV_verify != 2464) { \
__RV_RECEIPT_LOG("RV - Doing nothing..."); \
RV_longjmp_01470190(RV_JumpBuf, 1); \
goto RV_CheckReceiptSignature07D_RV_bail; \
} \
char RV_str4_[600]; \
RV_ObfuscationFunction00B((RV_Strings[236]), RV_str4_, 23, 34); \
RV_str4 = RV_str4_; \
RV_oid = RV_OBJ_txt2obj_0017017C(RV_str4, 0); \
RV_verify = RV_X509_get_ext_by_OBJ_02200124(RV_certificate, RV_oid, 0); \
RV_ASN1_OBJECT_free_0017007D(RV_oid); \
if (RV_verify >= 0) { \
__RV_RECEIPT_LOG("RV - Doing nothing..."); \
RV_longjmp_01470190(RV_JumpBuf, 1); \
goto RV_CheckReceiptSignature07D_RV_bail; \
} \
char RV_str5_[600]; \
RV_ObfuscationFunction00A((RV_Strings[369]), RV_str5_, 207, 34); \
RV_str5 = RV_str5_; \
RV_certificates = RV_PKCS7_get0_signers_00170056(RV_pkcs7, NULL, 0); \
RV_count = RV_sk_num_022000B9((const _STACK *) RV_certificates); \
for(RV_index1 = 0; RV_index1 < RV_count; RV_index1++) { \
RV_certificate = (X509 *) RV_sk_value_001701E1((const _STACK *) RV_certificates, RV_index1); \
RV_oid = RV_OBJ_txt2obj_0017017C(RV_str5, 0); \
RV_verify = RV_X509_get_ext_by_OBJ_02200124(RV_certificate, RV_oid, 0); \
RV_ASN1_OBJECT_free_0017007D(RV_oid); \
if (RV_verify == -1) { \
sk_X509_free (RV_certificates); \
RV_certificates = NULL; \
continue; \
} else { \
break; \
} \
} \
if (RV_certificate == NULL || RV_verify < 0) { \
__RV_RECEIPT_LOG("RV - Doing nothing..."); \
RV_longjmp_01470190(RV_JumpBuf, 1); \
goto RV_CheckReceiptSignature07D_RV_bail; \
} \
RV_WMMHMOOBUQFF += 279; RV_WMMHMOOBUQFF /= 4;  \
RV_VTXCSSATBWHZ -= 64; RV_VTXCSSATBWHZ *= 3; RV_VTXCSSATBWHZ += 2;  \
RV_VQVXYNIGLORS += 431; RV_VQVXYNIGLORS /= 3;  \
RV_CheckReceiptSignature07D_RV_bail: \
if (RV_bio_p7) RV_BIO_free_00170051(RV_bio_p7); \
if (RV_pkcs7) RV_PKCS7_free_02200243(RV_pkcs7); \
if (RV_certificates) sk_X509_free (RV_certificates); \
if (RV_apple) RV_X509_free_0220000D(RV_apple); \
if (RV_bio_apple) RV_BIO_free_00170051(RV_bio_apple); \
if (RV_store) RV_X509_STORE_free_00CD00F7(RV_store); \
}
#endif
    
    
    // CodeBlock CheckReceiptIdentifier
#ifndef RECEIGEN_LOOSE_IDENTIFIER_CHECK
#ifdef DEBUG
    inline static void RV_CheckReceiptIdentifier07E(RV_CheckingContext *RV_ctx) {
        __RV_RECEIPT_LOG("RV - Checking receipt identifier");
        RV_ReceiptAttributeType RV_value = RV_StoreReceiptAttributeTypeBundleId;
        CFStringRef RV_str1 = RV_ObfuscationFunction005CF((RV_Strings[390]), 134, 16);
        CFNumberRef RV_key = RV_WMMHMOOBUQFF_01B600A6(NULL, kCFNumberIntType, &RV_value);
        CFStringRef RV_str2 = (CFStringRef) RV_VTXCSSATBWHZ_024100B6((CFDictionaryRef) RV_ctx->receipt_dict, RV_key);
        RV_CFRelease_02410213(RV_key);
        if (RV_VQVXYNIGLORS_00780154(RV_str1, RV_str2, 0) != kCFCompareEqualTo) {
            __RV_RECEIPT_LOG("RV - Receipt identifier mismatch (expecting '%s' but actual value is '%s')", CFStringGetCStringPtr(RV_str1, CFStringGetSystemEncoding()), CFStringGetCStringPtr(RV_str2, CFStringGetSystemEncoding()));
            __RV_RECEIPT_LOG("RV - Doing nothing...");
            RV_longjmp_01970190(RV_JumpBuf, 1);
            // Dead code
            RV_CFRelease_02410213(RV_key);
            RV_CFRelease_02410213(RV_str1);
            RV_CFRelease_02410213(RV_key);
            RV_CFRelease_02410213(RV_str1);
        }
        // Global variables computation
        // Set to 538
        RV_QUIXUTRFSICK = 538;
        // From 175 to 151
        RV_CYBMMHWQOVIS += 127; RV_CYBMMHWQOVIS /= 2;
        // From 165 to 182
        RV_XGBSZTSUAXCV -= 105; RV_XGBSZTSUAXCV *= 3; RV_XGBSZTSUAXCV += 2;
        RV_CFRelease_02410213(RV_str1);
    }
#else
#define RV_CheckReceiptIdentifier07E(RV_ctx) { \
__RV_RECEIPT_LOG("RV - Checking receipt identifier"); \
RV_ReceiptAttributeType RV_value = RV_StoreReceiptAttributeTypeBundleId; \
CFStringRef RV_str1 = RV_ObfuscationFunction005CF((RV_Strings[390]), 134, 16); \
CFNumberRef RV_key = RV_WMMHMOOBUQFF_01B600A6(NULL, kCFNumberIntType, &RV_value); \
CFStringRef RV_str2 = (CFStringRef) RV_VTXCSSATBWHZ_024100B6((CFDictionaryRef) RV_ctx->receipt_dict, RV_key); \
RV_CFRelease_02410213(RV_key); \
if (RV_VQVXYNIGLORS_00780154(RV_str1, RV_str2, 0) != kCFCompareEqualTo) { \
__RV_RECEIPT_LOG("RV - Receipt identifier mismatch (expecting '%s' but actual value is '%s')", CFStringGetCStringPtr(RV_str1, CFStringGetSystemEncoding()), CFStringGetCStringPtr(RV_str2, CFStringGetSystemEncoding())); \
__RV_RECEIPT_LOG("RV - Doing nothing..."); \
RV_longjmp_01970190(RV_JumpBuf, 1); \
RV_CFRelease_02410213(RV_key); \
RV_CFRelease_02410213(RV_str1); \
RV_CFRelease_02410213(RV_key); \
RV_CFRelease_02410213(RV_str1); \
} \
RV_QUIXUTRFSICK = 538; \
RV_CYBMMHWQOVIS += 127; RV_CYBMMHWQOVIS /= 2;  \
RV_XGBSZTSUAXCV -= 105; RV_XGBSZTSUAXCV *= 3; RV_XGBSZTSUAXCV += 2;  \
RV_CFRelease_02410213(RV_str1); \
}
#endif
#endif
    
#ifdef RECEIGEN_LOOSE_IDENTIFIER_CHECK
#ifdef DEBUG
    inline static void RV_CheckReceiptIdentifier07E(RV_CheckingContext *RV_ctx) {
        __RV_RECEIPT_LOG("RV - Checking receipt identifier loosely");
        RV_ReceiptAttributeType RV_value = RV_StoreReceiptAttributeTypeBundleId;
        CFStringRef RV_str1 = RV_ObfuscationFunction004CF((RV_Strings[485]), 211, 16);
        CFNumberRef RV_key = RV_WMMHMOOBUQFF_01B600A6(NULL, kCFNumberIntType, &RV_value);
        CFStringRef RV_str2 = (CFStringRef) RV_VTXCSSATBWHZ_024100B6((CFDictionaryRef) RV_ctx->receipt_dict, RV_key);
        RV_CFRelease_01B60115(RV_key);
        if (RV_VQVXYNIGLORS_00780154(RV_str1, RV_str2, 0) != kCFCompareEqualTo) {
            __RV_RECEIPT_LOG("RV - Receipt identifier mismatch (expecting '%s' but actual value is '%s')", CFStringGetCStringPtr(RV_str1, CFStringGetSystemEncoding()), CFStringGetCStringPtr(RV_str2, CFStringGetSystemEncoding()));
        }
        // Global variables computation
        // Set to 538
        RV_QUIXUTRFSICK = 538;
        // From 175 to 151
        RV_CYBMMHWQOVIS += 127; RV_CYBMMHWQOVIS /= 2;
        // From 165 to 182
        RV_XGBSZTSUAXCV -= 105; RV_XGBSZTSUAXCV *= 3; RV_XGBSZTSUAXCV += 2;
        RV_CFRelease_01B60115(RV_str1);
    }
#else
#define RV_CheckReceiptIdentifier07E(RV_ctx) { \
__RV_RECEIPT_LOG("RV - Checking receipt identifier loosely"); \
RV_ReceiptAttributeType RV_value = RV_StoreReceiptAttributeTypeBundleId; \
CFStringRef RV_str1 = RV_ObfuscationFunction004CF((RV_Strings[485]), 211, 16); \
CFNumberRef RV_key = RV_WMMHMOOBUQFF_01B600A6(NULL, kCFNumberIntType, &RV_value); \
CFStringRef RV_str2 = (CFStringRef) RV_VTXCSSATBWHZ_024100B6((CFDictionaryRef) RV_ctx->receipt_dict, RV_key); \
RV_CFRelease_01B60115(RV_key); \
if (RV_VQVXYNIGLORS_00780154(RV_str1, RV_str2, 0) != kCFCompareEqualTo) { \
__RV_RECEIPT_LOG("RV - Receipt identifier mismatch (expecting '%s' but actual value is '%s')", CFStringGetCStringPtr(RV_str1, CFStringGetSystemEncoding()), CFStringGetCStringPtr(RV_str2, CFStringGetSystemEncoding())); \
} \
RV_QUIXUTRFSICK = 538; \
RV_CYBMMHWQOVIS += 127; RV_CYBMMHWQOVIS /= 2;  \
RV_XGBSZTSUAXCV -= 105; RV_XGBSZTSUAXCV *= 3; RV_XGBSZTSUAXCV += 2;  \
RV_CFRelease_01B60115(RV_str1); \
}
#endif
#endif
    
    
    // CodeBlock CheckReceiptVersion
#ifndef RECEIGEN_LOOSE_VERSION_CHECK
#ifdef DEBUG
    inline static void RV_CheckReceiptVersion080(RV_CheckingContext *RV_ctx) {
        __RV_RECEIPT_LOG("RV - Checking receipt version");
        RV_ReceiptAttributeType RV_value = RV_StoreReceiptAttributeTypeBundleVersion;
        CFStringRef RV_str1 = RV_ObfuscationFunction006CF((RV_Strings[590]), 167, 16);
        CFNumberRef RV_key = RV_CYBMMHWQOVIS_02410097(NULL, kCFNumberIntType, &RV_value);
        CFStringRef RV_str2 = (CFStringRef) RV_XGBSZTSUAXCV_007800B6((CFDictionaryRef) RV_ctx->receipt_dict, RV_key);
        RV_CFRelease_00780213(RV_key);
        if (RV_QUIXUTRFSICK_0241021A(RV_str1, RV_str2, 0) != kCFCompareEqualTo) {
            __RV_RECEIPT_LOG("RV - Receipt version mismatch (expecting '%s' but actual value is '%s')", CFStringGetCStringPtr(RV_str1, CFStringGetSystemEncoding()), CFStringGetCStringPtr(RV_str2, CFStringGetSystemEncoding()));
            __RV_RECEIPT_LOG("RV - Doing nothing...");
            RV_longjmp_01970172(RV_JumpBuf, 1);
            // Dead code
            RV_CFRelease_00780213(RV_key);
            RV_CFRelease_00780213(RV_str1);
            RV_CFRelease_00780213(RV_key);
            RV_CFRelease_00780213(RV_str1);
        }
        // Global variables computation
        // From 166 to 130
        RV_WMMHMOOBUQFF += 94; RV_WMMHMOOBUQFF /= 2;
        // From 66 to 182
        RV_KTRJFJGPPLRX -= 21; RV_KTRJFJGPPLRX *= 4; RV_KTRJFJGPPLRX += 2;
        // Set to 68
        RV_QUIXUTRFSICK = 68;
        // Set to 435
        RV_VTXCSSATBWHZ = 435;
        // From 540 to 467
        RV_KOAYLIMVVISI += 394; RV_KOAYLIMVVISI /= 2;
        // Set to 460
        RV_CYBMMHWQOVIS = 460;
        // From 182 to 583
        RV_XGBSZTSUAXCV -= 66; RV_XGBSZTSUAXCV *= 5; RV_XGBSZTSUAXCV += 3;
        // From 340 to 248
        RV_VQVXYNIGLORS += 156; RV_VQVXYNIGLORS /= 2;
        RV_CFRelease_00780213(RV_str1);
    }
#else
#define RV_CheckReceiptVersion080(RV_ctx) { \
__RV_RECEIPT_LOG("RV - Checking receipt version"); \
RV_ReceiptAttributeType RV_value = RV_StoreReceiptAttributeTypeBundleVersion; \
CFStringRef RV_str1 = RV_ObfuscationFunction006CF((RV_Strings[590]), 167, 16); \
CFNumberRef RV_key = RV_CYBMMHWQOVIS_02410097(NULL, kCFNumberIntType, &RV_value); \
CFStringRef RV_str2 = (CFStringRef) RV_XGBSZTSUAXCV_007800B6((CFDictionaryRef) RV_ctx->receipt_dict, RV_key); \
RV_CFRelease_00780213(RV_key); \
if (RV_QUIXUTRFSICK_0241021A(RV_str1, RV_str2, 0) != kCFCompareEqualTo) { \
__RV_RECEIPT_LOG("RV - Receipt version mismatch (expecting '%s' but actual value is '%s')", CFStringGetCStringPtr(RV_str1, CFStringGetSystemEncoding()), CFStringGetCStringPtr(RV_str2, CFStringGetSystemEncoding())); \
__RV_RECEIPT_LOG("RV - Doing nothing..."); \
RV_longjmp_01970172(RV_JumpBuf, 1); \
RV_CFRelease_00780213(RV_key); \
RV_CFRelease_00780213(RV_str1); \
RV_CFRelease_00780213(RV_key); \
RV_CFRelease_00780213(RV_str1); \
} \
RV_WMMHMOOBUQFF += 94; RV_WMMHMOOBUQFF /= 2;  \
RV_KTRJFJGPPLRX -= 21; RV_KTRJFJGPPLRX *= 4; RV_KTRJFJGPPLRX += 2;  \
RV_QUIXUTRFSICK = 68; \
RV_VTXCSSATBWHZ = 435; \
RV_KOAYLIMVVISI += 394; RV_KOAYLIMVVISI /= 2;  \
RV_CYBMMHWQOVIS = 460; \
RV_XGBSZTSUAXCV -= 66; RV_XGBSZTSUAXCV *= 5; RV_XGBSZTSUAXCV += 3;  \
RV_VQVXYNIGLORS += 156; RV_VQVXYNIGLORS /= 2;  \
RV_CFRelease_00780213(RV_str1); \
}
#endif
#endif
    
#ifdef RECEIGEN_LOOSE_VERSION_CHECK
#ifdef DEBUG
    inline static void RV_CheckReceiptVersion080(RV_CheckingContext *RV_ctx) {
        __RV_RECEIPT_LOG("RV - Checking receipt version loosely");
        RV_ReceiptAttributeType RV_value = RV_StoreReceiptAttributeTypeBundleVersion;
        CFStringRef RV_str1 = RV_ObfuscationFunction004CF((RV_Strings[580]), 89, 16);
        CFNumberRef RV_key = RV_CYBMMHWQOVIS_02410097(NULL, kCFNumberIntType, &RV_value);
        CFStringRef RV_str2 = (CFStringRef) RV_XGBSZTSUAXCV_007800B6((CFDictionaryRef) RV_ctx->receipt_dict, RV_key);
        RV_CFRelease_02410115(RV_key);
        if (RV_QUIXUTRFSICK_0241021A(RV_str1, RV_str2, 0) != kCFCompareEqualTo) {
            __RV_RECEIPT_LOG("RV - Receipt version mismatch (expecting '%s' but actual value is '%s')", CFStringGetCStringPtr(RV_str1, CFStringGetSystemEncoding()), CFStringGetCStringPtr(RV_str2, CFStringGetSystemEncoding()));
        }
        // Global variables computation
        // From 166 to 130
        RV_WMMHMOOBUQFF += 94; RV_WMMHMOOBUQFF /= 2;
        // From 66 to 182
        RV_KTRJFJGPPLRX -= 21; RV_KTRJFJGPPLRX *= 4; RV_KTRJFJGPPLRX += 2;
        // Set to 68
        RV_QUIXUTRFSICK = 68;
        // Set to 435
        RV_VTXCSSATBWHZ = 435;
        // From 540 to 467
        RV_KOAYLIMVVISI += 394; RV_KOAYLIMVVISI /= 2;
        // Set to 460
        RV_CYBMMHWQOVIS = 460;
        // From 182 to 583
        RV_XGBSZTSUAXCV -= 66; RV_XGBSZTSUAXCV *= 5; RV_XGBSZTSUAXCV += 3;
        // From 340 to 248
        RV_VQVXYNIGLORS += 156; RV_VQVXYNIGLORS /= 2;
        RV_CFRelease_02410115(RV_str1);
    }
#else
#define RV_CheckReceiptVersion080(RV_ctx) { \
__RV_RECEIPT_LOG("RV - Checking receipt version loosely"); \
RV_ReceiptAttributeType RV_value = RV_StoreReceiptAttributeTypeBundleVersion; \
CFStringRef RV_str1 = RV_ObfuscationFunction004CF((RV_Strings[580]), 89, 16); \
CFNumberRef RV_key = RV_CYBMMHWQOVIS_02410097(NULL, kCFNumberIntType, &RV_value); \
CFStringRef RV_str2 = (CFStringRef) RV_XGBSZTSUAXCV_007800B6((CFDictionaryRef) RV_ctx->receipt_dict, RV_key); \
RV_CFRelease_02410115(RV_key); \
if (RV_QUIXUTRFSICK_0241021A(RV_str1, RV_str2, 0) != kCFCompareEqualTo) { \
__RV_RECEIPT_LOG("RV - Receipt version mismatch (expecting '%s' but actual value is '%s')", CFStringGetCStringPtr(RV_str1, CFStringGetSystemEncoding()), CFStringGetCStringPtr(RV_str2, CFStringGetSystemEncoding())); \
} \
RV_WMMHMOOBUQFF += 94; RV_WMMHMOOBUQFF /= 2;  \
RV_KTRJFJGPPLRX -= 21; RV_KTRJFJGPPLRX *= 4; RV_KTRJFJGPPLRX += 2;  \
RV_QUIXUTRFSICK = 68; \
RV_VTXCSSATBWHZ = 435; \
RV_KOAYLIMVVISI += 394; RV_KOAYLIMVVISI /= 2;  \
RV_CYBMMHWQOVIS = 460; \
RV_XGBSZTSUAXCV -= 66; RV_XGBSZTSUAXCV *= 5; RV_XGBSZTSUAXCV += 3;  \
RV_VQVXYNIGLORS += 156; RV_VQVXYNIGLORS /= 2;  \
RV_CFRelease_02410115(RV_str1); \
}
#endif
#endif
    
    
    // CodeBlock CheckReceiptHash
#ifdef DEBUG
    inline static void RV_CheckReceiptHash0A4(RV_CheckingContext *RV_ctx) {
        CFDataRef RV_data1, RV_data2, RV_data3;
        CFMutableDataRef RV_data4;
        unsigned char RV_digest[600];
        volatile int RV_counter = 6; RV_counter -= 2; RV_counter *= 5;
        RV_ReceiptAttributeType RV_value;
        CFNumberRef RV_key;
        char *RV_str1;
        __RV_RECEIPT_LOG("RV - Checking receipt hash");
        RV_value = RV_StoreReceiptAttributeTypeOpaqueValue;
        RV_key = RV_CFNumberCreate_00780159(NULL, kCFNumberIntType, &RV_value);
        RV_data1 = (CFDataRef) RV_KTRJFJGPPLRX_01B600B6((CFDictionaryRef) RV_ctx->receipt_dict, RV_key);
        RV_CFRelease_00780115(RV_key);
        RV_value = RV_StoreReceiptAttributeTypeBundleIdData;
        RV_key = RV_CFNumberCreate_00780159(NULL, kCFNumberIntType, &RV_value);
        RV_data2 = (CFDataRef) RV_KTRJFJGPPLRX_01B600B6((CFDictionaryRef) RV_ctx->receipt_dict, RV_key);
        RV_CFRelease_00780115(RV_key);
        RV_value = RV_StoreReceiptAttributeTypeHash;
        RV_key = RV_CFNumberCreate_00780159(NULL, kCFNumberIntType, &RV_value);
        RV_data3 = (CFDataRef) RV_KTRJFJGPPLRX_01B600B6((CFDictionaryRef) RV_ctx->receipt_dict, RV_key);
        RV_CFRelease_00780115(RV_key);
        RV_data4 = RV_CFDataCreateMutable_0078008D(NULL, RV_XGBSZTSUAXCV_00780247((CFDataRef) RV_ctx->guid_data) + RV_XGBSZTSUAXCV_00780247(RV_data1) + RV_XGBSZTSUAXCV_00780247(RV_data2));
        RV_WMMHMOOBUQFF_02410082(RV_data4, RV_CFDataGetBytePtr_0241021C((CFDataRef) RV_ctx->guid_data), RV_XGBSZTSUAXCV_00780247((CFDataRef) RV_ctx->guid_data));
        RV_WMMHMOOBUQFF_02410082(RV_data4, RV_CFDataGetBytePtr_0241021C(RV_data1), RV_XGBSZTSUAXCV_00780247(RV_data1));
        RV_WMMHMOOBUQFF_02410082(RV_data4, RV_CFDataGetBytePtr_0241021C(RV_data2), RV_XGBSZTSUAXCV_00780247(RV_data2));
        RV_SHA1_02200245(RV_CFDataGetBytePtr_0241021C(RV_data4), (CC_LONG) RV_XGBSZTSUAXCV_00780247(RV_data4), RV_digest);
        RV_OpenSSL_add_all_digests_00170119();
        EVP_MD_CTX RV_hashctx2;
        RV_EVP_MD_CTX_init_00CD0031(&RV_hashctx2);
        char RV_str1_[600];
        RV_ObfuscationFunction003((RV_Strings[83]), RV_str1_, 12, 16);
        RV_str1 = RV_str1_;
        const EVP_MD *RV_digester = EVP_get_digestbyname(RV_str1);
        RV_EVP_DigestInit_00170236(&RV_hashctx2, RV_digester);
        RV_EVP_DigestUpdate_00CD0009(&RV_hashctx2, (const void *) RV_CFDataGetBytePtr_0241021C((CFDataRef) RV_ctx->guid_data), (size_t) RV_XGBSZTSUAXCV_00780247((CFDataRef) RV_ctx->guid_data));
        RV_EVP_DigestUpdate_00CD0009(&RV_hashctx2, (const void *) RV_CFDataGetBytePtr_0241021C(RV_data1), (size_t) RV_XGBSZTSUAXCV_00780247(RV_data1));
        RV_EVP_DigestUpdate_00CD0009(&RV_hashctx2, (const void *) RV_CFDataGetBytePtr_0241021C(RV_data2), (size_t) RV_XGBSZTSUAXCV_00780247(RV_data2));
        RV_EVP_DigestFinal_0017017E(&RV_hashctx2, RV_digest, NULL);
        const unsigned char *RV_ptr1 = RV_digest;
        const unsigned char *RV_ptr2 = RV_CFDataGetBytePtr_0241021C(RV_data3);
        while(--RV_counter >= 0) {
            if ((*RV_ptr1++) != (*RV_ptr2++)) {
                __RV_RECEIPT_LOG("RV - Receipt hash is invalid");
                RV_CFRelease_00780115(RV_data4);
                __RV_RECEIPT_LOG("RV - Doing nothing...");
                RV_longjmp_014700BE(RV_JumpBuf, 1);
                // Dead code
                RV_CFRelease_00780115(RV_data1);
                RV_CFRelease_00780115(RV_data2);
                RV_CFRelease_00780115(RV_data4);
                goto RV_CheckReceiptHash0A4_RV_bail;
            }
        }
        // Global variables computation
        // From 130 to 384
        RV_WMMHMOOBUQFF -= 34; RV_WMMHMOOBUQFF *= 4;
        // Set to 57
        RV_KTRJFJGPPLRX = 57;
        // From 68 to 151
        RV_QUIXUTRFSICK -= 31; RV_QUIXUTRFSICK *= 4; RV_QUIXUTRFSICK += 3;
        // From 460 to 449
        RV_CYBMMHWQOVIS += 438; RV_CYBMMHWQOVIS /= 2;
        // Set to 270
        RV_VQVXYNIGLORS = 270;
    RV_CheckReceiptHash0A4_RV_bail:
        RV_CFRelease_00780115(RV_data4);
    }
#else
#define RV_CheckReceiptHash0A4(RV_ctx) { \
CFDataRef RV_data1, RV_data2, RV_data3; \
CFMutableDataRef RV_data4; \
unsigned char RV_digest[600]; \
volatile int RV_counter = 6; RV_counter -= 2; RV_counter *= 5;  \
RV_ReceiptAttributeType RV_value; \
CFNumberRef RV_key; \
char *RV_str1; \
__RV_RECEIPT_LOG("RV - Checking receipt hash"); \
RV_value = RV_StoreReceiptAttributeTypeOpaqueValue; \
RV_key = RV_CFNumberCreate_00780159(NULL, kCFNumberIntType, &RV_value); \
RV_data1 = (CFDataRef) RV_KTRJFJGPPLRX_01B600B6((CFDictionaryRef) RV_ctx->receipt_dict, RV_key); \
RV_CFRelease_00780115(RV_key); \
RV_value = RV_StoreReceiptAttributeTypeBundleIdData; \
RV_key = RV_CFNumberCreate_00780159(NULL, kCFNumberIntType, &RV_value); \
RV_data2 = (CFDataRef) RV_KTRJFJGPPLRX_01B600B6((CFDictionaryRef) RV_ctx->receipt_dict, RV_key); \
RV_CFRelease_00780115(RV_key); \
RV_value = RV_StoreReceiptAttributeTypeHash; \
RV_key = RV_CFNumberCreate_00780159(NULL, kCFNumberIntType, &RV_value); \
RV_data3 = (CFDataRef) RV_KTRJFJGPPLRX_01B600B6((CFDictionaryRef) RV_ctx->receipt_dict, RV_key); \
RV_CFRelease_00780115(RV_key); \
RV_data4 = RV_CFDataCreateMutable_0078008D(NULL, RV_XGBSZTSUAXCV_00780247((CFDataRef) RV_ctx->guid_data) + RV_XGBSZTSUAXCV_00780247(RV_data1) + RV_XGBSZTSUAXCV_00780247(RV_data2)); \
RV_WMMHMOOBUQFF_02410082(RV_data4, RV_CFDataGetBytePtr_0241021C((CFDataRef) RV_ctx->guid_data), RV_XGBSZTSUAXCV_00780247((CFDataRef) RV_ctx->guid_data)); \
RV_WMMHMOOBUQFF_02410082(RV_data4, RV_CFDataGetBytePtr_0241021C(RV_data1), RV_XGBSZTSUAXCV_00780247(RV_data1)); \
RV_WMMHMOOBUQFF_02410082(RV_data4, RV_CFDataGetBytePtr_0241021C(RV_data2), RV_XGBSZTSUAXCV_00780247(RV_data2)); \
RV_SHA1_02200245(RV_CFDataGetBytePtr_0241021C(RV_data4), (CC_LONG) RV_XGBSZTSUAXCV_00780247(RV_data4), RV_digest); \
RV_OpenSSL_add_all_digests_00170119(); \
EVP_MD_CTX RV_hashctx2; \
RV_EVP_MD_CTX_init_00CD0031(&RV_hashctx2); \
char RV_str1_[600]; \
RV_ObfuscationFunction003((RV_Strings[83]), RV_str1_, 12, 16); \
RV_str1 = RV_str1_; \
const EVP_MD *RV_digester = EVP_get_digestbyname(RV_str1); \
RV_EVP_DigestInit_00170236(&RV_hashctx2, RV_digester); \
RV_EVP_DigestUpdate_00CD0009(&RV_hashctx2, (const void *) RV_CFDataGetBytePtr_0241021C((CFDataRef) RV_ctx->guid_data), (size_t) RV_XGBSZTSUAXCV_00780247((CFDataRef) RV_ctx->guid_data)); \
RV_EVP_DigestUpdate_00CD0009(&RV_hashctx2, (const void *) RV_CFDataGetBytePtr_0241021C(RV_data1), (size_t) RV_XGBSZTSUAXCV_00780247(RV_data1)); \
RV_EVP_DigestUpdate_00CD0009(&RV_hashctx2, (const void *) RV_CFDataGetBytePtr_0241021C(RV_data2), (size_t) RV_XGBSZTSUAXCV_00780247(RV_data2)); \
RV_EVP_DigestFinal_0017017E(&RV_hashctx2, RV_digest, NULL); \
const unsigned char *RV_ptr1 = RV_digest; \
const unsigned char *RV_ptr2 = RV_CFDataGetBytePtr_0241021C(RV_data3); \
while(--RV_counter >= 0) { \
if ((*RV_ptr1++) != (*RV_ptr2++)) { \
__RV_RECEIPT_LOG("RV - Receipt hash is invalid"); \
RV_CFRelease_00780115(RV_data4); \
__RV_RECEIPT_LOG("RV - Doing nothing..."); \
RV_longjmp_014700BE(RV_JumpBuf, 1); \
RV_CFRelease_00780115(RV_data1); \
RV_CFRelease_00780115(RV_data2); \
RV_CFRelease_00780115(RV_data4); \
goto RV_CheckReceiptHash0A4_RV_bail; \
} \
} \
RV_WMMHMOOBUQFF -= 34; RV_WMMHMOOBUQFF *= 4;  \
RV_KTRJFJGPPLRX = 57; \
RV_QUIXUTRFSICK -= 31; RV_QUIXUTRFSICK *= 4; RV_QUIXUTRFSICK += 3;  \
RV_CYBMMHWQOVIS += 438; RV_CYBMMHWQOVIS /= 2;  \
RV_VQVXYNIGLORS = 270; \
RV_CheckReceiptHash0A4_RV_bail: \
RV_CFRelease_00780115(RV_data4); \
}
#endif
    
    
    // CodeBlock CheckReceiptExpirationDate
#ifdef DEBUG
    inline static void RV_CheckReceiptExpirationDate0A7(RV_CheckingContext *RV_ctx) {
        __RV_RECEIPT_LOG("RV - Checking receipt expiration date");
        RV_ReceiptAttributeType RV_value = RV_StoreReceiptAttributeTypeExpirationDate;
        CFDateRef RV_date1 = RV_KTRJFJGPPLRX_01B60039(NULL, RV_VQVXYNIGLORS_0078010E());
        CFNumberRef RV_key = RV_QUIXUTRFSICK_01B60097(NULL, kCFNumberIntType, &RV_value);
        CFDateRef RV_date2 = (CFDateRef) RV_CYBMMHWQOVIS_007801C1((CFDictionaryRef) RV_ctx->receipt_dict, RV_key);
        RV_CFRelease_00780213(RV_key);
        if (RV_date2 && RV_WMMHMOOBUQFF_02410180(RV_date1, RV_date2, 0) == kCFCompareGreaterThan) {
            __RV_RECEIPT_LOG("RV - Receipt has expired");
            __RV_RECEIPT_LOG("RV - Doing nothing...");
            RV_longjmp_019700BE(RV_JumpBuf, 1);
            // Dead code
            RV_CFRelease_00780213(RV_key);
            RV_CFRelease_00780213(RV_date1);
            RV_CFRelease_00780213(RV_key);
            RV_CFRelease_00780213(RV_date1);
        }
        // Global variables computation
        // From 384 to 357
        RV_WMMHMOOBUQFF += 330; RV_WMMHMOOBUQFF /= 2;
        // From 57 to 61
        RV_KTRJFJGPPLRX -= 37; RV_KTRJFJGPPLRX *= 3; RV_KTRJFJGPPLRX += 1;
        // From 467 to 238
        RV_KOAYLIMVVISI += 247; RV_KOAYLIMVVISI /= 3;
        // From 583 to 151
        RV_XGBSZTSUAXCV += 172; RV_XGBSZTSUAXCV /= 5;
        // From 270 to 538
        RV_VQVXYNIGLORS -= 91; RV_VQVXYNIGLORS *= 3; RV_VQVXYNIGLORS += 1;
        RV_CFRelease_00780213(RV_date1);
    }
#else
#define RV_CheckReceiptExpirationDate0A7(RV_ctx) { \
__RV_RECEIPT_LOG("RV - Checking receipt expiration date"); \
RV_ReceiptAttributeType RV_value = RV_StoreReceiptAttributeTypeExpirationDate; \
CFDateRef RV_date1 = RV_KTRJFJGPPLRX_01B60039(NULL, RV_VQVXYNIGLORS_0078010E()); \
CFNumberRef RV_key = RV_QUIXUTRFSICK_01B60097(NULL, kCFNumberIntType, &RV_value); \
CFDateRef RV_date2 = (CFDateRef) RV_CYBMMHWQOVIS_007801C1((CFDictionaryRef) RV_ctx->receipt_dict, RV_key); \
RV_CFRelease_00780213(RV_key); \
if (RV_date2 && RV_WMMHMOOBUQFF_02410180(RV_date1, RV_date2, 0) == kCFCompareGreaterThan) { \
__RV_RECEIPT_LOG("RV - Receipt has expired"); \
__RV_RECEIPT_LOG("RV - Doing nothing..."); \
RV_longjmp_019700BE(RV_JumpBuf, 1); \
RV_CFRelease_00780213(RV_key); \
RV_CFRelease_00780213(RV_date1); \
RV_CFRelease_00780213(RV_key); \
RV_CFRelease_00780213(RV_date1); \
} \
RV_WMMHMOOBUQFF += 330; RV_WMMHMOOBUQFF /= 2;  \
RV_KTRJFJGPPLRX -= 37; RV_KTRJFJGPPLRX *= 3; RV_KTRJFJGPPLRX += 1;  \
RV_KOAYLIMVVISI += 247; RV_KOAYLIMVVISI /= 3;  \
RV_XGBSZTSUAXCV += 172; RV_XGBSZTSUAXCV /= 5;  \
RV_VQVXYNIGLORS -= 91; RV_VQVXYNIGLORS *= 3; RV_VQVXYNIGLORS += 1;  \
RV_CFRelease_00780213(RV_date1); \
}
#endif
    
    
    // CodeBlock InAppChecker
#ifdef DEBUG
    inline static void RV_InAppChecker0A9(RV_CheckingContext *RV_ctx) {
        CFIndex RV_index1, RV_index2;
        CFNumberRef RV_key1, RV_key2;
        RV_ReceiptAttributeType RV_value = RV_StoreReceiptAttributeTypeInAppPurchase;
        __RV_RECEIPT_LOG("RV - Checking InApp purchases");
        RV_key1 = RV_XGBSZTSUAXCV_00780097(NULL, kCFNumberIntType, &RV_value);
        // Extract InApp Purchase
        CFArrayRef RV_idents = (CFArrayRef) RV_ctx->inapp_identifiers;
        CFArrayRef RV_purchases = (CFArrayRef) RV_KTRJFJGPPLRX_0078003D((CFDictionaryRef) RV_ctx->receipt_dict, RV_key1);
        if (RV_purchases) {
            // If purchases were found, iterate over the identifiers to test them
            for(RV_index1 = 0; RV_index1 < RV_KOAYLIMVVISI_007800EE(RV_idents); RV_index1++) {
                CFStringRef RV_ident = (CFStringRef) RV_WMMHMOOBUQFF_02410165(RV_idents, RV_index1);
                Boolean RV_found = false;
                // Iterate over the purchases
                for(RV_index2 = 0; RV_index2 < RV_KOAYLIMVVISI_007800EE(RV_purchases); RV_index2++) {
                    CFDictionaryRef RV_purchase = (CFDictionaryRef) RV_WMMHMOOBUQFF_02410165(RV_purchases, RV_index2);
                    RV_value = RV_StoreInAppAttributeTypeProductIdentifer;
                    RV_key2 = RV_XGBSZTSUAXCV_00780097(NULL, kCFNumberIntType, &RV_value);
                    CFStringRef RV_product_identifier = (CFStringRef) RV_KTRJFJGPPLRX_0078003D(RV_purchase, RV_key2);
                    RV_CFRelease_01B6006D(RV_key2);
                    // If a purchase match the identifier, invoke the callback with the purchase info
                    if (RV_VQVXYNIGLORS_0078021A(RV_ident, RV_product_identifier, 0) == kCFCompareEqualTo) {
                        RV_found |= true;
                        (__SAFE_CAST(RV_InAppValidateBlock, RV_ctx->inapp_block))(__SAFE_CAST(NSString *, RV_ident), true, __SAFE_CAST(NSDictionary *, RV_purchase));
                    }
                }
                // If no purchase match the identifier, invoke the callback
                if (!RV_found) {
                    (__SAFE_CAST(RV_InAppValidateBlock, RV_ctx->inapp_block))(__SAFE_CAST(NSString *, RV_ident), false, NULL);
                }
            }
        } else {
            // If no purchases were found, iterate over the RV_idents and call the block back
            for(RV_index1 = 0; RV_index1 < RV_KOAYLIMVVISI_007800EE(RV_idents); RV_index1++) {
                CFStringRef RV_ident = (CFStringRef) RV_WMMHMOOBUQFF_02410165(RV_idents, RV_index1);
                (__SAFE_CAST(RV_InAppValidateBlock, RV_ctx->inapp_block))(__SAFE_CAST(NSString *, RV_ident), false, NULL);
            }
        }
        RV_CFRelease_01B6006D(RV_key1);                    
    }
#else
#define RV_InAppChecker0A9(RV_ctx) { \
CFIndex RV_index1, RV_index2; \
CFNumberRef RV_key1, RV_key2; \
RV_ReceiptAttributeType RV_value = RV_StoreReceiptAttributeTypeInAppPurchase; \
__RV_RECEIPT_LOG("RV - Checking InApp purchases"); \
RV_key1 = RV_XGBSZTSUAXCV_00780097(NULL, kCFNumberIntType, &RV_value); \
CFArrayRef RV_idents = (CFArrayRef) RV_ctx->inapp_identifiers; \
CFArrayRef RV_purchases = (CFArrayRef) RV_KTRJFJGPPLRX_0078003D((CFDictionaryRef) RV_ctx->receipt_dict, RV_key1); \
if (RV_purchases) { \
for(RV_index1 = 0; RV_index1 < RV_KOAYLIMVVISI_007800EE(RV_idents); RV_index1++) { \
CFStringRef RV_ident = (CFStringRef) RV_WMMHMOOBUQFF_02410165(RV_idents, RV_index1); \
Boolean RV_found = false; \
for(RV_index2 = 0; RV_index2 < RV_KOAYLIMVVISI_007800EE(RV_purchases); RV_index2++) { \
CFDictionaryRef RV_purchase = (CFDictionaryRef) RV_WMMHMOOBUQFF_02410165(RV_purchases, RV_index2); \
RV_value = RV_StoreInAppAttributeTypeProductIdentifer; \
RV_key2 = RV_XGBSZTSUAXCV_00780097(NULL, kCFNumberIntType, &RV_value); \
CFStringRef RV_product_identifier = (CFStringRef) RV_KTRJFJGPPLRX_0078003D(RV_purchase, RV_key2); \
RV_CFRelease_01B6006D(RV_key2); \
if (RV_VQVXYNIGLORS_0078021A(RV_ident, RV_product_identifier, 0) == kCFCompareEqualTo) { \
RV_found |= true; \
(__SAFE_CAST(RV_InAppValidateBlock, RV_ctx->inapp_block))(__SAFE_CAST(NSString *, RV_ident), true, __SAFE_CAST(NSDictionary *, RV_purchase)); \
} \
} \
if (!RV_found) { \
(__SAFE_CAST(RV_InAppValidateBlock, RV_ctx->inapp_block))(__SAFE_CAST(NSString *, RV_ident), false, NULL); \
} \
} \
} else { \
for(RV_index1 = 0; RV_index1 < RV_KOAYLIMVVISI_007800EE(RV_idents); RV_index1++) { \
CFStringRef RV_ident = (CFStringRef) RV_WMMHMOOBUQFF_02410165(RV_idents, RV_index1); \
(__SAFE_CAST(RV_InAppValidateBlock, RV_ctx->inapp_block))(__SAFE_CAST(NSString *, RV_ident), false, NULL); \
} \
} \
RV_CFRelease_01B6006D(RV_key1);                     \
}
#endif
    
    
    // CodeBlock CleanUp
#ifdef DEBUG
    inline static void RV_CleanUp0AB(RV_CheckingContext *RV_ctx) {
        __RV_RECEIPT_LOG("RV - Cleaning up");
        if (RV_ctx->receipt_data) {
            RV_CFRelease_00780115(RV_ctx->receipt_data);
            RV_ctx->receipt_data = NULL;
        }
        if (RV_ctx->guid_data) {
            RV_CFRelease_00780115(RV_ctx->guid_data);
            RV_ctx->guid_data = NULL;
        }
        if (RV_ctx->receipt_dict) {
            RV_CFRelease_00780115(RV_ctx->receipt_dict);
            RV_ctx->receipt_dict = NULL;
        }
        if (RV_ctx->ca_data) {
            RV_CFRelease_00780115(RV_ctx->ca_data);
            RV_ctx->ca_data = NULL;
        }
    }
#else
#define RV_CleanUp0AB(RV_ctx) { \
__RV_RECEIPT_LOG("RV - Cleaning up"); \
if (RV_ctx->receipt_data) { \
RV_CFRelease_00780115(RV_ctx->receipt_data); \
RV_ctx->receipt_data = NULL; \
} \
if (RV_ctx->guid_data) { \
RV_CFRelease_00780115(RV_ctx->guid_data); \
RV_ctx->guid_data = NULL; \
} \
if (RV_ctx->receipt_dict) { \
RV_CFRelease_00780115(RV_ctx->receipt_dict); \
RV_ctx->receipt_dict = NULL; \
} \
if (RV_ctx->ca_data) { \
RV_CFRelease_00780115(RV_ctx->ca_data); \
RV_ctx->ca_data = NULL; \
} \
}
#endif
    
    
    
    
    // CodeBlock EntryPoint
#ifdef DEBUG
    inline static void RV_CheckInAppPurchases(NSArray *_inapp_identifiers, RV_InAppValidateBlock _inapp_block) {
        _Pragma("clang diagnostic push")
        _Pragma("clang diagnostic ignored \"-Wused-but-marked-unused\"")
        __RV_RECEIPT_LOG("RV - Entry point");
        // Create contexts
        RV_CheckingContext RV_ctx1 = { NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL };
        // The InApp purchase identifiers and the callback block
        RV_ctx1.inapp_identifiers = __SAFE_CAST(CFTypeRef, _inapp_identifiers);
        RV_ctx1.inapp_block = __SAFE_CAST(CFTypeRef, (RV_InAppValidateBlock) _inapp_block);
        if (!RV_setjmp_01470050(RV_JumpBuf)) {
            // Call each step
            RV_GetMainBundle016((&RV_ctx1));
            RV_LoadReceipt03F((&RV_ctx1));
            RV_GetGUID048((&RV_ctx1));
            RV_GetRootCA050((&RV_ctx1));
            RV_CheckBundleIdentifier05B((&RV_ctx1));
            RV_CheckBundleVersion05F((&RV_ctx1));
            RV_GetReceiptInformation062((&RV_ctx1));
            RV_CheckReceiptSignature07D((&RV_ctx1));
            RV_CheckReceiptIdentifier07E((&RV_ctx1));
            RV_CheckReceiptVersion080((&RV_ctx1));
            RV_CheckReceiptHash0A4((&RV_ctx1));
            RV_CheckReceiptExpirationDate0A7((&RV_ctx1));
            RV_InAppChecker0A9((&RV_ctx1));
            RV_CleanUp0AB((&RV_ctx1));
        }
        _Pragma("clang diagnostic pop")
    }
#else
#define RV_CheckInAppPurchases(_inapp_identifiers, _inapp_block) { \
_Pragma("clang diagnostic push") \
_Pragma("clang diagnostic ignored \"-Wused-but-marked-unused\"") \
__RV_RECEIPT_LOG("RV - Entry point"); \
RV_CheckingContext RV_ctx1 = { NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL }; \
RV_ctx1.inapp_identifiers = __SAFE_CAST(CFTypeRef, _inapp_identifiers); \
RV_ctx1.inapp_block = __SAFE_CAST(CFTypeRef, (RV_InAppValidateBlock) _inapp_block); \
if (!RV_setjmp_01470050(RV_JumpBuf)) { \
RV_GetMainBundle016((&RV_ctx1)); \
RV_LoadReceipt03F((&RV_ctx1)); \
RV_GetGUID048((&RV_ctx1)); \
RV_GetRootCA050((&RV_ctx1)); \
RV_CheckBundleIdentifier05B((&RV_ctx1)); \
RV_CheckBundleVersion05F((&RV_ctx1)); \
RV_GetReceiptInformation062((&RV_ctx1)); \
RV_CheckReceiptSignature07D((&RV_ctx1)); \
RV_CheckReceiptIdentifier07E((&RV_ctx1)); \
RV_CheckReceiptVersion080((&RV_ctx1)); \
RV_CheckReceiptHash0A4((&RV_ctx1)); \
RV_CheckReceiptExpirationDate0A7((&RV_ctx1)); \
RV_InAppChecker0A9((&RV_ctx1)); \
RV_CleanUp0AB((&RV_ctx1)); \
} \
_Pragma("clang diagnostic pop") \
}
#endif
    
    
    
    
    // Pop the new diagnostic context
#pragma clang diagnostic pop
    
    // C++ epilogue
#ifdef __cplusplus
}
#endif

